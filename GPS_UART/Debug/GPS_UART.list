
GPS_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a26c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800a450  0800a450  0000b450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a958  0800a958  0000c220  2**0
                  CONTENTS
  4 .ARM          00000008  0800a958  0800a958  0000b958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a960  0800a960  0000c220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a960  0800a960  0000b960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a964  0800a964  0000b964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000220  20000000  0800a968  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000074c  20000220  0800ab88  0000c220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000096c  0800ab88  0000c96c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a74c  00000000  00000000  0000c250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d9  00000000  00000000  0001699c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  00018b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ad  00000000  00000000  00019448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002234b  00000000  00000000  00019af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d333  00000000  00000000  0003be40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c982e  00000000  00000000  00049173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001129a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a60  00000000  00000000  001129e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00116444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000220 	.word	0x20000220
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a434 	.word	0x0800a434

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000224 	.word	0x20000224
 800021c:	0800a434 	.word	0x0800a434

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	0000      	movs	r0, r0
	...

08001038 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8001038:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800103c:	b08c      	sub	sp, #48	@ 0x30
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001044:	4b5b      	ldr	r3, [pc, #364]	@ (80011b4 <decodeGGA+0x17c>)
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 800104e:	e004      	b.n	800105a <decodeGGA+0x22>
 8001050:	4b58      	ldr	r3, [pc, #352]	@ (80011b4 <decodeGGA+0x17c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	4a57      	ldr	r2, [pc, #348]	@ (80011b4 <decodeGGA+0x17c>)
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	4b56      	ldr	r3, [pc, #344]	@ (80011b4 <decodeGGA+0x17c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4413      	add	r3, r2
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b2c      	cmp	r3, #44	@ 0x2c
 8001068:	d1f2      	bne.n	8001050 <decodeGGA+0x18>
	inx++;
 800106a:	4b52      	ldr	r3, [pc, #328]	@ (80011b4 <decodeGGA+0x17c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	3301      	adds	r3, #1
 8001070:	4a50      	ldr	r2, [pc, #320]	@ (80011b4 <decodeGGA+0x17c>)
 8001072:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8001074:	e004      	b.n	8001080 <decodeGGA+0x48>
 8001076:	4b4f      	ldr	r3, [pc, #316]	@ (80011b4 <decodeGGA+0x17c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	3301      	adds	r3, #1
 800107c:	4a4d      	ldr	r2, [pc, #308]	@ (80011b4 <decodeGGA+0x17c>)
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	4b4c      	ldr	r3, [pc, #304]	@ (80011b4 <decodeGGA+0x17c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b2c      	cmp	r3, #44	@ 0x2c
 800108e:	d1f2      	bne.n	8001076 <decodeGGA+0x3e>
	inx++;
 8001090:	4b48      	ldr	r3, [pc, #288]	@ (80011b4 <decodeGGA+0x17c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	4a47      	ldr	r2, [pc, #284]	@ (80011b4 <decodeGGA+0x17c>)
 8001098:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 800109a:	e004      	b.n	80010a6 <decodeGGA+0x6e>
 800109c:	4b45      	ldr	r3, [pc, #276]	@ (80011b4 <decodeGGA+0x17c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	3301      	adds	r3, #1
 80010a2:	4a44      	ldr	r2, [pc, #272]	@ (80011b4 <decodeGGA+0x17c>)
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	4b43      	ldr	r3, [pc, #268]	@ (80011b4 <decodeGGA+0x17c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4413      	add	r3, r2
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b2c      	cmp	r3, #44	@ 0x2c
 80010b4:	d1f2      	bne.n	800109c <decodeGGA+0x64>
	inx++;
 80010b6:	4b3f      	ldr	r3, [pc, #252]	@ (80011b4 <decodeGGA+0x17c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	4a3d      	ldr	r2, [pc, #244]	@ (80011b4 <decodeGGA+0x17c>)
 80010be:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 80010c0:	e004      	b.n	80010cc <decodeGGA+0x94>
 80010c2:	4b3c      	ldr	r3, [pc, #240]	@ (80011b4 <decodeGGA+0x17c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	4a3a      	ldr	r2, [pc, #232]	@ (80011b4 <decodeGGA+0x17c>)
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	4b39      	ldr	r3, [pc, #228]	@ (80011b4 <decodeGGA+0x17c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b2c      	cmp	r3, #44	@ 0x2c
 80010da:	d1f2      	bne.n	80010c2 <decodeGGA+0x8a>
	inx++;
 80010dc:	4b35      	ldr	r3, [pc, #212]	@ (80011b4 <decodeGGA+0x17c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	3301      	adds	r3, #1
 80010e2:	4a34      	ldr	r2, [pc, #208]	@ (80011b4 <decodeGGA+0x17c>)
 80010e4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 80010e6:	e004      	b.n	80010f2 <decodeGGA+0xba>
 80010e8:	4b32      	ldr	r3, [pc, #200]	@ (80011b4 <decodeGGA+0x17c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	4a31      	ldr	r2, [pc, #196]	@ (80011b4 <decodeGGA+0x17c>)
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	4b30      	ldr	r3, [pc, #192]	@ (80011b4 <decodeGGA+0x17c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4413      	add	r3, r2
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b2c      	cmp	r3, #44	@ 0x2c
 8001100:	d1f2      	bne.n	80010e8 <decodeGGA+0xb0>
	inx++;
 8001102:	4b2c      	ldr	r3, [pc, #176]	@ (80011b4 <decodeGGA+0x17c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	3301      	adds	r3, #1
 8001108:	4a2a      	ldr	r2, [pc, #168]	@ (80011b4 <decodeGGA+0x17c>)
 800110a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 800110c:	e004      	b.n	8001118 <decodeGGA+0xe0>
 800110e:	4b29      	ldr	r3, [pc, #164]	@ (80011b4 <decodeGGA+0x17c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	3301      	adds	r3, #1
 8001114:	4a27      	ldr	r2, [pc, #156]	@ (80011b4 <decodeGGA+0x17c>)
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	4b26      	ldr	r3, [pc, #152]	@ (80011b4 <decodeGGA+0x17c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b2c      	cmp	r3, #44	@ 0x2c
 8001126:	d1f2      	bne.n	800110e <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8001128:	4b22      	ldr	r3, [pc, #136]	@ (80011b4 <decodeGGA+0x17c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3301      	adds	r3, #1
 800112e:	4a21      	ldr	r2, [pc, #132]	@ (80011b4 <decodeGGA+0x17c>)
 8001130:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8001132:	4b20      	ldr	r3, [pc, #128]	@ (80011b4 <decodeGGA+0x17c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4413      	add	r3, r2
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b31      	cmp	r3, #49	@ 0x31
 8001140:	d00f      	beq.n	8001162 <decodeGGA+0x12a>
 8001142:	4b1c      	ldr	r3, [pc, #112]	@ (80011b4 <decodeGGA+0x17c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4413      	add	r3, r2
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b32      	cmp	r3, #50	@ 0x32
 8001150:	d007      	beq.n	8001162 <decodeGGA+0x12a>
 8001152:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <decodeGGA+0x17c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4413      	add	r3, r2
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b36      	cmp	r3, #54	@ 0x36
 8001160:	d106      	bne.n	8001170 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	2201      	movs	r2, #1
 8001166:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8001168:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <decodeGGA+0x17c>)
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 800116e:	e009      	b.n	8001184 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8001176:	2301      	movs	r3, #1
 8001178:	e2fd      	b.n	8001776 <decodeGGA+0x73e>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 800117a:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <decodeGGA+0x17c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	4a0c      	ldr	r2, [pc, #48]	@ (80011b4 <decodeGGA+0x17c>)
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <decodeGGA+0x17c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b2c      	cmp	r3, #44	@ 0x2c
 8001192:	d1f2      	bne.n	800117a <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8001194:	4b07      	ldr	r3, [pc, #28]	@ (80011b4 <decodeGGA+0x17c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	4a06      	ldr	r2, [pc, #24]	@ (80011b4 <decodeGGA+0x17c>)
 800119c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	220c      	movs	r2, #12
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f004 ff1a 	bl	8005fe0 <memset>
	i=0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 80011b0:	e016      	b.n	80011e0 <decodeGGA+0x1a8>
 80011b2:	bf00      	nop
 80011b4:	2000023c 	.word	0x2000023c
	{
		buffer[i] = GGAbuffer[inx];
 80011b8:	4bab      	ldr	r3, [pc, #684]	@ (8001468 <decodeGGA+0x430>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	7819      	ldrb	r1, [r3, #0]
 80011c4:	f107 020c 	add.w	r2, r7, #12
 80011c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ca:	4413      	add	r3, r2
 80011cc:	460a      	mov	r2, r1
 80011ce:	701a      	strb	r2, [r3, #0]
		i++;
 80011d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011d2:	3301      	adds	r3, #1
 80011d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 80011d6:	4ba4      	ldr	r3, [pc, #656]	@ (8001468 <decodeGGA+0x430>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	3301      	adds	r3, #1
 80011dc:	4aa2      	ldr	r2, [pc, #648]	@ (8001468 <decodeGGA+0x430>)
 80011de:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 80011e0:	4ba1      	ldr	r3, [pc, #644]	@ (8001468 <decodeGGA+0x430>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b2c      	cmp	r3, #44	@ 0x2c
 80011ee:	d1e3      	bne.n	80011b8 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	4618      	mov	r0, r3
 80011f6:	f003 fdd3 	bl	8004da0 <atoi>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4a9b      	ldr	r2, [pc, #620]	@ (800146c <decodeGGA+0x434>)
 80011fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001202:	1312      	asrs	r2, r2, #12
 8001204:	17db      	asrs	r3, r3, #31
 8001206:	1ad2      	subs	r2, r2, r3
 8001208:	4b99      	ldr	r3, [pc, #612]	@ (8001470 <decodeGGA+0x438>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4999      	ldr	r1, [pc, #612]	@ (8001474 <decodeGGA+0x43c>)
 800120e:	fb81 0103 	smull	r0, r1, r1, r3
 8001212:	1149      	asrs	r1, r1, #5
 8001214:	17db      	asrs	r3, r3, #31
 8001216:	1acb      	subs	r3, r1, r3
 8001218:	4413      	add	r3, r2
 800121a:	4a97      	ldr	r2, [pc, #604]	@ (8001478 <decodeGGA+0x440>)
 800121c:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	4618      	mov	r0, r3
 8001224:	f003 fdbc 	bl	8004da0 <atoi>
 8001228:	4603      	mov	r3, r0
 800122a:	4a92      	ldr	r2, [pc, #584]	@ (8001474 <decodeGGA+0x43c>)
 800122c:	fb82 1203 	smull	r1, r2, r2, r3
 8001230:	1152      	asrs	r2, r2, #5
 8001232:	17db      	asrs	r3, r3, #31
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	4a8f      	ldr	r2, [pc, #572]	@ (8001474 <decodeGGA+0x43c>)
 8001238:	fb82 1203 	smull	r1, r2, r2, r3
 800123c:	1151      	asrs	r1, r2, #5
 800123e:	17da      	asrs	r2, r3, #31
 8001240:	1a8a      	subs	r2, r1, r2
 8001242:	2164      	movs	r1, #100	@ 0x64
 8001244:	fb01 f202 	mul.w	r2, r1, r2
 8001248:	1a9a      	subs	r2, r3, r2
 800124a:	4b89      	ldr	r3, [pc, #548]	@ (8001470 <decodeGGA+0x438>)
 800124c:	6819      	ldr	r1, [r3, #0]
 800124e:	4b89      	ldr	r3, [pc, #548]	@ (8001474 <decodeGGA+0x43c>)
 8001250:	fb83 0301 	smull	r0, r3, r3, r1
 8001254:	1158      	asrs	r0, r3, #5
 8001256:	17cb      	asrs	r3, r1, #31
 8001258:	1ac3      	subs	r3, r0, r3
 800125a:	2064      	movs	r0, #100	@ 0x64
 800125c:	fb00 f303 	mul.w	r3, r0, r3
 8001260:	1acb      	subs	r3, r1, r3
 8001262:	4413      	add	r3, r2
 8001264:	4a85      	ldr	r2, [pc, #532]	@ (800147c <decodeGGA+0x444>)
 8001266:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8001268:	4b84      	ldr	r3, [pc, #528]	@ (800147c <decodeGGA+0x444>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b3b      	cmp	r3, #59	@ 0x3b
 800126e:	dd09      	ble.n	8001284 <decodeGGA+0x24c>
	{
		min = min-60;
 8001270:	4b82      	ldr	r3, [pc, #520]	@ (800147c <decodeGGA+0x444>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3b3c      	subs	r3, #60	@ 0x3c
 8001276:	4a81      	ldr	r2, [pc, #516]	@ (800147c <decodeGGA+0x444>)
 8001278:	6013      	str	r3, [r2, #0]
		hr++;
 800127a:	4b7f      	ldr	r3, [pc, #508]	@ (8001478 <decodeGGA+0x440>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	4a7d      	ldr	r2, [pc, #500]	@ (8001478 <decodeGGA+0x440>)
 8001282:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8001284:	4b7c      	ldr	r3, [pc, #496]	@ (8001478 <decodeGGA+0x440>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	da09      	bge.n	80012a0 <decodeGGA+0x268>
	{
		hr=24+hr;
 800128c:	4b7a      	ldr	r3, [pc, #488]	@ (8001478 <decodeGGA+0x440>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	3318      	adds	r3, #24
 8001292:	4a79      	ldr	r2, [pc, #484]	@ (8001478 <decodeGGA+0x440>)
 8001294:	6013      	str	r3, [r2, #0]
		daychange--;
 8001296:	4b7a      	ldr	r3, [pc, #488]	@ (8001480 <decodeGGA+0x448>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3b01      	subs	r3, #1
 800129c:	4a78      	ldr	r2, [pc, #480]	@ (8001480 <decodeGGA+0x448>)
 800129e:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 80012a0:	4b75      	ldr	r3, [pc, #468]	@ (8001478 <decodeGGA+0x440>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b17      	cmp	r3, #23
 80012a6:	dd09      	ble.n	80012bc <decodeGGA+0x284>
	{
		hr=hr-24;
 80012a8:	4b73      	ldr	r3, [pc, #460]	@ (8001478 <decodeGGA+0x440>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3b18      	subs	r3, #24
 80012ae:	4a72      	ldr	r2, [pc, #456]	@ (8001478 <decodeGGA+0x440>)
 80012b0:	6013      	str	r3, [r2, #0]
		daychange++;
 80012b2:	4b73      	ldr	r3, [pc, #460]	@ (8001480 <decodeGGA+0x448>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	3301      	adds	r3, #1
 80012b8:	4a71      	ldr	r2, [pc, #452]	@ (8001480 <decodeGGA+0x448>)
 80012ba:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 80012bc:	4b6e      	ldr	r3, [pc, #440]	@ (8001478 <decodeGGA+0x440>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 80012c4:	4b6d      	ldr	r3, [pc, #436]	@ (800147c <decodeGGA+0x444>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	4618      	mov	r0, r3
 80012d2:	f003 fd65 	bl	8004da0 <atoi>
 80012d6:	4602      	mov	r2, r0
 80012d8:	4b66      	ldr	r3, [pc, #408]	@ (8001474 <decodeGGA+0x43c>)
 80012da:	fb83 1302 	smull	r1, r3, r3, r2
 80012de:	1159      	asrs	r1, r3, #5
 80012e0:	17d3      	asrs	r3, r2, #31
 80012e2:	1acb      	subs	r3, r1, r3
 80012e4:	2164      	movs	r1, #100	@ 0x64
 80012e6:	fb01 f303 	mul.w	r3, r1, r3
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 80012f0:	4b5d      	ldr	r3, [pc, #372]	@ (8001468 <decodeGGA+0x430>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	4a5c      	ldr	r2, [pc, #368]	@ (8001468 <decodeGGA+0x430>)
 80012f8:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	220c      	movs	r2, #12
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f004 fe6c 	bl	8005fe0 <memset>
	i=0;
 8001308:	2300      	movs	r3, #0
 800130a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 800130c:	e013      	b.n	8001336 <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 800130e:	4b56      	ldr	r3, [pc, #344]	@ (8001468 <decodeGGA+0x430>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4413      	add	r3, r2
 8001318:	7819      	ldrb	r1, [r3, #0]
 800131a:	f107 020c 	add.w	r2, r7, #12
 800131e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001320:	4413      	add	r3, r2
 8001322:	460a      	mov	r2, r1
 8001324:	701a      	strb	r2, [r3, #0]
		i++;
 8001326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001328:	3301      	adds	r3, #1
 800132a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 800132c:	4b4e      	ldr	r3, [pc, #312]	@ (8001468 <decodeGGA+0x430>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	4a4d      	ldr	r2, [pc, #308]	@ (8001468 <decodeGGA+0x430>)
 8001334:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001336:	4b4c      	ldr	r3, [pc, #304]	@ (8001468 <decodeGGA+0x430>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4413      	add	r3, r2
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b2c      	cmp	r3, #44	@ 0x2c
 8001344:	d1e3      	bne.n	800130e <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8001346:	f107 030c 	add.w	r3, r7, #12
 800134a:	4618      	mov	r0, r3
 800134c:	f7fe ffb8 	bl	80002c0 <strlen>
 8001350:	4603      	mov	r3, r0
 8001352:	2b05      	cmp	r3, #5
 8001354:	d801      	bhi.n	800135a <decodeGGA+0x322>
 8001356:	2302      	movs	r3, #2
 8001358:	e20d      	b.n	8001776 <decodeGGA+0x73e>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	4618      	mov	r0, r3
 8001360:	f003 fd1e 	bl	8004da0 <atoi>
 8001364:	4603      	mov	r3, r0
 8001366:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int j = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 800136c:	e002      	b.n	8001374 <decodeGGA+0x33c>
 800136e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001370:	3301      	adds	r3, #1
 8001372:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001374:	f107 020c 	add.w	r2, r7, #12
 8001378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800137a:	4413      	add	r3, r2
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001380:	d1f5      	bne.n	800136e <decodeGGA+0x336>
	j++;
 8001382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001384:	3301      	adds	r3, #1
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4618      	mov	r0, r3
 800138e:	f7fe ff97 	bl	80002c0 <strlen>
 8001392:	4602      	mov	r2, r0
 8001394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 800139a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800139c:	f107 020c 	add.w	r2, r7, #12
 80013a0:	4413      	add	r3, r2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f003 fcfc 	bl	8004da0 <atoi>
 80013a8:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 80013aa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f8e0 	bl	8000574 <__aeabi_i2d>
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	4b32      	ldr	r3, [pc, #200]	@ (8001484 <decodeGGA+0x44c>)
 80013ba:	f7ff fa6f 	bl	800089c <__aeabi_ddiv>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4690      	mov	r8, r2
 80013c4:	4699      	mov	r9, r3
 80013c6:	69f8      	ldr	r0, [r7, #28]
 80013c8:	f7ff f8d4 	bl	8000574 <__aeabi_i2d>
 80013cc:	4604      	mov	r4, r0
 80013ce:	460d      	mov	r5, r1
 80013d0:	6a3b      	ldr	r3, [r7, #32]
 80013d2:	3302      	adds	r3, #2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f8cd 	bl	8000574 <__aeabi_i2d>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	ec43 2b11 	vmov	d1, r2, r3
 80013e2:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8001460 <decodeGGA+0x428>
 80013e6:	f008 f8c5 	bl	8009574 <pow>
 80013ea:	ec53 2b10 	vmov	r2, r3, d0
 80013ee:	4620      	mov	r0, r4
 80013f0:	4629      	mov	r1, r5
 80013f2:	f7ff fa53 	bl	800089c <__aeabi_ddiv>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4640      	mov	r0, r8
 80013fc:	4649      	mov	r1, r9
 80013fe:	f7fe ff6d 	bl	80002dc <__adddf3>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f7ff fc15 	bl	8000c38 <__aeabi_d2f>
 800140e:	4603      	mov	r3, r0
 8001410:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	601a      	str	r2, [r3, #0]
	inx++;  
 8001418:	4b13      	ldr	r3, [pc, #76]	@ (8001468 <decodeGGA+0x430>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	4a12      	ldr	r2, [pc, #72]	@ (8001468 <decodeGGA+0x430>)
 8001420:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8001422:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <decodeGGA+0x430>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4413      	add	r3, r2
 800142c:	781a      	ldrb	r2, [r3, #0]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8001432:	4b0d      	ldr	r3, [pc, #52]	@ (8001468 <decodeGGA+0x430>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	3301      	adds	r3, #1
 8001438:	4a0b      	ldr	r2, [pc, #44]	@ (8001468 <decodeGGA+0x430>)
 800143a:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 800143c:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <decodeGGA+0x430>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3301      	adds	r3, #1
 8001442:	4a09      	ldr	r2, [pc, #36]	@ (8001468 <decodeGGA+0x430>)
 8001444:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	220c      	movs	r2, #12
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f004 fdc6 	bl	8005fe0 <memset>
	i=0;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001458:	e02a      	b.n	80014b0 <decodeGGA+0x478>
 800145a:	bf00      	nop
 800145c:	f3af 8000 	nop.w
 8001460:	00000000 	.word	0x00000000
 8001464:	40240000 	.word	0x40240000
 8001468:	2000023c 	.word	0x2000023c
 800146c:	68db8bad 	.word	0x68db8bad
 8001470:	20000000 	.word	0x20000000
 8001474:	51eb851f 	.word	0x51eb851f
 8001478:	20000240 	.word	0x20000240
 800147c:	20000244 	.word	0x20000244
 8001480:	20000254 	.word	0x20000254
 8001484:	40590000 	.word	0x40590000
	{
		buffer[i] = GGAbuffer[inx];
 8001488:	4b8b      	ldr	r3, [pc, #556]	@ (80016b8 <decodeGGA+0x680>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	7819      	ldrb	r1, [r3, #0]
 8001494:	f107 020c 	add.w	r2, r7, #12
 8001498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800149a:	4413      	add	r3, r2
 800149c:	460a      	mov	r2, r1
 800149e:	701a      	strb	r2, [r3, #0]
		i++;
 80014a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014a2:	3301      	adds	r3, #1
 80014a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 80014a6:	4b84      	ldr	r3, [pc, #528]	@ (80016b8 <decodeGGA+0x680>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	4a82      	ldr	r2, [pc, #520]	@ (80016b8 <decodeGGA+0x680>)
 80014ae:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 80014b0:	4b81      	ldr	r3, [pc, #516]	@ (80016b8 <decodeGGA+0x680>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b2c      	cmp	r3, #44	@ 0x2c
 80014be:	d1e3      	bne.n	8001488 <decodeGGA+0x450>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	4618      	mov	r0, r3
 80014c6:	f003 fc6b 	bl	8004da0 <atoi>
 80014ca:	4603      	mov	r3, r0
 80014cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
	j = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 80014d2:	e002      	b.n	80014da <decodeGGA+0x4a2>
 80014d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014d6:	3301      	adds	r3, #1
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014da:	f107 020c 	add.w	r2, r7, #12
 80014de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014e0:	4413      	add	r3, r2
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80014e6:	d1f5      	bne.n	80014d4 <decodeGGA+0x49c>
	j++;
 80014e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ea:	3301      	adds	r3, #1
 80014ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7fe fee4 	bl	80002c0 <strlen>
 80014f8:	4602      	mov	r2, r0
 80014fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001502:	f107 020c 	add.w	r2, r7, #12
 8001506:	4413      	add	r3, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f003 fc49 	bl	8004da0 <atoi>
 800150e:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001510:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f82d 	bl	8000574 <__aeabi_i2d>
 800151a:	f04f 0200 	mov.w	r2, #0
 800151e:	4b67      	ldr	r3, [pc, #412]	@ (80016bc <decodeGGA+0x684>)
 8001520:	f7ff f9bc 	bl	800089c <__aeabi_ddiv>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4690      	mov	r8, r2
 800152a:	4699      	mov	r9, r3
 800152c:	69f8      	ldr	r0, [r7, #28]
 800152e:	f7ff f821 	bl	8000574 <__aeabi_i2d>
 8001532:	4604      	mov	r4, r0
 8001534:	460d      	mov	r5, r1
 8001536:	6a3b      	ldr	r3, [r7, #32]
 8001538:	3302      	adds	r3, #2
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff f81a 	bl	8000574 <__aeabi_i2d>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	ec43 2b11 	vmov	d1, r2, r3
 8001548:	ed9f 0b59 	vldr	d0, [pc, #356]	@ 80016b0 <decodeGGA+0x678>
 800154c:	f008 f812 	bl	8009574 <pow>
 8001550:	ec53 2b10 	vmov	r2, r3, d0
 8001554:	4620      	mov	r0, r4
 8001556:	4629      	mov	r1, r5
 8001558:	f7ff f9a0 	bl	800089c <__aeabi_ddiv>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4640      	mov	r0, r8
 8001562:	4649      	mov	r1, r9
 8001564:	f7fe feba 	bl	80002dc <__adddf3>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	f7ff fb62 	bl	8000c38 <__aeabi_d2f>
 8001574:	4603      	mov	r3, r0
 8001576:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	609a      	str	r2, [r3, #8]
	inx++;
 800157e:	4b4e      	ldr	r3, [pc, #312]	@ (80016b8 <decodeGGA+0x680>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	3301      	adds	r3, #1
 8001584:	4a4c      	ldr	r2, [pc, #304]	@ (80016b8 <decodeGGA+0x680>)
 8001586:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8001588:	4b4b      	ldr	r3, [pc, #300]	@ (80016b8 <decodeGGA+0x680>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	781a      	ldrb	r2, [r3, #0]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 8001598:	4b47      	ldr	r3, [pc, #284]	@ (80016b8 <decodeGGA+0x680>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	3301      	adds	r3, #1
 800159e:	4a46      	ldr	r2, [pc, #280]	@ (80016b8 <decodeGGA+0x680>)
 80015a0:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 80015a2:	4b45      	ldr	r3, [pc, #276]	@ (80016b8 <decodeGGA+0x680>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	3301      	adds	r3, #1
 80015a8:	4a43      	ldr	r2, [pc, #268]	@ (80016b8 <decodeGGA+0x680>)
 80015aa:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 80015ac:	4b42      	ldr	r3, [pc, #264]	@ (80016b8 <decodeGGA+0x680>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	3301      	adds	r3, #1
 80015b2:	4a41      	ldr	r2, [pc, #260]	@ (80016b8 <decodeGGA+0x680>)
 80015b4:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 80015b6:	4b40      	ldr	r3, [pc, #256]	@ (80016b8 <decodeGGA+0x680>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	3301      	adds	r3, #1
 80015bc:	4a3e      	ldr	r2, [pc, #248]	@ (80016b8 <decodeGGA+0x680>)
 80015be:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	220c      	movs	r2, #12
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f004 fd09 	bl	8005fe0 <memset>
	i=0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80015d2:	e013      	b.n	80015fc <decodeGGA+0x5c4>
	{
		buffer[i] = GGAbuffer[inx];
 80015d4:	4b38      	ldr	r3, [pc, #224]	@ (80016b8 <decodeGGA+0x680>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	7819      	ldrb	r1, [r3, #0]
 80015e0:	f107 020c 	add.w	r2, r7, #12
 80015e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015e6:	4413      	add	r3, r2
 80015e8:	460a      	mov	r2, r1
 80015ea:	701a      	strb	r2, [r3, #0]
		i++;
 80015ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ee:	3301      	adds	r3, #1
 80015f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 80015f2:	4b31      	ldr	r3, [pc, #196]	@ (80016b8 <decodeGGA+0x680>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	3301      	adds	r3, #1
 80015f8:	4a2f      	ldr	r2, [pc, #188]	@ (80016b8 <decodeGGA+0x680>)
 80015fa:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80015fc:	4b2e      	ldr	r3, [pc, #184]	@ (80016b8 <decodeGGA+0x680>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b2c      	cmp	r3, #44	@ 0x2c
 800160a:	d1e3      	bne.n	80015d4 <decodeGGA+0x59c>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	4618      	mov	r0, r3
 8001612:	f003 fbc5 	bl	8004da0 <atoi>
 8001616:	4602      	mov	r2, r0
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	629a      	str	r2, [r3, #40]	@ 0x28


	/***************** skip HDOP  *********************/
	inx++;
 800161c:	4b26      	ldr	r3, [pc, #152]	@ (80016b8 <decodeGGA+0x680>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	3301      	adds	r3, #1
 8001622:	4a25      	ldr	r2, [pc, #148]	@ (80016b8 <decodeGGA+0x680>)
 8001624:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 8001626:	e004      	b.n	8001632 <decodeGGA+0x5fa>
 8001628:	4b23      	ldr	r3, [pc, #140]	@ (80016b8 <decodeGGA+0x680>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	3301      	adds	r3, #1
 800162e:	4a22      	ldr	r2, [pc, #136]	@ (80016b8 <decodeGGA+0x680>)
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b21      	ldr	r3, [pc, #132]	@ (80016b8 <decodeGGA+0x680>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4413      	add	r3, r2
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001640:	d1f2      	bne.n	8001628 <decodeGGA+0x5f0>


	/*************** Altitude calculation ********************/
	inx++;
 8001642:	4b1d      	ldr	r3, [pc, #116]	@ (80016b8 <decodeGGA+0x680>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	3301      	adds	r3, #1
 8001648:	4a1b      	ldr	r2, [pc, #108]	@ (80016b8 <decodeGGA+0x680>)
 800164a:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	220c      	movs	r2, #12
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f004 fcc3 	bl	8005fe0 <memset>
	i=0;
 800165a:	2300      	movs	r3, #0
 800165c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')
 800165e:	e013      	b.n	8001688 <decodeGGA+0x650>
	{
		buffer[i] = GGAbuffer[inx];
 8001660:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <decodeGGA+0x680>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	7819      	ldrb	r1, [r3, #0]
 800166c:	f107 020c 	add.w	r2, r7, #12
 8001670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001672:	4413      	add	r3, r2
 8001674:	460a      	mov	r2, r1
 8001676:	701a      	strb	r2, [r3, #0]
		i++;
 8001678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800167a:	3301      	adds	r3, #1
 800167c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 800167e:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <decodeGGA+0x680>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	4a0c      	ldr	r2, [pc, #48]	@ (80016b8 <decodeGGA+0x680>)
 8001686:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001688:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <decodeGGA+0x680>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b2c      	cmp	r3, #44	@ 0x2c
 8001696:	d1e3      	bne.n	8001660 <decodeGGA+0x628>
	}
	num = (atoi(buffer));
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	4618      	mov	r0, r3
 800169e:	f003 fb7f 	bl	8004da0 <atoi>
 80016a2:	4603      	mov	r3, r0
 80016a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
	j = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;
 80016aa:	e00c      	b.n	80016c6 <decodeGGA+0x68e>
 80016ac:	f3af 8000 	nop.w
 80016b0:	00000000 	.word	0x00000000
 80016b4:	40240000 	.word	0x40240000
 80016b8:	2000023c 	.word	0x2000023c
 80016bc:	40590000 	.word	0x40590000
 80016c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016c2:	3301      	adds	r3, #1
 80016c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016c6:	f107 020c 	add.w	r2, r7, #12
 80016ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016cc:	4413      	add	r3, r2
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80016d2:	d1f5      	bne.n	80016c0 <decodeGGA+0x688>
	j++;
 80016d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016d6:	3301      	adds	r3, #1
 80016d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	declen = (strlen(buffer))-j;
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe fdee 	bl	80002c0 <strlen>
 80016e4:	4602      	mov	r2, r0
 80016e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 80016ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ee:	f107 020c 	add.w	r2, r7, #12
 80016f2:	4413      	add	r3, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f003 fb53 	bl	8004da0 <atoi>
 80016fa:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 80016fc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe ff37 	bl	8000574 <__aeabi_i2d>
 8001706:	4604      	mov	r4, r0
 8001708:	460d      	mov	r5, r1
 800170a:	69f8      	ldr	r0, [r7, #28]
 800170c:	f7fe ff32 	bl	8000574 <__aeabi_i2d>
 8001710:	4680      	mov	r8, r0
 8001712:	4689      	mov	r9, r1
 8001714:	6a38      	ldr	r0, [r7, #32]
 8001716:	f7fe ff2d 	bl	8000574 <__aeabi_i2d>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	ec43 2b11 	vmov	d1, r2, r3
 8001722:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8001780 <decodeGGA+0x748>
 8001726:	f007 ff25 	bl	8009574 <pow>
 800172a:	ec53 2b10 	vmov	r2, r3, d0
 800172e:	4640      	mov	r0, r8
 8001730:	4649      	mov	r1, r9
 8001732:	f7ff f8b3 	bl	800089c <__aeabi_ddiv>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4620      	mov	r0, r4
 800173c:	4629      	mov	r1, r5
 800173e:	f7fe fdcd 	bl	80002dc <__adddf3>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f7ff fa75 	bl	8000c38 <__aeabi_d2f>
 800174e:	4603      	mov	r3, r0
 8001750:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	621a      	str	r2, [r3, #32]

	inx++;
 8001758:	4b0b      	ldr	r3, [pc, #44]	@ (8001788 <decodeGGA+0x750>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	3301      	adds	r3, #1
 800175e:	4a0a      	ldr	r2, [pc, #40]	@ (8001788 <decodeGGA+0x750>)
 8001760:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8001762:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <decodeGGA+0x750>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4413      	add	r3, r2
 800176c:	781a      	ldrb	r2, [r3, #0]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	return 0;
 8001774:	2300      	movs	r3, #0

}
 8001776:	4618      	mov	r0, r3
 8001778:	3730      	adds	r7, #48	@ 0x30
 800177a:	46bd      	mov	sp, r7
 800177c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001780:	00000000 	.word	0x00000000
 8001784:	40240000 	.word	0x40240000
 8001788:	2000023c 	.word	0x2000023c
 800178c:	00000000 	.word	0x00000000

08001790 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8001790:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001794:	b090      	sub	sp, #64	@ 0x40
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]
	inx = 0;
 800179c:	4b94      	ldr	r3, [pc, #592]	@ (80019f0 <decodeRMC+0x260>)
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 80017a6:	e004      	b.n	80017b2 <decodeRMC+0x22>
 80017a8:	4b91      	ldr	r3, [pc, #580]	@ (80019f0 <decodeRMC+0x260>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	4a90      	ldr	r2, [pc, #576]	@ (80019f0 <decodeRMC+0x260>)
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	4b8f      	ldr	r3, [pc, #572]	@ (80019f0 <decodeRMC+0x260>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4413      	add	r3, r2
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b2c      	cmp	r3, #44	@ 0x2c
 80017c0:	d1f2      	bne.n	80017a8 <decodeRMC+0x18>
	inx++;
 80017c2:	4b8b      	ldr	r3, [pc, #556]	@ (80019f0 <decodeRMC+0x260>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	4a89      	ldr	r2, [pc, #548]	@ (80019f0 <decodeRMC+0x260>)
 80017ca:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 80017cc:	e004      	b.n	80017d8 <decodeRMC+0x48>
 80017ce:	4b88      	ldr	r3, [pc, #544]	@ (80019f0 <decodeRMC+0x260>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	3301      	adds	r3, #1
 80017d4:	4a86      	ldr	r2, [pc, #536]	@ (80019f0 <decodeRMC+0x260>)
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	4b85      	ldr	r3, [pc, #532]	@ (80019f0 <decodeRMC+0x260>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b2c      	cmp	r3, #44	@ 0x2c
 80017e6:	d1f2      	bne.n	80017ce <decodeRMC+0x3e>
	inx++;
 80017e8:	4b81      	ldr	r3, [pc, #516]	@ (80019f0 <decodeRMC+0x260>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	3301      	adds	r3, #1
 80017ee:	4a80      	ldr	r2, [pc, #512]	@ (80019f0 <decodeRMC+0x260>)
 80017f0:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 80017f2:	4b7f      	ldr	r3, [pc, #508]	@ (80019f0 <decodeRMC+0x260>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4413      	add	r3, r2
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b41      	cmp	r3, #65	@ 0x41
 8001800:	d10d      	bne.n	800181e <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	2201      	movs	r2, #1
 8001806:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 8001808:	4b79      	ldr	r3, [pc, #484]	@ (80019f0 <decodeRMC+0x260>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	4a78      	ldr	r2, [pc, #480]	@ (80019f0 <decodeRMC+0x260>)
 8001810:	6013      	str	r3, [r2, #0]
	inx++;
 8001812:	4b77      	ldr	r3, [pc, #476]	@ (80019f0 <decodeRMC+0x260>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	3301      	adds	r3, #1
 8001818:	4a75      	ldr	r2, [pc, #468]	@ (80019f0 <decodeRMC+0x260>)
 800181a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 800181c:	e009      	b.n	8001832 <decodeRMC+0xa2>
		rmc->isValid =0;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	2200      	movs	r2, #0
 8001822:	615a      	str	r2, [r3, #20]
		return 1;
 8001824:	2301      	movs	r3, #1
 8001826:	e1d8      	b.n	8001bda <decodeRMC+0x44a>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 8001828:	4b71      	ldr	r3, [pc, #452]	@ (80019f0 <decodeRMC+0x260>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	3301      	adds	r3, #1
 800182e:	4a70      	ldr	r2, [pc, #448]	@ (80019f0 <decodeRMC+0x260>)
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b6f      	ldr	r3, [pc, #444]	@ (80019f0 <decodeRMC+0x260>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4413      	add	r3, r2
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001840:	d1f2      	bne.n	8001828 <decodeRMC+0x98>
	inx++;
 8001842:	4b6b      	ldr	r3, [pc, #428]	@ (80019f0 <decodeRMC+0x260>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	3301      	adds	r3, #1
 8001848:	4a69      	ldr	r2, [pc, #420]	@ (80019f0 <decodeRMC+0x260>)
 800184a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 800184c:	e004      	b.n	8001858 <decodeRMC+0xc8>
 800184e:	4b68      	ldr	r3, [pc, #416]	@ (80019f0 <decodeRMC+0x260>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	3301      	adds	r3, #1
 8001854:	4a66      	ldr	r2, [pc, #408]	@ (80019f0 <decodeRMC+0x260>)
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	4b65      	ldr	r3, [pc, #404]	@ (80019f0 <decodeRMC+0x260>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b2c      	cmp	r3, #44	@ 0x2c
 8001866:	d1f2      	bne.n	800184e <decodeRMC+0xbe>
	inx++;
 8001868:	4b61      	ldr	r3, [pc, #388]	@ (80019f0 <decodeRMC+0x260>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	3301      	adds	r3, #1
 800186e:	4a60      	ldr	r2, [pc, #384]	@ (80019f0 <decodeRMC+0x260>)
 8001870:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 8001872:	e004      	b.n	800187e <decodeRMC+0xee>
 8001874:	4b5e      	ldr	r3, [pc, #376]	@ (80019f0 <decodeRMC+0x260>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	3301      	adds	r3, #1
 800187a:	4a5d      	ldr	r2, [pc, #372]	@ (80019f0 <decodeRMC+0x260>)
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	4b5c      	ldr	r3, [pc, #368]	@ (80019f0 <decodeRMC+0x260>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4413      	add	r3, r2
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b2c      	cmp	r3, #44	@ 0x2c
 800188c:	d1f2      	bne.n	8001874 <decodeRMC+0xe4>
	inx++;
 800188e:	4b58      	ldr	r3, [pc, #352]	@ (80019f0 <decodeRMC+0x260>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	3301      	adds	r3, #1
 8001894:	4a56      	ldr	r2, [pc, #344]	@ (80019f0 <decodeRMC+0x260>)
 8001896:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 8001898:	e004      	b.n	80018a4 <decodeRMC+0x114>
 800189a:	4b55      	ldr	r3, [pc, #340]	@ (80019f0 <decodeRMC+0x260>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	4a53      	ldr	r2, [pc, #332]	@ (80019f0 <decodeRMC+0x260>)
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	4b52      	ldr	r3, [pc, #328]	@ (80019f0 <decodeRMC+0x260>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b2c      	cmp	r3, #44	@ 0x2c
 80018b2:	d1f2      	bne.n	800189a <decodeRMC+0x10a>

	// Get Speed
	inx++;
 80018b4:	4b4e      	ldr	r3, [pc, #312]	@ (80019f0 <decodeRMC+0x260>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	3301      	adds	r3, #1
 80018ba:	4a4d      	ldr	r2, [pc, #308]	@ (80019f0 <decodeRMC+0x260>)
 80018bc:	6013      	str	r3, [r2, #0]
	i=0;
 80018be:	2300      	movs	r3, #0
 80018c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	memset(buffer, '\0', 12);
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	220c      	movs	r2, #12
 80018c8:	2100      	movs	r1, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f004 fb88 	bl	8005fe0 <memset>
	while (RMCbuffer[inx] != ',')
 80018d0:	e013      	b.n	80018fa <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 80018d2:	4b47      	ldr	r3, [pc, #284]	@ (80019f0 <decodeRMC+0x260>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4413      	add	r3, r2
 80018dc:	7819      	ldrb	r1, [r3, #0]
 80018de:	f107 0208 	add.w	r2, r7, #8
 80018e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018e4:	4413      	add	r3, r2
 80018e6:	460a      	mov	r2, r1
 80018e8:	701a      	strb	r2, [r3, #0]
		i++;
 80018ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018ec:	3301      	adds	r3, #1
 80018ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		inx++;
 80018f0:	4b3f      	ldr	r3, [pc, #252]	@ (80019f0 <decodeRMC+0x260>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	3301      	adds	r3, #1
 80018f6:	4a3e      	ldr	r2, [pc, #248]	@ (80019f0 <decodeRMC+0x260>)
 80018f8:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80018fa:	4b3d      	ldr	r3, [pc, #244]	@ (80019f0 <decodeRMC+0x260>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4413      	add	r3, r2
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b2c      	cmp	r3, #44	@ 0x2c
 8001908:	d1e3      	bne.n	80018d2 <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d056      	beq.n	80019c2 <decodeRMC+0x232>
		int16_t num = (atoi(buffer));  // convert the data into the number
 8001914:	f107 0308 	add.w	r3, r7, #8
 8001918:	4618      	mov	r0, r3
 800191a:	f003 fa41 	bl	8004da0 <atoi>
 800191e:	4603      	mov	r3, r0
 8001920:	867b      	strh	r3, [r7, #50]	@ 0x32
		int j = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	63bb      	str	r3, [r7, #56]	@ 0x38
		while (buffer[j] != '.') j++;   // same as above
 8001926:	e002      	b.n	800192e <decodeRMC+0x19e>
 8001928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800192a:	3301      	adds	r3, #1
 800192c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800192e:	f107 0208 	add.w	r2, r7, #8
 8001932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001934:	4413      	add	r3, r2
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b2e      	cmp	r3, #46	@ 0x2e
 800193a:	d1f5      	bne.n	8001928 <decodeRMC+0x198>
		j++;
 800193c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800193e:	3301      	adds	r3, #1
 8001940:	63bb      	str	r3, [r7, #56]	@ 0x38
		int declen = (strlen(buffer))-j;
 8001942:	f107 0308 	add.w	r3, r7, #8
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fcba 	bl	80002c0 <strlen>
 800194c:	4602      	mov	r2, r0
 800194e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	62fb      	str	r3, [r7, #44]	@ 0x2c
		int dec = atoi ((char *) buffer+j);
 8001954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001956:	f107 0208 	add.w	r2, r7, #8
 800195a:	4413      	add	r3, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f003 fa1f 	bl	8004da0 <atoi>
 8001962:	62b8      	str	r0, [r7, #40]	@ 0x28
		float lat = num + (dec/pow(10, (declen)));
 8001964:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fe03 	bl	8000574 <__aeabi_i2d>
 800196e:	4604      	mov	r4, r0
 8001970:	460d      	mov	r5, r1
 8001972:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001974:	f7fe fdfe 	bl	8000574 <__aeabi_i2d>
 8001978:	4680      	mov	r8, r0
 800197a:	4689      	mov	r9, r1
 800197c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800197e:	f7fe fdf9 	bl	8000574 <__aeabi_i2d>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	ec43 2b11 	vmov	d1, r2, r3
 800198a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80019e8 <decodeRMC+0x258>
 800198e:	f007 fdf1 	bl	8009574 <pow>
 8001992:	ec53 2b10 	vmov	r2, r3, d0
 8001996:	4640      	mov	r0, r8
 8001998:	4649      	mov	r1, r9
 800199a:	f7fe ff7f 	bl	800089c <__aeabi_ddiv>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4620      	mov	r0, r4
 80019a4:	4629      	mov	r1, r5
 80019a6:	f7fe fc99 	bl	80002dc <__adddf3>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	f7ff f941 	bl	8000c38 <__aeabi_d2f>
 80019b6:	4603      	mov	r3, r0
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
		rmc->speed = lat;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	e003      	b.n	80019ca <decodeRMC+0x23a>
	}
	else rmc->speed = 0;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 80019ca:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <decodeRMC+0x260>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3301      	adds	r3, #1
 80019d0:	4a07      	ldr	r2, [pc, #28]	@ (80019f0 <decodeRMC+0x260>)
 80019d2:	6013      	str	r3, [r2, #0]
	i=0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	memset(buffer, '\0', 12);
 80019d8:	f107 0308 	add.w	r3, r7, #8
 80019dc:	220c      	movs	r2, #12
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f004 fafd 	bl	8005fe0 <memset>
	while (RMCbuffer[inx] != ',')
 80019e6:	e019      	b.n	8001a1c <decodeRMC+0x28c>
 80019e8:	00000000 	.word	0x00000000
 80019ec:	40240000 	.word	0x40240000
 80019f0:	2000023c 	.word	0x2000023c
	{
		buffer[i] = RMCbuffer[inx];
 80019f4:	4b7e      	ldr	r3, [pc, #504]	@ (8001bf0 <decodeRMC+0x460>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	7819      	ldrb	r1, [r3, #0]
 8001a00:	f107 0208 	add.w	r2, r7, #8
 8001a04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a06:	4413      	add	r3, r2
 8001a08:	460a      	mov	r2, r1
 8001a0a:	701a      	strb	r2, [r3, #0]
		i++;
 8001a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a0e:	3301      	adds	r3, #1
 8001a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
		inx++;
 8001a12:	4b77      	ldr	r3, [pc, #476]	@ (8001bf0 <decodeRMC+0x460>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	3301      	adds	r3, #1
 8001a18:	4a75      	ldr	r2, [pc, #468]	@ (8001bf0 <decodeRMC+0x460>)
 8001a1a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001a1c:	4b74      	ldr	r3, [pc, #464]	@ (8001bf0 <decodeRMC+0x460>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b2c      	cmp	r3, #44	@ 0x2c
 8001a2a:	d1e3      	bne.n	80019f4 <decodeRMC+0x264>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 8001a2c:	f107 0308 	add.w	r3, r7, #8
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d056      	beq.n	8001ae4 <decodeRMC+0x354>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 8001a36:	f107 0308 	add.w	r3, r7, #8
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f003 f9b0 	bl	8004da0 <atoi>
 8001a40:	4603      	mov	r3, r0
 8001a42:	847b      	strh	r3, [r7, #34]	@ 0x22
		int j = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	637b      	str	r3, [r7, #52]	@ 0x34
		while (buffer[j] != '.') j++;   // same as above
 8001a48:	e002      	b.n	8001a50 <decodeRMC+0x2c0>
 8001a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a50:	f107 0208 	add.w	r2, r7, #8
 8001a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a56:	4413      	add	r3, r2
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a5c:	d1f5      	bne.n	8001a4a <decodeRMC+0x2ba>
		j++;
 8001a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a60:	3301      	adds	r3, #1
 8001a62:	637b      	str	r3, [r7, #52]	@ 0x34
		int declen = (strlen(buffer))-j;
 8001a64:	f107 0308 	add.w	r3, r7, #8
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fc29 	bl	80002c0 <strlen>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 8001a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a78:	f107 0208 	add.w	r2, r7, #8
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f003 f98e 	bl	8004da0 <atoi>
 8001a84:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 8001a86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fd72 	bl	8000574 <__aeabi_i2d>
 8001a90:	4604      	mov	r4, r0
 8001a92:	460d      	mov	r5, r1
 8001a94:	69b8      	ldr	r0, [r7, #24]
 8001a96:	f7fe fd6d 	bl	8000574 <__aeabi_i2d>
 8001a9a:	4680      	mov	r8, r0
 8001a9c:	4689      	mov	r9, r1
 8001a9e:	69f8      	ldr	r0, [r7, #28]
 8001aa0:	f7fe fd68 	bl	8000574 <__aeabi_i2d>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	ec43 2b11 	vmov	d1, r2, r3
 8001aac:	ed9f 0b4e 	vldr	d0, [pc, #312]	@ 8001be8 <decodeRMC+0x458>
 8001ab0:	f007 fd60 	bl	8009574 <pow>
 8001ab4:	ec53 2b10 	vmov	r2, r3, d0
 8001ab8:	4640      	mov	r0, r8
 8001aba:	4649      	mov	r1, r9
 8001abc:	f7fe feee 	bl	800089c <__aeabi_ddiv>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	4629      	mov	r1, r5
 8001ac8:	f7fe fc08 	bl	80002dc <__adddf3>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f7ff f8b0 	bl	8000c38 <__aeabi_d2f>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	611a      	str	r2, [r3, #16]
 8001ae2:	e003      	b.n	8001aec <decodeRMC+0x35c>
	}
	else
		{
			rmc->course = 0;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 8001aec:	4b40      	ldr	r3, [pc, #256]	@ (8001bf0 <decodeRMC+0x460>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	3301      	adds	r3, #1
 8001af2:	4a3f      	ldr	r2, [pc, #252]	@ (8001bf0 <decodeRMC+0x460>)
 8001af4:	6013      	str	r3, [r2, #0]
	i=0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	memset(buffer, '\0', 12);
 8001afa:	f107 0308 	add.w	r3, r7, #8
 8001afe:	220c      	movs	r2, #12
 8001b00:	2100      	movs	r1, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f004 fa6c 	bl	8005fe0 <memset>
	while (RMCbuffer[inx] != ',')
 8001b08:	e013      	b.n	8001b32 <decodeRMC+0x3a2>
	{
		buffer[i] = RMCbuffer[inx];
 8001b0a:	4b39      	ldr	r3, [pc, #228]	@ (8001bf0 <decodeRMC+0x460>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4413      	add	r3, r2
 8001b14:	7819      	ldrb	r1, [r3, #0]
 8001b16:	f107 0208 	add.w	r2, r7, #8
 8001b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b1c:	4413      	add	r3, r2
 8001b1e:	460a      	mov	r2, r1
 8001b20:	701a      	strb	r2, [r3, #0]
		i++;
 8001b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b24:	3301      	adds	r3, #1
 8001b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
		inx++;
 8001b28:	4b31      	ldr	r3, [pc, #196]	@ (8001bf0 <decodeRMC+0x460>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	4a30      	ldr	r2, [pc, #192]	@ (8001bf0 <decodeRMC+0x460>)
 8001b30:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001b32:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf0 <decodeRMC+0x460>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001b40:	d1e3      	bne.n	8001b0a <decodeRMC+0x37a>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 8001b42:	f107 0308 	add.w	r3, r7, #8
 8001b46:	4618      	mov	r0, r3
 8001b48:	f003 f92a 	bl	8004da0 <atoi>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4a29      	ldr	r2, [pc, #164]	@ (8001bf4 <decodeRMC+0x464>)
 8001b50:	fb82 1203 	smull	r1, r2, r2, r3
 8001b54:	1312      	asrs	r2, r2, #12
 8001b56:	17db      	asrs	r3, r3, #31
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	4a27      	ldr	r2, [pc, #156]	@ (8001bf8 <decodeRMC+0x468>)
 8001b5c:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 8001b5e:	f107 0308 	add.w	r3, r7, #8
 8001b62:	4618      	mov	r0, r3
 8001b64:	f003 f91c 	bl	8004da0 <atoi>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4a24      	ldr	r2, [pc, #144]	@ (8001bfc <decodeRMC+0x46c>)
 8001b6c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b70:	1152      	asrs	r2, r2, #5
 8001b72:	17db      	asrs	r3, r3, #31
 8001b74:	1ad2      	subs	r2, r2, r3
 8001b76:	4b21      	ldr	r3, [pc, #132]	@ (8001bfc <decodeRMC+0x46c>)
 8001b78:	fb83 1302 	smull	r1, r3, r3, r2
 8001b7c:	1159      	asrs	r1, r3, #5
 8001b7e:	17d3      	asrs	r3, r2, #31
 8001b80:	1acb      	subs	r3, r1, r3
 8001b82:	2164      	movs	r1, #100	@ 0x64
 8001b84:	fb01 f303 	mul.w	r3, r1, r3
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001c00 <decodeRMC+0x470>)
 8001b8c:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 8001b8e:	f107 0308 	add.w	r3, r7, #8
 8001b92:	4618      	mov	r0, r3
 8001b94:	f003 f904 	bl	8004da0 <atoi>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4b18      	ldr	r3, [pc, #96]	@ (8001bfc <decodeRMC+0x46c>)
 8001b9c:	fb83 1302 	smull	r1, r3, r3, r2
 8001ba0:	1159      	asrs	r1, r3, #5
 8001ba2:	17d3      	asrs	r3, r2, #31
 8001ba4:	1acb      	subs	r3, r1, r3
 8001ba6:	2164      	movs	r1, #100	@ 0x64
 8001ba8:	fb01 f303 	mul.w	r3, r1, r3
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	4a15      	ldr	r2, [pc, #84]	@ (8001c04 <decodeRMC+0x474>)
 8001bb0:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 8001bb2:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <decodeRMC+0x468>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	4b14      	ldr	r3, [pc, #80]	@ (8001c08 <decodeRMC+0x478>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	4a0e      	ldr	r2, [pc, #56]	@ (8001bf8 <decodeRMC+0x468>)
 8001bbe:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 8001bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf8 <decodeRMC+0x468>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8001bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001c00 <decodeRMC+0x470>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <decodeRMC+0x474>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	609a      	str	r2, [r3, #8]

	return 0;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3740      	adds	r7, #64	@ 0x40
 8001bde:	46bd      	mov	sp, r7
 8001be0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001be4:	f3af 8000 	nop.w
 8001be8:	00000000 	.word	0x00000000
 8001bec:	40240000 	.word	0x40240000
 8001bf0:	2000023c 	.word	0x2000023c
 8001bf4:	68db8bad 	.word	0x68db8bad
 8001bf8:	20000248 	.word	0x20000248
 8001bfc:	51eb851f 	.word	0x51eb851f
 8001c00:	2000024c 	.word	0x2000024c
 8001c04:	20000250 	.word	0x20000250
 8001c08:	20000254 	.word	0x20000254

08001c0c <MX_GPIO_Init>:
     PB9   ------> I2S2_WS
     PE0   ------> FSMC_NBL0
     PE1   ------> FSMC_NBL1
*/
void MX_GPIO_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08e      	sub	sp, #56	@ 0x38
 8001c10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
 8001c26:	4bb1      	ldr	r3, [pc, #708]	@ (8001eec <MX_GPIO_Init+0x2e0>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	4ab0      	ldr	r2, [pc, #704]	@ (8001eec <MX_GPIO_Init+0x2e0>)
 8001c2c:	f043 0310 	orr.w	r3, r3, #16
 8001c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c32:	4bae      	ldr	r3, [pc, #696]	@ (8001eec <MX_GPIO_Init+0x2e0>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	f003 0310 	and.w	r3, r3, #16
 8001c3a:	623b      	str	r3, [r7, #32]
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	4baa      	ldr	r3, [pc, #680]	@ (8001eec <MX_GPIO_Init+0x2e0>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	4aa9      	ldr	r2, [pc, #676]	@ (8001eec <MX_GPIO_Init+0x2e0>)
 8001c48:	f043 0304 	orr.w	r3, r3, #4
 8001c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4e:	4ba7      	ldr	r3, [pc, #668]	@ (8001eec <MX_GPIO_Init+0x2e0>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	f003 0304 	and.w	r3, r3, #4
 8001c56:	61fb      	str	r3, [r7, #28]
 8001c58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
 8001c5e:	4ba3      	ldr	r3, [pc, #652]	@ (8001eec <MX_GPIO_Init+0x2e0>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	4aa2      	ldr	r2, [pc, #648]	@ (8001eec <MX_GPIO_Init+0x2e0>)
 8001c64:	f043 0320 	orr.w	r3, r3, #32
 8001c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6a:	4ba0      	ldr	r3, [pc, #640]	@ (8001eec <MX_GPIO_Init+0x2e0>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	f003 0320 	and.w	r3, r3, #32
 8001c72:	61bb      	str	r3, [r7, #24]
 8001c74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	4b9c      	ldr	r3, [pc, #624]	@ (8001eec <MX_GPIO_Init+0x2e0>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	4a9b      	ldr	r2, [pc, #620]	@ (8001eec <MX_GPIO_Init+0x2e0>)
 8001c80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c86:	4b99      	ldr	r3, [pc, #612]	@ (8001eec <MX_GPIO_Init+0x2e0>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	4b95      	ldr	r3, [pc, #596]	@ (8001eec <MX_GPIO_Init+0x2e0>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	4a94      	ldr	r2, [pc, #592]	@ (8001eec <MX_GPIO_Init+0x2e0>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca2:	4b92      	ldr	r3, [pc, #584]	@ (8001eec <MX_GPIO_Init+0x2e0>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b8e      	ldr	r3, [pc, #568]	@ (8001eec <MX_GPIO_Init+0x2e0>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	4a8d      	ldr	r2, [pc, #564]	@ (8001eec <MX_GPIO_Init+0x2e0>)
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cbe:	4b8b      	ldr	r3, [pc, #556]	@ (8001eec <MX_GPIO_Init+0x2e0>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	4b87      	ldr	r3, [pc, #540]	@ (8001eec <MX_GPIO_Init+0x2e0>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	4a86      	ldr	r2, [pc, #536]	@ (8001eec <MX_GPIO_Init+0x2e0>)
 8001cd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cda:	4b84      	ldr	r3, [pc, #528]	@ (8001eec <MX_GPIO_Init+0x2e0>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	4b80      	ldr	r3, [pc, #512]	@ (8001eec <MX_GPIO_Init+0x2e0>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	4a7f      	ldr	r2, [pc, #508]	@ (8001eec <MX_GPIO_Init+0x2e0>)
 8001cf0:	f043 0308 	orr.w	r3, r3, #8
 8001cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf6:	4b7d      	ldr	r3, [pc, #500]	@ (8001eec <MX_GPIO_Init+0x2e0>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2138      	movs	r1, #56	@ 0x38
 8001d06:	487a      	ldr	r0, [pc, #488]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001d08:	f001 fc9e 	bl	8003648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2120      	movs	r1, #32
 8001d10:	4878      	ldr	r0, [pc, #480]	@ (8001ef4 <MX_GPIO_Init+0x2e8>)
 8001d12:	f001 fc99 	bl	8003648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8001d16:	2200      	movs	r2, #0
 8001d18:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001d1c:	4876      	ldr	r0, [pc, #472]	@ (8001ef8 <MX_GPIO_Init+0x2ec>)
 8001d1e:	f001 fc93 	bl	8003648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 8001d22:	2200      	movs	r2, #0
 8001d24:	f44f 5104 	mov.w	r1, #8448	@ 0x2100
 8001d28:	4874      	ldr	r0, [pc, #464]	@ (8001efc <MX_GPIO_Init+0x2f0>)
 8001d2a:	f001 fc8d 	bl	8003648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001d2e:	2304      	movs	r3, #4
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001d3e:	2309      	movs	r3, #9
 8001d40:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001d42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d46:	4619      	mov	r1, r3
 8001d48:	4869      	ldr	r0, [pc, #420]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001d4a:	f001 fae9 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8001d4e:	2338      	movs	r3, #56	@ 0x38
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d52:	2301      	movs	r3, #1
 8001d54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d62:	4619      	mov	r1, r3
 8001d64:	4862      	ldr	r0, [pc, #392]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001d66:	f001 fadb 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8001d6a:	2340      	movs	r3, #64	@ 0x40
 8001d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001d7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d82:	4619      	mov	r1, r3
 8001d84:	485a      	ldr	r0, [pc, #360]	@ (8001ef0 <MX_GPIO_Init+0x2e4>)
 8001d86:	f001 facb 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8001d8a:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8001d8e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001d9c:	230c      	movs	r3, #12
 8001d9e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001da4:	4619      	mov	r1, r3
 8001da6:	4856      	ldr	r0, [pc, #344]	@ (8001f00 <MX_GPIO_Init+0x2f4>)
 8001da8:	f001 faba 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001dac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001db0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001dbe:	230a      	movs	r3, #10
 8001dc0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	484d      	ldr	r0, [pc, #308]	@ (8001f00 <MX_GPIO_Init+0x2f4>)
 8001dca:	f001 faa9 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001dce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001de0:	2302      	movs	r3, #2
 8001de2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001de4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001de8:	4619      	mov	r1, r3
 8001dea:	4845      	ldr	r0, [pc, #276]	@ (8001f00 <MX_GPIO_Init+0x2f4>)
 8001dec:	f001 fa98 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 8001df0:	2311      	movs	r3, #17
 8001df2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df4:	2303      	movs	r3, #3
 8001df6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e00:	4619      	mov	r1, r3
 8001e02:	483c      	ldr	r0, [pc, #240]	@ (8001ef4 <MX_GPIO_Init+0x2e8>)
 8001e04:	f001 fa8c 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e0c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001e16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4835      	ldr	r0, [pc, #212]	@ (8001ef4 <MX_GPIO_Init+0x2e8>)
 8001e1e:	f001 fa7f 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8001e22:	2304      	movs	r3, #4
 8001e24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001e32:	2306      	movs	r3, #6
 8001e34:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8001e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	482d      	ldr	r0, [pc, #180]	@ (8001ef4 <MX_GPIO_Init+0x2e8>)
 8001e3e:	f001 fa6f 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8001e42:	2308      	movs	r3, #8
 8001e44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e52:	2305      	movs	r3, #5
 8001e54:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8001e56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4825      	ldr	r0, [pc, #148]	@ (8001ef4 <MX_GPIO_Init+0x2e8>)
 8001e5e:	f001 fa5f 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8001e62:	2301      	movs	r3, #1
 8001e64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e66:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8001e70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e74:	4619      	mov	r1, r3
 8001e76:	4823      	ldr	r0, [pc, #140]	@ (8001f04 <MX_GPIO_Init+0x2f8>)
 8001e78:	f001 fa52 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_D8_Pin|ARD_A3_Pin;
 8001e7c:	2336      	movs	r3, #54	@ 0x36
 8001e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e80:	2303      	movs	r3, #3
 8001e82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	481d      	ldr	r0, [pc, #116]	@ (8001f04 <MX_GPIO_Init+0x2f8>)
 8001e90:	f001 fa46 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8001e94:	2308      	movs	r3, #8
 8001e96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ea4:	2305      	movs	r3, #5
 8001ea6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8001ea8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eac:	4619      	mov	r1, r3
 8001eae:	4815      	ldr	r0, [pc, #84]	@ (8001f04 <MX_GPIO_Init+0x2f8>)
 8001eb0:	f001 fa36 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CMD_Pin;
 8001eb4:	2340      	movs	r3, #64	@ 0x40
 8001eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001ec4:	230c      	movs	r3, #12
 8001ec6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ecc:	4619      	mov	r1, r3
 8001ece:	480d      	ldr	r0, [pc, #52]	@ (8001f04 <MX_GPIO_Init+0x2f8>)
 8001ed0:	f001 fa26 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8001ed4:	2380      	movs	r3, #128	@ 0x80
 8001ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8001ee4:	2307      	movs	r3, #7
 8001ee6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ee8:	e00e      	b.n	8001f08 <MX_GPIO_Init+0x2fc>
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40020800 	.word	0x40020800
 8001ef8:	40020400 	.word	0x40020400
 8001efc:	40021800 	.word	0x40021800
 8001f00:	40021400 	.word	0x40021400
 8001f04:	40020000 	.word	0x40020000
  HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001f08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	48bc      	ldr	r0, [pc, #752]	@ (8002200 <MX_GPIO_Init+0x5f4>)
 8001f10:	f001 fa06 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8001f14:	2320      	movs	r3, #32
 8001f16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2300      	movs	r3, #0
 8001f22:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001f24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f28:	4619      	mov	r1, r3
 8001f2a:	48b6      	ldr	r0, [pc, #728]	@ (8002204 <MX_GPIO_Init+0x5f8>)
 8001f2c:	f001 f9f8 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001f30:	2301      	movs	r3, #1
 8001f32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f40:	2302      	movs	r3, #2
 8001f42:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001f44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f48:	4619      	mov	r1, r3
 8001f4a:	48af      	ldr	r0, [pc, #700]	@ (8002208 <MX_GPIO_Init+0x5fc>)
 8001f4c:	f001 f9e8 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_A4_Pin;
 8001f50:	2302      	movs	r3, #2
 8001f52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f54:	2303      	movs	r3, #3
 8001f56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8001f5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f60:	4619      	mov	r1, r3
 8001f62:	48a9      	ldr	r0, [pc, #676]	@ (8002208 <MX_GPIO_Init+0x5fc>)
 8001f64:	f001 f9dc 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001f68:	2304      	movs	r3, #4
 8001f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f74:	2303      	movs	r3, #3
 8001f76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001f78:	2309      	movs	r3, #9
 8001f7a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001f7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f80:	4619      	mov	r1, r3
 8001f82:	48a1      	ldr	r0, [pc, #644]	@ (8002208 <MX_GPIO_Init+0x5fc>)
 8001f84:	f001 f9cc 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8001f88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f8e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001f98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	489b      	ldr	r0, [pc, #620]	@ (800220c <MX_GPIO_Init+0x600>)
 8001fa0:	f001 f9be 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8001fa4:	f240 433f 	movw	r3, #1087	@ 0x43f
 8001fa8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001faa:	2302      	movs	r3, #2
 8001fac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001fb6:	230c      	movs	r3, #12
 8001fb8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4893      	ldr	r0, [pc, #588]	@ (8002210 <MX_GPIO_Init+0x604>)
 8001fc2:	f001 f9ad 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8001fc6:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001fd8:	230c      	movs	r3, #12
 8001fda:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	488c      	ldr	r0, [pc, #560]	@ (8002214 <MX_GPIO_Init+0x608>)
 8001fe4:	f001 f99c 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001fe8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fee:	2312      	movs	r3, #18
 8001ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ffa:	2304      	movs	r3, #4
 8001ffc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002002:	4619      	mov	r1, r3
 8002004:	4880      	ldr	r0, [pc, #512]	@ (8002208 <MX_GPIO_Init+0x5fc>)
 8002006:	f001 f98b 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 800200a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800200e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002010:	2302      	movs	r3, #2
 8002012:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002018:	2303      	movs	r3, #3
 800201a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800201c:	2307      	movs	r3, #7
 800201e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8002020:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002024:	4619      	mov	r1, r3
 8002026:	4878      	ldr	r0, [pc, #480]	@ (8002208 <MX_GPIO_Init+0x5fc>)
 8002028:	f001 f97a 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 800202c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002032:	2301      	movs	r3, #1
 8002034:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002042:	4619      	mov	r1, r3
 8002044:	4870      	ldr	r0, [pc, #448]	@ (8002208 <MX_GPIO_Init+0x5fc>)
 8002046:	f001 f96b 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 800204a:	f64d 73b3 	movw	r3, #57267	@ 0xdfb3
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002058:	2303      	movs	r3, #3
 800205a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800205c:	230c      	movs	r3, #12
 800205e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002060:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002064:	4619      	mov	r1, r3
 8002066:	486c      	ldr	r0, [pc, #432]	@ (8002218 <MX_GPIO_Init+0x60c>)
 8002068:	f001 f95a 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 800206c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002070:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207a:	2303      	movs	r3, #3
 800207c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800207e:	2309      	movs	r3, #9
 8002080:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8002082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002086:	4619      	mov	r1, r3
 8002088:	4863      	ldr	r0, [pc, #396]	@ (8002218 <MX_GPIO_Init+0x60c>)
 800208a:	f001 f949 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 800208e:	2340      	movs	r3, #64	@ 0x40
 8002090:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209a:	2303      	movs	r3, #3
 800209c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 800209e:	230a      	movs	r3, #10
 80020a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80020a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020a6:	4619      	mov	r1, r3
 80020a8:	4859      	ldr	r0, [pc, #356]	@ (8002210 <MX_GPIO_Init+0x604>)
 80020aa:	f001 f939 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 80020ae:	f248 0380 	movw	r3, #32896	@ 0x8080
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020c2:	4619      	mov	r1, r3
 80020c4:	4852      	ldr	r0, [pc, #328]	@ (8002210 <MX_GPIO_Init+0x604>)
 80020c6:	f001 f92b 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin;
 80020ca:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 80020ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d0:	2301      	movs	r3, #1
 80020d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d8:	2300      	movs	r3, #0
 80020da:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020e0:	4619      	mov	r1, r3
 80020e2:	484b      	ldr	r0, [pc, #300]	@ (8002210 <MX_GPIO_Init+0x604>)
 80020e4:	f001 f91c 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 80020e8:	23c0      	movs	r3, #192	@ 0xc0
 80020ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ec:	2312      	movs	r3, #18
 80020ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020f0:	2301      	movs	r3, #1
 80020f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f4:	2303      	movs	r3, #3
 80020f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 80020f8:	2304      	movs	r3, #4
 80020fa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002100:	4619      	mov	r1, r3
 8002102:	4840      	ldr	r0, [pc, #256]	@ (8002204 <MX_GPIO_Init+0x5f8>)
 8002104:	f001 f90c 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 8002108:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800210c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SD_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002116:	2303      	movs	r3, #3
 8002118:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800211a:	230c      	movs	r3, #12
 800211c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800211e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002122:	4619      	mov	r1, r3
 8002124:	4837      	ldr	r0, [pc, #220]	@ (8002204 <MX_GPIO_Init+0x5f8>)
 8002126:	f001 f8fb 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 800212a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800212e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2300      	movs	r3, #0
 800213a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800213c:	2306      	movs	r3, #6
 800213e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8002140:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002144:	4619      	mov	r1, r3
 8002146:	482e      	ldr	r0, [pc, #184]	@ (8002200 <MX_GPIO_Init+0x5f4>)
 8002148:	f001 f8ea 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800214c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002150:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002152:	2302      	movs	r3, #2
 8002154:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215a:	2303      	movs	r3, #3
 800215c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800215e:	230a      	movs	r3, #10
 8002160:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002166:	4619      	mov	r1, r3
 8002168:	4825      	ldr	r0, [pc, #148]	@ (8002200 <MX_GPIO_Init+0x5f4>)
 800216a:	f001 f8d9 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 800216e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002172:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217c:	2300      	movs	r3, #0
 800217e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002180:	2301      	movs	r3, #1
 8002182:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8002184:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002188:	4619      	mov	r1, r3
 800218a:	481d      	ldr	r0, [pc, #116]	@ (8002200 <MX_GPIO_Init+0x5f4>)
 800218c:	f001 f8c8 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8002190:	2304      	movs	r3, #4
 8002192:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 80021a0:	2303      	movs	r3, #3
 80021a2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80021a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021a8:	4619      	mov	r1, r3
 80021aa:	481b      	ldr	r0, [pc, #108]	@ (8002218 <MX_GPIO_Init+0x60c>)
 80021ac:	f001 f8b8 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CODEC_CK_Pin;
 80021b0:	2308      	movs	r3, #8
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b4:	2302      	movs	r3, #2
 80021b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021bc:	2300      	movs	r3, #0
 80021be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021c0:	2305      	movs	r3, #5
 80021c2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 80021c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021c8:	4619      	mov	r1, r3
 80021ca:	4813      	ldr	r0, [pc, #76]	@ (8002218 <MX_GPIO_Init+0x60c>)
 80021cc:	f001 f8a8 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 80021d0:	2340      	movs	r3, #64	@ 0x40
 80021d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80021e0:	2306      	movs	r3, #6
 80021e2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 80021e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021e8:	4619      	mov	r1, r3
 80021ea:	480b      	ldr	r0, [pc, #44]	@ (8002218 <MX_GPIO_Init+0x60c>)
 80021ec:	f001 f898 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 80021f0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80021f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	e00e      	b.n	800221c <MX_GPIO_Init+0x610>
 80021fe:	bf00      	nop
 8002200:	40020000 	.word	0x40020000
 8002204:	40020800 	.word	0x40020800
 8002208:	40020400 	.word	0x40020400
 800220c:	40021400 	.word	0x40021400
 8002210:	40021800 	.word	0x40021800
 8002214:	40021000 	.word	0x40021000
 8002218:	40020c00 	.word	0x40020c00
 800221c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221e:	2303      	movs	r3, #3
 8002220:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8002222:	230b      	movs	r3, #11
 8002224:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002226:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800222a:	4619      	mov	r1, r3
 800222c:	482a      	ldr	r0, [pc, #168]	@ (80022d8 <MX_GPIO_Init+0x6cc>)
 800222e:	f001 f877 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8002232:	2330      	movs	r3, #48	@ 0x30
 8002234:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223e:	2303      	movs	r3, #3
 8002240:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002242:	2306      	movs	r3, #6
 8002244:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002246:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800224a:	4619      	mov	r1, r3
 800224c:	4823      	ldr	r0, [pc, #140]	@ (80022dc <MX_GPIO_Init+0x6d0>)
 800224e:	f001 f867 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8002252:	2340      	movs	r3, #64	@ 0x40
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002256:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800225a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8002260:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002264:	4619      	mov	r1, r3
 8002266:	481d      	ldr	r0, [pc, #116]	@ (80022dc <MX_GPIO_Init+0x6d0>)
 8002268:	f001 f85a 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 800226c:	2380      	movs	r3, #128	@ 0x80
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2300      	movs	r3, #0
 800227a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 800227c:	2306      	movs	r3, #6
 800227e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8002280:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002284:	4619      	mov	r1, r3
 8002286:	4815      	ldr	r0, [pc, #84]	@ (80022dc <MX_GPIO_Init+0x6d0>)
 8002288:	f001 f84a 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 800228c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002290:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002292:	2302      	movs	r3, #2
 8002294:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229a:	2300      	movs	r3, #0
 800229c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800229e:	2302      	movs	r3, #2
 80022a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 80022a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022a6:	4619      	mov	r1, r3
 80022a8:	480c      	ldr	r0, [pc, #48]	@ (80022dc <MX_GPIO_Init+0x6d0>)
 80022aa:	f001 f839 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CODEC_WS_Pin;
 80022ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b4:	2302      	movs	r3, #2
 80022b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022bc:	2300      	movs	r3, #0
 80022be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022c0:	2305      	movs	r3, #5
 80022c2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 80022c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022c8:	4619      	mov	r1, r3
 80022ca:	4804      	ldr	r0, [pc, #16]	@ (80022dc <MX_GPIO_Init+0x6d0>)
 80022cc:	f001 f828 	bl	8003320 <HAL_GPIO_Init>

}
 80022d0:	bf00      	nop
 80022d2:	3738      	adds	r7, #56	@ 0x38
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40021800 	.word	0x40021800
 80022dc:	40020400 	.word	0x40020400

080022e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e2:	b087      	sub	sp, #28
 80022e4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022e6:	f000 fde1 	bl	8002eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022ea:	f000 f8ed 	bl	80024c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022ee:	f7ff fc8d 	bl	8001c0c <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80022f2:	f000 fcf9 	bl	8002ce8 <MX_USART6_UART_Init>
  MX_UART7_Init();
 80022f6:	f000 fccd 	bl	8002c94 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  Ringbuf_init();//initializing Ring buffer
 80022fa:	f000 fab5 	bl	8002868 <Ringbuf_init>
  HAL_Delay (500);
 80022fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002302:	f000 fe45 	bl	8002f90 <HAL_Delay>
	  {
	  int data = Uart_read();
	  Uart_write(data);
	  }
	  */
	  HAL_Delay (500);
 8002306:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800230a:	f000 fe41 	bl	8002f90 <HAL_Delay>
     printf(lcdBuffer);
 800230e:	485d      	ldr	r0, [pc, #372]	@ (8002484 <main+0x1a4>)
 8002310:	f003 fcfe 	bl	8005d10 <iprintf>

	  if (Wait_for("GGA") == 1)
 8002314:	485c      	ldr	r0, [pc, #368]	@ (8002488 <main+0x1a8>)
 8002316:	f000 fbd7 	bl	8002ac8 <Wait_for>
 800231a:	4603      	mov	r3, r0
 800231c:	2b01      	cmp	r3, #1
 800231e:	d115      	bne.n	800234c <main+0x6c>
	 	  {

	 		  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the GGA is being received
 8002320:	4b5a      	ldr	r3, [pc, #360]	@ (800248c <main+0x1ac>)
 8002322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002326:	601a      	str	r2, [r3, #0]

	 		  Copy_upto("*", GGA);
 8002328:	4959      	ldr	r1, [pc, #356]	@ (8002490 <main+0x1b0>)
 800232a:	485a      	ldr	r0, [pc, #360]	@ (8002494 <main+0x1b4>)
 800232c:	f000 fb4c 	bl	80029c8 <Copy_upto>
	 		  if (decodeGGA(GGA, &gpsData.ggastruct) == 0) flagGGA = 2;  // 2 indicates the data is valid
 8002330:	4959      	ldr	r1, [pc, #356]	@ (8002498 <main+0x1b8>)
 8002332:	4857      	ldr	r0, [pc, #348]	@ (8002490 <main+0x1b0>)
 8002334:	f7fe fe80 	bl	8001038 <decodeGGA>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d103      	bne.n	8002346 <main+0x66>
 800233e:	4b57      	ldr	r3, [pc, #348]	@ (800249c <main+0x1bc>)
 8002340:	2202      	movs	r2, #2
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	e002      	b.n	800234c <main+0x6c>
	 		  else flagGGA = 1;  // 1 indicates the data is invalid
 8002346:	4b55      	ldr	r3, [pc, #340]	@ (800249c <main+0x1bc>)
 8002348:	2201      	movs	r2, #1
 800234a:	601a      	str	r2, [r3, #0]
	 	  }

	  if (Wait_for("RMC") == 1)
 800234c:	4854      	ldr	r0, [pc, #336]	@ (80024a0 <main+0x1c0>)
 800234e:	f000 fbbb 	bl	8002ac8 <Wait_for>
 8002352:	4603      	mov	r3, r0
 8002354:	2b01      	cmp	r3, #1
 8002356:	d115      	bne.n	8002384 <main+0xa4>
	  	  {

	  		  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the RMC is being received
 8002358:	4b4c      	ldr	r3, [pc, #304]	@ (800248c <main+0x1ac>)
 800235a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800235e:	601a      	str	r2, [r3, #0]

	  		  Copy_upto("*", RMC);
 8002360:	4950      	ldr	r1, [pc, #320]	@ (80024a4 <main+0x1c4>)
 8002362:	484c      	ldr	r0, [pc, #304]	@ (8002494 <main+0x1b4>)
 8002364:	f000 fb30 	bl	80029c8 <Copy_upto>
	  		  if (decodeRMC(RMC, &gpsData.rmcstruct) == 0) flagRMC = 2;  // 2 indicates the data is valid
 8002368:	494f      	ldr	r1, [pc, #316]	@ (80024a8 <main+0x1c8>)
 800236a:	484e      	ldr	r0, [pc, #312]	@ (80024a4 <main+0x1c4>)
 800236c:	f7ff fa10 	bl	8001790 <decodeRMC>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d103      	bne.n	800237e <main+0x9e>
 8002376:	4b4d      	ldr	r3, [pc, #308]	@ (80024ac <main+0x1cc>)
 8002378:	2202      	movs	r2, #2
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	e002      	b.n	8002384 <main+0xa4>
	  		  else flagRMC = 1;  // 1 indicates the data is invalid
 800237e:	4b4b      	ldr	r3, [pc, #300]	@ (80024ac <main+0x1cc>)
 8002380:	2201      	movs	r2, #1
 8002382:	601a      	str	r2, [r3, #0]
	  	  }
	  if ((flagGGA == 2) | (flagRMC == 2))
 8002384:	4b45      	ldr	r3, [pc, #276]	@ (800249c <main+0x1bc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b02      	cmp	r3, #2
 800238a:	bf0c      	ite	eq
 800238c:	2301      	moveq	r3, #1
 800238e:	2300      	movne	r3, #0
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4b46      	ldr	r3, [pc, #280]	@ (80024ac <main+0x1cc>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b02      	cmp	r3, #2
 8002398:	bf0c      	ite	eq
 800239a:	2301      	moveq	r3, #1
 800239c:	2300      	movne	r3, #0
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	4313      	orrs	r3, r2
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d03e      	beq.n	8002426 <main+0x146>
	 	  {

	 		  sprintf (lcdBuffer, "%02d:%02d:%02d, %02d%02d%02d", gpsData.ggastruct.tim.hour, \
 80023a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002498 <main+0x1b8>)
 80023aa:	691c      	ldr	r4, [r3, #16]
 80023ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002498 <main+0x1b8>)
 80023ae:	695d      	ldr	r5, [r3, #20]
 80023b0:	4b39      	ldr	r3, [pc, #228]	@ (8002498 <main+0x1b8>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	4a38      	ldr	r2, [pc, #224]	@ (8002498 <main+0x1b8>)
 80023b6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80023b8:	4937      	ldr	r1, [pc, #220]	@ (8002498 <main+0x1b8>)
 80023ba:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 80023bc:	4836      	ldr	r0, [pc, #216]	@ (8002498 <main+0x1b8>)
 80023be:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80023c0:	9003      	str	r0, [sp, #12]
 80023c2:	9102      	str	r1, [sp, #8]
 80023c4:	9201      	str	r2, [sp, #4]
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	462b      	mov	r3, r5
 80023ca:	4622      	mov	r2, r4
 80023cc:	4938      	ldr	r1, [pc, #224]	@ (80024b0 <main+0x1d0>)
 80023ce:	482d      	ldr	r0, [pc, #180]	@ (8002484 <main+0x1a4>)
 80023d0:	f003 fd0e 	bl	8005df0 <siprintf>
	 				  gpsData.ggastruct.tim.min, gpsData.ggastruct.tim.sec, gpsData.rmcstruct.date.Day, \
	 				  gpsData.rmcstruct.date.Mon, gpsData.rmcstruct.date.Yr);
	 		  printf("%s\n",lcdBuffer);
 80023d4:	482b      	ldr	r0, [pc, #172]	@ (8002484 <main+0x1a4>)
 80023d6:	f003 fd03 	bl	8005de0 <puts>
	 		  memset(lcdBuffer, '\0', 50);
 80023da:	2232      	movs	r2, #50	@ 0x32
 80023dc:	2100      	movs	r1, #0
 80023de:	4829      	ldr	r0, [pc, #164]	@ (8002484 <main+0x1a4>)
 80023e0:	f003 fdfe 	bl	8005fe0 <memset>

	 		  sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 80023e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002498 <main+0x1b8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe f8d5 	bl	8000598 <__aeabi_f2d>
 80023ee:	4604      	mov	r4, r0
 80023f0:	460d      	mov	r5, r1
 80023f2:	4b29      	ldr	r3, [pc, #164]	@ (8002498 <main+0x1b8>)
 80023f4:	791b      	ldrb	r3, [r3, #4]
 80023f6:	461e      	mov	r6, r3
	 				  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 80023f8:	4b27      	ldr	r3, [pc, #156]	@ (8002498 <main+0x1b8>)
 80023fa:	689b      	ldr	r3, [r3, #8]
	 		  sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe f8cb 	bl	8000598 <__aeabi_f2d>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
	 				  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 8002406:	4924      	ldr	r1, [pc, #144]	@ (8002498 <main+0x1b8>)
 8002408:	7b09      	ldrb	r1, [r1, #12]
	 		  sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 800240a:	9104      	str	r1, [sp, #16]
 800240c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002410:	9600      	str	r6, [sp, #0]
 8002412:	4622      	mov	r2, r4
 8002414:	462b      	mov	r3, r5
 8002416:	4927      	ldr	r1, [pc, #156]	@ (80024b4 <main+0x1d4>)
 8002418:	481a      	ldr	r0, [pc, #104]	@ (8002484 <main+0x1a4>)
 800241a:	f003 fce9 	bl	8005df0 <siprintf>
	 		 printf("%s\n",lcdBuffer);
 800241e:	4819      	ldr	r0, [pc, #100]	@ (8002484 <main+0x1a4>)
 8002420:	f003 fcde 	bl	8005de0 <puts>
 8002424:	e017      	b.n	8002456 <main+0x176>
	 	  }
	  else if ((flagGGA == 1) | (flagRMC == 1))
 8002426:	4b1d      	ldr	r3, [pc, #116]	@ (800249c <main+0x1bc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b01      	cmp	r3, #1
 800242c:	bf0c      	ite	eq
 800242e:	2301      	moveq	r3, #1
 8002430:	2300      	movne	r3, #0
 8002432:	b2da      	uxtb	r2, r3
 8002434:	4b1d      	ldr	r3, [pc, #116]	@ (80024ac <main+0x1cc>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	bf0c      	ite	eq
 800243c:	2301      	moveq	r3, #1
 800243e:	2300      	movne	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	4313      	orrs	r3, r2
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d005      	beq.n	8002456 <main+0x176>
	  	  {
	  		  // Instead of clearing the display, it's better if we print spaces.
	  		  // This will avoid the "refreshing" part

	  		 printf("   NO FIX YET  \n ");
 800244a:	481b      	ldr	r0, [pc, #108]	@ (80024b8 <main+0x1d8>)
 800244c:	f003 fc60 	bl	8005d10 <iprintf>

	  		  printf("   Please wait  \n");
 8002450:	481a      	ldr	r0, [pc, #104]	@ (80024bc <main+0x1dc>)
 8002452:	f003 fcc5 	bl	8005de0 <puts>
	  	  }
	  if (VCCTimeout <= 0)
 8002456:	4b0d      	ldr	r3, [pc, #52]	@ (800248c <main+0x1ac>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f73f af53 	bgt.w	8002306 <main+0x26>
	 	  {
	 		  VCCTimeout = 5000;  // Reset the timeout
 8002460:	4b0a      	ldr	r3, [pc, #40]	@ (800248c <main+0x1ac>)
 8002462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002466:	601a      	str	r2, [r3, #0]

	 		  //reset flags
	 		  flagGGA =flagRMC =0;
 8002468:	4b10      	ldr	r3, [pc, #64]	@ (80024ac <main+0x1cc>)
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	4b0f      	ldr	r3, [pc, #60]	@ (80024ac <main+0x1cc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a0a      	ldr	r2, [pc, #40]	@ (800249c <main+0x1bc>)
 8002474:	6013      	str	r3, [r2, #0]

	 		  // You are here means the VCC is less, or maybe there is some connection issue
	 		  // Check the VCC, also you can try connecting to the external 5V


	 		  printf("    VCC Issue   \n");
 8002476:	4812      	ldr	r0, [pc, #72]	@ (80024c0 <main+0x1e0>)
 8002478:	f003 fcb2 	bl	8005de0 <puts>

	 		  printf("Check Connection\n");
 800247c:	4811      	ldr	r0, [pc, #68]	@ (80024c4 <main+0x1e4>)
 800247e:	f003 fcaf 	bl	8005de0 <puts>
	  HAL_Delay (500);
 8002482:	e740      	b.n	8002306 <main+0x26>
 8002484:	20000004 	.word	0x20000004
 8002488:	0800a450 	.word	0x0800a450
 800248c:	20000038 	.word	0x20000038
 8002490:	20000258 	.word	0x20000258
 8002494:	0800a454 	.word	0x0800a454
 8002498:	20000320 	.word	0x20000320
 800249c:	20000364 	.word	0x20000364
 80024a0:	0800a458 	.word	0x0800a458
 80024a4:	200002bc 	.word	0x200002bc
 80024a8:	2000034c 	.word	0x2000034c
 80024ac:	20000368 	.word	0x20000368
 80024b0:	0800a45c 	.word	0x0800a45c
 80024b4:	0800a47c 	.word	0x0800a47c
 80024b8:	0800a490 	.word	0x0800a490
 80024bc:	0800a4a4 	.word	0x0800a4a4
 80024c0:	0800a4b8 	.word	0x0800a4b8
 80024c4:	0800a4cc 	.word	0x0800a4cc

080024c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b094      	sub	sp, #80	@ 0x50
 80024cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ce:	f107 031c 	add.w	r3, r7, #28
 80024d2:	2234      	movs	r2, #52	@ 0x34
 80024d4:	2100      	movs	r1, #0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f003 fd82 	bl	8005fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024dc:	f107 0308 	add.w	r3, r7, #8
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ec:	2300      	movs	r3, #0
 80024ee:	607b      	str	r3, [r7, #4]
 80024f0:	4b22      	ldr	r3, [pc, #136]	@ (800257c <SystemClock_Config+0xb4>)
 80024f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f4:	4a21      	ldr	r2, [pc, #132]	@ (800257c <SystemClock_Config+0xb4>)
 80024f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80024fc:	4b1f      	ldr	r3, [pc, #124]	@ (800257c <SystemClock_Config+0xb4>)
 80024fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002500:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002504:	607b      	str	r3, [r7, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002508:	2300      	movs	r3, #0
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	4b1c      	ldr	r3, [pc, #112]	@ (8002580 <SystemClock_Config+0xb8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1b      	ldr	r2, [pc, #108]	@ (8002580 <SystemClock_Config+0xb8>)
 8002512:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	4b19      	ldr	r3, [pc, #100]	@ (8002580 <SystemClock_Config+0xb8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002520:	603b      	str	r3, [r7, #0]
 8002522:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002524:	2302      	movs	r3, #2
 8002526:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002528:	2301      	movs	r3, #1
 800252a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800252c:	2310      	movs	r3, #16
 800252e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002530:	2300      	movs	r3, #0
 8002532:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002534:	f107 031c 	add.w	r3, r7, #28
 8002538:	4618      	mov	r0, r3
 800253a:	f001 fa7f 	bl	8003a3c <HAL_RCC_OscConfig>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002544:	f000 f81e 	bl	8002584 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002548:	230f      	movs	r3, #15
 800254a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002550:	2300      	movs	r3, #0
 8002552:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002558:	2300      	movs	r3, #0
 800255a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800255c:	f107 0308 	add.w	r3, r7, #8
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f001 f88a 	bl	800367c <HAL_RCC_ClockConfig>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800256e:	f000 f809 	bl	8002584 <Error_Handler>
  }
}
 8002572:	bf00      	nop
 8002574:	3750      	adds	r7, #80	@ 0x50
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800
 8002580:	40007000 	.word	0x40007000

08002584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002588:	b672      	cpsid	i
}
 800258a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800258c:	bf00      	nop
 800258e:	e7fd      	b.n	800258c <Error_Handler+0x8>

08002590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	607b      	str	r3, [r7, #4]
 800259a:	4b10      	ldr	r3, [pc, #64]	@ (80025dc <HAL_MspInit+0x4c>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259e:	4a0f      	ldr	r2, [pc, #60]	@ (80025dc <HAL_MspInit+0x4c>)
 80025a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025a6:	4b0d      	ldr	r3, [pc, #52]	@ (80025dc <HAL_MspInit+0x4c>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	603b      	str	r3, [r7, #0]
 80025b6:	4b09      	ldr	r3, [pc, #36]	@ (80025dc <HAL_MspInit+0x4c>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ba:	4a08      	ldr	r2, [pc, #32]	@ (80025dc <HAL_MspInit+0x4c>)
 80025bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025c2:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <HAL_MspInit+0x4c>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800

080025e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025e4:	bf00      	nop
 80025e6:	e7fd      	b.n	80025e4 <NMI_Handler+0x4>

080025e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ec:	bf00      	nop
 80025ee:	e7fd      	b.n	80025ec <HardFault_Handler+0x4>

080025f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f4:	bf00      	nop
 80025f6:	e7fd      	b.n	80025f4 <MemManage_Handler+0x4>

080025f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025fc:	bf00      	nop
 80025fe:	e7fd      	b.n	80025fc <BusFault_Handler+0x4>

08002600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002604:	bf00      	nop
 8002606:	e7fd      	b.n	8002604 <UsageFault_Handler+0x4>

08002608 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002636:	f000 fc8b 	bl	8002f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	//Uart_isr(&huart6);
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002644:	4802      	ldr	r0, [pc, #8]	@ (8002650 <USART6_IRQHandler+0x10>)
 8002646:	f001 fccd 	bl	8003fe4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200007d4 	.word	0x200007d4

08002654 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */
Uart_isr(&huart7);
 8002658:	4802      	ldr	r0, [pc, #8]	@ (8002664 <UART7_IRQHandler+0x10>)
 800265a:	f000 fabd 	bl	8002bd8 <Uart_isr>
  /* USER CODE END UART7_IRQn 0 */
//  HAL_UART_IRQHandler(&huart7);
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	2000078c 	.word	0x2000078c

08002668 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8002672:	4b0f      	ldr	r3, [pc, #60]	@ (80026b0 <ITM_SendChar+0x48>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a0e      	ldr	r2, [pc, #56]	@ (80026b0 <ITM_SendChar+0x48>)
 8002678:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800267c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800267e:	4b0d      	ldr	r3, [pc, #52]	@ (80026b4 <ITM_SendChar+0x4c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a0c      	ldr	r2, [pc, #48]	@ (80026b4 <ITM_SendChar+0x4c>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800268a:	bf00      	nop
 800268c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0f8      	beq.n	800268c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800269a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	6013      	str	r3, [r2, #0]
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000edfc 	.word	0xe000edfc
 80026b4:	e0000e00 	.word	0xe0000e00

080026b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return 1;
 80026bc:	2301      	movs	r3, #1
}
 80026be:	4618      	mov	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <_kill>:

int _kill(int pid, int sig)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026d2:	f003 fcd7 	bl	8006084 <__errno>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2216      	movs	r2, #22
 80026da:	601a      	str	r2, [r3, #0]
  return -1;
 80026dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <_exit>:

void _exit (int status)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026f0:	f04f 31ff 	mov.w	r1, #4294967295
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff ffe7 	bl	80026c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026fa:	bf00      	nop
 80026fc:	e7fd      	b.n	80026fa <_exit+0x12>

080026fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b086      	sub	sp, #24
 8002702:	af00      	add	r7, sp, #0
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	e00a      	b.n	8002726 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002710:	f3af 8000 	nop.w
 8002714:	4601      	mov	r1, r0
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	60ba      	str	r2, [r7, #8]
 800271c:	b2ca      	uxtb	r2, r1
 800271e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	3301      	adds	r3, #1
 8002724:	617b      	str	r3, [r7, #20]
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	429a      	cmp	r2, r3
 800272c:	dbf0      	blt.n	8002710 <_read+0x12>
  }

  return len;
 800272e:	687b      	ldr	r3, [r7, #4]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	e009      	b.n	800275e <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	60ba      	str	r2, [r7, #8]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff ff88 	bl	8002668 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	3301      	adds	r3, #1
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	429a      	cmp	r2, r3
 8002764:	dbf1      	blt.n	800274a <_write+0x12>
  }
  return len;
 8002766:	687b      	ldr	r3, [r7, #4]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <_close>:

int _close(int file)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002778:	f04f 33ff 	mov.w	r3, #4294967295
}
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002798:	605a      	str	r2, [r3, #4]
  return 0;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <_isatty>:

int _isatty(int file)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027b0:	2301      	movs	r3, #1
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027be:	b480      	push	{r7}
 80027c0:	b085      	sub	sp, #20
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027e0:	4a14      	ldr	r2, [pc, #80]	@ (8002834 <_sbrk+0x5c>)
 80027e2:	4b15      	ldr	r3, [pc, #84]	@ (8002838 <_sbrk+0x60>)
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027ec:	4b13      	ldr	r3, [pc, #76]	@ (800283c <_sbrk+0x64>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d102      	bne.n	80027fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027f4:	4b11      	ldr	r3, [pc, #68]	@ (800283c <_sbrk+0x64>)
 80027f6:	4a12      	ldr	r2, [pc, #72]	@ (8002840 <_sbrk+0x68>)
 80027f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027fa:	4b10      	ldr	r3, [pc, #64]	@ (800283c <_sbrk+0x64>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	429a      	cmp	r2, r3
 8002806:	d207      	bcs.n	8002818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002808:	f003 fc3c 	bl	8006084 <__errno>
 800280c:	4603      	mov	r3, r0
 800280e:	220c      	movs	r2, #12
 8002810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
 8002816:	e009      	b.n	800282c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002818:	4b08      	ldr	r3, [pc, #32]	@ (800283c <_sbrk+0x64>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800281e:	4b07      	ldr	r3, [pc, #28]	@ (800283c <_sbrk+0x64>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4413      	add	r3, r2
 8002826:	4a05      	ldr	r2, [pc, #20]	@ (800283c <_sbrk+0x64>)
 8002828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800282a:	68fb      	ldr	r3, [r7, #12]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20050000 	.word	0x20050000
 8002838:	00000400 	.word	0x00000400
 800283c:	2000036c 	.word	0x2000036c
 8002840:	20000970 	.word	0x20000970

08002844 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002848:	4b06      	ldr	r3, [pc, #24]	@ (8002864 <SystemInit+0x20>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284e:	4a05      	ldr	r2, [pc, #20]	@ (8002864 <SystemInit+0x20>)
 8002850:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002854:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 800286c:	4b0d      	ldr	r3, [pc, #52]	@ (80028a4 <Ringbuf_init+0x3c>)
 800286e:	4a0e      	ldr	r2, [pc, #56]	@ (80028a8 <Ringbuf_init+0x40>)
 8002870:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8002872:	4b0e      	ldr	r3, [pc, #56]	@ (80028ac <Ringbuf_init+0x44>)
 8002874:	4a0e      	ldr	r2, [pc, #56]	@ (80028b0 <Ringbuf_init+0x48>)
 8002876:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8002878:	4b0e      	ldr	r3, [pc, #56]	@ (80028b4 <Ringbuf_init+0x4c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	4b0d      	ldr	r3, [pc, #52]	@ (80028b4 <Ringbuf_init+0x4c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0201 	orr.w	r2, r2, #1
 8002886:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8002888:	4b0a      	ldr	r3, [pc, #40]	@ (80028b4 <Ringbuf_init+0x4c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	4b09      	ldr	r3, [pc, #36]	@ (80028b4 <Ringbuf_init+0x4c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0220 	orr.w	r2, r2, #32
 8002896:	60da      	str	r2, [r3, #12]
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	20000784 	.word	0x20000784
 80028a8:	20000374 	.word	0x20000374
 80028ac:	20000788 	.word	0x20000788
 80028b0:	2000057c 	.word	0x2000057c
 80028b4:	2000078c 	.word	0x2000078c

080028b8 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80028ca:	3301      	adds	r3, #1
 80028cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028d0:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d009      	beq.n	80028f2 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	79f9      	ldrb	r1, [r7, #7]
 80028e8:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  }
}
 80028f2:	bf00      	nop
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8002906:	4b13      	ldr	r3, [pc, #76]	@ (8002954 <Uart_read+0x54>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800290e:	4b11      	ldr	r3, [pc, #68]	@ (8002954 <Uart_read+0x54>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002916:	429a      	cmp	r2, r3
 8002918:	d102      	bne.n	8002920 <Uart_read+0x20>
  {
    return -1;
 800291a:	f04f 33ff 	mov.w	r3, #4294967295
 800291e:	e013      	b.n	8002948 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8002920:	4b0c      	ldr	r3, [pc, #48]	@ (8002954 <Uart_read+0x54>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4b0b      	ldr	r3, [pc, #44]	@ (8002954 <Uart_read+0x54>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800292c:	5cd3      	ldrb	r3, [r2, r3]
 800292e:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002930:	4b08      	ldr	r3, [pc, #32]	@ (8002954 <Uart_read+0x54>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	4b06      	ldr	r3, [pc, #24]	@ (8002954 <Uart_read+0x54>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002942:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    return c;
 8002946:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	20000784 	.word	0x20000784

08002958 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 800295c:	4b0a      	ldr	r3, [pc, #40]	@ (8002988 <IsDataAvailable+0x30>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002964:	b29a      	uxth	r2, r3
 8002966:	4b08      	ldr	r3, [pc, #32]	@ (8002988 <IsDataAvailable+0x30>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800296e:	b29b      	uxth	r3, r3
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	b29b      	uxth	r3, r3
 8002974:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002978:	b29b      	uxth	r3, r3
 800297a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800297e:	4618      	mov	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	20000784 	.word	0x20000784

0800298c <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8002990:	4b0c      	ldr	r3, [pc, #48]	@ (80029c4 <Uart_peek+0x38>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002998:	4b0a      	ldr	r3, [pc, #40]	@ (80029c4 <Uart_peek+0x38>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d102      	bne.n	80029aa <Uart_peek+0x1e>
  {
    return -1;
 80029a4:	f04f 33ff 	mov.w	r3, #4294967295
 80029a8:	e006      	b.n	80029b8 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 80029aa:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <Uart_peek+0x38>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	4b05      	ldr	r3, [pc, #20]	@ (80029c4 <Uart_peek+0x38>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80029b6:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000784 	.word	0x20000784

080029c8 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
	int so_far =0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fd fc72 	bl	80002c0 <strlen>
 80029dc:	4603      	mov	r3, r0
 80029de:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 80029e4:	e01e      	b.n	8002a24 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 80029e6:	4b36      	ldr	r3, [pc, #216]	@ (8002ac0 <Copy_upto+0xf8>)
 80029e8:	6819      	ldr	r1, [r3, #0]
 80029ea:	4b35      	ldr	r3, [pc, #212]	@ (8002ac0 <Copy_upto+0xf8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	6838      	ldr	r0, [r7, #0]
 80029f6:	4403      	add	r3, r0
 80029f8:	5c8a      	ldrb	r2, [r1, r2]
 80029fa:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80029fc:	4b30      	ldr	r3, [pc, #192]	@ (8002ac0 <Copy_upto+0xf8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac0 <Copy_upto+0xf8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a0e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
			indx++;
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	3301      	adds	r3, #1
 8002a16:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8002a18:	bf00      	nop
 8002a1a:	f7ff ff9d 	bl	8002958 <IsDataAvailable>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0fa      	beq.n	8002a1a <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8002a24:	f7ff ffb2 	bl	800298c <Uart_peek>
 8002a28:	4601      	mov	r1, r0
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	4413      	add	r3, r2
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	4299      	cmp	r1, r3
 8002a34:	d1d7      	bne.n	80029e6 <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8002a36:	e027      	b.n	8002a88 <Copy_upto+0xc0>
	{
		so_far++;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8002a3e:	f7ff ff5f 	bl	8002900 <Uart_read>
 8002a42:	4601      	mov	r1, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	613a      	str	r2, [r7, #16]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4413      	add	r3, r2
 8002a50:	b2ca      	uxtb	r2, r1
 8002a52:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d101      	bne.n	8002a60 <Copy_upto+0x98>
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e02a      	b.n	8002ab6 <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8002a60:	4b18      	ldr	r3, [pc, #96]	@ (8002ac4 <Copy_upto+0xfc>)
 8002a62:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002a66:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8002a68:	bf00      	nop
 8002a6a:	f7ff ff75 	bl	8002958 <IsDataAvailable>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d103      	bne.n	8002a7c <Copy_upto+0xb4>
 8002a74:	4b13      	ldr	r3, [pc, #76]	@ (8002ac4 <Copy_upto+0xfc>)
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1f6      	bne.n	8002a6a <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8002a7c:	4b11      	ldr	r3, [pc, #68]	@ (8002ac4 <Copy_upto+0xfc>)
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <Copy_upto+0xc0>
 8002a84:	2300      	movs	r3, #0
 8002a86:	e016      	b.n	8002ab6 <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8002a88:	f7ff ff80 	bl	800298c <Uart_peek>
 8002a8c:	4601      	mov	r1, r0
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	4299      	cmp	r1, r3
 8002a98:	d0ce      	beq.n	8002a38 <Copy_upto+0x70>
	}

	if (so_far != len)
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d002      	beq.n	8002aa8 <Copy_upto+0xe0>
	{
		so_far = 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
		goto again;
 8002aa6:	e79d      	b.n	80029e4 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d101      	bne.n	8002ab4 <Copy_upto+0xec>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <Copy_upto+0xee>
	else return 0;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000784 	.word	0x20000784
 8002ac4:	20000370 	.word	0x20000370

08002ac8 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7fd fbf3 	bl	80002c0 <strlen>
 8002ada:	4603      	mov	r3, r0
 8002adc:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8002ade:	4b3c      	ldr	r3, [pc, #240]	@ (8002bd0 <Wait_for+0x108>)
 8002ae0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002ae4:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8002ae6:	bf00      	nop
 8002ae8:	f7ff ff36 	bl	8002958 <IsDataAvailable>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d103      	bne.n	8002afa <Wait_for+0x32>
 8002af2:	4b37      	ldr	r3, [pc, #220]	@ (8002bd0 <Wait_for+0x108>)
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f6      	bne.n	8002ae8 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8002afa:	4b35      	ldr	r3, [pc, #212]	@ (8002bd0 <Wait_for+0x108>)
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d119      	bne.n	8002b36 <Wait_for+0x6e>
 8002b02:	2300      	movs	r3, #0
 8002b04:	e060      	b.n	8002bc8 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8002b06:	4b33      	ldr	r3, [pc, #204]	@ (8002bd4 <Wait_for+0x10c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002b0e:	4b31      	ldr	r3, [pc, #196]	@ (8002bd4 <Wait_for+0x10c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d00b      	beq.n	8002b32 <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002b1a:	4b2e      	ldr	r3, [pc, #184]	@ (8002bd4 <Wait_for+0x10c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd4 <Wait_for+0x10c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b2c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002b30:	e001      	b.n	8002b36 <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	e048      	b.n	8002bc8 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8002b36:	f7ff ff29 	bl	800298c <Uart_peek>
 8002b3a:	4601      	mov	r1, r0
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	4413      	add	r3, r2
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	4299      	cmp	r1, r3
 8002b46:	d1de      	bne.n	8002b06 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002b48:	e027      	b.n	8002b9a <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002b50:	4b20      	ldr	r3, [pc, #128]	@ (8002bd4 <Wait_for+0x10c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8002bd4 <Wait_for+0x10c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b62:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		if (so_far == len) return 1;
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d101      	bne.n	8002b72 <Wait_for+0xaa>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e02a      	b.n	8002bc8 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8002b72:	4b17      	ldr	r3, [pc, #92]	@ (8002bd0 <Wait_for+0x108>)
 8002b74:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002b78:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8002b7a:	bf00      	nop
 8002b7c:	f7ff feec 	bl	8002958 <IsDataAvailable>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d103      	bne.n	8002b8e <Wait_for+0xc6>
 8002b86:	4b12      	ldr	r3, [pc, #72]	@ (8002bd0 <Wait_for+0x108>)
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f6      	bne.n	8002b7c <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8002b8e:	4b10      	ldr	r3, [pc, #64]	@ (8002bd0 <Wait_for+0x108>)
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <Wait_for+0xd2>
 8002b96:	2300      	movs	r3, #0
 8002b98:	e016      	b.n	8002bc8 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002b9a:	f7ff fef7 	bl	800298c <Uart_peek>
 8002b9e:	4601      	mov	r1, r0
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	4299      	cmp	r1, r3
 8002baa:	d0ce      	beq.n	8002b4a <Wait_for+0x82>
	}

	if (so_far != len)
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d002      	beq.n	8002bba <Wait_for+0xf2>
	{
		so_far = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60fb      	str	r3, [r7, #12]
		goto again;
 8002bb8:	e791      	b.n	8002ade <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d101      	bne.n	8002bc6 <Wait_for+0xfe>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <Wait_for+0x100>
	else return 0;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	20000370 	.word	0x20000370
 8002bd4:	20000784 	.word	0x20000784

08002bd8 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d013      	beq.n	8002c22 <Uart_isr+0x4a>
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00e      	beq.n	8002c22 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8002c12:	4b1e      	ldr	r3, [pc, #120]	@ (8002c8c <Uart_isr+0xb4>)
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fe4c 	bl	80028b8 <store_char>
        return;
 8002c20:	e031      	b.n	8002c86 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d02c      	beq.n	8002c86 <Uart_isr+0xae>
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d027      	beq.n	8002c86 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8002c36:	4b16      	ldr	r3, [pc, #88]	@ (8002c90 <Uart_isr+0xb8>)
 8002c38:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002c3c:	4b14      	ldr	r3, [pc, #80]	@ (8002c90 <Uart_isr+0xb8>)
 8002c3e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d108      	bne.n	8002c58 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c54:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8002c56:	e015      	b.n	8002c84 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8002c58:	4b0d      	ldr	r3, [pc, #52]	@ (8002c90 <Uart_isr+0xb8>)
 8002c5a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8002c90 <Uart_isr+0xb8>)
 8002c60:	5cd3      	ldrb	r3, [r2, r3]
 8002c62:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8002c64:	4b0a      	ldr	r3, [pc, #40]	@ (8002c90 <Uart_isr+0xb8>)
 8002c66:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c70:	4a07      	ldr	r2, [pc, #28]	@ (8002c90 <Uart_isr+0xb8>)
 8002c72:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    	      huart->Instance->SR;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	7bba      	ldrb	r2, [r7, #14]
 8002c82:	605a      	str	r2, [r3, #4]
    	return;
 8002c84:	bf00      	nop
    }
}
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	20000784 	.word	0x20000784
 8002c90:	2000057c 	.word	0x2000057c

08002c94 <MX_UART7_Init>:
UART_HandleTypeDef huart7;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002c98:	4b11      	ldr	r3, [pc, #68]	@ (8002ce0 <MX_UART7_Init+0x4c>)
 8002c9a:	4a12      	ldr	r2, [pc, #72]	@ (8002ce4 <MX_UART7_Init+0x50>)
 8002c9c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8002c9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ce0 <MX_UART7_Init+0x4c>)
 8002ca0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002ca4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce0 <MX_UART7_Init+0x4c>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002cac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce0 <MX_UART7_Init+0x4c>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce0 <MX_UART7_Init+0x4c>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002cb8:	4b09      	ldr	r3, [pc, #36]	@ (8002ce0 <MX_UART7_Init+0x4c>)
 8002cba:	220c      	movs	r2, #12
 8002cbc:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cbe:	4b08      	ldr	r3, [pc, #32]	@ (8002ce0 <MX_UART7_Init+0x4c>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cc4:	4b06      	ldr	r3, [pc, #24]	@ (8002ce0 <MX_UART7_Init+0x4c>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002cca:	4805      	ldr	r0, [pc, #20]	@ (8002ce0 <MX_UART7_Init+0x4c>)
 8002ccc:	f001 f93a 	bl	8003f44 <HAL_UART_Init>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8002cd6:	f7ff fc55 	bl	8002584 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	2000078c 	.word	0x2000078c
 8002ce4:	40007800 	.word	0x40007800

08002ce8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002cec:	4b11      	ldr	r3, [pc, #68]	@ (8002d34 <MX_USART6_UART_Init+0x4c>)
 8002cee:	4a12      	ldr	r2, [pc, #72]	@ (8002d38 <MX_USART6_UART_Init+0x50>)
 8002cf0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002cf2:	4b10      	ldr	r3, [pc, #64]	@ (8002d34 <MX_USART6_UART_Init+0x4c>)
 8002cf4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002cf8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8002d34 <MX_USART6_UART_Init+0x4c>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002d00:	4b0c      	ldr	r3, [pc, #48]	@ (8002d34 <MX_USART6_UART_Init+0x4c>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002d06:	4b0b      	ldr	r3, [pc, #44]	@ (8002d34 <MX_USART6_UART_Init+0x4c>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002d0c:	4b09      	ldr	r3, [pc, #36]	@ (8002d34 <MX_USART6_UART_Init+0x4c>)
 8002d0e:	220c      	movs	r2, #12
 8002d10:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d12:	4b08      	ldr	r3, [pc, #32]	@ (8002d34 <MX_USART6_UART_Init+0x4c>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d18:	4b06      	ldr	r3, [pc, #24]	@ (8002d34 <MX_USART6_UART_Init+0x4c>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002d1e:	4805      	ldr	r0, [pc, #20]	@ (8002d34 <MX_USART6_UART_Init+0x4c>)
 8002d20:	f001 f910 	bl	8003f44 <HAL_UART_Init>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002d2a:	f7ff fc2b 	bl	8002584 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	200007d4 	.word	0x200007d4
 8002d38:	40011400 	.word	0x40011400

08002d3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08c      	sub	sp, #48	@ 0x30
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d44:	f107 031c 	add.w	r3, r7, #28
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	60da      	str	r2, [r3, #12]
 8002d52:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a3a      	ldr	r2, [pc, #232]	@ (8002e44 <HAL_UART_MspInit+0x108>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d134      	bne.n	8002dc8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61bb      	str	r3, [r7, #24]
 8002d62:	4b39      	ldr	r3, [pc, #228]	@ (8002e48 <HAL_UART_MspInit+0x10c>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d66:	4a38      	ldr	r2, [pc, #224]	@ (8002e48 <HAL_UART_MspInit+0x10c>)
 8002d68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d6e:	4b36      	ldr	r3, [pc, #216]	@ (8002e48 <HAL_UART_MspInit+0x10c>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002d76:	61bb      	str	r3, [r7, #24]
 8002d78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	4b32      	ldr	r3, [pc, #200]	@ (8002e48 <HAL_UART_MspInit+0x10c>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d82:	4a31      	ldr	r2, [pc, #196]	@ (8002e48 <HAL_UART_MspInit+0x10c>)
 8002d84:	f043 0320 	orr.w	r3, r3, #32
 8002d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8002e48 <HAL_UART_MspInit+0x10c>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8002d96:	23c0      	movs	r3, #192	@ 0xc0
 8002d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da2:	2303      	movs	r3, #3
 8002da4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002da6:	2308      	movs	r3, #8
 8002da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002daa:	f107 031c 	add.w	r3, r7, #28
 8002dae:	4619      	mov	r1, r3
 8002db0:	4826      	ldr	r0, [pc, #152]	@ (8002e4c <HAL_UART_MspInit+0x110>)
 8002db2:	f000 fab5 	bl	8003320 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8002db6:	2200      	movs	r2, #0
 8002db8:	2100      	movs	r1, #0
 8002dba:	2052      	movs	r0, #82	@ 0x52
 8002dbc:	f000 f9e7 	bl	800318e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002dc0:	2052      	movs	r0, #82	@ 0x52
 8002dc2:	f000 fa00 	bl	80031c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002dc6:	e039      	b.n	8002e3c <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART6)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a20      	ldr	r2, [pc, #128]	@ (8002e50 <HAL_UART_MspInit+0x114>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d134      	bne.n	8002e3c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8002e48 <HAL_UART_MspInit+0x10c>)
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dda:	4a1b      	ldr	r2, [pc, #108]	@ (8002e48 <HAL_UART_MspInit+0x10c>)
 8002ddc:	f043 0320 	orr.w	r3, r3, #32
 8002de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002de2:	4b19      	ldr	r3, [pc, #100]	@ (8002e48 <HAL_UART_MspInit+0x10c>)
 8002de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	4b15      	ldr	r3, [pc, #84]	@ (8002e48 <HAL_UART_MspInit+0x10c>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df6:	4a14      	ldr	r2, [pc, #80]	@ (8002e48 <HAL_UART_MspInit+0x10c>)
 8002df8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dfe:	4b12      	ldr	r3, [pc, #72]	@ (8002e48 <HAL_UART_MspInit+0x10c>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8002e0a:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8002e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e10:	2302      	movs	r3, #2
 8002e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002e1c:	2308      	movs	r3, #8
 8002e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e20:	f107 031c 	add.w	r3, r7, #28
 8002e24:	4619      	mov	r1, r3
 8002e26:	480b      	ldr	r0, [pc, #44]	@ (8002e54 <HAL_UART_MspInit+0x118>)
 8002e28:	f000 fa7a 	bl	8003320 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2100      	movs	r1, #0
 8002e30:	2047      	movs	r0, #71	@ 0x47
 8002e32:	f000 f9ac 	bl	800318e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002e36:	2047      	movs	r0, #71	@ 0x47
 8002e38:	f000 f9c5 	bl	80031c6 <HAL_NVIC_EnableIRQ>
}
 8002e3c:	bf00      	nop
 8002e3e:	3730      	adds	r7, #48	@ 0x30
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40007800 	.word	0x40007800
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	40021400 	.word	0x40021400
 8002e50:	40011400 	.word	0x40011400
 8002e54:	40021800 	.word	0x40021800

08002e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002e58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002e5c:	f7ff fcf2 	bl	8002844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e60:	480c      	ldr	r0, [pc, #48]	@ (8002e94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e62:	490d      	ldr	r1, [pc, #52]	@ (8002e98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e64:	4a0d      	ldr	r2, [pc, #52]	@ (8002e9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e68:	e002      	b.n	8002e70 <LoopCopyDataInit>

08002e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e6e:	3304      	adds	r3, #4

08002e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e74:	d3f9      	bcc.n	8002e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e76:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e78:	4c0a      	ldr	r4, [pc, #40]	@ (8002ea4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e7c:	e001      	b.n	8002e82 <LoopFillZerobss>

08002e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e80:	3204      	adds	r2, #4

08002e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e84:	d3fb      	bcc.n	8002e7e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002e86:	f003 f903 	bl	8006090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e8a:	f7ff fa29 	bl	80022e0 <main>
  bx  lr    
 8002e8e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002e90:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e98:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8002e9c:	0800a968 	.word	0x0800a968
  ldr r2, =_sbss
 8002ea0:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8002ea4:	2000096c 	.word	0x2000096c

08002ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ea8:	e7fe      	b.n	8002ea8 <ADC_IRQHandler>
	...

08002eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8002eec <HAL_Init+0x40>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8002eec <HAL_Init+0x40>)
 8002eb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8002eec <HAL_Init+0x40>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8002eec <HAL_Init+0x40>)
 8002ec2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ec8:	4b08      	ldr	r3, [pc, #32]	@ (8002eec <HAL_Init+0x40>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a07      	ldr	r2, [pc, #28]	@ (8002eec <HAL_Init+0x40>)
 8002ece:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ed4:	2003      	movs	r0, #3
 8002ed6:	f000 f94f 	bl	8003178 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eda:	2000      	movs	r0, #0
 8002edc:	f000 f808 	bl	8002ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ee0:	f7ff fb56 	bl	8002590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40023c00 	.word	0x40023c00

08002ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ef8:	4b12      	ldr	r3, [pc, #72]	@ (8002f44 <HAL_InitTick+0x54>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4b12      	ldr	r3, [pc, #72]	@ (8002f48 <HAL_InitTick+0x58>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	4619      	mov	r1, r3
 8002f02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 f967 	bl	80031e2 <HAL_SYSTICK_Config>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e00e      	b.n	8002f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b0f      	cmp	r3, #15
 8002f22:	d80a      	bhi.n	8002f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f24:	2200      	movs	r2, #0
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	f04f 30ff 	mov.w	r0, #4294967295
 8002f2c:	f000 f92f 	bl	800318e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f30:	4a06      	ldr	r2, [pc, #24]	@ (8002f4c <HAL_InitTick+0x5c>)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	e000      	b.n	8002f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	2000003c 	.word	0x2000003c
 8002f48:	20000044 	.word	0x20000044
 8002f4c:	20000040 	.word	0x20000040

08002f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f54:	4b06      	ldr	r3, [pc, #24]	@ (8002f70 <HAL_IncTick+0x20>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4b06      	ldr	r3, [pc, #24]	@ (8002f74 <HAL_IncTick+0x24>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4413      	add	r3, r2
 8002f60:	4a04      	ldr	r2, [pc, #16]	@ (8002f74 <HAL_IncTick+0x24>)
 8002f62:	6013      	str	r3, [r2, #0]
}
 8002f64:	bf00      	nop
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	20000044 	.word	0x20000044
 8002f74:	2000081c 	.word	0x2000081c

08002f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f7c:	4b03      	ldr	r3, [pc, #12]	@ (8002f8c <HAL_GetTick+0x14>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	2000081c 	.word	0x2000081c

08002f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f98:	f7ff ffee 	bl	8002f78 <HAL_GetTick>
 8002f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa8:	d005      	beq.n	8002fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002faa:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd4 <HAL_Delay+0x44>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fb6:	bf00      	nop
 8002fb8:	f7ff ffde 	bl	8002f78 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d8f7      	bhi.n	8002fb8 <HAL_Delay+0x28>
  {
  }
}
 8002fc8:	bf00      	nop
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000044 	.word	0x20000044

08002fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800301c <__NVIC_SetPriorityGrouping+0x44>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003000:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800300a:	4a04      	ldr	r2, [pc, #16]	@ (800301c <__NVIC_SetPriorityGrouping+0x44>)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	60d3      	str	r3, [r2, #12]
}
 8003010:	bf00      	nop
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003024:	4b04      	ldr	r3, [pc, #16]	@ (8003038 <__NVIC_GetPriorityGrouping+0x18>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	f003 0307 	and.w	r3, r3, #7
}
 800302e:	4618      	mov	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	2b00      	cmp	r3, #0
 800304c:	db0b      	blt.n	8003066 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	f003 021f 	and.w	r2, r3, #31
 8003054:	4907      	ldr	r1, [pc, #28]	@ (8003074 <__NVIC_EnableIRQ+0x38>)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	2001      	movs	r0, #1
 800305e:	fa00 f202 	lsl.w	r2, r0, r2
 8003062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	e000e100 	.word	0xe000e100

08003078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	6039      	str	r1, [r7, #0]
 8003082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003088:	2b00      	cmp	r3, #0
 800308a:	db0a      	blt.n	80030a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	b2da      	uxtb	r2, r3
 8003090:	490c      	ldr	r1, [pc, #48]	@ (80030c4 <__NVIC_SetPriority+0x4c>)
 8003092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003096:	0112      	lsls	r2, r2, #4
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	440b      	add	r3, r1
 800309c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030a0:	e00a      	b.n	80030b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	4908      	ldr	r1, [pc, #32]	@ (80030c8 <__NVIC_SetPriority+0x50>)
 80030a8:	79fb      	ldrb	r3, [r7, #7]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	3b04      	subs	r3, #4
 80030b0:	0112      	lsls	r2, r2, #4
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	440b      	add	r3, r1
 80030b6:	761a      	strb	r2, [r3, #24]
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	e000e100 	.word	0xe000e100
 80030c8:	e000ed00 	.word	0xe000ed00

080030cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b089      	sub	sp, #36	@ 0x24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f1c3 0307 	rsb	r3, r3, #7
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	bf28      	it	cs
 80030ea:	2304      	movcs	r3, #4
 80030ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3304      	adds	r3, #4
 80030f2:	2b06      	cmp	r3, #6
 80030f4:	d902      	bls.n	80030fc <NVIC_EncodePriority+0x30>
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3b03      	subs	r3, #3
 80030fa:	e000      	b.n	80030fe <NVIC_EncodePriority+0x32>
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003100:	f04f 32ff 	mov.w	r2, #4294967295
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	43da      	mvns	r2, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	401a      	ands	r2, r3
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003114:	f04f 31ff 	mov.w	r1, #4294967295
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	fa01 f303 	lsl.w	r3, r1, r3
 800311e:	43d9      	mvns	r1, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003124:	4313      	orrs	r3, r2
         );
}
 8003126:	4618      	mov	r0, r3
 8003128:	3724      	adds	r7, #36	@ 0x24
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
	...

08003134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3b01      	subs	r3, #1
 8003140:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003144:	d301      	bcc.n	800314a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003146:	2301      	movs	r3, #1
 8003148:	e00f      	b.n	800316a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800314a:	4a0a      	ldr	r2, [pc, #40]	@ (8003174 <SysTick_Config+0x40>)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3b01      	subs	r3, #1
 8003150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003152:	210f      	movs	r1, #15
 8003154:	f04f 30ff 	mov.w	r0, #4294967295
 8003158:	f7ff ff8e 	bl	8003078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800315c:	4b05      	ldr	r3, [pc, #20]	@ (8003174 <SysTick_Config+0x40>)
 800315e:	2200      	movs	r2, #0
 8003160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003162:	4b04      	ldr	r3, [pc, #16]	@ (8003174 <SysTick_Config+0x40>)
 8003164:	2207      	movs	r2, #7
 8003166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	e000e010 	.word	0xe000e010

08003178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff ff29 	bl	8002fd8 <__NVIC_SetPriorityGrouping>
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800318e:	b580      	push	{r7, lr}
 8003190:	b086      	sub	sp, #24
 8003192:	af00      	add	r7, sp, #0
 8003194:	4603      	mov	r3, r0
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031a0:	f7ff ff3e 	bl	8003020 <__NVIC_GetPriorityGrouping>
 80031a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	6978      	ldr	r0, [r7, #20]
 80031ac:	f7ff ff8e 	bl	80030cc <NVIC_EncodePriority>
 80031b0:	4602      	mov	r2, r0
 80031b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031b6:	4611      	mov	r1, r2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff ff5d 	bl	8003078 <__NVIC_SetPriority>
}
 80031be:	bf00      	nop
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b082      	sub	sp, #8
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	4603      	mov	r3, r0
 80031ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ff31 	bl	800303c <__NVIC_EnableIRQ>
}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff ffa2 	bl	8003134 <SysTick_Config>
 80031f0:	4603      	mov	r3, r0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003206:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003208:	f7ff feb6 	bl	8002f78 <HAL_GetTick>
 800320c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d008      	beq.n	800322c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2280      	movs	r2, #128	@ 0x80
 800321e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e052      	b.n	80032d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0216 	bic.w	r2, r2, #22
 800323a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695a      	ldr	r2, [r3, #20]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800324a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003250:	2b00      	cmp	r3, #0
 8003252:	d103      	bne.n	800325c <HAL_DMA_Abort+0x62>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003258:	2b00      	cmp	r3, #0
 800325a:	d007      	beq.n	800326c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0208 	bic.w	r2, r2, #8
 800326a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0201 	bic.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800327c:	e013      	b.n	80032a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800327e:	f7ff fe7b 	bl	8002f78 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b05      	cmp	r3, #5
 800328a:	d90c      	bls.n	80032a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2220      	movs	r2, #32
 8003290:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2203      	movs	r2, #3
 8003296:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e015      	b.n	80032d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1e4      	bne.n	800327e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b8:	223f      	movs	r2, #63	@ 0x3f
 80032ba:	409a      	lsls	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d004      	beq.n	80032f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2280      	movs	r2, #128	@ 0x80
 80032f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e00c      	b.n	8003312 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2205      	movs	r2, #5
 80032fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0201 	bic.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003320:	b480      	push	{r7}
 8003322:	b089      	sub	sp, #36	@ 0x24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800332e:	2300      	movs	r3, #0
 8003330:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003332:	2300      	movs	r3, #0
 8003334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	e165      	b.n	8003608 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800333c:	2201      	movs	r2, #1
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4013      	ands	r3, r2
 800334e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	429a      	cmp	r2, r3
 8003356:	f040 8154 	bne.w	8003602 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	2b01      	cmp	r3, #1
 8003364:	d005      	beq.n	8003372 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800336e:	2b02      	cmp	r3, #2
 8003370:	d130      	bne.n	80033d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	2203      	movs	r2, #3
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43db      	mvns	r3, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4013      	ands	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033a8:	2201      	movs	r2, #1
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4013      	ands	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f003 0201 	and.w	r2, r3, #1
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	2b03      	cmp	r3, #3
 80033de:	d017      	beq.n	8003410 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	2203      	movs	r2, #3
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d123      	bne.n	8003464 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	08da      	lsrs	r2, r3, #3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3208      	adds	r2, #8
 8003424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003428:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	220f      	movs	r2, #15
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	08da      	lsrs	r2, r3, #3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3208      	adds	r2, #8
 800345e:	69b9      	ldr	r1, [r7, #24]
 8003460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	2203      	movs	r2, #3
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 0203 	and.w	r2, r3, #3
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4313      	orrs	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 80ae 	beq.w	8003602 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	4b5d      	ldr	r3, [pc, #372]	@ (8003620 <HAL_GPIO_Init+0x300>)
 80034ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ae:	4a5c      	ldr	r2, [pc, #368]	@ (8003620 <HAL_GPIO_Init+0x300>)
 80034b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80034b6:	4b5a      	ldr	r3, [pc, #360]	@ (8003620 <HAL_GPIO_Init+0x300>)
 80034b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034c2:	4a58      	ldr	r2, [pc, #352]	@ (8003624 <HAL_GPIO_Init+0x304>)
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	089b      	lsrs	r3, r3, #2
 80034c8:	3302      	adds	r3, #2
 80034ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	220f      	movs	r2, #15
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43db      	mvns	r3, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4013      	ands	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a4f      	ldr	r2, [pc, #316]	@ (8003628 <HAL_GPIO_Init+0x308>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d025      	beq.n	800353a <HAL_GPIO_Init+0x21a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a4e      	ldr	r2, [pc, #312]	@ (800362c <HAL_GPIO_Init+0x30c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d01f      	beq.n	8003536 <HAL_GPIO_Init+0x216>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a4d      	ldr	r2, [pc, #308]	@ (8003630 <HAL_GPIO_Init+0x310>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d019      	beq.n	8003532 <HAL_GPIO_Init+0x212>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a4c      	ldr	r2, [pc, #304]	@ (8003634 <HAL_GPIO_Init+0x314>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d013      	beq.n	800352e <HAL_GPIO_Init+0x20e>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a4b      	ldr	r2, [pc, #300]	@ (8003638 <HAL_GPIO_Init+0x318>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00d      	beq.n	800352a <HAL_GPIO_Init+0x20a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a4a      	ldr	r2, [pc, #296]	@ (800363c <HAL_GPIO_Init+0x31c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d007      	beq.n	8003526 <HAL_GPIO_Init+0x206>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a49      	ldr	r2, [pc, #292]	@ (8003640 <HAL_GPIO_Init+0x320>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d101      	bne.n	8003522 <HAL_GPIO_Init+0x202>
 800351e:	2306      	movs	r3, #6
 8003520:	e00c      	b.n	800353c <HAL_GPIO_Init+0x21c>
 8003522:	2307      	movs	r3, #7
 8003524:	e00a      	b.n	800353c <HAL_GPIO_Init+0x21c>
 8003526:	2305      	movs	r3, #5
 8003528:	e008      	b.n	800353c <HAL_GPIO_Init+0x21c>
 800352a:	2304      	movs	r3, #4
 800352c:	e006      	b.n	800353c <HAL_GPIO_Init+0x21c>
 800352e:	2303      	movs	r3, #3
 8003530:	e004      	b.n	800353c <HAL_GPIO_Init+0x21c>
 8003532:	2302      	movs	r3, #2
 8003534:	e002      	b.n	800353c <HAL_GPIO_Init+0x21c>
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <HAL_GPIO_Init+0x21c>
 800353a:	2300      	movs	r3, #0
 800353c:	69fa      	ldr	r2, [r7, #28]
 800353e:	f002 0203 	and.w	r2, r2, #3
 8003542:	0092      	lsls	r2, r2, #2
 8003544:	4093      	lsls	r3, r2
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4313      	orrs	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800354c:	4935      	ldr	r1, [pc, #212]	@ (8003624 <HAL_GPIO_Init+0x304>)
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	089b      	lsrs	r3, r3, #2
 8003552:	3302      	adds	r3, #2
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800355a:	4b3a      	ldr	r3, [pc, #232]	@ (8003644 <HAL_GPIO_Init+0x324>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	43db      	mvns	r3, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4013      	ands	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800357e:	4a31      	ldr	r2, [pc, #196]	@ (8003644 <HAL_GPIO_Init+0x324>)
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003584:	4b2f      	ldr	r3, [pc, #188]	@ (8003644 <HAL_GPIO_Init+0x324>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	43db      	mvns	r3, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4013      	ands	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035a8:	4a26      	ldr	r2, [pc, #152]	@ (8003644 <HAL_GPIO_Init+0x324>)
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035ae:	4b25      	ldr	r3, [pc, #148]	@ (8003644 <HAL_GPIO_Init+0x324>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	43db      	mvns	r3, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4013      	ands	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003644 <HAL_GPIO_Init+0x324>)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003644 <HAL_GPIO_Init+0x324>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	43db      	mvns	r3, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4013      	ands	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035fc:	4a11      	ldr	r2, [pc, #68]	@ (8003644 <HAL_GPIO_Init+0x324>)
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3301      	adds	r3, #1
 8003606:	61fb      	str	r3, [r7, #28]
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	2b0f      	cmp	r3, #15
 800360c:	f67f ae96 	bls.w	800333c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003610:	bf00      	nop
 8003612:	bf00      	nop
 8003614:	3724      	adds	r7, #36	@ 0x24
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40023800 	.word	0x40023800
 8003624:	40013800 	.word	0x40013800
 8003628:	40020000 	.word	0x40020000
 800362c:	40020400 	.word	0x40020400
 8003630:	40020800 	.word	0x40020800
 8003634:	40020c00 	.word	0x40020c00
 8003638:	40021000 	.word	0x40021000
 800363c:	40021400 	.word	0x40021400
 8003640:	40021800 	.word	0x40021800
 8003644:	40013c00 	.word	0x40013c00

08003648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	807b      	strh	r3, [r7, #2]
 8003654:	4613      	mov	r3, r2
 8003656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003658:	787b      	ldrb	r3, [r7, #1]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800365e:	887a      	ldrh	r2, [r7, #2]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003664:	e003      	b.n	800366e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003666:	887b      	ldrh	r3, [r7, #2]
 8003668:	041a      	lsls	r2, r3, #16
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	619a      	str	r2, [r3, #24]
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
	...

0800367c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0cc      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003690:	4b68      	ldr	r3, [pc, #416]	@ (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d90c      	bls.n	80036b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369e:	4b65      	ldr	r3, [pc, #404]	@ (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a6:	4b63      	ldr	r3, [pc, #396]	@ (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0b8      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d020      	beq.n	8003706 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d0:	4b59      	ldr	r3, [pc, #356]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	4a58      	ldr	r2, [pc, #352]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036e8:	4b53      	ldr	r3, [pc, #332]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	4a52      	ldr	r2, [pc, #328]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f4:	4b50      	ldr	r3, [pc, #320]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	494d      	ldr	r1, [pc, #308]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	4313      	orrs	r3, r2
 8003704:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d044      	beq.n	800379c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d107      	bne.n	800372a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371a:	4b47      	ldr	r3, [pc, #284]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d119      	bne.n	800375a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e07f      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b02      	cmp	r3, #2
 8003730:	d003      	beq.n	800373a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003736:	2b03      	cmp	r3, #3
 8003738:	d107      	bne.n	800374a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373a:	4b3f      	ldr	r3, [pc, #252]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e06f      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374a:	4b3b      	ldr	r3, [pc, #236]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e067      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800375a:	4b37      	ldr	r3, [pc, #220]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f023 0203 	bic.w	r2, r3, #3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	4934      	ldr	r1, [pc, #208]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	4313      	orrs	r3, r2
 800376a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800376c:	f7ff fc04 	bl	8002f78 <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003772:	e00a      	b.n	800378a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003774:	f7ff fc00 	bl	8002f78 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e04f      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378a:	4b2b      	ldr	r3, [pc, #172]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 020c 	and.w	r2, r3, #12
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	429a      	cmp	r2, r3
 800379a:	d1eb      	bne.n	8003774 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800379c:	4b25      	ldr	r3, [pc, #148]	@ (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d20c      	bcs.n	80037c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037aa:	4b22      	ldr	r3, [pc, #136]	@ (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b2:	4b20      	ldr	r3, [pc, #128]	@ (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e032      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d0:	4b19      	ldr	r3, [pc, #100]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4916      	ldr	r1, [pc, #88]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d009      	beq.n	8003802 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ee:	4b12      	ldr	r3, [pc, #72]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	490e      	ldr	r1, [pc, #56]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003802:	f000 f821 	bl	8003848 <HAL_RCC_GetSysClockFreq>
 8003806:	4602      	mov	r2, r0
 8003808:	4b0b      	ldr	r3, [pc, #44]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	490a      	ldr	r1, [pc, #40]	@ (800383c <HAL_RCC_ClockConfig+0x1c0>)
 8003814:	5ccb      	ldrb	r3, [r1, r3]
 8003816:	fa22 f303 	lsr.w	r3, r2, r3
 800381a:	4a09      	ldr	r2, [pc, #36]	@ (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 800381c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800381e:	4b09      	ldr	r3, [pc, #36]	@ (8003844 <HAL_RCC_ClockConfig+0x1c8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff fb64 	bl	8002ef0 <HAL_InitTick>

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40023c00 	.word	0x40023c00
 8003838:	40023800 	.word	0x40023800
 800383c:	0800a4e0 	.word	0x0800a4e0
 8003840:	2000003c 	.word	0x2000003c
 8003844:	20000040 	.word	0x20000040

08003848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800384c:	b090      	sub	sp, #64	@ 0x40
 800384e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	637b      	str	r3, [r7, #52]	@ 0x34
 8003854:	2300      	movs	r3, #0
 8003856:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003858:	2300      	movs	r3, #0
 800385a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003860:	4b59      	ldr	r3, [pc, #356]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 030c 	and.w	r3, r3, #12
 8003868:	2b08      	cmp	r3, #8
 800386a:	d00d      	beq.n	8003888 <HAL_RCC_GetSysClockFreq+0x40>
 800386c:	2b08      	cmp	r3, #8
 800386e:	f200 80a1 	bhi.w	80039b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <HAL_RCC_GetSysClockFreq+0x34>
 8003876:	2b04      	cmp	r3, #4
 8003878:	d003      	beq.n	8003882 <HAL_RCC_GetSysClockFreq+0x3a>
 800387a:	e09b      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800387c:	4b53      	ldr	r3, [pc, #332]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x184>)
 800387e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003880:	e09b      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003882:	4b53      	ldr	r3, [pc, #332]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003884:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003886:	e098      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003888:	4b4f      	ldr	r3, [pc, #316]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003890:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003892:	4b4d      	ldr	r3, [pc, #308]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d028      	beq.n	80038f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800389e:	4b4a      	ldr	r3, [pc, #296]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	099b      	lsrs	r3, r3, #6
 80038a4:	2200      	movs	r2, #0
 80038a6:	623b      	str	r3, [r7, #32]
 80038a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038b0:	2100      	movs	r1, #0
 80038b2:	4b47      	ldr	r3, [pc, #284]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80038b4:	fb03 f201 	mul.w	r2, r3, r1
 80038b8:	2300      	movs	r3, #0
 80038ba:	fb00 f303 	mul.w	r3, r0, r3
 80038be:	4413      	add	r3, r2
 80038c0:	4a43      	ldr	r2, [pc, #268]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80038c2:	fba0 1202 	umull	r1, r2, r0, r2
 80038c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038c8:	460a      	mov	r2, r1
 80038ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80038cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038ce:	4413      	add	r3, r2
 80038d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038d4:	2200      	movs	r2, #0
 80038d6:	61bb      	str	r3, [r7, #24]
 80038d8:	61fa      	str	r2, [r7, #28]
 80038da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80038e2:	f7fd f9f9 	bl	8000cd8 <__aeabi_uldivmod>
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	4613      	mov	r3, r2
 80038ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038ee:	e053      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038f0:	4b35      	ldr	r3, [pc, #212]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	099b      	lsrs	r3, r3, #6
 80038f6:	2200      	movs	r2, #0
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	617a      	str	r2, [r7, #20]
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003902:	f04f 0b00 	mov.w	fp, #0
 8003906:	4652      	mov	r2, sl
 8003908:	465b      	mov	r3, fp
 800390a:	f04f 0000 	mov.w	r0, #0
 800390e:	f04f 0100 	mov.w	r1, #0
 8003912:	0159      	lsls	r1, r3, #5
 8003914:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003918:	0150      	lsls	r0, r2, #5
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	ebb2 080a 	subs.w	r8, r2, sl
 8003922:	eb63 090b 	sbc.w	r9, r3, fp
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	f04f 0300 	mov.w	r3, #0
 800392e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003932:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003936:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800393a:	ebb2 0408 	subs.w	r4, r2, r8
 800393e:	eb63 0509 	sbc.w	r5, r3, r9
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	00eb      	lsls	r3, r5, #3
 800394c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003950:	00e2      	lsls	r2, r4, #3
 8003952:	4614      	mov	r4, r2
 8003954:	461d      	mov	r5, r3
 8003956:	eb14 030a 	adds.w	r3, r4, sl
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	eb45 030b 	adc.w	r3, r5, fp
 8003960:	607b      	str	r3, [r7, #4]
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800396e:	4629      	mov	r1, r5
 8003970:	028b      	lsls	r3, r1, #10
 8003972:	4621      	mov	r1, r4
 8003974:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003978:	4621      	mov	r1, r4
 800397a:	028a      	lsls	r2, r1, #10
 800397c:	4610      	mov	r0, r2
 800397e:	4619      	mov	r1, r3
 8003980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003982:	2200      	movs	r2, #0
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	60fa      	str	r2, [r7, #12]
 8003988:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800398c:	f7fd f9a4 	bl	8000cd8 <__aeabi_uldivmod>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4613      	mov	r3, r2
 8003996:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003998:	4b0b      	ldr	r3, [pc, #44]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	0c1b      	lsrs	r3, r3, #16
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	3301      	adds	r3, #1
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80039a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80039aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039b2:	e002      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039b4:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x184>)
 80039b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3740      	adds	r7, #64	@ 0x40
 80039c0:	46bd      	mov	sp, r7
 80039c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800
 80039cc:	00f42400 	.word	0x00f42400
 80039d0:	017d7840 	.word	0x017d7840

080039d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d8:	4b03      	ldr	r3, [pc, #12]	@ (80039e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039da:	681b      	ldr	r3, [r3, #0]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	2000003c 	.word	0x2000003c

080039ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039f0:	f7ff fff0 	bl	80039d4 <HAL_RCC_GetHCLKFreq>
 80039f4:	4602      	mov	r2, r0
 80039f6:	4b05      	ldr	r3, [pc, #20]	@ (8003a0c <HAL_RCC_GetPCLK1Freq+0x20>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	0a9b      	lsrs	r3, r3, #10
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	4903      	ldr	r1, [pc, #12]	@ (8003a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a02:	5ccb      	ldrb	r3, [r1, r3]
 8003a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	0800a4f0 	.word	0x0800a4f0

08003a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a18:	f7ff ffdc 	bl	80039d4 <HAL_RCC_GetHCLKFreq>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	4b05      	ldr	r3, [pc, #20]	@ (8003a34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	0b5b      	lsrs	r3, r3, #13
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	4903      	ldr	r1, [pc, #12]	@ (8003a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a2a:	5ccb      	ldrb	r3, [r1, r3]
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40023800 	.word	0x40023800
 8003a38:	0800a4f0 	.word	0x0800a4f0

08003a3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e273      	b.n	8003f36 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d075      	beq.n	8003b46 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a5a:	4b88      	ldr	r3, [pc, #544]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d00c      	beq.n	8003a80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a66:	4b85      	ldr	r3, [pc, #532]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d112      	bne.n	8003a98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a72:	4b82      	ldr	r3, [pc, #520]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a7e:	d10b      	bne.n	8003a98 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a80:	4b7e      	ldr	r3, [pc, #504]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d05b      	beq.n	8003b44 <HAL_RCC_OscConfig+0x108>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d157      	bne.n	8003b44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e24e      	b.n	8003f36 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aa0:	d106      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x74>
 8003aa2:	4b76      	ldr	r3, [pc, #472]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a75      	ldr	r2, [pc, #468]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e01d      	b.n	8003aec <HAL_RCC_OscConfig+0xb0>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x98>
 8003aba:	4b70      	ldr	r3, [pc, #448]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a6f      	ldr	r2, [pc, #444]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003ac0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	4b6d      	ldr	r3, [pc, #436]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a6c      	ldr	r2, [pc, #432]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	e00b      	b.n	8003aec <HAL_RCC_OscConfig+0xb0>
 8003ad4:	4b69      	ldr	r3, [pc, #420]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a68      	ldr	r2, [pc, #416]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003ada:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	4b66      	ldr	r3, [pc, #408]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a65      	ldr	r2, [pc, #404]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003ae6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d013      	beq.n	8003b1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af4:	f7ff fa40 	bl	8002f78 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003afc:	f7ff fa3c 	bl	8002f78 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b64      	cmp	r3, #100	@ 0x64
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e213      	b.n	8003f36 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0e:	4b5b      	ldr	r3, [pc, #364]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0f0      	beq.n	8003afc <HAL_RCC_OscConfig+0xc0>
 8003b1a:	e014      	b.n	8003b46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1c:	f7ff fa2c 	bl	8002f78 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b24:	f7ff fa28 	bl	8002f78 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b64      	cmp	r3, #100	@ 0x64
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e1ff      	b.n	8003f36 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b36:	4b51      	ldr	r3, [pc, #324]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0xe8>
 8003b42:	e000      	b.n	8003b46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d063      	beq.n	8003c1a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b52:	4b4a      	ldr	r3, [pc, #296]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 030c 	and.w	r3, r3, #12
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b5e:	4b47      	ldr	r3, [pc, #284]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d11c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b6a:	4b44      	ldr	r3, [pc, #272]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d116      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b76:	4b41      	ldr	r3, [pc, #260]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <HAL_RCC_OscConfig+0x152>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d001      	beq.n	8003b8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e1d3      	b.n	8003f36 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4937      	ldr	r1, [pc, #220]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ba2:	e03a      	b.n	8003c1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d020      	beq.n	8003bee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bac:	4b34      	ldr	r3, [pc, #208]	@ (8003c80 <HAL_RCC_OscConfig+0x244>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb2:	f7ff f9e1 	bl	8002f78 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bba:	f7ff f9dd 	bl	8002f78 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e1b4      	b.n	8003f36 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0f0      	beq.n	8003bba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd8:	4b28      	ldr	r3, [pc, #160]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	4925      	ldr	r1, [pc, #148]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	600b      	str	r3, [r1, #0]
 8003bec:	e015      	b.n	8003c1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bee:	4b24      	ldr	r3, [pc, #144]	@ (8003c80 <HAL_RCC_OscConfig+0x244>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf4:	f7ff f9c0 	bl	8002f78 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bfc:	f7ff f9bc 	bl	8002f78 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e193      	b.n	8003f36 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f0      	bne.n	8003bfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d036      	beq.n	8003c94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d016      	beq.n	8003c5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c2e:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <HAL_RCC_OscConfig+0x248>)
 8003c30:	2201      	movs	r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c34:	f7ff f9a0 	bl	8002f78 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c3c:	f7ff f99c 	bl	8002f78 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e173      	b.n	8003f36 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c7c <HAL_RCC_OscConfig+0x240>)
 8003c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0x200>
 8003c5a:	e01b      	b.n	8003c94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c5c:	4b09      	ldr	r3, [pc, #36]	@ (8003c84 <HAL_RCC_OscConfig+0x248>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c62:	f7ff f989 	bl	8002f78 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c68:	e00e      	b.n	8003c88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c6a:	f7ff f985 	bl	8002f78 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d907      	bls.n	8003c88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e15c      	b.n	8003f36 <HAL_RCC_OscConfig+0x4fa>
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	42470000 	.word	0x42470000
 8003c84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c88:	4b8a      	ldr	r3, [pc, #552]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003c8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1ea      	bne.n	8003c6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 8097 	beq.w	8003dd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ca6:	4b83      	ldr	r3, [pc, #524]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10f      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	4b7f      	ldr	r3, [pc, #508]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cba:	4a7e      	ldr	r2, [pc, #504]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cc2:	4b7c      	ldr	r3, [pc, #496]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cca:	60bb      	str	r3, [r7, #8]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd2:	4b79      	ldr	r3, [pc, #484]	@ (8003eb8 <HAL_RCC_OscConfig+0x47c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d118      	bne.n	8003d10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cde:	4b76      	ldr	r3, [pc, #472]	@ (8003eb8 <HAL_RCC_OscConfig+0x47c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a75      	ldr	r2, [pc, #468]	@ (8003eb8 <HAL_RCC_OscConfig+0x47c>)
 8003ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cea:	f7ff f945 	bl	8002f78 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf2:	f7ff f941 	bl	8002f78 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e118      	b.n	8003f36 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d04:	4b6c      	ldr	r3, [pc, #432]	@ (8003eb8 <HAL_RCC_OscConfig+0x47c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0f0      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d106      	bne.n	8003d26 <HAL_RCC_OscConfig+0x2ea>
 8003d18:	4b66      	ldr	r3, [pc, #408]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1c:	4a65      	ldr	r2, [pc, #404]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003d1e:	f043 0301 	orr.w	r3, r3, #1
 8003d22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d24:	e01c      	b.n	8003d60 <HAL_RCC_OscConfig+0x324>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b05      	cmp	r3, #5
 8003d2c:	d10c      	bne.n	8003d48 <HAL_RCC_OscConfig+0x30c>
 8003d2e:	4b61      	ldr	r3, [pc, #388]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d32:	4a60      	ldr	r2, [pc, #384]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003d34:	f043 0304 	orr.w	r3, r3, #4
 8003d38:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d3a:	4b5e      	ldr	r3, [pc, #376]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3e:	4a5d      	ldr	r2, [pc, #372]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d46:	e00b      	b.n	8003d60 <HAL_RCC_OscConfig+0x324>
 8003d48:	4b5a      	ldr	r3, [pc, #360]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4c:	4a59      	ldr	r2, [pc, #356]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003d4e:	f023 0301 	bic.w	r3, r3, #1
 8003d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d54:	4b57      	ldr	r3, [pc, #348]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d58:	4a56      	ldr	r2, [pc, #344]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003d5a:	f023 0304 	bic.w	r3, r3, #4
 8003d5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d015      	beq.n	8003d94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d68:	f7ff f906 	bl	8002f78 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6e:	e00a      	b.n	8003d86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d70:	f7ff f902 	bl	8002f78 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e0d7      	b.n	8003f36 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d86:	4b4b      	ldr	r3, [pc, #300]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0ee      	beq.n	8003d70 <HAL_RCC_OscConfig+0x334>
 8003d92:	e014      	b.n	8003dbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d94:	f7ff f8f0 	bl	8002f78 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d9a:	e00a      	b.n	8003db2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d9c:	f7ff f8ec 	bl	8002f78 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e0c1      	b.n	8003f36 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db2:	4b40      	ldr	r3, [pc, #256]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1ee      	bne.n	8003d9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dbe:	7dfb      	ldrb	r3, [r7, #23]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d105      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc4:	4b3b      	ldr	r3, [pc, #236]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc8:	4a3a      	ldr	r2, [pc, #232]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003dca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 80ad 	beq.w	8003f34 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dda:	4b36      	ldr	r3, [pc, #216]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 030c 	and.w	r3, r3, #12
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d060      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d145      	bne.n	8003e7a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dee:	4b33      	ldr	r3, [pc, #204]	@ (8003ebc <HAL_RCC_OscConfig+0x480>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df4:	f7ff f8c0 	bl	8002f78 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dfc:	f7ff f8bc 	bl	8002f78 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e093      	b.n	8003f36 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0e:	4b29      	ldr	r3, [pc, #164]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69da      	ldr	r2, [r3, #28]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e28:	019b      	lsls	r3, r3, #6
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e30:	085b      	lsrs	r3, r3, #1
 8003e32:	3b01      	subs	r3, #1
 8003e34:	041b      	lsls	r3, r3, #16
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3c:	061b      	lsls	r3, r3, #24
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e44:	071b      	lsls	r3, r3, #28
 8003e46:	491b      	ldr	r1, [pc, #108]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ebc <HAL_RCC_OscConfig+0x480>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e52:	f7ff f891 	bl	8002f78 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e5a:	f7ff f88d 	bl	8002f78 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e064      	b.n	8003f36 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6c:	4b11      	ldr	r3, [pc, #68]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0f0      	beq.n	8003e5a <HAL_RCC_OscConfig+0x41e>
 8003e78:	e05c      	b.n	8003f34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7a:	4b10      	ldr	r3, [pc, #64]	@ (8003ebc <HAL_RCC_OscConfig+0x480>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7ff f87a 	bl	8002f78 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e88:	f7ff f876 	bl	8002f78 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e04d      	b.n	8003f36 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9a:	4b06      	ldr	r3, [pc, #24]	@ (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0x44c>
 8003ea6:	e045      	b.n	8003f34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d107      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e040      	b.n	8003f36 <HAL_RCC_OscConfig+0x4fa>
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40007000 	.word	0x40007000
 8003ebc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f40 <HAL_RCC_OscConfig+0x504>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d030      	beq.n	8003f30 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d129      	bne.n	8003f30 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d122      	bne.n	8003f30 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ef6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d119      	bne.n	8003f30 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f06:	085b      	lsrs	r3, r3, #1
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d10f      	bne.n	8003f30 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d107      	bne.n	8003f30 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d001      	beq.n	8003f34 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40023800 	.word	0x40023800

08003f44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e042      	b.n	8003fdc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fe fee6 	bl	8002d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2224      	movs	r2, #36	@ 0x24
 8003f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 fc85 	bl	8004898 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695a      	ldr	r2, [r3, #20]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b0ba      	sub	sp, #232	@ 0xe8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800400a:	2300      	movs	r3, #0
 800400c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004010:	2300      	movs	r3, #0
 8004012:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004022:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10f      	bne.n	800404a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800402a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b00      	cmp	r3, #0
 8004034:	d009      	beq.n	800404a <HAL_UART_IRQHandler+0x66>
 8004036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fb69 	bl	800471a <UART_Receive_IT>
      return;
 8004048:	e25b      	b.n	8004502 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800404a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 80de 	beq.w	8004210 <HAL_UART_IRQHandler+0x22c>
 8004054:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	d106      	bne.n	800406e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004064:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 80d1 	beq.w	8004210 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800406e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00b      	beq.n	8004092 <HAL_UART_IRQHandler+0xae>
 800407a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800407e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004082:	2b00      	cmp	r3, #0
 8004084:	d005      	beq.n	8004092 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408a:	f043 0201 	orr.w	r2, r3, #1
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004096:	f003 0304 	and.w	r3, r3, #4
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00b      	beq.n	80040b6 <HAL_UART_IRQHandler+0xd2>
 800409e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d005      	beq.n	80040b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ae:	f043 0202 	orr.w	r2, r3, #2
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00b      	beq.n	80040da <HAL_UART_IRQHandler+0xf6>
 80040c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d005      	beq.n	80040da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d2:	f043 0204 	orr.w	r2, r3, #4
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d011      	beq.n	800410a <HAL_UART_IRQHandler+0x126>
 80040e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d105      	bne.n	80040fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d005      	beq.n	800410a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004102:	f043 0208 	orr.w	r2, r3, #8
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 81f2 	beq.w	80044f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004118:	f003 0320 	and.w	r3, r3, #32
 800411c:	2b00      	cmp	r3, #0
 800411e:	d008      	beq.n	8004132 <HAL_UART_IRQHandler+0x14e>
 8004120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004124:	f003 0320 	and.w	r3, r3, #32
 8004128:	2b00      	cmp	r3, #0
 800412a:	d002      	beq.n	8004132 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 faf4 	bl	800471a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800413c:	2b40      	cmp	r3, #64	@ 0x40
 800413e:	bf0c      	ite	eq
 8004140:	2301      	moveq	r3, #1
 8004142:	2300      	movne	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d103      	bne.n	800415e <HAL_UART_IRQHandler+0x17a>
 8004156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800415a:	2b00      	cmp	r3, #0
 800415c:	d04f      	beq.n	80041fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f9fc 	bl	800455c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800416e:	2b40      	cmp	r3, #64	@ 0x40
 8004170:	d141      	bne.n	80041f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3314      	adds	r3, #20
 8004178:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004180:	e853 3f00 	ldrex	r3, [r3]
 8004184:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004188:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800418c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004190:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3314      	adds	r3, #20
 800419a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800419e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80041a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80041aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1d9      	bne.n	8004172 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d013      	beq.n	80041ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ca:	4a7e      	ldr	r2, [pc, #504]	@ (80043c4 <HAL_UART_IRQHandler+0x3e0>)
 80041cc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff f881 	bl	80032da <HAL_DMA_Abort_IT>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d016      	beq.n	800420c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041e8:	4610      	mov	r0, r2
 80041ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ec:	e00e      	b.n	800420c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f99e 	bl	8004530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f4:	e00a      	b.n	800420c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f99a 	bl	8004530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041fc:	e006      	b.n	800420c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f996 	bl	8004530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800420a:	e175      	b.n	80044f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800420c:	bf00      	nop
    return;
 800420e:	e173      	b.n	80044f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004214:	2b01      	cmp	r3, #1
 8004216:	f040 814f 	bne.w	80044b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800421a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800421e:	f003 0310 	and.w	r3, r3, #16
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 8148 	beq.w	80044b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800422c:	f003 0310 	and.w	r3, r3, #16
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 8141 	beq.w	80044b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004236:	2300      	movs	r3, #0
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	60bb      	str	r3, [r7, #8]
 800424a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004256:	2b40      	cmp	r3, #64	@ 0x40
 8004258:	f040 80b6 	bne.w	80043c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004268:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 8145 	beq.w	80044fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004276:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800427a:	429a      	cmp	r2, r3
 800427c:	f080 813e 	bcs.w	80044fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004286:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004292:	f000 8088 	beq.w	80043a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	330c      	adds	r3, #12
 800429c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042a4:	e853 3f00 	ldrex	r3, [r3]
 80042a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80042ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	330c      	adds	r3, #12
 80042be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80042c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042d2:	e841 2300 	strex	r3, r2, [r1]
 80042d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80042da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1d9      	bne.n	8004296 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3314      	adds	r3, #20
 80042e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042ec:	e853 3f00 	ldrex	r3, [r3]
 80042f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042f4:	f023 0301 	bic.w	r3, r3, #1
 80042f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3314      	adds	r3, #20
 8004302:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004306:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800430a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800430e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004312:	e841 2300 	strex	r3, r2, [r1]
 8004316:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004318:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1e1      	bne.n	80042e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3314      	adds	r3, #20
 8004324:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004326:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004328:	e853 3f00 	ldrex	r3, [r3]
 800432c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800432e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004330:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004334:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3314      	adds	r3, #20
 800433e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004342:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004344:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004346:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004348:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800434a:	e841 2300 	strex	r3, r2, [r1]
 800434e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004350:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1e3      	bne.n	800431e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2220      	movs	r2, #32
 800435a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	330c      	adds	r3, #12
 800436a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800436e:	e853 3f00 	ldrex	r3, [r3]
 8004372:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004374:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004376:	f023 0310 	bic.w	r3, r3, #16
 800437a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	330c      	adds	r3, #12
 8004384:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004388:	65ba      	str	r2, [r7, #88]	@ 0x58
 800438a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800438e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004390:	e841 2300 	strex	r3, r2, [r1]
 8004394:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004396:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e3      	bne.n	8004364 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fe ff2a 	bl	80031fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2202      	movs	r2, #2
 80043aa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	4619      	mov	r1, r3
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f8c1 	bl	8004544 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043c2:	e09b      	b.n	80044fc <HAL_UART_IRQHandler+0x518>
 80043c4:	08004623 	.word	0x08004623
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043dc:	b29b      	uxth	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 808e 	beq.w	8004500 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80043e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 8089 	beq.w	8004500 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	330c      	adds	r3, #12
 80043f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f8:	e853 3f00 	ldrex	r3, [r3]
 80043fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004400:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004404:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	330c      	adds	r3, #12
 800440e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004412:	647a      	str	r2, [r7, #68]	@ 0x44
 8004414:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004416:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004418:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800441a:	e841 2300 	strex	r3, r2, [r1]
 800441e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1e3      	bne.n	80043ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3314      	adds	r3, #20
 800442c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004430:	e853 3f00 	ldrex	r3, [r3]
 8004434:	623b      	str	r3, [r7, #32]
   return(result);
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	f023 0301 	bic.w	r3, r3, #1
 800443c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3314      	adds	r3, #20
 8004446:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800444a:	633a      	str	r2, [r7, #48]	@ 0x30
 800444c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004450:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004452:	e841 2300 	strex	r3, r2, [r1]
 8004456:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1e3      	bne.n	8004426 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	330c      	adds	r3, #12
 8004472:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	e853 3f00 	ldrex	r3, [r3]
 800447a:	60fb      	str	r3, [r7, #12]
   return(result);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0310 	bic.w	r3, r3, #16
 8004482:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	330c      	adds	r3, #12
 800448c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004490:	61fa      	str	r2, [r7, #28]
 8004492:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004494:	69b9      	ldr	r1, [r7, #24]
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	e841 2300 	strex	r3, r2, [r1]
 800449c:	617b      	str	r3, [r7, #20]
   return(result);
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e3      	bne.n	800446c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044ae:	4619      	mov	r1, r3
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f847 	bl	8004544 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044b6:	e023      	b.n	8004500 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d009      	beq.n	80044d8 <HAL_UART_IRQHandler+0x4f4>
 80044c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f8ba 	bl	800464a <UART_Transmit_IT>
    return;
 80044d6:	e014      	b.n	8004502 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00e      	beq.n	8004502 <HAL_UART_IRQHandler+0x51e>
 80044e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d008      	beq.n	8004502 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f8fa 	bl	80046ea <UART_EndTransmit_IT>
    return;
 80044f6:	e004      	b.n	8004502 <HAL_UART_IRQHandler+0x51e>
    return;
 80044f8:	bf00      	nop
 80044fa:	e002      	b.n	8004502 <HAL_UART_IRQHandler+0x51e>
      return;
 80044fc:	bf00      	nop
 80044fe:	e000      	b.n	8004502 <HAL_UART_IRQHandler+0x51e>
      return;
 8004500:	bf00      	nop
  }
}
 8004502:	37e8      	adds	r7, #232	@ 0xe8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	460b      	mov	r3, r1
 800454e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800455c:	b480      	push	{r7}
 800455e:	b095      	sub	sp, #84	@ 0x54
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	330c      	adds	r3, #12
 800456a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004576:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800457a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	330c      	adds	r3, #12
 8004582:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004584:	643a      	str	r2, [r7, #64]	@ 0x40
 8004586:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004588:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800458a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800458c:	e841 2300 	strex	r3, r2, [r1]
 8004590:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1e5      	bne.n	8004564 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3314      	adds	r3, #20
 800459e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	e853 3f00 	ldrex	r3, [r3]
 80045a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	f023 0301 	bic.w	r3, r3, #1
 80045ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3314      	adds	r3, #20
 80045b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045c0:	e841 2300 	strex	r3, r2, [r1]
 80045c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1e5      	bne.n	8004598 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d119      	bne.n	8004608 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	330c      	adds	r3, #12
 80045da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	e853 3f00 	ldrex	r3, [r3]
 80045e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f023 0310 	bic.w	r3, r3, #16
 80045ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	330c      	adds	r3, #12
 80045f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045f4:	61ba      	str	r2, [r7, #24]
 80045f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f8:	6979      	ldr	r1, [r7, #20]
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	e841 2300 	strex	r3, r2, [r1]
 8004600:	613b      	str	r3, [r7, #16]
   return(result);
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1e5      	bne.n	80045d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2220      	movs	r2, #32
 800460c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004616:	bf00      	nop
 8004618:	3754      	adds	r7, #84	@ 0x54
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b084      	sub	sp, #16
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f7ff ff77 	bl	8004530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004642:	bf00      	nop
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800464a:	b480      	push	{r7}
 800464c:	b085      	sub	sp, #20
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b21      	cmp	r3, #33	@ 0x21
 800465c:	d13e      	bne.n	80046dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004666:	d114      	bne.n	8004692 <UART_Transmit_IT+0x48>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d110      	bne.n	8004692 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004684:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	1c9a      	adds	r2, r3, #2
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	621a      	str	r2, [r3, #32]
 8004690:	e008      	b.n	80046a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	1c59      	adds	r1, r3, #1
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6211      	str	r1, [r2, #32]
 800469c:	781a      	ldrb	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	4619      	mov	r1, r3
 80046b2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10f      	bne.n	80046d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	e000      	b.n	80046de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046dc:	2302      	movs	r3, #2
  }
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004700:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2220      	movs	r2, #32
 8004706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7ff fefc 	bl	8004508 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b08c      	sub	sp, #48	@ 0x30
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b22      	cmp	r3, #34	@ 0x22
 800472c:	f040 80ae 	bne.w	800488c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004738:	d117      	bne.n	800476a <UART_Receive_IT+0x50>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d113      	bne.n	800476a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004742:	2300      	movs	r3, #0
 8004744:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	b29b      	uxth	r3, r3
 8004754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004758:	b29a      	uxth	r2, r3
 800475a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004762:	1c9a      	adds	r2, r3, #2
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	629a      	str	r2, [r3, #40]	@ 0x28
 8004768:	e026      	b.n	80047b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004770:	2300      	movs	r3, #0
 8004772:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800477c:	d007      	beq.n	800478e <UART_Receive_IT+0x74>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10a      	bne.n	800479c <UART_Receive_IT+0x82>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	b2da      	uxtb	r2, r3
 8004796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004798:	701a      	strb	r2, [r3, #0]
 800479a:	e008      	b.n	80047ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047bc:	b29b      	uxth	r3, r3
 80047be:	3b01      	subs	r3, #1
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	4619      	mov	r1, r3
 80047c6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d15d      	bne.n	8004888 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0220 	bic.w	r2, r2, #32
 80047da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	695a      	ldr	r2, [r3, #20]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0201 	bic.w	r2, r2, #1
 80047fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480e:	2b01      	cmp	r3, #1
 8004810:	d135      	bne.n	800487e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	330c      	adds	r3, #12
 800481e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	e853 3f00 	ldrex	r3, [r3]
 8004826:	613b      	str	r3, [r7, #16]
   return(result);
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	f023 0310 	bic.w	r3, r3, #16
 800482e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	330c      	adds	r3, #12
 8004836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004838:	623a      	str	r2, [r7, #32]
 800483a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483c:	69f9      	ldr	r1, [r7, #28]
 800483e:	6a3a      	ldr	r2, [r7, #32]
 8004840:	e841 2300 	strex	r3, r2, [r1]
 8004844:	61bb      	str	r3, [r7, #24]
   return(result);
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1e5      	bne.n	8004818 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0310 	and.w	r3, r3, #16
 8004856:	2b10      	cmp	r3, #16
 8004858:	d10a      	bne.n	8004870 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800485a:	2300      	movs	r3, #0
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004874:	4619      	mov	r1, r3
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7ff fe64 	bl	8004544 <HAL_UARTEx_RxEventCallback>
 800487c:	e002      	b.n	8004884 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7ff fe4c 	bl	800451c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004884:	2300      	movs	r3, #0
 8004886:	e002      	b.n	800488e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	e000      	b.n	800488e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800488c:	2302      	movs	r3, #2
  }
}
 800488e:	4618      	mov	r0, r3
 8004890:	3730      	adds	r7, #48	@ 0x30
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
	...

08004898 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800489c:	b0c0      	sub	sp, #256	@ 0x100
 800489e:	af00      	add	r7, sp, #0
 80048a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80048b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b4:	68d9      	ldr	r1, [r3, #12]
 80048b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	ea40 0301 	orr.w	r3, r0, r1
 80048c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	431a      	orrs	r2, r3
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	431a      	orrs	r2, r3
 80048d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80048f0:	f021 010c 	bic.w	r1, r1, #12
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80048fe:	430b      	orrs	r3, r1
 8004900:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800490e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004912:	6999      	ldr	r1, [r3, #24]
 8004914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	ea40 0301 	orr.w	r3, r0, r1
 800491e:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8004920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	4b95      	ldr	r3, [pc, #596]	@ (8004b7c <UART_SetConfig+0x2e4>)
 8004928:	429a      	cmp	r2, r3
 800492a:	d011      	beq.n	8004950 <UART_SetConfig+0xb8>
 800492c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	4b93      	ldr	r3, [pc, #588]	@ (8004b80 <UART_SetConfig+0x2e8>)
 8004934:	429a      	cmp	r2, r3
 8004936:	d00b      	beq.n	8004950 <UART_SetConfig+0xb8>
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	4b91      	ldr	r3, [pc, #580]	@ (8004b84 <UART_SetConfig+0x2ec>)
 8004940:	429a      	cmp	r2, r3
 8004942:	d005      	beq.n	8004950 <UART_SetConfig+0xb8>
 8004944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4b8f      	ldr	r3, [pc, #572]	@ (8004b88 <UART_SetConfig+0x2f0>)
 800494c:	429a      	cmp	r2, r3
 800494e:	d104      	bne.n	800495a <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004950:	f7ff f860 	bl	8003a14 <HAL_RCC_GetPCLK2Freq>
 8004954:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004958:	e003      	b.n	8004962 <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800495a:	f7ff f847 	bl	80039ec <HAL_RCC_GetPCLK1Freq>
 800495e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800496c:	f040 8110 	bne.w	8004b90 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004970:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004974:	2200      	movs	r2, #0
 8004976:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800497a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800497e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004982:	4622      	mov	r2, r4
 8004984:	462b      	mov	r3, r5
 8004986:	1891      	adds	r1, r2, r2
 8004988:	65b9      	str	r1, [r7, #88]	@ 0x58
 800498a:	415b      	adcs	r3, r3
 800498c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800498e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004992:	4621      	mov	r1, r4
 8004994:	eb12 0801 	adds.w	r8, r2, r1
 8004998:	4629      	mov	r1, r5
 800499a:	eb43 0901 	adc.w	r9, r3, r1
 800499e:	f04f 0200 	mov.w	r2, #0
 80049a2:	f04f 0300 	mov.w	r3, #0
 80049a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049b2:	4690      	mov	r8, r2
 80049b4:	4699      	mov	r9, r3
 80049b6:	4623      	mov	r3, r4
 80049b8:	eb18 0303 	adds.w	r3, r8, r3
 80049bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80049c0:	462b      	mov	r3, r5
 80049c2:	eb49 0303 	adc.w	r3, r9, r3
 80049c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80049ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80049d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80049da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80049de:	460b      	mov	r3, r1
 80049e0:	18db      	adds	r3, r3, r3
 80049e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80049e4:	4613      	mov	r3, r2
 80049e6:	eb42 0303 	adc.w	r3, r2, r3
 80049ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80049ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80049f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80049f4:	f7fc f970 	bl	8000cd8 <__aeabi_uldivmod>
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	4b63      	ldr	r3, [pc, #396]	@ (8004b8c <UART_SetConfig+0x2f4>)
 80049fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	011c      	lsls	r4, r3, #4
 8004a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004a14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004a18:	4642      	mov	r2, r8
 8004a1a:	464b      	mov	r3, r9
 8004a1c:	1891      	adds	r1, r2, r2
 8004a1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004a20:	415b      	adcs	r3, r3
 8004a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a28:	4641      	mov	r1, r8
 8004a2a:	eb12 0a01 	adds.w	sl, r2, r1
 8004a2e:	4649      	mov	r1, r9
 8004a30:	eb43 0b01 	adc.w	fp, r3, r1
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a48:	4692      	mov	sl, r2
 8004a4a:	469b      	mov	fp, r3
 8004a4c:	4643      	mov	r3, r8
 8004a4e:	eb1a 0303 	adds.w	r3, sl, r3
 8004a52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a56:	464b      	mov	r3, r9
 8004a58:	eb4b 0303 	adc.w	r3, fp, r3
 8004a5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a74:	460b      	mov	r3, r1
 8004a76:	18db      	adds	r3, r3, r3
 8004a78:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	eb42 0303 	adc.w	r3, r2, r3
 8004a80:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a8a:	f7fc f925 	bl	8000cd8 <__aeabi_uldivmod>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4611      	mov	r1, r2
 8004a94:	4b3d      	ldr	r3, [pc, #244]	@ (8004b8c <UART_SetConfig+0x2f4>)
 8004a96:	fba3 2301 	umull	r2, r3, r3, r1
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	2264      	movs	r2, #100	@ 0x64
 8004a9e:	fb02 f303 	mul.w	r3, r2, r3
 8004aa2:	1acb      	subs	r3, r1, r3
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004aaa:	4b38      	ldr	r3, [pc, #224]	@ (8004b8c <UART_SetConfig+0x2f4>)
 8004aac:	fba3 2302 	umull	r2, r3, r3, r2
 8004ab0:	095b      	lsrs	r3, r3, #5
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ab8:	441c      	add	r4, r3
 8004aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ac4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ac8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004acc:	4642      	mov	r2, r8
 8004ace:	464b      	mov	r3, r9
 8004ad0:	1891      	adds	r1, r2, r2
 8004ad2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ad4:	415b      	adcs	r3, r3
 8004ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ad8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004adc:	4641      	mov	r1, r8
 8004ade:	1851      	adds	r1, r2, r1
 8004ae0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	414b      	adcs	r3, r1
 8004ae6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004af4:	4659      	mov	r1, fp
 8004af6:	00cb      	lsls	r3, r1, #3
 8004af8:	4651      	mov	r1, sl
 8004afa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004afe:	4651      	mov	r1, sl
 8004b00:	00ca      	lsls	r2, r1, #3
 8004b02:	4610      	mov	r0, r2
 8004b04:	4619      	mov	r1, r3
 8004b06:	4603      	mov	r3, r0
 8004b08:	4642      	mov	r2, r8
 8004b0a:	189b      	adds	r3, r3, r2
 8004b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b10:	464b      	mov	r3, r9
 8004b12:	460a      	mov	r2, r1
 8004b14:	eb42 0303 	adc.w	r3, r2, r3
 8004b18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004b2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b30:	460b      	mov	r3, r1
 8004b32:	18db      	adds	r3, r3, r3
 8004b34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b36:	4613      	mov	r3, r2
 8004b38:	eb42 0303 	adc.w	r3, r2, r3
 8004b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004b46:	f7fc f8c7 	bl	8000cd8 <__aeabi_uldivmod>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8004b8c <UART_SetConfig+0x2f4>)
 8004b50:	fba3 1302 	umull	r1, r3, r3, r2
 8004b54:	095b      	lsrs	r3, r3, #5
 8004b56:	2164      	movs	r1, #100	@ 0x64
 8004b58:	fb01 f303 	mul.w	r3, r1, r3
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	3332      	adds	r3, #50	@ 0x32
 8004b62:	4a0a      	ldr	r2, [pc, #40]	@ (8004b8c <UART_SetConfig+0x2f4>)
 8004b64:	fba2 2303 	umull	r2, r3, r2, r3
 8004b68:	095b      	lsrs	r3, r3, #5
 8004b6a:	f003 0207 	and.w	r2, r3, #7
 8004b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4422      	add	r2, r4
 8004b76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b78:	e10a      	b.n	8004d90 <UART_SetConfig+0x4f8>
 8004b7a:	bf00      	nop
 8004b7c:	40011000 	.word	0x40011000
 8004b80:	40011400 	.word	0x40011400
 8004b84:	40011800 	.word	0x40011800
 8004b88:	40011c00 	.word	0x40011c00
 8004b8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b94:	2200      	movs	r2, #0
 8004b96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004ba2:	4642      	mov	r2, r8
 8004ba4:	464b      	mov	r3, r9
 8004ba6:	1891      	adds	r1, r2, r2
 8004ba8:	6239      	str	r1, [r7, #32]
 8004baa:	415b      	adcs	r3, r3
 8004bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bb2:	4641      	mov	r1, r8
 8004bb4:	1854      	adds	r4, r2, r1
 8004bb6:	4649      	mov	r1, r9
 8004bb8:	eb43 0501 	adc.w	r5, r3, r1
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	00eb      	lsls	r3, r5, #3
 8004bc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bca:	00e2      	lsls	r2, r4, #3
 8004bcc:	4614      	mov	r4, r2
 8004bce:	461d      	mov	r5, r3
 8004bd0:	4643      	mov	r3, r8
 8004bd2:	18e3      	adds	r3, r4, r3
 8004bd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004bd8:	464b      	mov	r3, r9
 8004bda:	eb45 0303 	adc.w	r3, r5, r3
 8004bde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004bee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004bfe:	4629      	mov	r1, r5
 8004c00:	008b      	lsls	r3, r1, #2
 8004c02:	4621      	mov	r1, r4
 8004c04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c08:	4621      	mov	r1, r4
 8004c0a:	008a      	lsls	r2, r1, #2
 8004c0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c10:	f7fc f862 	bl	8000cd8 <__aeabi_uldivmod>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4b60      	ldr	r3, [pc, #384]	@ (8004d9c <UART_SetConfig+0x504>)
 8004c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	011c      	lsls	r4, r3, #4
 8004c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c26:	2200      	movs	r2, #0
 8004c28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004c34:	4642      	mov	r2, r8
 8004c36:	464b      	mov	r3, r9
 8004c38:	1891      	adds	r1, r2, r2
 8004c3a:	61b9      	str	r1, [r7, #24]
 8004c3c:	415b      	adcs	r3, r3
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c44:	4641      	mov	r1, r8
 8004c46:	1851      	adds	r1, r2, r1
 8004c48:	6139      	str	r1, [r7, #16]
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	414b      	adcs	r3, r1
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c5c:	4659      	mov	r1, fp
 8004c5e:	00cb      	lsls	r3, r1, #3
 8004c60:	4651      	mov	r1, sl
 8004c62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c66:	4651      	mov	r1, sl
 8004c68:	00ca      	lsls	r2, r1, #3
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4603      	mov	r3, r0
 8004c70:	4642      	mov	r2, r8
 8004c72:	189b      	adds	r3, r3, r2
 8004c74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c78:	464b      	mov	r3, r9
 8004c7a:	460a      	mov	r2, r1
 8004c7c:	eb42 0303 	adc.w	r3, r2, r3
 8004c80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c9c:	4649      	mov	r1, r9
 8004c9e:	008b      	lsls	r3, r1, #2
 8004ca0:	4641      	mov	r1, r8
 8004ca2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ca6:	4641      	mov	r1, r8
 8004ca8:	008a      	lsls	r2, r1, #2
 8004caa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004cae:	f7fc f813 	bl	8000cd8 <__aeabi_uldivmod>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	4b38      	ldr	r3, [pc, #224]	@ (8004d9c <UART_SetConfig+0x504>)
 8004cba:	fba3 2301 	umull	r2, r3, r3, r1
 8004cbe:	095b      	lsrs	r3, r3, #5
 8004cc0:	2264      	movs	r2, #100	@ 0x64
 8004cc2:	fb02 f303 	mul.w	r3, r2, r3
 8004cc6:	1acb      	subs	r3, r1, r3
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	3332      	adds	r3, #50	@ 0x32
 8004ccc:	4a33      	ldr	r2, [pc, #204]	@ (8004d9c <UART_SetConfig+0x504>)
 8004cce:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd2:	095b      	lsrs	r3, r3, #5
 8004cd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cd8:	441c      	add	r4, r3
 8004cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cde:	2200      	movs	r2, #0
 8004ce0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ce2:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ce4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004ce8:	4642      	mov	r2, r8
 8004cea:	464b      	mov	r3, r9
 8004cec:	1891      	adds	r1, r2, r2
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	415b      	adcs	r3, r3
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cf8:	4641      	mov	r1, r8
 8004cfa:	1851      	adds	r1, r2, r1
 8004cfc:	6039      	str	r1, [r7, #0]
 8004cfe:	4649      	mov	r1, r9
 8004d00:	414b      	adcs	r3, r1
 8004d02:	607b      	str	r3, [r7, #4]
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d10:	4659      	mov	r1, fp
 8004d12:	00cb      	lsls	r3, r1, #3
 8004d14:	4651      	mov	r1, sl
 8004d16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d1a:	4651      	mov	r1, sl
 8004d1c:	00ca      	lsls	r2, r1, #3
 8004d1e:	4610      	mov	r0, r2
 8004d20:	4619      	mov	r1, r3
 8004d22:	4603      	mov	r3, r0
 8004d24:	4642      	mov	r2, r8
 8004d26:	189b      	adds	r3, r3, r2
 8004d28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d2a:	464b      	mov	r3, r9
 8004d2c:	460a      	mov	r2, r1
 8004d2e:	eb42 0303 	adc.w	r3, r2, r3
 8004d32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d3e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004d4c:	4649      	mov	r1, r9
 8004d4e:	008b      	lsls	r3, r1, #2
 8004d50:	4641      	mov	r1, r8
 8004d52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d56:	4641      	mov	r1, r8
 8004d58:	008a      	lsls	r2, r1, #2
 8004d5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004d5e:	f7fb ffbb 	bl	8000cd8 <__aeabi_uldivmod>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	4b0d      	ldr	r3, [pc, #52]	@ (8004d9c <UART_SetConfig+0x504>)
 8004d68:	fba3 1302 	umull	r1, r3, r3, r2
 8004d6c:	095b      	lsrs	r3, r3, #5
 8004d6e:	2164      	movs	r1, #100	@ 0x64
 8004d70:	fb01 f303 	mul.w	r3, r1, r3
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	3332      	adds	r3, #50	@ 0x32
 8004d7a:	4a08      	ldr	r2, [pc, #32]	@ (8004d9c <UART_SetConfig+0x504>)
 8004d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	f003 020f 	and.w	r2, r3, #15
 8004d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4422      	add	r2, r4
 8004d8e:	609a      	str	r2, [r3, #8]
}
 8004d90:	bf00      	nop
 8004d92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d96:	46bd      	mov	sp, r7
 8004d98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d9c:	51eb851f 	.word	0x51eb851f

08004da0 <atoi>:
 8004da0:	220a      	movs	r2, #10
 8004da2:	2100      	movs	r1, #0
 8004da4:	f000 b87c 	b.w	8004ea0 <strtol>

08004da8 <_strtol_l.constprop.0>:
 8004da8:	2b24      	cmp	r3, #36	@ 0x24
 8004daa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dae:	4686      	mov	lr, r0
 8004db0:	4690      	mov	r8, r2
 8004db2:	d801      	bhi.n	8004db8 <_strtol_l.constprop.0+0x10>
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d106      	bne.n	8004dc6 <_strtol_l.constprop.0+0x1e>
 8004db8:	f001 f964 	bl	8006084 <__errno>
 8004dbc:	2316      	movs	r3, #22
 8004dbe:	6003      	str	r3, [r0, #0]
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc6:	4834      	ldr	r0, [pc, #208]	@ (8004e98 <_strtol_l.constprop.0+0xf0>)
 8004dc8:	460d      	mov	r5, r1
 8004dca:	462a      	mov	r2, r5
 8004dcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004dd0:	5d06      	ldrb	r6, [r0, r4]
 8004dd2:	f016 0608 	ands.w	r6, r6, #8
 8004dd6:	d1f8      	bne.n	8004dca <_strtol_l.constprop.0+0x22>
 8004dd8:	2c2d      	cmp	r4, #45	@ 0x2d
 8004dda:	d12d      	bne.n	8004e38 <_strtol_l.constprop.0+0x90>
 8004ddc:	782c      	ldrb	r4, [r5, #0]
 8004dde:	2601      	movs	r6, #1
 8004de0:	1c95      	adds	r5, r2, #2
 8004de2:	f033 0210 	bics.w	r2, r3, #16
 8004de6:	d109      	bne.n	8004dfc <_strtol_l.constprop.0+0x54>
 8004de8:	2c30      	cmp	r4, #48	@ 0x30
 8004dea:	d12a      	bne.n	8004e42 <_strtol_l.constprop.0+0x9a>
 8004dec:	782a      	ldrb	r2, [r5, #0]
 8004dee:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004df2:	2a58      	cmp	r2, #88	@ 0x58
 8004df4:	d125      	bne.n	8004e42 <_strtol_l.constprop.0+0x9a>
 8004df6:	786c      	ldrb	r4, [r5, #1]
 8004df8:	2310      	movs	r3, #16
 8004dfa:	3502      	adds	r5, #2
 8004dfc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004e00:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004e04:	2200      	movs	r2, #0
 8004e06:	fbbc f9f3 	udiv	r9, ip, r3
 8004e0a:	4610      	mov	r0, r2
 8004e0c:	fb03 ca19 	mls	sl, r3, r9, ip
 8004e10:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004e14:	2f09      	cmp	r7, #9
 8004e16:	d81b      	bhi.n	8004e50 <_strtol_l.constprop.0+0xa8>
 8004e18:	463c      	mov	r4, r7
 8004e1a:	42a3      	cmp	r3, r4
 8004e1c:	dd27      	ble.n	8004e6e <_strtol_l.constprop.0+0xc6>
 8004e1e:	1c57      	adds	r7, r2, #1
 8004e20:	d007      	beq.n	8004e32 <_strtol_l.constprop.0+0x8a>
 8004e22:	4581      	cmp	r9, r0
 8004e24:	d320      	bcc.n	8004e68 <_strtol_l.constprop.0+0xc0>
 8004e26:	d101      	bne.n	8004e2c <_strtol_l.constprop.0+0x84>
 8004e28:	45a2      	cmp	sl, r4
 8004e2a:	db1d      	blt.n	8004e68 <_strtol_l.constprop.0+0xc0>
 8004e2c:	fb00 4003 	mla	r0, r0, r3, r4
 8004e30:	2201      	movs	r2, #1
 8004e32:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e36:	e7eb      	b.n	8004e10 <_strtol_l.constprop.0+0x68>
 8004e38:	2c2b      	cmp	r4, #43	@ 0x2b
 8004e3a:	bf04      	itt	eq
 8004e3c:	782c      	ldrbeq	r4, [r5, #0]
 8004e3e:	1c95      	addeq	r5, r2, #2
 8004e40:	e7cf      	b.n	8004de2 <_strtol_l.constprop.0+0x3a>
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1da      	bne.n	8004dfc <_strtol_l.constprop.0+0x54>
 8004e46:	2c30      	cmp	r4, #48	@ 0x30
 8004e48:	bf0c      	ite	eq
 8004e4a:	2308      	moveq	r3, #8
 8004e4c:	230a      	movne	r3, #10
 8004e4e:	e7d5      	b.n	8004dfc <_strtol_l.constprop.0+0x54>
 8004e50:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004e54:	2f19      	cmp	r7, #25
 8004e56:	d801      	bhi.n	8004e5c <_strtol_l.constprop.0+0xb4>
 8004e58:	3c37      	subs	r4, #55	@ 0x37
 8004e5a:	e7de      	b.n	8004e1a <_strtol_l.constprop.0+0x72>
 8004e5c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004e60:	2f19      	cmp	r7, #25
 8004e62:	d804      	bhi.n	8004e6e <_strtol_l.constprop.0+0xc6>
 8004e64:	3c57      	subs	r4, #87	@ 0x57
 8004e66:	e7d8      	b.n	8004e1a <_strtol_l.constprop.0+0x72>
 8004e68:	f04f 32ff 	mov.w	r2, #4294967295
 8004e6c:	e7e1      	b.n	8004e32 <_strtol_l.constprop.0+0x8a>
 8004e6e:	1c53      	adds	r3, r2, #1
 8004e70:	d108      	bne.n	8004e84 <_strtol_l.constprop.0+0xdc>
 8004e72:	2322      	movs	r3, #34	@ 0x22
 8004e74:	f8ce 3000 	str.w	r3, [lr]
 8004e78:	4660      	mov	r0, ip
 8004e7a:	f1b8 0f00 	cmp.w	r8, #0
 8004e7e:	d0a0      	beq.n	8004dc2 <_strtol_l.constprop.0+0x1a>
 8004e80:	1e69      	subs	r1, r5, #1
 8004e82:	e006      	b.n	8004e92 <_strtol_l.constprop.0+0xea>
 8004e84:	b106      	cbz	r6, 8004e88 <_strtol_l.constprop.0+0xe0>
 8004e86:	4240      	negs	r0, r0
 8004e88:	f1b8 0f00 	cmp.w	r8, #0
 8004e8c:	d099      	beq.n	8004dc2 <_strtol_l.constprop.0+0x1a>
 8004e8e:	2a00      	cmp	r2, #0
 8004e90:	d1f6      	bne.n	8004e80 <_strtol_l.constprop.0+0xd8>
 8004e92:	f8c8 1000 	str.w	r1, [r8]
 8004e96:	e794      	b.n	8004dc2 <_strtol_l.constprop.0+0x1a>
 8004e98:	0800a4f9 	.word	0x0800a4f9

08004e9c <_strtol_r>:
 8004e9c:	f7ff bf84 	b.w	8004da8 <_strtol_l.constprop.0>

08004ea0 <strtol>:
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	460a      	mov	r2, r1
 8004ea4:	4601      	mov	r1, r0
 8004ea6:	4802      	ldr	r0, [pc, #8]	@ (8004eb0 <strtol+0x10>)
 8004ea8:	6800      	ldr	r0, [r0, #0]
 8004eaa:	f7ff bf7d 	b.w	8004da8 <_strtol_l.constprop.0>
 8004eae:	bf00      	nop
 8004eb0:	20000054 	.word	0x20000054

08004eb4 <__cvt>:
 8004eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb8:	ec57 6b10 	vmov	r6, r7, d0
 8004ebc:	2f00      	cmp	r7, #0
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	463b      	mov	r3, r7
 8004ec4:	bfbb      	ittet	lt
 8004ec6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004eca:	461f      	movlt	r7, r3
 8004ecc:	2300      	movge	r3, #0
 8004ece:	232d      	movlt	r3, #45	@ 0x2d
 8004ed0:	700b      	strb	r3, [r1, #0]
 8004ed2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ed4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004ed8:	4691      	mov	r9, r2
 8004eda:	f023 0820 	bic.w	r8, r3, #32
 8004ede:	bfbc      	itt	lt
 8004ee0:	4632      	movlt	r2, r6
 8004ee2:	4616      	movlt	r6, r2
 8004ee4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004ee8:	d005      	beq.n	8004ef6 <__cvt+0x42>
 8004eea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004eee:	d100      	bne.n	8004ef2 <__cvt+0x3e>
 8004ef0:	3401      	adds	r4, #1
 8004ef2:	2102      	movs	r1, #2
 8004ef4:	e000      	b.n	8004ef8 <__cvt+0x44>
 8004ef6:	2103      	movs	r1, #3
 8004ef8:	ab03      	add	r3, sp, #12
 8004efa:	9301      	str	r3, [sp, #4]
 8004efc:	ab02      	add	r3, sp, #8
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	ec47 6b10 	vmov	d0, r6, r7
 8004f04:	4653      	mov	r3, sl
 8004f06:	4622      	mov	r2, r4
 8004f08:	f001 f97a 	bl	8006200 <_dtoa_r>
 8004f0c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004f10:	4605      	mov	r5, r0
 8004f12:	d119      	bne.n	8004f48 <__cvt+0x94>
 8004f14:	f019 0f01 	tst.w	r9, #1
 8004f18:	d00e      	beq.n	8004f38 <__cvt+0x84>
 8004f1a:	eb00 0904 	add.w	r9, r0, r4
 8004f1e:	2200      	movs	r2, #0
 8004f20:	2300      	movs	r3, #0
 8004f22:	4630      	mov	r0, r6
 8004f24:	4639      	mov	r1, r7
 8004f26:	f7fb fdf7 	bl	8000b18 <__aeabi_dcmpeq>
 8004f2a:	b108      	cbz	r0, 8004f30 <__cvt+0x7c>
 8004f2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f30:	2230      	movs	r2, #48	@ 0x30
 8004f32:	9b03      	ldr	r3, [sp, #12]
 8004f34:	454b      	cmp	r3, r9
 8004f36:	d31e      	bcc.n	8004f76 <__cvt+0xc2>
 8004f38:	9b03      	ldr	r3, [sp, #12]
 8004f3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004f3c:	1b5b      	subs	r3, r3, r5
 8004f3e:	4628      	mov	r0, r5
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	b004      	add	sp, #16
 8004f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f4c:	eb00 0904 	add.w	r9, r0, r4
 8004f50:	d1e5      	bne.n	8004f1e <__cvt+0x6a>
 8004f52:	7803      	ldrb	r3, [r0, #0]
 8004f54:	2b30      	cmp	r3, #48	@ 0x30
 8004f56:	d10a      	bne.n	8004f6e <__cvt+0xba>
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	4639      	mov	r1, r7
 8004f60:	f7fb fdda 	bl	8000b18 <__aeabi_dcmpeq>
 8004f64:	b918      	cbnz	r0, 8004f6e <__cvt+0xba>
 8004f66:	f1c4 0401 	rsb	r4, r4, #1
 8004f6a:	f8ca 4000 	str.w	r4, [sl]
 8004f6e:	f8da 3000 	ldr.w	r3, [sl]
 8004f72:	4499      	add	r9, r3
 8004f74:	e7d3      	b.n	8004f1e <__cvt+0x6a>
 8004f76:	1c59      	adds	r1, r3, #1
 8004f78:	9103      	str	r1, [sp, #12]
 8004f7a:	701a      	strb	r2, [r3, #0]
 8004f7c:	e7d9      	b.n	8004f32 <__cvt+0x7e>

08004f7e <__exponent>:
 8004f7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f80:	2900      	cmp	r1, #0
 8004f82:	bfba      	itte	lt
 8004f84:	4249      	neglt	r1, r1
 8004f86:	232d      	movlt	r3, #45	@ 0x2d
 8004f88:	232b      	movge	r3, #43	@ 0x2b
 8004f8a:	2909      	cmp	r1, #9
 8004f8c:	7002      	strb	r2, [r0, #0]
 8004f8e:	7043      	strb	r3, [r0, #1]
 8004f90:	dd29      	ble.n	8004fe6 <__exponent+0x68>
 8004f92:	f10d 0307 	add.w	r3, sp, #7
 8004f96:	461d      	mov	r5, r3
 8004f98:	270a      	movs	r7, #10
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004fa0:	fb07 1416 	mls	r4, r7, r6, r1
 8004fa4:	3430      	adds	r4, #48	@ 0x30
 8004fa6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004faa:	460c      	mov	r4, r1
 8004fac:	2c63      	cmp	r4, #99	@ 0x63
 8004fae:	f103 33ff 	add.w	r3, r3, #4294967295
 8004fb2:	4631      	mov	r1, r6
 8004fb4:	dcf1      	bgt.n	8004f9a <__exponent+0x1c>
 8004fb6:	3130      	adds	r1, #48	@ 0x30
 8004fb8:	1e94      	subs	r4, r2, #2
 8004fba:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004fbe:	1c41      	adds	r1, r0, #1
 8004fc0:	4623      	mov	r3, r4
 8004fc2:	42ab      	cmp	r3, r5
 8004fc4:	d30a      	bcc.n	8004fdc <__exponent+0x5e>
 8004fc6:	f10d 0309 	add.w	r3, sp, #9
 8004fca:	1a9b      	subs	r3, r3, r2
 8004fcc:	42ac      	cmp	r4, r5
 8004fce:	bf88      	it	hi
 8004fd0:	2300      	movhi	r3, #0
 8004fd2:	3302      	adds	r3, #2
 8004fd4:	4403      	add	r3, r0
 8004fd6:	1a18      	subs	r0, r3, r0
 8004fd8:	b003      	add	sp, #12
 8004fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fdc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004fe0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004fe4:	e7ed      	b.n	8004fc2 <__exponent+0x44>
 8004fe6:	2330      	movs	r3, #48	@ 0x30
 8004fe8:	3130      	adds	r1, #48	@ 0x30
 8004fea:	7083      	strb	r3, [r0, #2]
 8004fec:	70c1      	strb	r1, [r0, #3]
 8004fee:	1d03      	adds	r3, r0, #4
 8004ff0:	e7f1      	b.n	8004fd6 <__exponent+0x58>
	...

08004ff4 <_printf_float>:
 8004ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff8:	b08d      	sub	sp, #52	@ 0x34
 8004ffa:	460c      	mov	r4, r1
 8004ffc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005000:	4616      	mov	r6, r2
 8005002:	461f      	mov	r7, r3
 8005004:	4605      	mov	r5, r0
 8005006:	f000 fff3 	bl	8005ff0 <_localeconv_r>
 800500a:	6803      	ldr	r3, [r0, #0]
 800500c:	9304      	str	r3, [sp, #16]
 800500e:	4618      	mov	r0, r3
 8005010:	f7fb f956 	bl	80002c0 <strlen>
 8005014:	2300      	movs	r3, #0
 8005016:	930a      	str	r3, [sp, #40]	@ 0x28
 8005018:	f8d8 3000 	ldr.w	r3, [r8]
 800501c:	9005      	str	r0, [sp, #20]
 800501e:	3307      	adds	r3, #7
 8005020:	f023 0307 	bic.w	r3, r3, #7
 8005024:	f103 0208 	add.w	r2, r3, #8
 8005028:	f894 a018 	ldrb.w	sl, [r4, #24]
 800502c:	f8d4 b000 	ldr.w	fp, [r4]
 8005030:	f8c8 2000 	str.w	r2, [r8]
 8005034:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005038:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800503c:	9307      	str	r3, [sp, #28]
 800503e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005042:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005046:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800504a:	4b9c      	ldr	r3, [pc, #624]	@ (80052bc <_printf_float+0x2c8>)
 800504c:	f04f 32ff 	mov.w	r2, #4294967295
 8005050:	f7fb fd94 	bl	8000b7c <__aeabi_dcmpun>
 8005054:	bb70      	cbnz	r0, 80050b4 <_printf_float+0xc0>
 8005056:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800505a:	4b98      	ldr	r3, [pc, #608]	@ (80052bc <_printf_float+0x2c8>)
 800505c:	f04f 32ff 	mov.w	r2, #4294967295
 8005060:	f7fb fd6e 	bl	8000b40 <__aeabi_dcmple>
 8005064:	bb30      	cbnz	r0, 80050b4 <_printf_float+0xc0>
 8005066:	2200      	movs	r2, #0
 8005068:	2300      	movs	r3, #0
 800506a:	4640      	mov	r0, r8
 800506c:	4649      	mov	r1, r9
 800506e:	f7fb fd5d 	bl	8000b2c <__aeabi_dcmplt>
 8005072:	b110      	cbz	r0, 800507a <_printf_float+0x86>
 8005074:	232d      	movs	r3, #45	@ 0x2d
 8005076:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800507a:	4a91      	ldr	r2, [pc, #580]	@ (80052c0 <_printf_float+0x2cc>)
 800507c:	4b91      	ldr	r3, [pc, #580]	@ (80052c4 <_printf_float+0x2d0>)
 800507e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005082:	bf94      	ite	ls
 8005084:	4690      	movls	r8, r2
 8005086:	4698      	movhi	r8, r3
 8005088:	2303      	movs	r3, #3
 800508a:	6123      	str	r3, [r4, #16]
 800508c:	f02b 0304 	bic.w	r3, fp, #4
 8005090:	6023      	str	r3, [r4, #0]
 8005092:	f04f 0900 	mov.w	r9, #0
 8005096:	9700      	str	r7, [sp, #0]
 8005098:	4633      	mov	r3, r6
 800509a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800509c:	4621      	mov	r1, r4
 800509e:	4628      	mov	r0, r5
 80050a0:	f000 f9d2 	bl	8005448 <_printf_common>
 80050a4:	3001      	adds	r0, #1
 80050a6:	f040 808d 	bne.w	80051c4 <_printf_float+0x1d0>
 80050aa:	f04f 30ff 	mov.w	r0, #4294967295
 80050ae:	b00d      	add	sp, #52	@ 0x34
 80050b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b4:	4642      	mov	r2, r8
 80050b6:	464b      	mov	r3, r9
 80050b8:	4640      	mov	r0, r8
 80050ba:	4649      	mov	r1, r9
 80050bc:	f7fb fd5e 	bl	8000b7c <__aeabi_dcmpun>
 80050c0:	b140      	cbz	r0, 80050d4 <_printf_float+0xe0>
 80050c2:	464b      	mov	r3, r9
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	bfbc      	itt	lt
 80050c8:	232d      	movlt	r3, #45	@ 0x2d
 80050ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80050ce:	4a7e      	ldr	r2, [pc, #504]	@ (80052c8 <_printf_float+0x2d4>)
 80050d0:	4b7e      	ldr	r3, [pc, #504]	@ (80052cc <_printf_float+0x2d8>)
 80050d2:	e7d4      	b.n	800507e <_printf_float+0x8a>
 80050d4:	6863      	ldr	r3, [r4, #4]
 80050d6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80050da:	9206      	str	r2, [sp, #24]
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	d13b      	bne.n	8005158 <_printf_float+0x164>
 80050e0:	2306      	movs	r3, #6
 80050e2:	6063      	str	r3, [r4, #4]
 80050e4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80050e8:	2300      	movs	r3, #0
 80050ea:	6022      	str	r2, [r4, #0]
 80050ec:	9303      	str	r3, [sp, #12]
 80050ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80050f0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80050f4:	ab09      	add	r3, sp, #36	@ 0x24
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	6861      	ldr	r1, [r4, #4]
 80050fa:	ec49 8b10 	vmov	d0, r8, r9
 80050fe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005102:	4628      	mov	r0, r5
 8005104:	f7ff fed6 	bl	8004eb4 <__cvt>
 8005108:	9b06      	ldr	r3, [sp, #24]
 800510a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800510c:	2b47      	cmp	r3, #71	@ 0x47
 800510e:	4680      	mov	r8, r0
 8005110:	d129      	bne.n	8005166 <_printf_float+0x172>
 8005112:	1cc8      	adds	r0, r1, #3
 8005114:	db02      	blt.n	800511c <_printf_float+0x128>
 8005116:	6863      	ldr	r3, [r4, #4]
 8005118:	4299      	cmp	r1, r3
 800511a:	dd41      	ble.n	80051a0 <_printf_float+0x1ac>
 800511c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005120:	fa5f fa8a 	uxtb.w	sl, sl
 8005124:	3901      	subs	r1, #1
 8005126:	4652      	mov	r2, sl
 8005128:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800512c:	9109      	str	r1, [sp, #36]	@ 0x24
 800512e:	f7ff ff26 	bl	8004f7e <__exponent>
 8005132:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005134:	1813      	adds	r3, r2, r0
 8005136:	2a01      	cmp	r2, #1
 8005138:	4681      	mov	r9, r0
 800513a:	6123      	str	r3, [r4, #16]
 800513c:	dc02      	bgt.n	8005144 <_printf_float+0x150>
 800513e:	6822      	ldr	r2, [r4, #0]
 8005140:	07d2      	lsls	r2, r2, #31
 8005142:	d501      	bpl.n	8005148 <_printf_float+0x154>
 8005144:	3301      	adds	r3, #1
 8005146:	6123      	str	r3, [r4, #16]
 8005148:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0a2      	beq.n	8005096 <_printf_float+0xa2>
 8005150:	232d      	movs	r3, #45	@ 0x2d
 8005152:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005156:	e79e      	b.n	8005096 <_printf_float+0xa2>
 8005158:	9a06      	ldr	r2, [sp, #24]
 800515a:	2a47      	cmp	r2, #71	@ 0x47
 800515c:	d1c2      	bne.n	80050e4 <_printf_float+0xf0>
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1c0      	bne.n	80050e4 <_printf_float+0xf0>
 8005162:	2301      	movs	r3, #1
 8005164:	e7bd      	b.n	80050e2 <_printf_float+0xee>
 8005166:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800516a:	d9db      	bls.n	8005124 <_printf_float+0x130>
 800516c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005170:	d118      	bne.n	80051a4 <_printf_float+0x1b0>
 8005172:	2900      	cmp	r1, #0
 8005174:	6863      	ldr	r3, [r4, #4]
 8005176:	dd0b      	ble.n	8005190 <_printf_float+0x19c>
 8005178:	6121      	str	r1, [r4, #16]
 800517a:	b913      	cbnz	r3, 8005182 <_printf_float+0x18e>
 800517c:	6822      	ldr	r2, [r4, #0]
 800517e:	07d0      	lsls	r0, r2, #31
 8005180:	d502      	bpl.n	8005188 <_printf_float+0x194>
 8005182:	3301      	adds	r3, #1
 8005184:	440b      	add	r3, r1
 8005186:	6123      	str	r3, [r4, #16]
 8005188:	65a1      	str	r1, [r4, #88]	@ 0x58
 800518a:	f04f 0900 	mov.w	r9, #0
 800518e:	e7db      	b.n	8005148 <_printf_float+0x154>
 8005190:	b913      	cbnz	r3, 8005198 <_printf_float+0x1a4>
 8005192:	6822      	ldr	r2, [r4, #0]
 8005194:	07d2      	lsls	r2, r2, #31
 8005196:	d501      	bpl.n	800519c <_printf_float+0x1a8>
 8005198:	3302      	adds	r3, #2
 800519a:	e7f4      	b.n	8005186 <_printf_float+0x192>
 800519c:	2301      	movs	r3, #1
 800519e:	e7f2      	b.n	8005186 <_printf_float+0x192>
 80051a0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80051a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051a6:	4299      	cmp	r1, r3
 80051a8:	db05      	blt.n	80051b6 <_printf_float+0x1c2>
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	6121      	str	r1, [r4, #16]
 80051ae:	07d8      	lsls	r0, r3, #31
 80051b0:	d5ea      	bpl.n	8005188 <_printf_float+0x194>
 80051b2:	1c4b      	adds	r3, r1, #1
 80051b4:	e7e7      	b.n	8005186 <_printf_float+0x192>
 80051b6:	2900      	cmp	r1, #0
 80051b8:	bfd4      	ite	le
 80051ba:	f1c1 0202 	rsble	r2, r1, #2
 80051be:	2201      	movgt	r2, #1
 80051c0:	4413      	add	r3, r2
 80051c2:	e7e0      	b.n	8005186 <_printf_float+0x192>
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	055a      	lsls	r2, r3, #21
 80051c8:	d407      	bmi.n	80051da <_printf_float+0x1e6>
 80051ca:	6923      	ldr	r3, [r4, #16]
 80051cc:	4642      	mov	r2, r8
 80051ce:	4631      	mov	r1, r6
 80051d0:	4628      	mov	r0, r5
 80051d2:	47b8      	blx	r7
 80051d4:	3001      	adds	r0, #1
 80051d6:	d12b      	bne.n	8005230 <_printf_float+0x23c>
 80051d8:	e767      	b.n	80050aa <_printf_float+0xb6>
 80051da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80051de:	f240 80dd 	bls.w	800539c <_printf_float+0x3a8>
 80051e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80051e6:	2200      	movs	r2, #0
 80051e8:	2300      	movs	r3, #0
 80051ea:	f7fb fc95 	bl	8000b18 <__aeabi_dcmpeq>
 80051ee:	2800      	cmp	r0, #0
 80051f0:	d033      	beq.n	800525a <_printf_float+0x266>
 80051f2:	4a37      	ldr	r2, [pc, #220]	@ (80052d0 <_printf_float+0x2dc>)
 80051f4:	2301      	movs	r3, #1
 80051f6:	4631      	mov	r1, r6
 80051f8:	4628      	mov	r0, r5
 80051fa:	47b8      	blx	r7
 80051fc:	3001      	adds	r0, #1
 80051fe:	f43f af54 	beq.w	80050aa <_printf_float+0xb6>
 8005202:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005206:	4543      	cmp	r3, r8
 8005208:	db02      	blt.n	8005210 <_printf_float+0x21c>
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	07d8      	lsls	r0, r3, #31
 800520e:	d50f      	bpl.n	8005230 <_printf_float+0x23c>
 8005210:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005214:	4631      	mov	r1, r6
 8005216:	4628      	mov	r0, r5
 8005218:	47b8      	blx	r7
 800521a:	3001      	adds	r0, #1
 800521c:	f43f af45 	beq.w	80050aa <_printf_float+0xb6>
 8005220:	f04f 0900 	mov.w	r9, #0
 8005224:	f108 38ff 	add.w	r8, r8, #4294967295
 8005228:	f104 0a1a 	add.w	sl, r4, #26
 800522c:	45c8      	cmp	r8, r9
 800522e:	dc09      	bgt.n	8005244 <_printf_float+0x250>
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	079b      	lsls	r3, r3, #30
 8005234:	f100 8103 	bmi.w	800543e <_printf_float+0x44a>
 8005238:	68e0      	ldr	r0, [r4, #12]
 800523a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800523c:	4298      	cmp	r0, r3
 800523e:	bfb8      	it	lt
 8005240:	4618      	movlt	r0, r3
 8005242:	e734      	b.n	80050ae <_printf_float+0xba>
 8005244:	2301      	movs	r3, #1
 8005246:	4652      	mov	r2, sl
 8005248:	4631      	mov	r1, r6
 800524a:	4628      	mov	r0, r5
 800524c:	47b8      	blx	r7
 800524e:	3001      	adds	r0, #1
 8005250:	f43f af2b 	beq.w	80050aa <_printf_float+0xb6>
 8005254:	f109 0901 	add.w	r9, r9, #1
 8005258:	e7e8      	b.n	800522c <_printf_float+0x238>
 800525a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800525c:	2b00      	cmp	r3, #0
 800525e:	dc39      	bgt.n	80052d4 <_printf_float+0x2e0>
 8005260:	4a1b      	ldr	r2, [pc, #108]	@ (80052d0 <_printf_float+0x2dc>)
 8005262:	2301      	movs	r3, #1
 8005264:	4631      	mov	r1, r6
 8005266:	4628      	mov	r0, r5
 8005268:	47b8      	blx	r7
 800526a:	3001      	adds	r0, #1
 800526c:	f43f af1d 	beq.w	80050aa <_printf_float+0xb6>
 8005270:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005274:	ea59 0303 	orrs.w	r3, r9, r3
 8005278:	d102      	bne.n	8005280 <_printf_float+0x28c>
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	07d9      	lsls	r1, r3, #31
 800527e:	d5d7      	bpl.n	8005230 <_printf_float+0x23c>
 8005280:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005284:	4631      	mov	r1, r6
 8005286:	4628      	mov	r0, r5
 8005288:	47b8      	blx	r7
 800528a:	3001      	adds	r0, #1
 800528c:	f43f af0d 	beq.w	80050aa <_printf_float+0xb6>
 8005290:	f04f 0a00 	mov.w	sl, #0
 8005294:	f104 0b1a 	add.w	fp, r4, #26
 8005298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800529a:	425b      	negs	r3, r3
 800529c:	4553      	cmp	r3, sl
 800529e:	dc01      	bgt.n	80052a4 <_printf_float+0x2b0>
 80052a0:	464b      	mov	r3, r9
 80052a2:	e793      	b.n	80051cc <_printf_float+0x1d8>
 80052a4:	2301      	movs	r3, #1
 80052a6:	465a      	mov	r2, fp
 80052a8:	4631      	mov	r1, r6
 80052aa:	4628      	mov	r0, r5
 80052ac:	47b8      	blx	r7
 80052ae:	3001      	adds	r0, #1
 80052b0:	f43f aefb 	beq.w	80050aa <_printf_float+0xb6>
 80052b4:	f10a 0a01 	add.w	sl, sl, #1
 80052b8:	e7ee      	b.n	8005298 <_printf_float+0x2a4>
 80052ba:	bf00      	nop
 80052bc:	7fefffff 	.word	0x7fefffff
 80052c0:	0800a5f9 	.word	0x0800a5f9
 80052c4:	0800a5fd 	.word	0x0800a5fd
 80052c8:	0800a601 	.word	0x0800a601
 80052cc:	0800a605 	.word	0x0800a605
 80052d0:	0800a609 	.word	0x0800a609
 80052d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80052d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80052da:	4553      	cmp	r3, sl
 80052dc:	bfa8      	it	ge
 80052de:	4653      	movge	r3, sl
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	4699      	mov	r9, r3
 80052e4:	dc36      	bgt.n	8005354 <_printf_float+0x360>
 80052e6:	f04f 0b00 	mov.w	fp, #0
 80052ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052ee:	f104 021a 	add.w	r2, r4, #26
 80052f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80052f4:	9306      	str	r3, [sp, #24]
 80052f6:	eba3 0309 	sub.w	r3, r3, r9
 80052fa:	455b      	cmp	r3, fp
 80052fc:	dc31      	bgt.n	8005362 <_printf_float+0x36e>
 80052fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005300:	459a      	cmp	sl, r3
 8005302:	dc3a      	bgt.n	800537a <_printf_float+0x386>
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	07da      	lsls	r2, r3, #31
 8005308:	d437      	bmi.n	800537a <_printf_float+0x386>
 800530a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800530c:	ebaa 0903 	sub.w	r9, sl, r3
 8005310:	9b06      	ldr	r3, [sp, #24]
 8005312:	ebaa 0303 	sub.w	r3, sl, r3
 8005316:	4599      	cmp	r9, r3
 8005318:	bfa8      	it	ge
 800531a:	4699      	movge	r9, r3
 800531c:	f1b9 0f00 	cmp.w	r9, #0
 8005320:	dc33      	bgt.n	800538a <_printf_float+0x396>
 8005322:	f04f 0800 	mov.w	r8, #0
 8005326:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800532a:	f104 0b1a 	add.w	fp, r4, #26
 800532e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005330:	ebaa 0303 	sub.w	r3, sl, r3
 8005334:	eba3 0309 	sub.w	r3, r3, r9
 8005338:	4543      	cmp	r3, r8
 800533a:	f77f af79 	ble.w	8005230 <_printf_float+0x23c>
 800533e:	2301      	movs	r3, #1
 8005340:	465a      	mov	r2, fp
 8005342:	4631      	mov	r1, r6
 8005344:	4628      	mov	r0, r5
 8005346:	47b8      	blx	r7
 8005348:	3001      	adds	r0, #1
 800534a:	f43f aeae 	beq.w	80050aa <_printf_float+0xb6>
 800534e:	f108 0801 	add.w	r8, r8, #1
 8005352:	e7ec      	b.n	800532e <_printf_float+0x33a>
 8005354:	4642      	mov	r2, r8
 8005356:	4631      	mov	r1, r6
 8005358:	4628      	mov	r0, r5
 800535a:	47b8      	blx	r7
 800535c:	3001      	adds	r0, #1
 800535e:	d1c2      	bne.n	80052e6 <_printf_float+0x2f2>
 8005360:	e6a3      	b.n	80050aa <_printf_float+0xb6>
 8005362:	2301      	movs	r3, #1
 8005364:	4631      	mov	r1, r6
 8005366:	4628      	mov	r0, r5
 8005368:	9206      	str	r2, [sp, #24]
 800536a:	47b8      	blx	r7
 800536c:	3001      	adds	r0, #1
 800536e:	f43f ae9c 	beq.w	80050aa <_printf_float+0xb6>
 8005372:	9a06      	ldr	r2, [sp, #24]
 8005374:	f10b 0b01 	add.w	fp, fp, #1
 8005378:	e7bb      	b.n	80052f2 <_printf_float+0x2fe>
 800537a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800537e:	4631      	mov	r1, r6
 8005380:	4628      	mov	r0, r5
 8005382:	47b8      	blx	r7
 8005384:	3001      	adds	r0, #1
 8005386:	d1c0      	bne.n	800530a <_printf_float+0x316>
 8005388:	e68f      	b.n	80050aa <_printf_float+0xb6>
 800538a:	9a06      	ldr	r2, [sp, #24]
 800538c:	464b      	mov	r3, r9
 800538e:	4442      	add	r2, r8
 8005390:	4631      	mov	r1, r6
 8005392:	4628      	mov	r0, r5
 8005394:	47b8      	blx	r7
 8005396:	3001      	adds	r0, #1
 8005398:	d1c3      	bne.n	8005322 <_printf_float+0x32e>
 800539a:	e686      	b.n	80050aa <_printf_float+0xb6>
 800539c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80053a0:	f1ba 0f01 	cmp.w	sl, #1
 80053a4:	dc01      	bgt.n	80053aa <_printf_float+0x3b6>
 80053a6:	07db      	lsls	r3, r3, #31
 80053a8:	d536      	bpl.n	8005418 <_printf_float+0x424>
 80053aa:	2301      	movs	r3, #1
 80053ac:	4642      	mov	r2, r8
 80053ae:	4631      	mov	r1, r6
 80053b0:	4628      	mov	r0, r5
 80053b2:	47b8      	blx	r7
 80053b4:	3001      	adds	r0, #1
 80053b6:	f43f ae78 	beq.w	80050aa <_printf_float+0xb6>
 80053ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053be:	4631      	mov	r1, r6
 80053c0:	4628      	mov	r0, r5
 80053c2:	47b8      	blx	r7
 80053c4:	3001      	adds	r0, #1
 80053c6:	f43f ae70 	beq.w	80050aa <_printf_float+0xb6>
 80053ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80053ce:	2200      	movs	r2, #0
 80053d0:	2300      	movs	r3, #0
 80053d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053d6:	f7fb fb9f 	bl	8000b18 <__aeabi_dcmpeq>
 80053da:	b9c0      	cbnz	r0, 800540e <_printf_float+0x41a>
 80053dc:	4653      	mov	r3, sl
 80053de:	f108 0201 	add.w	r2, r8, #1
 80053e2:	4631      	mov	r1, r6
 80053e4:	4628      	mov	r0, r5
 80053e6:	47b8      	blx	r7
 80053e8:	3001      	adds	r0, #1
 80053ea:	d10c      	bne.n	8005406 <_printf_float+0x412>
 80053ec:	e65d      	b.n	80050aa <_printf_float+0xb6>
 80053ee:	2301      	movs	r3, #1
 80053f0:	465a      	mov	r2, fp
 80053f2:	4631      	mov	r1, r6
 80053f4:	4628      	mov	r0, r5
 80053f6:	47b8      	blx	r7
 80053f8:	3001      	adds	r0, #1
 80053fa:	f43f ae56 	beq.w	80050aa <_printf_float+0xb6>
 80053fe:	f108 0801 	add.w	r8, r8, #1
 8005402:	45d0      	cmp	r8, sl
 8005404:	dbf3      	blt.n	80053ee <_printf_float+0x3fa>
 8005406:	464b      	mov	r3, r9
 8005408:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800540c:	e6df      	b.n	80051ce <_printf_float+0x1da>
 800540e:	f04f 0800 	mov.w	r8, #0
 8005412:	f104 0b1a 	add.w	fp, r4, #26
 8005416:	e7f4      	b.n	8005402 <_printf_float+0x40e>
 8005418:	2301      	movs	r3, #1
 800541a:	4642      	mov	r2, r8
 800541c:	e7e1      	b.n	80053e2 <_printf_float+0x3ee>
 800541e:	2301      	movs	r3, #1
 8005420:	464a      	mov	r2, r9
 8005422:	4631      	mov	r1, r6
 8005424:	4628      	mov	r0, r5
 8005426:	47b8      	blx	r7
 8005428:	3001      	adds	r0, #1
 800542a:	f43f ae3e 	beq.w	80050aa <_printf_float+0xb6>
 800542e:	f108 0801 	add.w	r8, r8, #1
 8005432:	68e3      	ldr	r3, [r4, #12]
 8005434:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005436:	1a5b      	subs	r3, r3, r1
 8005438:	4543      	cmp	r3, r8
 800543a:	dcf0      	bgt.n	800541e <_printf_float+0x42a>
 800543c:	e6fc      	b.n	8005238 <_printf_float+0x244>
 800543e:	f04f 0800 	mov.w	r8, #0
 8005442:	f104 0919 	add.w	r9, r4, #25
 8005446:	e7f4      	b.n	8005432 <_printf_float+0x43e>

08005448 <_printf_common>:
 8005448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800544c:	4616      	mov	r6, r2
 800544e:	4698      	mov	r8, r3
 8005450:	688a      	ldr	r2, [r1, #8]
 8005452:	690b      	ldr	r3, [r1, #16]
 8005454:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005458:	4293      	cmp	r3, r2
 800545a:	bfb8      	it	lt
 800545c:	4613      	movlt	r3, r2
 800545e:	6033      	str	r3, [r6, #0]
 8005460:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005464:	4607      	mov	r7, r0
 8005466:	460c      	mov	r4, r1
 8005468:	b10a      	cbz	r2, 800546e <_printf_common+0x26>
 800546a:	3301      	adds	r3, #1
 800546c:	6033      	str	r3, [r6, #0]
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	0699      	lsls	r1, r3, #26
 8005472:	bf42      	ittt	mi
 8005474:	6833      	ldrmi	r3, [r6, #0]
 8005476:	3302      	addmi	r3, #2
 8005478:	6033      	strmi	r3, [r6, #0]
 800547a:	6825      	ldr	r5, [r4, #0]
 800547c:	f015 0506 	ands.w	r5, r5, #6
 8005480:	d106      	bne.n	8005490 <_printf_common+0x48>
 8005482:	f104 0a19 	add.w	sl, r4, #25
 8005486:	68e3      	ldr	r3, [r4, #12]
 8005488:	6832      	ldr	r2, [r6, #0]
 800548a:	1a9b      	subs	r3, r3, r2
 800548c:	42ab      	cmp	r3, r5
 800548e:	dc26      	bgt.n	80054de <_printf_common+0x96>
 8005490:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005494:	6822      	ldr	r2, [r4, #0]
 8005496:	3b00      	subs	r3, #0
 8005498:	bf18      	it	ne
 800549a:	2301      	movne	r3, #1
 800549c:	0692      	lsls	r2, r2, #26
 800549e:	d42b      	bmi.n	80054f8 <_printf_common+0xb0>
 80054a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80054a4:	4641      	mov	r1, r8
 80054a6:	4638      	mov	r0, r7
 80054a8:	47c8      	blx	r9
 80054aa:	3001      	adds	r0, #1
 80054ac:	d01e      	beq.n	80054ec <_printf_common+0xa4>
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	6922      	ldr	r2, [r4, #16]
 80054b2:	f003 0306 	and.w	r3, r3, #6
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	bf02      	ittt	eq
 80054ba:	68e5      	ldreq	r5, [r4, #12]
 80054bc:	6833      	ldreq	r3, [r6, #0]
 80054be:	1aed      	subeq	r5, r5, r3
 80054c0:	68a3      	ldr	r3, [r4, #8]
 80054c2:	bf0c      	ite	eq
 80054c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054c8:	2500      	movne	r5, #0
 80054ca:	4293      	cmp	r3, r2
 80054cc:	bfc4      	itt	gt
 80054ce:	1a9b      	subgt	r3, r3, r2
 80054d0:	18ed      	addgt	r5, r5, r3
 80054d2:	2600      	movs	r6, #0
 80054d4:	341a      	adds	r4, #26
 80054d6:	42b5      	cmp	r5, r6
 80054d8:	d11a      	bne.n	8005510 <_printf_common+0xc8>
 80054da:	2000      	movs	r0, #0
 80054dc:	e008      	b.n	80054f0 <_printf_common+0xa8>
 80054de:	2301      	movs	r3, #1
 80054e0:	4652      	mov	r2, sl
 80054e2:	4641      	mov	r1, r8
 80054e4:	4638      	mov	r0, r7
 80054e6:	47c8      	blx	r9
 80054e8:	3001      	adds	r0, #1
 80054ea:	d103      	bne.n	80054f4 <_printf_common+0xac>
 80054ec:	f04f 30ff 	mov.w	r0, #4294967295
 80054f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054f4:	3501      	adds	r5, #1
 80054f6:	e7c6      	b.n	8005486 <_printf_common+0x3e>
 80054f8:	18e1      	adds	r1, r4, r3
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	2030      	movs	r0, #48	@ 0x30
 80054fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005502:	4422      	add	r2, r4
 8005504:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005508:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800550c:	3302      	adds	r3, #2
 800550e:	e7c7      	b.n	80054a0 <_printf_common+0x58>
 8005510:	2301      	movs	r3, #1
 8005512:	4622      	mov	r2, r4
 8005514:	4641      	mov	r1, r8
 8005516:	4638      	mov	r0, r7
 8005518:	47c8      	blx	r9
 800551a:	3001      	adds	r0, #1
 800551c:	d0e6      	beq.n	80054ec <_printf_common+0xa4>
 800551e:	3601      	adds	r6, #1
 8005520:	e7d9      	b.n	80054d6 <_printf_common+0x8e>
	...

08005524 <_printf_i>:
 8005524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005528:	7e0f      	ldrb	r7, [r1, #24]
 800552a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800552c:	2f78      	cmp	r7, #120	@ 0x78
 800552e:	4691      	mov	r9, r2
 8005530:	4680      	mov	r8, r0
 8005532:	460c      	mov	r4, r1
 8005534:	469a      	mov	sl, r3
 8005536:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800553a:	d807      	bhi.n	800554c <_printf_i+0x28>
 800553c:	2f62      	cmp	r7, #98	@ 0x62
 800553e:	d80a      	bhi.n	8005556 <_printf_i+0x32>
 8005540:	2f00      	cmp	r7, #0
 8005542:	f000 80d2 	beq.w	80056ea <_printf_i+0x1c6>
 8005546:	2f58      	cmp	r7, #88	@ 0x58
 8005548:	f000 80b9 	beq.w	80056be <_printf_i+0x19a>
 800554c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005550:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005554:	e03a      	b.n	80055cc <_printf_i+0xa8>
 8005556:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800555a:	2b15      	cmp	r3, #21
 800555c:	d8f6      	bhi.n	800554c <_printf_i+0x28>
 800555e:	a101      	add	r1, pc, #4	@ (adr r1, 8005564 <_printf_i+0x40>)
 8005560:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005564:	080055bd 	.word	0x080055bd
 8005568:	080055d1 	.word	0x080055d1
 800556c:	0800554d 	.word	0x0800554d
 8005570:	0800554d 	.word	0x0800554d
 8005574:	0800554d 	.word	0x0800554d
 8005578:	0800554d 	.word	0x0800554d
 800557c:	080055d1 	.word	0x080055d1
 8005580:	0800554d 	.word	0x0800554d
 8005584:	0800554d 	.word	0x0800554d
 8005588:	0800554d 	.word	0x0800554d
 800558c:	0800554d 	.word	0x0800554d
 8005590:	080056d1 	.word	0x080056d1
 8005594:	080055fb 	.word	0x080055fb
 8005598:	0800568b 	.word	0x0800568b
 800559c:	0800554d 	.word	0x0800554d
 80055a0:	0800554d 	.word	0x0800554d
 80055a4:	080056f3 	.word	0x080056f3
 80055a8:	0800554d 	.word	0x0800554d
 80055ac:	080055fb 	.word	0x080055fb
 80055b0:	0800554d 	.word	0x0800554d
 80055b4:	0800554d 	.word	0x0800554d
 80055b8:	08005693 	.word	0x08005693
 80055bc:	6833      	ldr	r3, [r6, #0]
 80055be:	1d1a      	adds	r2, r3, #4
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6032      	str	r2, [r6, #0]
 80055c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80055cc:	2301      	movs	r3, #1
 80055ce:	e09d      	b.n	800570c <_printf_i+0x1e8>
 80055d0:	6833      	ldr	r3, [r6, #0]
 80055d2:	6820      	ldr	r0, [r4, #0]
 80055d4:	1d19      	adds	r1, r3, #4
 80055d6:	6031      	str	r1, [r6, #0]
 80055d8:	0606      	lsls	r6, r0, #24
 80055da:	d501      	bpl.n	80055e0 <_printf_i+0xbc>
 80055dc:	681d      	ldr	r5, [r3, #0]
 80055de:	e003      	b.n	80055e8 <_printf_i+0xc4>
 80055e0:	0645      	lsls	r5, r0, #25
 80055e2:	d5fb      	bpl.n	80055dc <_printf_i+0xb8>
 80055e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80055e8:	2d00      	cmp	r5, #0
 80055ea:	da03      	bge.n	80055f4 <_printf_i+0xd0>
 80055ec:	232d      	movs	r3, #45	@ 0x2d
 80055ee:	426d      	negs	r5, r5
 80055f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055f4:	4859      	ldr	r0, [pc, #356]	@ (800575c <_printf_i+0x238>)
 80055f6:	230a      	movs	r3, #10
 80055f8:	e011      	b.n	800561e <_printf_i+0xfa>
 80055fa:	6821      	ldr	r1, [r4, #0]
 80055fc:	6833      	ldr	r3, [r6, #0]
 80055fe:	0608      	lsls	r0, r1, #24
 8005600:	f853 5b04 	ldr.w	r5, [r3], #4
 8005604:	d402      	bmi.n	800560c <_printf_i+0xe8>
 8005606:	0649      	lsls	r1, r1, #25
 8005608:	bf48      	it	mi
 800560a:	b2ad      	uxthmi	r5, r5
 800560c:	2f6f      	cmp	r7, #111	@ 0x6f
 800560e:	4853      	ldr	r0, [pc, #332]	@ (800575c <_printf_i+0x238>)
 8005610:	6033      	str	r3, [r6, #0]
 8005612:	bf14      	ite	ne
 8005614:	230a      	movne	r3, #10
 8005616:	2308      	moveq	r3, #8
 8005618:	2100      	movs	r1, #0
 800561a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800561e:	6866      	ldr	r6, [r4, #4]
 8005620:	60a6      	str	r6, [r4, #8]
 8005622:	2e00      	cmp	r6, #0
 8005624:	bfa2      	ittt	ge
 8005626:	6821      	ldrge	r1, [r4, #0]
 8005628:	f021 0104 	bicge.w	r1, r1, #4
 800562c:	6021      	strge	r1, [r4, #0]
 800562e:	b90d      	cbnz	r5, 8005634 <_printf_i+0x110>
 8005630:	2e00      	cmp	r6, #0
 8005632:	d04b      	beq.n	80056cc <_printf_i+0x1a8>
 8005634:	4616      	mov	r6, r2
 8005636:	fbb5 f1f3 	udiv	r1, r5, r3
 800563a:	fb03 5711 	mls	r7, r3, r1, r5
 800563e:	5dc7      	ldrb	r7, [r0, r7]
 8005640:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005644:	462f      	mov	r7, r5
 8005646:	42bb      	cmp	r3, r7
 8005648:	460d      	mov	r5, r1
 800564a:	d9f4      	bls.n	8005636 <_printf_i+0x112>
 800564c:	2b08      	cmp	r3, #8
 800564e:	d10b      	bne.n	8005668 <_printf_i+0x144>
 8005650:	6823      	ldr	r3, [r4, #0]
 8005652:	07df      	lsls	r7, r3, #31
 8005654:	d508      	bpl.n	8005668 <_printf_i+0x144>
 8005656:	6923      	ldr	r3, [r4, #16]
 8005658:	6861      	ldr	r1, [r4, #4]
 800565a:	4299      	cmp	r1, r3
 800565c:	bfde      	ittt	le
 800565e:	2330      	movle	r3, #48	@ 0x30
 8005660:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005664:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005668:	1b92      	subs	r2, r2, r6
 800566a:	6122      	str	r2, [r4, #16]
 800566c:	f8cd a000 	str.w	sl, [sp]
 8005670:	464b      	mov	r3, r9
 8005672:	aa03      	add	r2, sp, #12
 8005674:	4621      	mov	r1, r4
 8005676:	4640      	mov	r0, r8
 8005678:	f7ff fee6 	bl	8005448 <_printf_common>
 800567c:	3001      	adds	r0, #1
 800567e:	d14a      	bne.n	8005716 <_printf_i+0x1f2>
 8005680:	f04f 30ff 	mov.w	r0, #4294967295
 8005684:	b004      	add	sp, #16
 8005686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	f043 0320 	orr.w	r3, r3, #32
 8005690:	6023      	str	r3, [r4, #0]
 8005692:	4833      	ldr	r0, [pc, #204]	@ (8005760 <_printf_i+0x23c>)
 8005694:	2778      	movs	r7, #120	@ 0x78
 8005696:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	6831      	ldr	r1, [r6, #0]
 800569e:	061f      	lsls	r7, r3, #24
 80056a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80056a4:	d402      	bmi.n	80056ac <_printf_i+0x188>
 80056a6:	065f      	lsls	r7, r3, #25
 80056a8:	bf48      	it	mi
 80056aa:	b2ad      	uxthmi	r5, r5
 80056ac:	6031      	str	r1, [r6, #0]
 80056ae:	07d9      	lsls	r1, r3, #31
 80056b0:	bf44      	itt	mi
 80056b2:	f043 0320 	orrmi.w	r3, r3, #32
 80056b6:	6023      	strmi	r3, [r4, #0]
 80056b8:	b11d      	cbz	r5, 80056c2 <_printf_i+0x19e>
 80056ba:	2310      	movs	r3, #16
 80056bc:	e7ac      	b.n	8005618 <_printf_i+0xf4>
 80056be:	4827      	ldr	r0, [pc, #156]	@ (800575c <_printf_i+0x238>)
 80056c0:	e7e9      	b.n	8005696 <_printf_i+0x172>
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	f023 0320 	bic.w	r3, r3, #32
 80056c8:	6023      	str	r3, [r4, #0]
 80056ca:	e7f6      	b.n	80056ba <_printf_i+0x196>
 80056cc:	4616      	mov	r6, r2
 80056ce:	e7bd      	b.n	800564c <_printf_i+0x128>
 80056d0:	6833      	ldr	r3, [r6, #0]
 80056d2:	6825      	ldr	r5, [r4, #0]
 80056d4:	6961      	ldr	r1, [r4, #20]
 80056d6:	1d18      	adds	r0, r3, #4
 80056d8:	6030      	str	r0, [r6, #0]
 80056da:	062e      	lsls	r6, r5, #24
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	d501      	bpl.n	80056e4 <_printf_i+0x1c0>
 80056e0:	6019      	str	r1, [r3, #0]
 80056e2:	e002      	b.n	80056ea <_printf_i+0x1c6>
 80056e4:	0668      	lsls	r0, r5, #25
 80056e6:	d5fb      	bpl.n	80056e0 <_printf_i+0x1bc>
 80056e8:	8019      	strh	r1, [r3, #0]
 80056ea:	2300      	movs	r3, #0
 80056ec:	6123      	str	r3, [r4, #16]
 80056ee:	4616      	mov	r6, r2
 80056f0:	e7bc      	b.n	800566c <_printf_i+0x148>
 80056f2:	6833      	ldr	r3, [r6, #0]
 80056f4:	1d1a      	adds	r2, r3, #4
 80056f6:	6032      	str	r2, [r6, #0]
 80056f8:	681e      	ldr	r6, [r3, #0]
 80056fa:	6862      	ldr	r2, [r4, #4]
 80056fc:	2100      	movs	r1, #0
 80056fe:	4630      	mov	r0, r6
 8005700:	f7fa fd8e 	bl	8000220 <memchr>
 8005704:	b108      	cbz	r0, 800570a <_printf_i+0x1e6>
 8005706:	1b80      	subs	r0, r0, r6
 8005708:	6060      	str	r0, [r4, #4]
 800570a:	6863      	ldr	r3, [r4, #4]
 800570c:	6123      	str	r3, [r4, #16]
 800570e:	2300      	movs	r3, #0
 8005710:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005714:	e7aa      	b.n	800566c <_printf_i+0x148>
 8005716:	6923      	ldr	r3, [r4, #16]
 8005718:	4632      	mov	r2, r6
 800571a:	4649      	mov	r1, r9
 800571c:	4640      	mov	r0, r8
 800571e:	47d0      	blx	sl
 8005720:	3001      	adds	r0, #1
 8005722:	d0ad      	beq.n	8005680 <_printf_i+0x15c>
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	079b      	lsls	r3, r3, #30
 8005728:	d413      	bmi.n	8005752 <_printf_i+0x22e>
 800572a:	68e0      	ldr	r0, [r4, #12]
 800572c:	9b03      	ldr	r3, [sp, #12]
 800572e:	4298      	cmp	r0, r3
 8005730:	bfb8      	it	lt
 8005732:	4618      	movlt	r0, r3
 8005734:	e7a6      	b.n	8005684 <_printf_i+0x160>
 8005736:	2301      	movs	r3, #1
 8005738:	4632      	mov	r2, r6
 800573a:	4649      	mov	r1, r9
 800573c:	4640      	mov	r0, r8
 800573e:	47d0      	blx	sl
 8005740:	3001      	adds	r0, #1
 8005742:	d09d      	beq.n	8005680 <_printf_i+0x15c>
 8005744:	3501      	adds	r5, #1
 8005746:	68e3      	ldr	r3, [r4, #12]
 8005748:	9903      	ldr	r1, [sp, #12]
 800574a:	1a5b      	subs	r3, r3, r1
 800574c:	42ab      	cmp	r3, r5
 800574e:	dcf2      	bgt.n	8005736 <_printf_i+0x212>
 8005750:	e7eb      	b.n	800572a <_printf_i+0x206>
 8005752:	2500      	movs	r5, #0
 8005754:	f104 0619 	add.w	r6, r4, #25
 8005758:	e7f5      	b.n	8005746 <_printf_i+0x222>
 800575a:	bf00      	nop
 800575c:	0800a60b 	.word	0x0800a60b
 8005760:	0800a61c 	.word	0x0800a61c

08005764 <_scanf_float>:
 8005764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005768:	b087      	sub	sp, #28
 800576a:	4617      	mov	r7, r2
 800576c:	9303      	str	r3, [sp, #12]
 800576e:	688b      	ldr	r3, [r1, #8]
 8005770:	1e5a      	subs	r2, r3, #1
 8005772:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005776:	bf81      	itttt	hi
 8005778:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800577c:	eb03 0b05 	addhi.w	fp, r3, r5
 8005780:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005784:	608b      	strhi	r3, [r1, #8]
 8005786:	680b      	ldr	r3, [r1, #0]
 8005788:	460a      	mov	r2, r1
 800578a:	f04f 0500 	mov.w	r5, #0
 800578e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005792:	f842 3b1c 	str.w	r3, [r2], #28
 8005796:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800579a:	4680      	mov	r8, r0
 800579c:	460c      	mov	r4, r1
 800579e:	bf98      	it	ls
 80057a0:	f04f 0b00 	movls.w	fp, #0
 80057a4:	9201      	str	r2, [sp, #4]
 80057a6:	4616      	mov	r6, r2
 80057a8:	46aa      	mov	sl, r5
 80057aa:	46a9      	mov	r9, r5
 80057ac:	9502      	str	r5, [sp, #8]
 80057ae:	68a2      	ldr	r2, [r4, #8]
 80057b0:	b152      	cbz	r2, 80057c8 <_scanf_float+0x64>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b4e      	cmp	r3, #78	@ 0x4e
 80057b8:	d864      	bhi.n	8005884 <_scanf_float+0x120>
 80057ba:	2b40      	cmp	r3, #64	@ 0x40
 80057bc:	d83c      	bhi.n	8005838 <_scanf_float+0xd4>
 80057be:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80057c2:	b2c8      	uxtb	r0, r1
 80057c4:	280e      	cmp	r0, #14
 80057c6:	d93a      	bls.n	800583e <_scanf_float+0xda>
 80057c8:	f1b9 0f00 	cmp.w	r9, #0
 80057cc:	d003      	beq.n	80057d6 <_scanf_float+0x72>
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057d4:	6023      	str	r3, [r4, #0]
 80057d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057da:	f1ba 0f01 	cmp.w	sl, #1
 80057de:	f200 8117 	bhi.w	8005a10 <_scanf_float+0x2ac>
 80057e2:	9b01      	ldr	r3, [sp, #4]
 80057e4:	429e      	cmp	r6, r3
 80057e6:	f200 8108 	bhi.w	80059fa <_scanf_float+0x296>
 80057ea:	2001      	movs	r0, #1
 80057ec:	b007      	add	sp, #28
 80057ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057f2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80057f6:	2a0d      	cmp	r2, #13
 80057f8:	d8e6      	bhi.n	80057c8 <_scanf_float+0x64>
 80057fa:	a101      	add	r1, pc, #4	@ (adr r1, 8005800 <_scanf_float+0x9c>)
 80057fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005800:	08005947 	.word	0x08005947
 8005804:	080057c9 	.word	0x080057c9
 8005808:	080057c9 	.word	0x080057c9
 800580c:	080057c9 	.word	0x080057c9
 8005810:	080059a7 	.word	0x080059a7
 8005814:	0800597f 	.word	0x0800597f
 8005818:	080057c9 	.word	0x080057c9
 800581c:	080057c9 	.word	0x080057c9
 8005820:	08005955 	.word	0x08005955
 8005824:	080057c9 	.word	0x080057c9
 8005828:	080057c9 	.word	0x080057c9
 800582c:	080057c9 	.word	0x080057c9
 8005830:	080057c9 	.word	0x080057c9
 8005834:	0800590d 	.word	0x0800590d
 8005838:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800583c:	e7db      	b.n	80057f6 <_scanf_float+0x92>
 800583e:	290e      	cmp	r1, #14
 8005840:	d8c2      	bhi.n	80057c8 <_scanf_float+0x64>
 8005842:	a001      	add	r0, pc, #4	@ (adr r0, 8005848 <_scanf_float+0xe4>)
 8005844:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005848:	080058fd 	.word	0x080058fd
 800584c:	080057c9 	.word	0x080057c9
 8005850:	080058fd 	.word	0x080058fd
 8005854:	08005993 	.word	0x08005993
 8005858:	080057c9 	.word	0x080057c9
 800585c:	080058a5 	.word	0x080058a5
 8005860:	080058e3 	.word	0x080058e3
 8005864:	080058e3 	.word	0x080058e3
 8005868:	080058e3 	.word	0x080058e3
 800586c:	080058e3 	.word	0x080058e3
 8005870:	080058e3 	.word	0x080058e3
 8005874:	080058e3 	.word	0x080058e3
 8005878:	080058e3 	.word	0x080058e3
 800587c:	080058e3 	.word	0x080058e3
 8005880:	080058e3 	.word	0x080058e3
 8005884:	2b6e      	cmp	r3, #110	@ 0x6e
 8005886:	d809      	bhi.n	800589c <_scanf_float+0x138>
 8005888:	2b60      	cmp	r3, #96	@ 0x60
 800588a:	d8b2      	bhi.n	80057f2 <_scanf_float+0x8e>
 800588c:	2b54      	cmp	r3, #84	@ 0x54
 800588e:	d07b      	beq.n	8005988 <_scanf_float+0x224>
 8005890:	2b59      	cmp	r3, #89	@ 0x59
 8005892:	d199      	bne.n	80057c8 <_scanf_float+0x64>
 8005894:	2d07      	cmp	r5, #7
 8005896:	d197      	bne.n	80057c8 <_scanf_float+0x64>
 8005898:	2508      	movs	r5, #8
 800589a:	e02c      	b.n	80058f6 <_scanf_float+0x192>
 800589c:	2b74      	cmp	r3, #116	@ 0x74
 800589e:	d073      	beq.n	8005988 <_scanf_float+0x224>
 80058a0:	2b79      	cmp	r3, #121	@ 0x79
 80058a2:	e7f6      	b.n	8005892 <_scanf_float+0x12e>
 80058a4:	6821      	ldr	r1, [r4, #0]
 80058a6:	05c8      	lsls	r0, r1, #23
 80058a8:	d51b      	bpl.n	80058e2 <_scanf_float+0x17e>
 80058aa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80058ae:	6021      	str	r1, [r4, #0]
 80058b0:	f109 0901 	add.w	r9, r9, #1
 80058b4:	f1bb 0f00 	cmp.w	fp, #0
 80058b8:	d003      	beq.n	80058c2 <_scanf_float+0x15e>
 80058ba:	3201      	adds	r2, #1
 80058bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80058c0:	60a2      	str	r2, [r4, #8]
 80058c2:	68a3      	ldr	r3, [r4, #8]
 80058c4:	3b01      	subs	r3, #1
 80058c6:	60a3      	str	r3, [r4, #8]
 80058c8:	6923      	ldr	r3, [r4, #16]
 80058ca:	3301      	adds	r3, #1
 80058cc:	6123      	str	r3, [r4, #16]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3b01      	subs	r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	607b      	str	r3, [r7, #4]
 80058d6:	f340 8087 	ble.w	80059e8 <_scanf_float+0x284>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	3301      	adds	r3, #1
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	e765      	b.n	80057ae <_scanf_float+0x4a>
 80058e2:	eb1a 0105 	adds.w	r1, sl, r5
 80058e6:	f47f af6f 	bne.w	80057c8 <_scanf_float+0x64>
 80058ea:	6822      	ldr	r2, [r4, #0]
 80058ec:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80058f0:	6022      	str	r2, [r4, #0]
 80058f2:	460d      	mov	r5, r1
 80058f4:	468a      	mov	sl, r1
 80058f6:	f806 3b01 	strb.w	r3, [r6], #1
 80058fa:	e7e2      	b.n	80058c2 <_scanf_float+0x15e>
 80058fc:	6822      	ldr	r2, [r4, #0]
 80058fe:	0610      	lsls	r0, r2, #24
 8005900:	f57f af62 	bpl.w	80057c8 <_scanf_float+0x64>
 8005904:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005908:	6022      	str	r2, [r4, #0]
 800590a:	e7f4      	b.n	80058f6 <_scanf_float+0x192>
 800590c:	f1ba 0f00 	cmp.w	sl, #0
 8005910:	d10e      	bne.n	8005930 <_scanf_float+0x1cc>
 8005912:	f1b9 0f00 	cmp.w	r9, #0
 8005916:	d10e      	bne.n	8005936 <_scanf_float+0x1d2>
 8005918:	6822      	ldr	r2, [r4, #0]
 800591a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800591e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005922:	d108      	bne.n	8005936 <_scanf_float+0x1d2>
 8005924:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005928:	6022      	str	r2, [r4, #0]
 800592a:	f04f 0a01 	mov.w	sl, #1
 800592e:	e7e2      	b.n	80058f6 <_scanf_float+0x192>
 8005930:	f1ba 0f02 	cmp.w	sl, #2
 8005934:	d055      	beq.n	80059e2 <_scanf_float+0x27e>
 8005936:	2d01      	cmp	r5, #1
 8005938:	d002      	beq.n	8005940 <_scanf_float+0x1dc>
 800593a:	2d04      	cmp	r5, #4
 800593c:	f47f af44 	bne.w	80057c8 <_scanf_float+0x64>
 8005940:	3501      	adds	r5, #1
 8005942:	b2ed      	uxtb	r5, r5
 8005944:	e7d7      	b.n	80058f6 <_scanf_float+0x192>
 8005946:	f1ba 0f01 	cmp.w	sl, #1
 800594a:	f47f af3d 	bne.w	80057c8 <_scanf_float+0x64>
 800594e:	f04f 0a02 	mov.w	sl, #2
 8005952:	e7d0      	b.n	80058f6 <_scanf_float+0x192>
 8005954:	b97d      	cbnz	r5, 8005976 <_scanf_float+0x212>
 8005956:	f1b9 0f00 	cmp.w	r9, #0
 800595a:	f47f af38 	bne.w	80057ce <_scanf_float+0x6a>
 800595e:	6822      	ldr	r2, [r4, #0]
 8005960:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005964:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005968:	f040 8108 	bne.w	8005b7c <_scanf_float+0x418>
 800596c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005970:	6022      	str	r2, [r4, #0]
 8005972:	2501      	movs	r5, #1
 8005974:	e7bf      	b.n	80058f6 <_scanf_float+0x192>
 8005976:	2d03      	cmp	r5, #3
 8005978:	d0e2      	beq.n	8005940 <_scanf_float+0x1dc>
 800597a:	2d05      	cmp	r5, #5
 800597c:	e7de      	b.n	800593c <_scanf_float+0x1d8>
 800597e:	2d02      	cmp	r5, #2
 8005980:	f47f af22 	bne.w	80057c8 <_scanf_float+0x64>
 8005984:	2503      	movs	r5, #3
 8005986:	e7b6      	b.n	80058f6 <_scanf_float+0x192>
 8005988:	2d06      	cmp	r5, #6
 800598a:	f47f af1d 	bne.w	80057c8 <_scanf_float+0x64>
 800598e:	2507      	movs	r5, #7
 8005990:	e7b1      	b.n	80058f6 <_scanf_float+0x192>
 8005992:	6822      	ldr	r2, [r4, #0]
 8005994:	0591      	lsls	r1, r2, #22
 8005996:	f57f af17 	bpl.w	80057c8 <_scanf_float+0x64>
 800599a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800599e:	6022      	str	r2, [r4, #0]
 80059a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80059a4:	e7a7      	b.n	80058f6 <_scanf_float+0x192>
 80059a6:	6822      	ldr	r2, [r4, #0]
 80059a8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80059ac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80059b0:	d006      	beq.n	80059c0 <_scanf_float+0x25c>
 80059b2:	0550      	lsls	r0, r2, #21
 80059b4:	f57f af08 	bpl.w	80057c8 <_scanf_float+0x64>
 80059b8:	f1b9 0f00 	cmp.w	r9, #0
 80059bc:	f000 80de 	beq.w	8005b7c <_scanf_float+0x418>
 80059c0:	0591      	lsls	r1, r2, #22
 80059c2:	bf58      	it	pl
 80059c4:	9902      	ldrpl	r1, [sp, #8]
 80059c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80059ca:	bf58      	it	pl
 80059cc:	eba9 0101 	subpl.w	r1, r9, r1
 80059d0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80059d4:	bf58      	it	pl
 80059d6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80059da:	6022      	str	r2, [r4, #0]
 80059dc:	f04f 0900 	mov.w	r9, #0
 80059e0:	e789      	b.n	80058f6 <_scanf_float+0x192>
 80059e2:	f04f 0a03 	mov.w	sl, #3
 80059e6:	e786      	b.n	80058f6 <_scanf_float+0x192>
 80059e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80059ec:	4639      	mov	r1, r7
 80059ee:	4640      	mov	r0, r8
 80059f0:	4798      	blx	r3
 80059f2:	2800      	cmp	r0, #0
 80059f4:	f43f aedb 	beq.w	80057ae <_scanf_float+0x4a>
 80059f8:	e6e6      	b.n	80057c8 <_scanf_float+0x64>
 80059fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80059fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a02:	463a      	mov	r2, r7
 8005a04:	4640      	mov	r0, r8
 8005a06:	4798      	blx	r3
 8005a08:	6923      	ldr	r3, [r4, #16]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	6123      	str	r3, [r4, #16]
 8005a0e:	e6e8      	b.n	80057e2 <_scanf_float+0x7e>
 8005a10:	1e6b      	subs	r3, r5, #1
 8005a12:	2b06      	cmp	r3, #6
 8005a14:	d824      	bhi.n	8005a60 <_scanf_float+0x2fc>
 8005a16:	2d02      	cmp	r5, #2
 8005a18:	d836      	bhi.n	8005a88 <_scanf_float+0x324>
 8005a1a:	9b01      	ldr	r3, [sp, #4]
 8005a1c:	429e      	cmp	r6, r3
 8005a1e:	f67f aee4 	bls.w	80057ea <_scanf_float+0x86>
 8005a22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a2a:	463a      	mov	r2, r7
 8005a2c:	4640      	mov	r0, r8
 8005a2e:	4798      	blx	r3
 8005a30:	6923      	ldr	r3, [r4, #16]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	6123      	str	r3, [r4, #16]
 8005a36:	e7f0      	b.n	8005a1a <_scanf_float+0x2b6>
 8005a38:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a3c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005a40:	463a      	mov	r2, r7
 8005a42:	4640      	mov	r0, r8
 8005a44:	4798      	blx	r3
 8005a46:	6923      	ldr	r3, [r4, #16]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	6123      	str	r3, [r4, #16]
 8005a4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a50:	fa5f fa8a 	uxtb.w	sl, sl
 8005a54:	f1ba 0f02 	cmp.w	sl, #2
 8005a58:	d1ee      	bne.n	8005a38 <_scanf_float+0x2d4>
 8005a5a:	3d03      	subs	r5, #3
 8005a5c:	b2ed      	uxtb	r5, r5
 8005a5e:	1b76      	subs	r6, r6, r5
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	05da      	lsls	r2, r3, #23
 8005a64:	d530      	bpl.n	8005ac8 <_scanf_float+0x364>
 8005a66:	055b      	lsls	r3, r3, #21
 8005a68:	d511      	bpl.n	8005a8e <_scanf_float+0x32a>
 8005a6a:	9b01      	ldr	r3, [sp, #4]
 8005a6c:	429e      	cmp	r6, r3
 8005a6e:	f67f aebc 	bls.w	80057ea <_scanf_float+0x86>
 8005a72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a7a:	463a      	mov	r2, r7
 8005a7c:	4640      	mov	r0, r8
 8005a7e:	4798      	blx	r3
 8005a80:	6923      	ldr	r3, [r4, #16]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	6123      	str	r3, [r4, #16]
 8005a86:	e7f0      	b.n	8005a6a <_scanf_float+0x306>
 8005a88:	46aa      	mov	sl, r5
 8005a8a:	46b3      	mov	fp, r6
 8005a8c:	e7de      	b.n	8005a4c <_scanf_float+0x2e8>
 8005a8e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005a92:	6923      	ldr	r3, [r4, #16]
 8005a94:	2965      	cmp	r1, #101	@ 0x65
 8005a96:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a9a:	f106 35ff 	add.w	r5, r6, #4294967295
 8005a9e:	6123      	str	r3, [r4, #16]
 8005aa0:	d00c      	beq.n	8005abc <_scanf_float+0x358>
 8005aa2:	2945      	cmp	r1, #69	@ 0x45
 8005aa4:	d00a      	beq.n	8005abc <_scanf_float+0x358>
 8005aa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005aaa:	463a      	mov	r2, r7
 8005aac:	4640      	mov	r0, r8
 8005aae:	4798      	blx	r3
 8005ab0:	6923      	ldr	r3, [r4, #16]
 8005ab2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	1eb5      	subs	r5, r6, #2
 8005aba:	6123      	str	r3, [r4, #16]
 8005abc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005ac0:	463a      	mov	r2, r7
 8005ac2:	4640      	mov	r0, r8
 8005ac4:	4798      	blx	r3
 8005ac6:	462e      	mov	r6, r5
 8005ac8:	6822      	ldr	r2, [r4, #0]
 8005aca:	f012 0210 	ands.w	r2, r2, #16
 8005ace:	d001      	beq.n	8005ad4 <_scanf_float+0x370>
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	e68b      	b.n	80057ec <_scanf_float+0x88>
 8005ad4:	7032      	strb	r2, [r6, #0]
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005adc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ae0:	d11c      	bne.n	8005b1c <_scanf_float+0x3b8>
 8005ae2:	9b02      	ldr	r3, [sp, #8]
 8005ae4:	454b      	cmp	r3, r9
 8005ae6:	eba3 0209 	sub.w	r2, r3, r9
 8005aea:	d123      	bne.n	8005b34 <_scanf_float+0x3d0>
 8005aec:	9901      	ldr	r1, [sp, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	4640      	mov	r0, r8
 8005af2:	f002 fcfd 	bl	80084f0 <_strtod_r>
 8005af6:	9b03      	ldr	r3, [sp, #12]
 8005af8:	6821      	ldr	r1, [r4, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f011 0f02 	tst.w	r1, #2
 8005b00:	ec57 6b10 	vmov	r6, r7, d0
 8005b04:	f103 0204 	add.w	r2, r3, #4
 8005b08:	d01f      	beq.n	8005b4a <_scanf_float+0x3e6>
 8005b0a:	9903      	ldr	r1, [sp, #12]
 8005b0c:	600a      	str	r2, [r1, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	e9c3 6700 	strd	r6, r7, [r3]
 8005b14:	68e3      	ldr	r3, [r4, #12]
 8005b16:	3301      	adds	r3, #1
 8005b18:	60e3      	str	r3, [r4, #12]
 8005b1a:	e7d9      	b.n	8005ad0 <_scanf_float+0x36c>
 8005b1c:	9b04      	ldr	r3, [sp, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0e4      	beq.n	8005aec <_scanf_float+0x388>
 8005b22:	9905      	ldr	r1, [sp, #20]
 8005b24:	230a      	movs	r3, #10
 8005b26:	3101      	adds	r1, #1
 8005b28:	4640      	mov	r0, r8
 8005b2a:	f7ff f9b7 	bl	8004e9c <_strtol_r>
 8005b2e:	9b04      	ldr	r3, [sp, #16]
 8005b30:	9e05      	ldr	r6, [sp, #20]
 8005b32:	1ac2      	subs	r2, r0, r3
 8005b34:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005b38:	429e      	cmp	r6, r3
 8005b3a:	bf28      	it	cs
 8005b3c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005b40:	4910      	ldr	r1, [pc, #64]	@ (8005b84 <_scanf_float+0x420>)
 8005b42:	4630      	mov	r0, r6
 8005b44:	f000 f954 	bl	8005df0 <siprintf>
 8005b48:	e7d0      	b.n	8005aec <_scanf_float+0x388>
 8005b4a:	f011 0f04 	tst.w	r1, #4
 8005b4e:	9903      	ldr	r1, [sp, #12]
 8005b50:	600a      	str	r2, [r1, #0]
 8005b52:	d1dc      	bne.n	8005b0e <_scanf_float+0x3aa>
 8005b54:	681d      	ldr	r5, [r3, #0]
 8005b56:	4632      	mov	r2, r6
 8005b58:	463b      	mov	r3, r7
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	4639      	mov	r1, r7
 8005b5e:	f7fb f80d 	bl	8000b7c <__aeabi_dcmpun>
 8005b62:	b128      	cbz	r0, 8005b70 <_scanf_float+0x40c>
 8005b64:	4808      	ldr	r0, [pc, #32]	@ (8005b88 <_scanf_float+0x424>)
 8005b66:	f000 fabb 	bl	80060e0 <nanf>
 8005b6a:	ed85 0a00 	vstr	s0, [r5]
 8005b6e:	e7d1      	b.n	8005b14 <_scanf_float+0x3b0>
 8005b70:	4630      	mov	r0, r6
 8005b72:	4639      	mov	r1, r7
 8005b74:	f7fb f860 	bl	8000c38 <__aeabi_d2f>
 8005b78:	6028      	str	r0, [r5, #0]
 8005b7a:	e7cb      	b.n	8005b14 <_scanf_float+0x3b0>
 8005b7c:	f04f 0900 	mov.w	r9, #0
 8005b80:	e629      	b.n	80057d6 <_scanf_float+0x72>
 8005b82:	bf00      	nop
 8005b84:	0800a62d 	.word	0x0800a62d
 8005b88:	0800a8c4 	.word	0x0800a8c4

08005b8c <std>:
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	b510      	push	{r4, lr}
 8005b90:	4604      	mov	r4, r0
 8005b92:	e9c0 3300 	strd	r3, r3, [r0]
 8005b96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b9a:	6083      	str	r3, [r0, #8]
 8005b9c:	8181      	strh	r1, [r0, #12]
 8005b9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ba0:	81c2      	strh	r2, [r0, #14]
 8005ba2:	6183      	str	r3, [r0, #24]
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	2208      	movs	r2, #8
 8005ba8:	305c      	adds	r0, #92	@ 0x5c
 8005baa:	f000 fa19 	bl	8005fe0 <memset>
 8005bae:	4b0d      	ldr	r3, [pc, #52]	@ (8005be4 <std+0x58>)
 8005bb0:	6263      	str	r3, [r4, #36]	@ 0x24
 8005bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005be8 <std+0x5c>)
 8005bb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bec <std+0x60>)
 8005bb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005bba:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf0 <std+0x64>)
 8005bbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8005bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf4 <std+0x68>)
 8005bc0:	6224      	str	r4, [r4, #32]
 8005bc2:	429c      	cmp	r4, r3
 8005bc4:	d006      	beq.n	8005bd4 <std+0x48>
 8005bc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005bca:	4294      	cmp	r4, r2
 8005bcc:	d002      	beq.n	8005bd4 <std+0x48>
 8005bce:	33d0      	adds	r3, #208	@ 0xd0
 8005bd0:	429c      	cmp	r4, r3
 8005bd2:	d105      	bne.n	8005be0 <std+0x54>
 8005bd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bdc:	f000 ba7c 	b.w	80060d8 <__retarget_lock_init_recursive>
 8005be0:	bd10      	pop	{r4, pc}
 8005be2:	bf00      	nop
 8005be4:	08005e31 	.word	0x08005e31
 8005be8:	08005e53 	.word	0x08005e53
 8005bec:	08005e8b 	.word	0x08005e8b
 8005bf0:	08005eaf 	.word	0x08005eaf
 8005bf4:	20000820 	.word	0x20000820

08005bf8 <stdio_exit_handler>:
 8005bf8:	4a02      	ldr	r2, [pc, #8]	@ (8005c04 <stdio_exit_handler+0xc>)
 8005bfa:	4903      	ldr	r1, [pc, #12]	@ (8005c08 <stdio_exit_handler+0x10>)
 8005bfc:	4803      	ldr	r0, [pc, #12]	@ (8005c0c <stdio_exit_handler+0x14>)
 8005bfe:	f000 b869 	b.w	8005cd4 <_fwalk_sglue>
 8005c02:	bf00      	nop
 8005c04:	20000048 	.word	0x20000048
 8005c08:	08008b39 	.word	0x08008b39
 8005c0c:	20000058 	.word	0x20000058

08005c10 <cleanup_stdio>:
 8005c10:	6841      	ldr	r1, [r0, #4]
 8005c12:	4b0c      	ldr	r3, [pc, #48]	@ (8005c44 <cleanup_stdio+0x34>)
 8005c14:	4299      	cmp	r1, r3
 8005c16:	b510      	push	{r4, lr}
 8005c18:	4604      	mov	r4, r0
 8005c1a:	d001      	beq.n	8005c20 <cleanup_stdio+0x10>
 8005c1c:	f002 ff8c 	bl	8008b38 <_fflush_r>
 8005c20:	68a1      	ldr	r1, [r4, #8]
 8005c22:	4b09      	ldr	r3, [pc, #36]	@ (8005c48 <cleanup_stdio+0x38>)
 8005c24:	4299      	cmp	r1, r3
 8005c26:	d002      	beq.n	8005c2e <cleanup_stdio+0x1e>
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f002 ff85 	bl	8008b38 <_fflush_r>
 8005c2e:	68e1      	ldr	r1, [r4, #12]
 8005c30:	4b06      	ldr	r3, [pc, #24]	@ (8005c4c <cleanup_stdio+0x3c>)
 8005c32:	4299      	cmp	r1, r3
 8005c34:	d004      	beq.n	8005c40 <cleanup_stdio+0x30>
 8005c36:	4620      	mov	r0, r4
 8005c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c3c:	f002 bf7c 	b.w	8008b38 <_fflush_r>
 8005c40:	bd10      	pop	{r4, pc}
 8005c42:	bf00      	nop
 8005c44:	20000820 	.word	0x20000820
 8005c48:	20000888 	.word	0x20000888
 8005c4c:	200008f0 	.word	0x200008f0

08005c50 <global_stdio_init.part.0>:
 8005c50:	b510      	push	{r4, lr}
 8005c52:	4b0b      	ldr	r3, [pc, #44]	@ (8005c80 <global_stdio_init.part.0+0x30>)
 8005c54:	4c0b      	ldr	r4, [pc, #44]	@ (8005c84 <global_stdio_init.part.0+0x34>)
 8005c56:	4a0c      	ldr	r2, [pc, #48]	@ (8005c88 <global_stdio_init.part.0+0x38>)
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	2104      	movs	r1, #4
 8005c60:	f7ff ff94 	bl	8005b8c <std>
 8005c64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c68:	2201      	movs	r2, #1
 8005c6a:	2109      	movs	r1, #9
 8005c6c:	f7ff ff8e 	bl	8005b8c <std>
 8005c70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c74:	2202      	movs	r2, #2
 8005c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c7a:	2112      	movs	r1, #18
 8005c7c:	f7ff bf86 	b.w	8005b8c <std>
 8005c80:	20000958 	.word	0x20000958
 8005c84:	20000820 	.word	0x20000820
 8005c88:	08005bf9 	.word	0x08005bf9

08005c8c <__sfp_lock_acquire>:
 8005c8c:	4801      	ldr	r0, [pc, #4]	@ (8005c94 <__sfp_lock_acquire+0x8>)
 8005c8e:	f000 ba24 	b.w	80060da <__retarget_lock_acquire_recursive>
 8005c92:	bf00      	nop
 8005c94:	20000961 	.word	0x20000961

08005c98 <__sfp_lock_release>:
 8005c98:	4801      	ldr	r0, [pc, #4]	@ (8005ca0 <__sfp_lock_release+0x8>)
 8005c9a:	f000 ba1f 	b.w	80060dc <__retarget_lock_release_recursive>
 8005c9e:	bf00      	nop
 8005ca0:	20000961 	.word	0x20000961

08005ca4 <__sinit>:
 8005ca4:	b510      	push	{r4, lr}
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	f7ff fff0 	bl	8005c8c <__sfp_lock_acquire>
 8005cac:	6a23      	ldr	r3, [r4, #32]
 8005cae:	b11b      	cbz	r3, 8005cb8 <__sinit+0x14>
 8005cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cb4:	f7ff bff0 	b.w	8005c98 <__sfp_lock_release>
 8005cb8:	4b04      	ldr	r3, [pc, #16]	@ (8005ccc <__sinit+0x28>)
 8005cba:	6223      	str	r3, [r4, #32]
 8005cbc:	4b04      	ldr	r3, [pc, #16]	@ (8005cd0 <__sinit+0x2c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1f5      	bne.n	8005cb0 <__sinit+0xc>
 8005cc4:	f7ff ffc4 	bl	8005c50 <global_stdio_init.part.0>
 8005cc8:	e7f2      	b.n	8005cb0 <__sinit+0xc>
 8005cca:	bf00      	nop
 8005ccc:	08005c11 	.word	0x08005c11
 8005cd0:	20000958 	.word	0x20000958

08005cd4 <_fwalk_sglue>:
 8005cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cd8:	4607      	mov	r7, r0
 8005cda:	4688      	mov	r8, r1
 8005cdc:	4614      	mov	r4, r2
 8005cde:	2600      	movs	r6, #0
 8005ce0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ce4:	f1b9 0901 	subs.w	r9, r9, #1
 8005ce8:	d505      	bpl.n	8005cf6 <_fwalk_sglue+0x22>
 8005cea:	6824      	ldr	r4, [r4, #0]
 8005cec:	2c00      	cmp	r4, #0
 8005cee:	d1f7      	bne.n	8005ce0 <_fwalk_sglue+0xc>
 8005cf0:	4630      	mov	r0, r6
 8005cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cf6:	89ab      	ldrh	r3, [r5, #12]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d907      	bls.n	8005d0c <_fwalk_sglue+0x38>
 8005cfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d00:	3301      	adds	r3, #1
 8005d02:	d003      	beq.n	8005d0c <_fwalk_sglue+0x38>
 8005d04:	4629      	mov	r1, r5
 8005d06:	4638      	mov	r0, r7
 8005d08:	47c0      	blx	r8
 8005d0a:	4306      	orrs	r6, r0
 8005d0c:	3568      	adds	r5, #104	@ 0x68
 8005d0e:	e7e9      	b.n	8005ce4 <_fwalk_sglue+0x10>

08005d10 <iprintf>:
 8005d10:	b40f      	push	{r0, r1, r2, r3}
 8005d12:	b507      	push	{r0, r1, r2, lr}
 8005d14:	4906      	ldr	r1, [pc, #24]	@ (8005d30 <iprintf+0x20>)
 8005d16:	ab04      	add	r3, sp, #16
 8005d18:	6808      	ldr	r0, [r1, #0]
 8005d1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d1e:	6881      	ldr	r1, [r0, #8]
 8005d20:	9301      	str	r3, [sp, #4]
 8005d22:	f002 fd6d 	bl	8008800 <_vfiprintf_r>
 8005d26:	b003      	add	sp, #12
 8005d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d2c:	b004      	add	sp, #16
 8005d2e:	4770      	bx	lr
 8005d30:	20000054 	.word	0x20000054

08005d34 <_puts_r>:
 8005d34:	6a03      	ldr	r3, [r0, #32]
 8005d36:	b570      	push	{r4, r5, r6, lr}
 8005d38:	6884      	ldr	r4, [r0, #8]
 8005d3a:	4605      	mov	r5, r0
 8005d3c:	460e      	mov	r6, r1
 8005d3e:	b90b      	cbnz	r3, 8005d44 <_puts_r+0x10>
 8005d40:	f7ff ffb0 	bl	8005ca4 <__sinit>
 8005d44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d46:	07db      	lsls	r3, r3, #31
 8005d48:	d405      	bmi.n	8005d56 <_puts_r+0x22>
 8005d4a:	89a3      	ldrh	r3, [r4, #12]
 8005d4c:	0598      	lsls	r0, r3, #22
 8005d4e:	d402      	bmi.n	8005d56 <_puts_r+0x22>
 8005d50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d52:	f000 f9c2 	bl	80060da <__retarget_lock_acquire_recursive>
 8005d56:	89a3      	ldrh	r3, [r4, #12]
 8005d58:	0719      	lsls	r1, r3, #28
 8005d5a:	d502      	bpl.n	8005d62 <_puts_r+0x2e>
 8005d5c:	6923      	ldr	r3, [r4, #16]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d135      	bne.n	8005dce <_puts_r+0x9a>
 8005d62:	4621      	mov	r1, r4
 8005d64:	4628      	mov	r0, r5
 8005d66:	f000 f8e5 	bl	8005f34 <__swsetup_r>
 8005d6a:	b380      	cbz	r0, 8005dce <_puts_r+0x9a>
 8005d6c:	f04f 35ff 	mov.w	r5, #4294967295
 8005d70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d72:	07da      	lsls	r2, r3, #31
 8005d74:	d405      	bmi.n	8005d82 <_puts_r+0x4e>
 8005d76:	89a3      	ldrh	r3, [r4, #12]
 8005d78:	059b      	lsls	r3, r3, #22
 8005d7a:	d402      	bmi.n	8005d82 <_puts_r+0x4e>
 8005d7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d7e:	f000 f9ad 	bl	80060dc <__retarget_lock_release_recursive>
 8005d82:	4628      	mov	r0, r5
 8005d84:	bd70      	pop	{r4, r5, r6, pc}
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	da04      	bge.n	8005d94 <_puts_r+0x60>
 8005d8a:	69a2      	ldr	r2, [r4, #24]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	dc17      	bgt.n	8005dc0 <_puts_r+0x8c>
 8005d90:	290a      	cmp	r1, #10
 8005d92:	d015      	beq.n	8005dc0 <_puts_r+0x8c>
 8005d94:	6823      	ldr	r3, [r4, #0]
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	6022      	str	r2, [r4, #0]
 8005d9a:	7019      	strb	r1, [r3, #0]
 8005d9c:	68a3      	ldr	r3, [r4, #8]
 8005d9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005da2:	3b01      	subs	r3, #1
 8005da4:	60a3      	str	r3, [r4, #8]
 8005da6:	2900      	cmp	r1, #0
 8005da8:	d1ed      	bne.n	8005d86 <_puts_r+0x52>
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	da11      	bge.n	8005dd2 <_puts_r+0x9e>
 8005dae:	4622      	mov	r2, r4
 8005db0:	210a      	movs	r1, #10
 8005db2:	4628      	mov	r0, r5
 8005db4:	f000 f87f 	bl	8005eb6 <__swbuf_r>
 8005db8:	3001      	adds	r0, #1
 8005dba:	d0d7      	beq.n	8005d6c <_puts_r+0x38>
 8005dbc:	250a      	movs	r5, #10
 8005dbe:	e7d7      	b.n	8005d70 <_puts_r+0x3c>
 8005dc0:	4622      	mov	r2, r4
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	f000 f877 	bl	8005eb6 <__swbuf_r>
 8005dc8:	3001      	adds	r0, #1
 8005dca:	d1e7      	bne.n	8005d9c <_puts_r+0x68>
 8005dcc:	e7ce      	b.n	8005d6c <_puts_r+0x38>
 8005dce:	3e01      	subs	r6, #1
 8005dd0:	e7e4      	b.n	8005d9c <_puts_r+0x68>
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	1c5a      	adds	r2, r3, #1
 8005dd6:	6022      	str	r2, [r4, #0]
 8005dd8:	220a      	movs	r2, #10
 8005dda:	701a      	strb	r2, [r3, #0]
 8005ddc:	e7ee      	b.n	8005dbc <_puts_r+0x88>
	...

08005de0 <puts>:
 8005de0:	4b02      	ldr	r3, [pc, #8]	@ (8005dec <puts+0xc>)
 8005de2:	4601      	mov	r1, r0
 8005de4:	6818      	ldr	r0, [r3, #0]
 8005de6:	f7ff bfa5 	b.w	8005d34 <_puts_r>
 8005dea:	bf00      	nop
 8005dec:	20000054 	.word	0x20000054

08005df0 <siprintf>:
 8005df0:	b40e      	push	{r1, r2, r3}
 8005df2:	b500      	push	{lr}
 8005df4:	b09c      	sub	sp, #112	@ 0x70
 8005df6:	ab1d      	add	r3, sp, #116	@ 0x74
 8005df8:	9002      	str	r0, [sp, #8]
 8005dfa:	9006      	str	r0, [sp, #24]
 8005dfc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005e00:	4809      	ldr	r0, [pc, #36]	@ (8005e28 <siprintf+0x38>)
 8005e02:	9107      	str	r1, [sp, #28]
 8005e04:	9104      	str	r1, [sp, #16]
 8005e06:	4909      	ldr	r1, [pc, #36]	@ (8005e2c <siprintf+0x3c>)
 8005e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e0c:	9105      	str	r1, [sp, #20]
 8005e0e:	6800      	ldr	r0, [r0, #0]
 8005e10:	9301      	str	r3, [sp, #4]
 8005e12:	a902      	add	r1, sp, #8
 8005e14:	f002 fbce 	bl	80085b4 <_svfiprintf_r>
 8005e18:	9b02      	ldr	r3, [sp, #8]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	701a      	strb	r2, [r3, #0]
 8005e1e:	b01c      	add	sp, #112	@ 0x70
 8005e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e24:	b003      	add	sp, #12
 8005e26:	4770      	bx	lr
 8005e28:	20000054 	.word	0x20000054
 8005e2c:	ffff0208 	.word	0xffff0208

08005e30 <__sread>:
 8005e30:	b510      	push	{r4, lr}
 8005e32:	460c      	mov	r4, r1
 8005e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e38:	f000 f900 	bl	800603c <_read_r>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	bfab      	itete	ge
 8005e40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e42:	89a3      	ldrhlt	r3, [r4, #12]
 8005e44:	181b      	addge	r3, r3, r0
 8005e46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e4a:	bfac      	ite	ge
 8005e4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e4e:	81a3      	strhlt	r3, [r4, #12]
 8005e50:	bd10      	pop	{r4, pc}

08005e52 <__swrite>:
 8005e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e56:	461f      	mov	r7, r3
 8005e58:	898b      	ldrh	r3, [r1, #12]
 8005e5a:	05db      	lsls	r3, r3, #23
 8005e5c:	4605      	mov	r5, r0
 8005e5e:	460c      	mov	r4, r1
 8005e60:	4616      	mov	r6, r2
 8005e62:	d505      	bpl.n	8005e70 <__swrite+0x1e>
 8005e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e68:	2302      	movs	r3, #2
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f000 f8d4 	bl	8006018 <_lseek_r>
 8005e70:	89a3      	ldrh	r3, [r4, #12]
 8005e72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e7a:	81a3      	strh	r3, [r4, #12]
 8005e7c:	4632      	mov	r2, r6
 8005e7e:	463b      	mov	r3, r7
 8005e80:	4628      	mov	r0, r5
 8005e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e86:	f000 b8eb 	b.w	8006060 <_write_r>

08005e8a <__sseek>:
 8005e8a:	b510      	push	{r4, lr}
 8005e8c:	460c      	mov	r4, r1
 8005e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e92:	f000 f8c1 	bl	8006018 <_lseek_r>
 8005e96:	1c43      	adds	r3, r0, #1
 8005e98:	89a3      	ldrh	r3, [r4, #12]
 8005e9a:	bf15      	itete	ne
 8005e9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005ea2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005ea6:	81a3      	strheq	r3, [r4, #12]
 8005ea8:	bf18      	it	ne
 8005eaa:	81a3      	strhne	r3, [r4, #12]
 8005eac:	bd10      	pop	{r4, pc}

08005eae <__sclose>:
 8005eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eb2:	f000 b8a1 	b.w	8005ff8 <_close_r>

08005eb6 <__swbuf_r>:
 8005eb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb8:	460e      	mov	r6, r1
 8005eba:	4614      	mov	r4, r2
 8005ebc:	4605      	mov	r5, r0
 8005ebe:	b118      	cbz	r0, 8005ec8 <__swbuf_r+0x12>
 8005ec0:	6a03      	ldr	r3, [r0, #32]
 8005ec2:	b90b      	cbnz	r3, 8005ec8 <__swbuf_r+0x12>
 8005ec4:	f7ff feee 	bl	8005ca4 <__sinit>
 8005ec8:	69a3      	ldr	r3, [r4, #24]
 8005eca:	60a3      	str	r3, [r4, #8]
 8005ecc:	89a3      	ldrh	r3, [r4, #12]
 8005ece:	071a      	lsls	r2, r3, #28
 8005ed0:	d501      	bpl.n	8005ed6 <__swbuf_r+0x20>
 8005ed2:	6923      	ldr	r3, [r4, #16]
 8005ed4:	b943      	cbnz	r3, 8005ee8 <__swbuf_r+0x32>
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	4628      	mov	r0, r5
 8005eda:	f000 f82b 	bl	8005f34 <__swsetup_r>
 8005ede:	b118      	cbz	r0, 8005ee8 <__swbuf_r+0x32>
 8005ee0:	f04f 37ff 	mov.w	r7, #4294967295
 8005ee4:	4638      	mov	r0, r7
 8005ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	6922      	ldr	r2, [r4, #16]
 8005eec:	1a98      	subs	r0, r3, r2
 8005eee:	6963      	ldr	r3, [r4, #20]
 8005ef0:	b2f6      	uxtb	r6, r6
 8005ef2:	4283      	cmp	r3, r0
 8005ef4:	4637      	mov	r7, r6
 8005ef6:	dc05      	bgt.n	8005f04 <__swbuf_r+0x4e>
 8005ef8:	4621      	mov	r1, r4
 8005efa:	4628      	mov	r0, r5
 8005efc:	f002 fe1c 	bl	8008b38 <_fflush_r>
 8005f00:	2800      	cmp	r0, #0
 8005f02:	d1ed      	bne.n	8005ee0 <__swbuf_r+0x2a>
 8005f04:	68a3      	ldr	r3, [r4, #8]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	60a3      	str	r3, [r4, #8]
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	6022      	str	r2, [r4, #0]
 8005f10:	701e      	strb	r6, [r3, #0]
 8005f12:	6962      	ldr	r2, [r4, #20]
 8005f14:	1c43      	adds	r3, r0, #1
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d004      	beq.n	8005f24 <__swbuf_r+0x6e>
 8005f1a:	89a3      	ldrh	r3, [r4, #12]
 8005f1c:	07db      	lsls	r3, r3, #31
 8005f1e:	d5e1      	bpl.n	8005ee4 <__swbuf_r+0x2e>
 8005f20:	2e0a      	cmp	r6, #10
 8005f22:	d1df      	bne.n	8005ee4 <__swbuf_r+0x2e>
 8005f24:	4621      	mov	r1, r4
 8005f26:	4628      	mov	r0, r5
 8005f28:	f002 fe06 	bl	8008b38 <_fflush_r>
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	d0d9      	beq.n	8005ee4 <__swbuf_r+0x2e>
 8005f30:	e7d6      	b.n	8005ee0 <__swbuf_r+0x2a>
	...

08005f34 <__swsetup_r>:
 8005f34:	b538      	push	{r3, r4, r5, lr}
 8005f36:	4b29      	ldr	r3, [pc, #164]	@ (8005fdc <__swsetup_r+0xa8>)
 8005f38:	4605      	mov	r5, r0
 8005f3a:	6818      	ldr	r0, [r3, #0]
 8005f3c:	460c      	mov	r4, r1
 8005f3e:	b118      	cbz	r0, 8005f48 <__swsetup_r+0x14>
 8005f40:	6a03      	ldr	r3, [r0, #32]
 8005f42:	b90b      	cbnz	r3, 8005f48 <__swsetup_r+0x14>
 8005f44:	f7ff feae 	bl	8005ca4 <__sinit>
 8005f48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f4c:	0719      	lsls	r1, r3, #28
 8005f4e:	d422      	bmi.n	8005f96 <__swsetup_r+0x62>
 8005f50:	06da      	lsls	r2, r3, #27
 8005f52:	d407      	bmi.n	8005f64 <__swsetup_r+0x30>
 8005f54:	2209      	movs	r2, #9
 8005f56:	602a      	str	r2, [r5, #0]
 8005f58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f5c:	81a3      	strh	r3, [r4, #12]
 8005f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f62:	e033      	b.n	8005fcc <__swsetup_r+0x98>
 8005f64:	0758      	lsls	r0, r3, #29
 8005f66:	d512      	bpl.n	8005f8e <__swsetup_r+0x5a>
 8005f68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f6a:	b141      	cbz	r1, 8005f7e <__swsetup_r+0x4a>
 8005f6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f70:	4299      	cmp	r1, r3
 8005f72:	d002      	beq.n	8005f7a <__swsetup_r+0x46>
 8005f74:	4628      	mov	r0, r5
 8005f76:	f000 ff07 	bl	8006d88 <_free_r>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f7e:	89a3      	ldrh	r3, [r4, #12]
 8005f80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f84:	81a3      	strh	r3, [r4, #12]
 8005f86:	2300      	movs	r3, #0
 8005f88:	6063      	str	r3, [r4, #4]
 8005f8a:	6923      	ldr	r3, [r4, #16]
 8005f8c:	6023      	str	r3, [r4, #0]
 8005f8e:	89a3      	ldrh	r3, [r4, #12]
 8005f90:	f043 0308 	orr.w	r3, r3, #8
 8005f94:	81a3      	strh	r3, [r4, #12]
 8005f96:	6923      	ldr	r3, [r4, #16]
 8005f98:	b94b      	cbnz	r3, 8005fae <__swsetup_r+0x7a>
 8005f9a:	89a3      	ldrh	r3, [r4, #12]
 8005f9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fa4:	d003      	beq.n	8005fae <__swsetup_r+0x7a>
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	4628      	mov	r0, r5
 8005faa:	f002 fe13 	bl	8008bd4 <__smakebuf_r>
 8005fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fb2:	f013 0201 	ands.w	r2, r3, #1
 8005fb6:	d00a      	beq.n	8005fce <__swsetup_r+0x9a>
 8005fb8:	2200      	movs	r2, #0
 8005fba:	60a2      	str	r2, [r4, #8]
 8005fbc:	6962      	ldr	r2, [r4, #20]
 8005fbe:	4252      	negs	r2, r2
 8005fc0:	61a2      	str	r2, [r4, #24]
 8005fc2:	6922      	ldr	r2, [r4, #16]
 8005fc4:	b942      	cbnz	r2, 8005fd8 <__swsetup_r+0xa4>
 8005fc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005fca:	d1c5      	bne.n	8005f58 <__swsetup_r+0x24>
 8005fcc:	bd38      	pop	{r3, r4, r5, pc}
 8005fce:	0799      	lsls	r1, r3, #30
 8005fd0:	bf58      	it	pl
 8005fd2:	6962      	ldrpl	r2, [r4, #20]
 8005fd4:	60a2      	str	r2, [r4, #8]
 8005fd6:	e7f4      	b.n	8005fc2 <__swsetup_r+0x8e>
 8005fd8:	2000      	movs	r0, #0
 8005fda:	e7f7      	b.n	8005fcc <__swsetup_r+0x98>
 8005fdc:	20000054 	.word	0x20000054

08005fe0 <memset>:
 8005fe0:	4402      	add	r2, r0
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d100      	bne.n	8005fea <memset+0xa>
 8005fe8:	4770      	bx	lr
 8005fea:	f803 1b01 	strb.w	r1, [r3], #1
 8005fee:	e7f9      	b.n	8005fe4 <memset+0x4>

08005ff0 <_localeconv_r>:
 8005ff0:	4800      	ldr	r0, [pc, #0]	@ (8005ff4 <_localeconv_r+0x4>)
 8005ff2:	4770      	bx	lr
 8005ff4:	20000194 	.word	0x20000194

08005ff8 <_close_r>:
 8005ff8:	b538      	push	{r3, r4, r5, lr}
 8005ffa:	4d06      	ldr	r5, [pc, #24]	@ (8006014 <_close_r+0x1c>)
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	4604      	mov	r4, r0
 8006000:	4608      	mov	r0, r1
 8006002:	602b      	str	r3, [r5, #0]
 8006004:	f7fc fbb4 	bl	8002770 <_close>
 8006008:	1c43      	adds	r3, r0, #1
 800600a:	d102      	bne.n	8006012 <_close_r+0x1a>
 800600c:	682b      	ldr	r3, [r5, #0]
 800600e:	b103      	cbz	r3, 8006012 <_close_r+0x1a>
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	bd38      	pop	{r3, r4, r5, pc}
 8006014:	2000095c 	.word	0x2000095c

08006018 <_lseek_r>:
 8006018:	b538      	push	{r3, r4, r5, lr}
 800601a:	4d07      	ldr	r5, [pc, #28]	@ (8006038 <_lseek_r+0x20>)
 800601c:	4604      	mov	r4, r0
 800601e:	4608      	mov	r0, r1
 8006020:	4611      	mov	r1, r2
 8006022:	2200      	movs	r2, #0
 8006024:	602a      	str	r2, [r5, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	f7fc fbc9 	bl	80027be <_lseek>
 800602c:	1c43      	adds	r3, r0, #1
 800602e:	d102      	bne.n	8006036 <_lseek_r+0x1e>
 8006030:	682b      	ldr	r3, [r5, #0]
 8006032:	b103      	cbz	r3, 8006036 <_lseek_r+0x1e>
 8006034:	6023      	str	r3, [r4, #0]
 8006036:	bd38      	pop	{r3, r4, r5, pc}
 8006038:	2000095c 	.word	0x2000095c

0800603c <_read_r>:
 800603c:	b538      	push	{r3, r4, r5, lr}
 800603e:	4d07      	ldr	r5, [pc, #28]	@ (800605c <_read_r+0x20>)
 8006040:	4604      	mov	r4, r0
 8006042:	4608      	mov	r0, r1
 8006044:	4611      	mov	r1, r2
 8006046:	2200      	movs	r2, #0
 8006048:	602a      	str	r2, [r5, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	f7fc fb57 	bl	80026fe <_read>
 8006050:	1c43      	adds	r3, r0, #1
 8006052:	d102      	bne.n	800605a <_read_r+0x1e>
 8006054:	682b      	ldr	r3, [r5, #0]
 8006056:	b103      	cbz	r3, 800605a <_read_r+0x1e>
 8006058:	6023      	str	r3, [r4, #0]
 800605a:	bd38      	pop	{r3, r4, r5, pc}
 800605c:	2000095c 	.word	0x2000095c

08006060 <_write_r>:
 8006060:	b538      	push	{r3, r4, r5, lr}
 8006062:	4d07      	ldr	r5, [pc, #28]	@ (8006080 <_write_r+0x20>)
 8006064:	4604      	mov	r4, r0
 8006066:	4608      	mov	r0, r1
 8006068:	4611      	mov	r1, r2
 800606a:	2200      	movs	r2, #0
 800606c:	602a      	str	r2, [r5, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	f7fc fb62 	bl	8002738 <_write>
 8006074:	1c43      	adds	r3, r0, #1
 8006076:	d102      	bne.n	800607e <_write_r+0x1e>
 8006078:	682b      	ldr	r3, [r5, #0]
 800607a:	b103      	cbz	r3, 800607e <_write_r+0x1e>
 800607c:	6023      	str	r3, [r4, #0]
 800607e:	bd38      	pop	{r3, r4, r5, pc}
 8006080:	2000095c 	.word	0x2000095c

08006084 <__errno>:
 8006084:	4b01      	ldr	r3, [pc, #4]	@ (800608c <__errno+0x8>)
 8006086:	6818      	ldr	r0, [r3, #0]
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	20000054 	.word	0x20000054

08006090 <__libc_init_array>:
 8006090:	b570      	push	{r4, r5, r6, lr}
 8006092:	4d0d      	ldr	r5, [pc, #52]	@ (80060c8 <__libc_init_array+0x38>)
 8006094:	4c0d      	ldr	r4, [pc, #52]	@ (80060cc <__libc_init_array+0x3c>)
 8006096:	1b64      	subs	r4, r4, r5
 8006098:	10a4      	asrs	r4, r4, #2
 800609a:	2600      	movs	r6, #0
 800609c:	42a6      	cmp	r6, r4
 800609e:	d109      	bne.n	80060b4 <__libc_init_array+0x24>
 80060a0:	4d0b      	ldr	r5, [pc, #44]	@ (80060d0 <__libc_init_array+0x40>)
 80060a2:	4c0c      	ldr	r4, [pc, #48]	@ (80060d4 <__libc_init_array+0x44>)
 80060a4:	f004 f9c6 	bl	800a434 <_init>
 80060a8:	1b64      	subs	r4, r4, r5
 80060aa:	10a4      	asrs	r4, r4, #2
 80060ac:	2600      	movs	r6, #0
 80060ae:	42a6      	cmp	r6, r4
 80060b0:	d105      	bne.n	80060be <__libc_init_array+0x2e>
 80060b2:	bd70      	pop	{r4, r5, r6, pc}
 80060b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060b8:	4798      	blx	r3
 80060ba:	3601      	adds	r6, #1
 80060bc:	e7ee      	b.n	800609c <__libc_init_array+0xc>
 80060be:	f855 3b04 	ldr.w	r3, [r5], #4
 80060c2:	4798      	blx	r3
 80060c4:	3601      	adds	r6, #1
 80060c6:	e7f2      	b.n	80060ae <__libc_init_array+0x1e>
 80060c8:	0800a960 	.word	0x0800a960
 80060cc:	0800a960 	.word	0x0800a960
 80060d0:	0800a960 	.word	0x0800a960
 80060d4:	0800a964 	.word	0x0800a964

080060d8 <__retarget_lock_init_recursive>:
 80060d8:	4770      	bx	lr

080060da <__retarget_lock_acquire_recursive>:
 80060da:	4770      	bx	lr

080060dc <__retarget_lock_release_recursive>:
 80060dc:	4770      	bx	lr
	...

080060e0 <nanf>:
 80060e0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80060e8 <nanf+0x8>
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	7fc00000 	.word	0x7fc00000

080060ec <quorem>:
 80060ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f0:	6903      	ldr	r3, [r0, #16]
 80060f2:	690c      	ldr	r4, [r1, #16]
 80060f4:	42a3      	cmp	r3, r4
 80060f6:	4607      	mov	r7, r0
 80060f8:	db7e      	blt.n	80061f8 <quorem+0x10c>
 80060fa:	3c01      	subs	r4, #1
 80060fc:	f101 0814 	add.w	r8, r1, #20
 8006100:	00a3      	lsls	r3, r4, #2
 8006102:	f100 0514 	add.w	r5, r0, #20
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800610c:	9301      	str	r3, [sp, #4]
 800610e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006112:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006116:	3301      	adds	r3, #1
 8006118:	429a      	cmp	r2, r3
 800611a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800611e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006122:	d32e      	bcc.n	8006182 <quorem+0x96>
 8006124:	f04f 0a00 	mov.w	sl, #0
 8006128:	46c4      	mov	ip, r8
 800612a:	46ae      	mov	lr, r5
 800612c:	46d3      	mov	fp, sl
 800612e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006132:	b298      	uxth	r0, r3
 8006134:	fb06 a000 	mla	r0, r6, r0, sl
 8006138:	0c02      	lsrs	r2, r0, #16
 800613a:	0c1b      	lsrs	r3, r3, #16
 800613c:	fb06 2303 	mla	r3, r6, r3, r2
 8006140:	f8de 2000 	ldr.w	r2, [lr]
 8006144:	b280      	uxth	r0, r0
 8006146:	b292      	uxth	r2, r2
 8006148:	1a12      	subs	r2, r2, r0
 800614a:	445a      	add	r2, fp
 800614c:	f8de 0000 	ldr.w	r0, [lr]
 8006150:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006154:	b29b      	uxth	r3, r3
 8006156:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800615a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800615e:	b292      	uxth	r2, r2
 8006160:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006164:	45e1      	cmp	r9, ip
 8006166:	f84e 2b04 	str.w	r2, [lr], #4
 800616a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800616e:	d2de      	bcs.n	800612e <quorem+0x42>
 8006170:	9b00      	ldr	r3, [sp, #0]
 8006172:	58eb      	ldr	r3, [r5, r3]
 8006174:	b92b      	cbnz	r3, 8006182 <quorem+0x96>
 8006176:	9b01      	ldr	r3, [sp, #4]
 8006178:	3b04      	subs	r3, #4
 800617a:	429d      	cmp	r5, r3
 800617c:	461a      	mov	r2, r3
 800617e:	d32f      	bcc.n	80061e0 <quorem+0xf4>
 8006180:	613c      	str	r4, [r7, #16]
 8006182:	4638      	mov	r0, r7
 8006184:	f001 f9c4 	bl	8007510 <__mcmp>
 8006188:	2800      	cmp	r0, #0
 800618a:	db25      	blt.n	80061d8 <quorem+0xec>
 800618c:	4629      	mov	r1, r5
 800618e:	2000      	movs	r0, #0
 8006190:	f858 2b04 	ldr.w	r2, [r8], #4
 8006194:	f8d1 c000 	ldr.w	ip, [r1]
 8006198:	fa1f fe82 	uxth.w	lr, r2
 800619c:	fa1f f38c 	uxth.w	r3, ip
 80061a0:	eba3 030e 	sub.w	r3, r3, lr
 80061a4:	4403      	add	r3, r0
 80061a6:	0c12      	lsrs	r2, r2, #16
 80061a8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80061ac:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061b6:	45c1      	cmp	r9, r8
 80061b8:	f841 3b04 	str.w	r3, [r1], #4
 80061bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80061c0:	d2e6      	bcs.n	8006190 <quorem+0xa4>
 80061c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061ca:	b922      	cbnz	r2, 80061d6 <quorem+0xea>
 80061cc:	3b04      	subs	r3, #4
 80061ce:	429d      	cmp	r5, r3
 80061d0:	461a      	mov	r2, r3
 80061d2:	d30b      	bcc.n	80061ec <quorem+0x100>
 80061d4:	613c      	str	r4, [r7, #16]
 80061d6:	3601      	adds	r6, #1
 80061d8:	4630      	mov	r0, r6
 80061da:	b003      	add	sp, #12
 80061dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e0:	6812      	ldr	r2, [r2, #0]
 80061e2:	3b04      	subs	r3, #4
 80061e4:	2a00      	cmp	r2, #0
 80061e6:	d1cb      	bne.n	8006180 <quorem+0x94>
 80061e8:	3c01      	subs	r4, #1
 80061ea:	e7c6      	b.n	800617a <quorem+0x8e>
 80061ec:	6812      	ldr	r2, [r2, #0]
 80061ee:	3b04      	subs	r3, #4
 80061f0:	2a00      	cmp	r2, #0
 80061f2:	d1ef      	bne.n	80061d4 <quorem+0xe8>
 80061f4:	3c01      	subs	r4, #1
 80061f6:	e7ea      	b.n	80061ce <quorem+0xe2>
 80061f8:	2000      	movs	r0, #0
 80061fa:	e7ee      	b.n	80061da <quorem+0xee>
 80061fc:	0000      	movs	r0, r0
	...

08006200 <_dtoa_r>:
 8006200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006204:	69c7      	ldr	r7, [r0, #28]
 8006206:	b099      	sub	sp, #100	@ 0x64
 8006208:	ed8d 0b02 	vstr	d0, [sp, #8]
 800620c:	ec55 4b10 	vmov	r4, r5, d0
 8006210:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006212:	9109      	str	r1, [sp, #36]	@ 0x24
 8006214:	4683      	mov	fp, r0
 8006216:	920e      	str	r2, [sp, #56]	@ 0x38
 8006218:	9313      	str	r3, [sp, #76]	@ 0x4c
 800621a:	b97f      	cbnz	r7, 800623c <_dtoa_r+0x3c>
 800621c:	2010      	movs	r0, #16
 800621e:	f000 fdfd 	bl	8006e1c <malloc>
 8006222:	4602      	mov	r2, r0
 8006224:	f8cb 001c 	str.w	r0, [fp, #28]
 8006228:	b920      	cbnz	r0, 8006234 <_dtoa_r+0x34>
 800622a:	4ba7      	ldr	r3, [pc, #668]	@ (80064c8 <_dtoa_r+0x2c8>)
 800622c:	21ef      	movs	r1, #239	@ 0xef
 800622e:	48a7      	ldr	r0, [pc, #668]	@ (80064cc <_dtoa_r+0x2cc>)
 8006230:	f002 fd82 	bl	8008d38 <__assert_func>
 8006234:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006238:	6007      	str	r7, [r0, #0]
 800623a:	60c7      	str	r7, [r0, #12]
 800623c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006240:	6819      	ldr	r1, [r3, #0]
 8006242:	b159      	cbz	r1, 800625c <_dtoa_r+0x5c>
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	604a      	str	r2, [r1, #4]
 8006248:	2301      	movs	r3, #1
 800624a:	4093      	lsls	r3, r2
 800624c:	608b      	str	r3, [r1, #8]
 800624e:	4658      	mov	r0, fp
 8006250:	f000 feda 	bl	8007008 <_Bfree>
 8006254:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	1e2b      	subs	r3, r5, #0
 800625e:	bfb9      	ittee	lt
 8006260:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006264:	9303      	strlt	r3, [sp, #12]
 8006266:	2300      	movge	r3, #0
 8006268:	6033      	strge	r3, [r6, #0]
 800626a:	9f03      	ldr	r7, [sp, #12]
 800626c:	4b98      	ldr	r3, [pc, #608]	@ (80064d0 <_dtoa_r+0x2d0>)
 800626e:	bfbc      	itt	lt
 8006270:	2201      	movlt	r2, #1
 8006272:	6032      	strlt	r2, [r6, #0]
 8006274:	43bb      	bics	r3, r7
 8006276:	d112      	bne.n	800629e <_dtoa_r+0x9e>
 8006278:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800627a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800627e:	6013      	str	r3, [r2, #0]
 8006280:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006284:	4323      	orrs	r3, r4
 8006286:	f000 854d 	beq.w	8006d24 <_dtoa_r+0xb24>
 800628a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800628c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80064e4 <_dtoa_r+0x2e4>
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 854f 	beq.w	8006d34 <_dtoa_r+0xb34>
 8006296:	f10a 0303 	add.w	r3, sl, #3
 800629a:	f000 bd49 	b.w	8006d30 <_dtoa_r+0xb30>
 800629e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80062a2:	2200      	movs	r2, #0
 80062a4:	ec51 0b17 	vmov	r0, r1, d7
 80062a8:	2300      	movs	r3, #0
 80062aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80062ae:	f7fa fc33 	bl	8000b18 <__aeabi_dcmpeq>
 80062b2:	4680      	mov	r8, r0
 80062b4:	b158      	cbz	r0, 80062ce <_dtoa_r+0xce>
 80062b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80062b8:	2301      	movs	r3, #1
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80062be:	b113      	cbz	r3, 80062c6 <_dtoa_r+0xc6>
 80062c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80062c2:	4b84      	ldr	r3, [pc, #528]	@ (80064d4 <_dtoa_r+0x2d4>)
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80064e8 <_dtoa_r+0x2e8>
 80062ca:	f000 bd33 	b.w	8006d34 <_dtoa_r+0xb34>
 80062ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80062d2:	aa16      	add	r2, sp, #88	@ 0x58
 80062d4:	a917      	add	r1, sp, #92	@ 0x5c
 80062d6:	4658      	mov	r0, fp
 80062d8:	f001 fa3a 	bl	8007750 <__d2b>
 80062dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80062e0:	4681      	mov	r9, r0
 80062e2:	2e00      	cmp	r6, #0
 80062e4:	d077      	beq.n	80063d6 <_dtoa_r+0x1d6>
 80062e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80062ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80062f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80062fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006300:	4619      	mov	r1, r3
 8006302:	2200      	movs	r2, #0
 8006304:	4b74      	ldr	r3, [pc, #464]	@ (80064d8 <_dtoa_r+0x2d8>)
 8006306:	f7f9 ffe7 	bl	80002d8 <__aeabi_dsub>
 800630a:	a369      	add	r3, pc, #420	@ (adr r3, 80064b0 <_dtoa_r+0x2b0>)
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	f7fa f99a 	bl	8000648 <__aeabi_dmul>
 8006314:	a368      	add	r3, pc, #416	@ (adr r3, 80064b8 <_dtoa_r+0x2b8>)
 8006316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631a:	f7f9 ffdf 	bl	80002dc <__adddf3>
 800631e:	4604      	mov	r4, r0
 8006320:	4630      	mov	r0, r6
 8006322:	460d      	mov	r5, r1
 8006324:	f7fa f926 	bl	8000574 <__aeabi_i2d>
 8006328:	a365      	add	r3, pc, #404	@ (adr r3, 80064c0 <_dtoa_r+0x2c0>)
 800632a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632e:	f7fa f98b 	bl	8000648 <__aeabi_dmul>
 8006332:	4602      	mov	r2, r0
 8006334:	460b      	mov	r3, r1
 8006336:	4620      	mov	r0, r4
 8006338:	4629      	mov	r1, r5
 800633a:	f7f9 ffcf 	bl	80002dc <__adddf3>
 800633e:	4604      	mov	r4, r0
 8006340:	460d      	mov	r5, r1
 8006342:	f7fa fc31 	bl	8000ba8 <__aeabi_d2iz>
 8006346:	2200      	movs	r2, #0
 8006348:	4607      	mov	r7, r0
 800634a:	2300      	movs	r3, #0
 800634c:	4620      	mov	r0, r4
 800634e:	4629      	mov	r1, r5
 8006350:	f7fa fbec 	bl	8000b2c <__aeabi_dcmplt>
 8006354:	b140      	cbz	r0, 8006368 <_dtoa_r+0x168>
 8006356:	4638      	mov	r0, r7
 8006358:	f7fa f90c 	bl	8000574 <__aeabi_i2d>
 800635c:	4622      	mov	r2, r4
 800635e:	462b      	mov	r3, r5
 8006360:	f7fa fbda 	bl	8000b18 <__aeabi_dcmpeq>
 8006364:	b900      	cbnz	r0, 8006368 <_dtoa_r+0x168>
 8006366:	3f01      	subs	r7, #1
 8006368:	2f16      	cmp	r7, #22
 800636a:	d851      	bhi.n	8006410 <_dtoa_r+0x210>
 800636c:	4b5b      	ldr	r3, [pc, #364]	@ (80064dc <_dtoa_r+0x2dc>)
 800636e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006376:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800637a:	f7fa fbd7 	bl	8000b2c <__aeabi_dcmplt>
 800637e:	2800      	cmp	r0, #0
 8006380:	d048      	beq.n	8006414 <_dtoa_r+0x214>
 8006382:	3f01      	subs	r7, #1
 8006384:	2300      	movs	r3, #0
 8006386:	9312      	str	r3, [sp, #72]	@ 0x48
 8006388:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800638a:	1b9b      	subs	r3, r3, r6
 800638c:	1e5a      	subs	r2, r3, #1
 800638e:	bf44      	itt	mi
 8006390:	f1c3 0801 	rsbmi	r8, r3, #1
 8006394:	2300      	movmi	r3, #0
 8006396:	9208      	str	r2, [sp, #32]
 8006398:	bf54      	ite	pl
 800639a:	f04f 0800 	movpl.w	r8, #0
 800639e:	9308      	strmi	r3, [sp, #32]
 80063a0:	2f00      	cmp	r7, #0
 80063a2:	db39      	blt.n	8006418 <_dtoa_r+0x218>
 80063a4:	9b08      	ldr	r3, [sp, #32]
 80063a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80063a8:	443b      	add	r3, r7
 80063aa:	9308      	str	r3, [sp, #32]
 80063ac:	2300      	movs	r3, #0
 80063ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80063b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063b2:	2b09      	cmp	r3, #9
 80063b4:	d864      	bhi.n	8006480 <_dtoa_r+0x280>
 80063b6:	2b05      	cmp	r3, #5
 80063b8:	bfc4      	itt	gt
 80063ba:	3b04      	subgt	r3, #4
 80063bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80063be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063c0:	f1a3 0302 	sub.w	r3, r3, #2
 80063c4:	bfcc      	ite	gt
 80063c6:	2400      	movgt	r4, #0
 80063c8:	2401      	movle	r4, #1
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d863      	bhi.n	8006496 <_dtoa_r+0x296>
 80063ce:	e8df f003 	tbb	[pc, r3]
 80063d2:	372a      	.short	0x372a
 80063d4:	5535      	.short	0x5535
 80063d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80063da:	441e      	add	r6, r3
 80063dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80063e0:	2b20      	cmp	r3, #32
 80063e2:	bfc1      	itttt	gt
 80063e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80063e8:	409f      	lslgt	r7, r3
 80063ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80063ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 80063f2:	bfd6      	itet	le
 80063f4:	f1c3 0320 	rsble	r3, r3, #32
 80063f8:	ea47 0003 	orrgt.w	r0, r7, r3
 80063fc:	fa04 f003 	lslle.w	r0, r4, r3
 8006400:	f7fa f8a8 	bl	8000554 <__aeabi_ui2d>
 8006404:	2201      	movs	r2, #1
 8006406:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800640a:	3e01      	subs	r6, #1
 800640c:	9214      	str	r2, [sp, #80]	@ 0x50
 800640e:	e777      	b.n	8006300 <_dtoa_r+0x100>
 8006410:	2301      	movs	r3, #1
 8006412:	e7b8      	b.n	8006386 <_dtoa_r+0x186>
 8006414:	9012      	str	r0, [sp, #72]	@ 0x48
 8006416:	e7b7      	b.n	8006388 <_dtoa_r+0x188>
 8006418:	427b      	negs	r3, r7
 800641a:	930a      	str	r3, [sp, #40]	@ 0x28
 800641c:	2300      	movs	r3, #0
 800641e:	eba8 0807 	sub.w	r8, r8, r7
 8006422:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006424:	e7c4      	b.n	80063b0 <_dtoa_r+0x1b0>
 8006426:	2300      	movs	r3, #0
 8006428:	930b      	str	r3, [sp, #44]	@ 0x2c
 800642a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800642c:	2b00      	cmp	r3, #0
 800642e:	dc35      	bgt.n	800649c <_dtoa_r+0x29c>
 8006430:	2301      	movs	r3, #1
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	9307      	str	r3, [sp, #28]
 8006436:	461a      	mov	r2, r3
 8006438:	920e      	str	r2, [sp, #56]	@ 0x38
 800643a:	e00b      	b.n	8006454 <_dtoa_r+0x254>
 800643c:	2301      	movs	r3, #1
 800643e:	e7f3      	b.n	8006428 <_dtoa_r+0x228>
 8006440:	2300      	movs	r3, #0
 8006442:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006444:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006446:	18fb      	adds	r3, r7, r3
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	3301      	adds	r3, #1
 800644c:	2b01      	cmp	r3, #1
 800644e:	9307      	str	r3, [sp, #28]
 8006450:	bfb8      	it	lt
 8006452:	2301      	movlt	r3, #1
 8006454:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006458:	2100      	movs	r1, #0
 800645a:	2204      	movs	r2, #4
 800645c:	f102 0514 	add.w	r5, r2, #20
 8006460:	429d      	cmp	r5, r3
 8006462:	d91f      	bls.n	80064a4 <_dtoa_r+0x2a4>
 8006464:	6041      	str	r1, [r0, #4]
 8006466:	4658      	mov	r0, fp
 8006468:	f000 fd8e 	bl	8006f88 <_Balloc>
 800646c:	4682      	mov	sl, r0
 800646e:	2800      	cmp	r0, #0
 8006470:	d13c      	bne.n	80064ec <_dtoa_r+0x2ec>
 8006472:	4b1b      	ldr	r3, [pc, #108]	@ (80064e0 <_dtoa_r+0x2e0>)
 8006474:	4602      	mov	r2, r0
 8006476:	f240 11af 	movw	r1, #431	@ 0x1af
 800647a:	e6d8      	b.n	800622e <_dtoa_r+0x2e>
 800647c:	2301      	movs	r3, #1
 800647e:	e7e0      	b.n	8006442 <_dtoa_r+0x242>
 8006480:	2401      	movs	r4, #1
 8006482:	2300      	movs	r3, #0
 8006484:	9309      	str	r3, [sp, #36]	@ 0x24
 8006486:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006488:	f04f 33ff 	mov.w	r3, #4294967295
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	9307      	str	r3, [sp, #28]
 8006490:	2200      	movs	r2, #0
 8006492:	2312      	movs	r3, #18
 8006494:	e7d0      	b.n	8006438 <_dtoa_r+0x238>
 8006496:	2301      	movs	r3, #1
 8006498:	930b      	str	r3, [sp, #44]	@ 0x2c
 800649a:	e7f5      	b.n	8006488 <_dtoa_r+0x288>
 800649c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	9307      	str	r3, [sp, #28]
 80064a2:	e7d7      	b.n	8006454 <_dtoa_r+0x254>
 80064a4:	3101      	adds	r1, #1
 80064a6:	0052      	lsls	r2, r2, #1
 80064a8:	e7d8      	b.n	800645c <_dtoa_r+0x25c>
 80064aa:	bf00      	nop
 80064ac:	f3af 8000 	nop.w
 80064b0:	636f4361 	.word	0x636f4361
 80064b4:	3fd287a7 	.word	0x3fd287a7
 80064b8:	8b60c8b3 	.word	0x8b60c8b3
 80064bc:	3fc68a28 	.word	0x3fc68a28
 80064c0:	509f79fb 	.word	0x509f79fb
 80064c4:	3fd34413 	.word	0x3fd34413
 80064c8:	0800a63f 	.word	0x0800a63f
 80064cc:	0800a656 	.word	0x0800a656
 80064d0:	7ff00000 	.word	0x7ff00000
 80064d4:	0800a60a 	.word	0x0800a60a
 80064d8:	3ff80000 	.word	0x3ff80000
 80064dc:	0800a750 	.word	0x0800a750
 80064e0:	0800a6ae 	.word	0x0800a6ae
 80064e4:	0800a63b 	.word	0x0800a63b
 80064e8:	0800a609 	.word	0x0800a609
 80064ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80064f0:	6018      	str	r0, [r3, #0]
 80064f2:	9b07      	ldr	r3, [sp, #28]
 80064f4:	2b0e      	cmp	r3, #14
 80064f6:	f200 80a4 	bhi.w	8006642 <_dtoa_r+0x442>
 80064fa:	2c00      	cmp	r4, #0
 80064fc:	f000 80a1 	beq.w	8006642 <_dtoa_r+0x442>
 8006500:	2f00      	cmp	r7, #0
 8006502:	dd33      	ble.n	800656c <_dtoa_r+0x36c>
 8006504:	4bad      	ldr	r3, [pc, #692]	@ (80067bc <_dtoa_r+0x5bc>)
 8006506:	f007 020f 	and.w	r2, r7, #15
 800650a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800650e:	ed93 7b00 	vldr	d7, [r3]
 8006512:	05f8      	lsls	r0, r7, #23
 8006514:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006518:	ea4f 1427 	mov.w	r4, r7, asr #4
 800651c:	d516      	bpl.n	800654c <_dtoa_r+0x34c>
 800651e:	4ba8      	ldr	r3, [pc, #672]	@ (80067c0 <_dtoa_r+0x5c0>)
 8006520:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006524:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006528:	f7fa f9b8 	bl	800089c <__aeabi_ddiv>
 800652c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006530:	f004 040f 	and.w	r4, r4, #15
 8006534:	2603      	movs	r6, #3
 8006536:	4da2      	ldr	r5, [pc, #648]	@ (80067c0 <_dtoa_r+0x5c0>)
 8006538:	b954      	cbnz	r4, 8006550 <_dtoa_r+0x350>
 800653a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800653e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006542:	f7fa f9ab 	bl	800089c <__aeabi_ddiv>
 8006546:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800654a:	e028      	b.n	800659e <_dtoa_r+0x39e>
 800654c:	2602      	movs	r6, #2
 800654e:	e7f2      	b.n	8006536 <_dtoa_r+0x336>
 8006550:	07e1      	lsls	r1, r4, #31
 8006552:	d508      	bpl.n	8006566 <_dtoa_r+0x366>
 8006554:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006558:	e9d5 2300 	ldrd	r2, r3, [r5]
 800655c:	f7fa f874 	bl	8000648 <__aeabi_dmul>
 8006560:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006564:	3601      	adds	r6, #1
 8006566:	1064      	asrs	r4, r4, #1
 8006568:	3508      	adds	r5, #8
 800656a:	e7e5      	b.n	8006538 <_dtoa_r+0x338>
 800656c:	f000 80d2 	beq.w	8006714 <_dtoa_r+0x514>
 8006570:	427c      	negs	r4, r7
 8006572:	4b92      	ldr	r3, [pc, #584]	@ (80067bc <_dtoa_r+0x5bc>)
 8006574:	4d92      	ldr	r5, [pc, #584]	@ (80067c0 <_dtoa_r+0x5c0>)
 8006576:	f004 020f 	and.w	r2, r4, #15
 800657a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800657e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006582:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006586:	f7fa f85f 	bl	8000648 <__aeabi_dmul>
 800658a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800658e:	1124      	asrs	r4, r4, #4
 8006590:	2300      	movs	r3, #0
 8006592:	2602      	movs	r6, #2
 8006594:	2c00      	cmp	r4, #0
 8006596:	f040 80b2 	bne.w	80066fe <_dtoa_r+0x4fe>
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1d3      	bne.n	8006546 <_dtoa_r+0x346>
 800659e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80065a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 80b7 	beq.w	8006718 <_dtoa_r+0x518>
 80065aa:	4b86      	ldr	r3, [pc, #536]	@ (80067c4 <_dtoa_r+0x5c4>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	4620      	mov	r0, r4
 80065b0:	4629      	mov	r1, r5
 80065b2:	f7fa fabb 	bl	8000b2c <__aeabi_dcmplt>
 80065b6:	2800      	cmp	r0, #0
 80065b8:	f000 80ae 	beq.w	8006718 <_dtoa_r+0x518>
 80065bc:	9b07      	ldr	r3, [sp, #28]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 80aa 	beq.w	8006718 <_dtoa_r+0x518>
 80065c4:	9b00      	ldr	r3, [sp, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	dd37      	ble.n	800663a <_dtoa_r+0x43a>
 80065ca:	1e7b      	subs	r3, r7, #1
 80065cc:	9304      	str	r3, [sp, #16]
 80065ce:	4620      	mov	r0, r4
 80065d0:	4b7d      	ldr	r3, [pc, #500]	@ (80067c8 <_dtoa_r+0x5c8>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	4629      	mov	r1, r5
 80065d6:	f7fa f837 	bl	8000648 <__aeabi_dmul>
 80065da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065de:	9c00      	ldr	r4, [sp, #0]
 80065e0:	3601      	adds	r6, #1
 80065e2:	4630      	mov	r0, r6
 80065e4:	f7f9 ffc6 	bl	8000574 <__aeabi_i2d>
 80065e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065ec:	f7fa f82c 	bl	8000648 <__aeabi_dmul>
 80065f0:	4b76      	ldr	r3, [pc, #472]	@ (80067cc <_dtoa_r+0x5cc>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	f7f9 fe72 	bl	80002dc <__adddf3>
 80065f8:	4605      	mov	r5, r0
 80065fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80065fe:	2c00      	cmp	r4, #0
 8006600:	f040 808d 	bne.w	800671e <_dtoa_r+0x51e>
 8006604:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006608:	4b71      	ldr	r3, [pc, #452]	@ (80067d0 <_dtoa_r+0x5d0>)
 800660a:	2200      	movs	r2, #0
 800660c:	f7f9 fe64 	bl	80002d8 <__aeabi_dsub>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006618:	462a      	mov	r2, r5
 800661a:	4633      	mov	r3, r6
 800661c:	f7fa faa4 	bl	8000b68 <__aeabi_dcmpgt>
 8006620:	2800      	cmp	r0, #0
 8006622:	f040 828b 	bne.w	8006b3c <_dtoa_r+0x93c>
 8006626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800662a:	462a      	mov	r2, r5
 800662c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006630:	f7fa fa7c 	bl	8000b2c <__aeabi_dcmplt>
 8006634:	2800      	cmp	r0, #0
 8006636:	f040 8128 	bne.w	800688a <_dtoa_r+0x68a>
 800663a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800663e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006642:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006644:	2b00      	cmp	r3, #0
 8006646:	f2c0 815a 	blt.w	80068fe <_dtoa_r+0x6fe>
 800664a:	2f0e      	cmp	r7, #14
 800664c:	f300 8157 	bgt.w	80068fe <_dtoa_r+0x6fe>
 8006650:	4b5a      	ldr	r3, [pc, #360]	@ (80067bc <_dtoa_r+0x5bc>)
 8006652:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006656:	ed93 7b00 	vldr	d7, [r3]
 800665a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800665c:	2b00      	cmp	r3, #0
 800665e:	ed8d 7b00 	vstr	d7, [sp]
 8006662:	da03      	bge.n	800666c <_dtoa_r+0x46c>
 8006664:	9b07      	ldr	r3, [sp, #28]
 8006666:	2b00      	cmp	r3, #0
 8006668:	f340 8101 	ble.w	800686e <_dtoa_r+0x66e>
 800666c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006670:	4656      	mov	r6, sl
 8006672:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006676:	4620      	mov	r0, r4
 8006678:	4629      	mov	r1, r5
 800667a:	f7fa f90f 	bl	800089c <__aeabi_ddiv>
 800667e:	f7fa fa93 	bl	8000ba8 <__aeabi_d2iz>
 8006682:	4680      	mov	r8, r0
 8006684:	f7f9 ff76 	bl	8000574 <__aeabi_i2d>
 8006688:	e9dd 2300 	ldrd	r2, r3, [sp]
 800668c:	f7f9 ffdc 	bl	8000648 <__aeabi_dmul>
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	4620      	mov	r0, r4
 8006696:	4629      	mov	r1, r5
 8006698:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800669c:	f7f9 fe1c 	bl	80002d8 <__aeabi_dsub>
 80066a0:	f806 4b01 	strb.w	r4, [r6], #1
 80066a4:	9d07      	ldr	r5, [sp, #28]
 80066a6:	eba6 040a 	sub.w	r4, r6, sl
 80066aa:	42a5      	cmp	r5, r4
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	f040 8117 	bne.w	80068e2 <_dtoa_r+0x6e2>
 80066b4:	f7f9 fe12 	bl	80002dc <__adddf3>
 80066b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066bc:	4604      	mov	r4, r0
 80066be:	460d      	mov	r5, r1
 80066c0:	f7fa fa52 	bl	8000b68 <__aeabi_dcmpgt>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	f040 80f9 	bne.w	80068bc <_dtoa_r+0x6bc>
 80066ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066ce:	4620      	mov	r0, r4
 80066d0:	4629      	mov	r1, r5
 80066d2:	f7fa fa21 	bl	8000b18 <__aeabi_dcmpeq>
 80066d6:	b118      	cbz	r0, 80066e0 <_dtoa_r+0x4e0>
 80066d8:	f018 0f01 	tst.w	r8, #1
 80066dc:	f040 80ee 	bne.w	80068bc <_dtoa_r+0x6bc>
 80066e0:	4649      	mov	r1, r9
 80066e2:	4658      	mov	r0, fp
 80066e4:	f000 fc90 	bl	8007008 <_Bfree>
 80066e8:	2300      	movs	r3, #0
 80066ea:	7033      	strb	r3, [r6, #0]
 80066ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80066ee:	3701      	adds	r7, #1
 80066f0:	601f      	str	r7, [r3, #0]
 80066f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 831d 	beq.w	8006d34 <_dtoa_r+0xb34>
 80066fa:	601e      	str	r6, [r3, #0]
 80066fc:	e31a      	b.n	8006d34 <_dtoa_r+0xb34>
 80066fe:	07e2      	lsls	r2, r4, #31
 8006700:	d505      	bpl.n	800670e <_dtoa_r+0x50e>
 8006702:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006706:	f7f9 ff9f 	bl	8000648 <__aeabi_dmul>
 800670a:	3601      	adds	r6, #1
 800670c:	2301      	movs	r3, #1
 800670e:	1064      	asrs	r4, r4, #1
 8006710:	3508      	adds	r5, #8
 8006712:	e73f      	b.n	8006594 <_dtoa_r+0x394>
 8006714:	2602      	movs	r6, #2
 8006716:	e742      	b.n	800659e <_dtoa_r+0x39e>
 8006718:	9c07      	ldr	r4, [sp, #28]
 800671a:	9704      	str	r7, [sp, #16]
 800671c:	e761      	b.n	80065e2 <_dtoa_r+0x3e2>
 800671e:	4b27      	ldr	r3, [pc, #156]	@ (80067bc <_dtoa_r+0x5bc>)
 8006720:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006722:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006726:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800672a:	4454      	add	r4, sl
 800672c:	2900      	cmp	r1, #0
 800672e:	d053      	beq.n	80067d8 <_dtoa_r+0x5d8>
 8006730:	4928      	ldr	r1, [pc, #160]	@ (80067d4 <_dtoa_r+0x5d4>)
 8006732:	2000      	movs	r0, #0
 8006734:	f7fa f8b2 	bl	800089c <__aeabi_ddiv>
 8006738:	4633      	mov	r3, r6
 800673a:	462a      	mov	r2, r5
 800673c:	f7f9 fdcc 	bl	80002d8 <__aeabi_dsub>
 8006740:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006744:	4656      	mov	r6, sl
 8006746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800674a:	f7fa fa2d 	bl	8000ba8 <__aeabi_d2iz>
 800674e:	4605      	mov	r5, r0
 8006750:	f7f9 ff10 	bl	8000574 <__aeabi_i2d>
 8006754:	4602      	mov	r2, r0
 8006756:	460b      	mov	r3, r1
 8006758:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800675c:	f7f9 fdbc 	bl	80002d8 <__aeabi_dsub>
 8006760:	3530      	adds	r5, #48	@ 0x30
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800676a:	f806 5b01 	strb.w	r5, [r6], #1
 800676e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006772:	f7fa f9db 	bl	8000b2c <__aeabi_dcmplt>
 8006776:	2800      	cmp	r0, #0
 8006778:	d171      	bne.n	800685e <_dtoa_r+0x65e>
 800677a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800677e:	4911      	ldr	r1, [pc, #68]	@ (80067c4 <_dtoa_r+0x5c4>)
 8006780:	2000      	movs	r0, #0
 8006782:	f7f9 fda9 	bl	80002d8 <__aeabi_dsub>
 8006786:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800678a:	f7fa f9cf 	bl	8000b2c <__aeabi_dcmplt>
 800678e:	2800      	cmp	r0, #0
 8006790:	f040 8095 	bne.w	80068be <_dtoa_r+0x6be>
 8006794:	42a6      	cmp	r6, r4
 8006796:	f43f af50 	beq.w	800663a <_dtoa_r+0x43a>
 800679a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800679e:	4b0a      	ldr	r3, [pc, #40]	@ (80067c8 <_dtoa_r+0x5c8>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	f7f9 ff51 	bl	8000648 <__aeabi_dmul>
 80067a6:	4b08      	ldr	r3, [pc, #32]	@ (80067c8 <_dtoa_r+0x5c8>)
 80067a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80067ac:	2200      	movs	r2, #0
 80067ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067b2:	f7f9 ff49 	bl	8000648 <__aeabi_dmul>
 80067b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067ba:	e7c4      	b.n	8006746 <_dtoa_r+0x546>
 80067bc:	0800a750 	.word	0x0800a750
 80067c0:	0800a728 	.word	0x0800a728
 80067c4:	3ff00000 	.word	0x3ff00000
 80067c8:	40240000 	.word	0x40240000
 80067cc:	401c0000 	.word	0x401c0000
 80067d0:	40140000 	.word	0x40140000
 80067d4:	3fe00000 	.word	0x3fe00000
 80067d8:	4631      	mov	r1, r6
 80067da:	4628      	mov	r0, r5
 80067dc:	f7f9 ff34 	bl	8000648 <__aeabi_dmul>
 80067e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80067e4:	9415      	str	r4, [sp, #84]	@ 0x54
 80067e6:	4656      	mov	r6, sl
 80067e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067ec:	f7fa f9dc 	bl	8000ba8 <__aeabi_d2iz>
 80067f0:	4605      	mov	r5, r0
 80067f2:	f7f9 febf 	bl	8000574 <__aeabi_i2d>
 80067f6:	4602      	mov	r2, r0
 80067f8:	460b      	mov	r3, r1
 80067fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067fe:	f7f9 fd6b 	bl	80002d8 <__aeabi_dsub>
 8006802:	3530      	adds	r5, #48	@ 0x30
 8006804:	f806 5b01 	strb.w	r5, [r6], #1
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	42a6      	cmp	r6, r4
 800680e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006812:	f04f 0200 	mov.w	r2, #0
 8006816:	d124      	bne.n	8006862 <_dtoa_r+0x662>
 8006818:	4bac      	ldr	r3, [pc, #688]	@ (8006acc <_dtoa_r+0x8cc>)
 800681a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800681e:	f7f9 fd5d 	bl	80002dc <__adddf3>
 8006822:	4602      	mov	r2, r0
 8006824:	460b      	mov	r3, r1
 8006826:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800682a:	f7fa f99d 	bl	8000b68 <__aeabi_dcmpgt>
 800682e:	2800      	cmp	r0, #0
 8006830:	d145      	bne.n	80068be <_dtoa_r+0x6be>
 8006832:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006836:	49a5      	ldr	r1, [pc, #660]	@ (8006acc <_dtoa_r+0x8cc>)
 8006838:	2000      	movs	r0, #0
 800683a:	f7f9 fd4d 	bl	80002d8 <__aeabi_dsub>
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
 8006842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006846:	f7fa f971 	bl	8000b2c <__aeabi_dcmplt>
 800684a:	2800      	cmp	r0, #0
 800684c:	f43f aef5 	beq.w	800663a <_dtoa_r+0x43a>
 8006850:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006852:	1e73      	subs	r3, r6, #1
 8006854:	9315      	str	r3, [sp, #84]	@ 0x54
 8006856:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800685a:	2b30      	cmp	r3, #48	@ 0x30
 800685c:	d0f8      	beq.n	8006850 <_dtoa_r+0x650>
 800685e:	9f04      	ldr	r7, [sp, #16]
 8006860:	e73e      	b.n	80066e0 <_dtoa_r+0x4e0>
 8006862:	4b9b      	ldr	r3, [pc, #620]	@ (8006ad0 <_dtoa_r+0x8d0>)
 8006864:	f7f9 fef0 	bl	8000648 <__aeabi_dmul>
 8006868:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800686c:	e7bc      	b.n	80067e8 <_dtoa_r+0x5e8>
 800686e:	d10c      	bne.n	800688a <_dtoa_r+0x68a>
 8006870:	4b98      	ldr	r3, [pc, #608]	@ (8006ad4 <_dtoa_r+0x8d4>)
 8006872:	2200      	movs	r2, #0
 8006874:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006878:	f7f9 fee6 	bl	8000648 <__aeabi_dmul>
 800687c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006880:	f7fa f968 	bl	8000b54 <__aeabi_dcmpge>
 8006884:	2800      	cmp	r0, #0
 8006886:	f000 8157 	beq.w	8006b38 <_dtoa_r+0x938>
 800688a:	2400      	movs	r4, #0
 800688c:	4625      	mov	r5, r4
 800688e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006890:	43db      	mvns	r3, r3
 8006892:	9304      	str	r3, [sp, #16]
 8006894:	4656      	mov	r6, sl
 8006896:	2700      	movs	r7, #0
 8006898:	4621      	mov	r1, r4
 800689a:	4658      	mov	r0, fp
 800689c:	f000 fbb4 	bl	8007008 <_Bfree>
 80068a0:	2d00      	cmp	r5, #0
 80068a2:	d0dc      	beq.n	800685e <_dtoa_r+0x65e>
 80068a4:	b12f      	cbz	r7, 80068b2 <_dtoa_r+0x6b2>
 80068a6:	42af      	cmp	r7, r5
 80068a8:	d003      	beq.n	80068b2 <_dtoa_r+0x6b2>
 80068aa:	4639      	mov	r1, r7
 80068ac:	4658      	mov	r0, fp
 80068ae:	f000 fbab 	bl	8007008 <_Bfree>
 80068b2:	4629      	mov	r1, r5
 80068b4:	4658      	mov	r0, fp
 80068b6:	f000 fba7 	bl	8007008 <_Bfree>
 80068ba:	e7d0      	b.n	800685e <_dtoa_r+0x65e>
 80068bc:	9704      	str	r7, [sp, #16]
 80068be:	4633      	mov	r3, r6
 80068c0:	461e      	mov	r6, r3
 80068c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068c6:	2a39      	cmp	r2, #57	@ 0x39
 80068c8:	d107      	bne.n	80068da <_dtoa_r+0x6da>
 80068ca:	459a      	cmp	sl, r3
 80068cc:	d1f8      	bne.n	80068c0 <_dtoa_r+0x6c0>
 80068ce:	9a04      	ldr	r2, [sp, #16]
 80068d0:	3201      	adds	r2, #1
 80068d2:	9204      	str	r2, [sp, #16]
 80068d4:	2230      	movs	r2, #48	@ 0x30
 80068d6:	f88a 2000 	strb.w	r2, [sl]
 80068da:	781a      	ldrb	r2, [r3, #0]
 80068dc:	3201      	adds	r2, #1
 80068de:	701a      	strb	r2, [r3, #0]
 80068e0:	e7bd      	b.n	800685e <_dtoa_r+0x65e>
 80068e2:	4b7b      	ldr	r3, [pc, #492]	@ (8006ad0 <_dtoa_r+0x8d0>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	f7f9 feaf 	bl	8000648 <__aeabi_dmul>
 80068ea:	2200      	movs	r2, #0
 80068ec:	2300      	movs	r3, #0
 80068ee:	4604      	mov	r4, r0
 80068f0:	460d      	mov	r5, r1
 80068f2:	f7fa f911 	bl	8000b18 <__aeabi_dcmpeq>
 80068f6:	2800      	cmp	r0, #0
 80068f8:	f43f aebb 	beq.w	8006672 <_dtoa_r+0x472>
 80068fc:	e6f0      	b.n	80066e0 <_dtoa_r+0x4e0>
 80068fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006900:	2a00      	cmp	r2, #0
 8006902:	f000 80db 	beq.w	8006abc <_dtoa_r+0x8bc>
 8006906:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006908:	2a01      	cmp	r2, #1
 800690a:	f300 80bf 	bgt.w	8006a8c <_dtoa_r+0x88c>
 800690e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006910:	2a00      	cmp	r2, #0
 8006912:	f000 80b7 	beq.w	8006a84 <_dtoa_r+0x884>
 8006916:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800691a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800691c:	4646      	mov	r6, r8
 800691e:	9a08      	ldr	r2, [sp, #32]
 8006920:	2101      	movs	r1, #1
 8006922:	441a      	add	r2, r3
 8006924:	4658      	mov	r0, fp
 8006926:	4498      	add	r8, r3
 8006928:	9208      	str	r2, [sp, #32]
 800692a:	f000 fc6b 	bl	8007204 <__i2b>
 800692e:	4605      	mov	r5, r0
 8006930:	b15e      	cbz	r6, 800694a <_dtoa_r+0x74a>
 8006932:	9b08      	ldr	r3, [sp, #32]
 8006934:	2b00      	cmp	r3, #0
 8006936:	dd08      	ble.n	800694a <_dtoa_r+0x74a>
 8006938:	42b3      	cmp	r3, r6
 800693a:	9a08      	ldr	r2, [sp, #32]
 800693c:	bfa8      	it	ge
 800693e:	4633      	movge	r3, r6
 8006940:	eba8 0803 	sub.w	r8, r8, r3
 8006944:	1af6      	subs	r6, r6, r3
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	9308      	str	r3, [sp, #32]
 800694a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800694c:	b1f3      	cbz	r3, 800698c <_dtoa_r+0x78c>
 800694e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 80b7 	beq.w	8006ac4 <_dtoa_r+0x8c4>
 8006956:	b18c      	cbz	r4, 800697c <_dtoa_r+0x77c>
 8006958:	4629      	mov	r1, r5
 800695a:	4622      	mov	r2, r4
 800695c:	4658      	mov	r0, fp
 800695e:	f000 fd11 	bl	8007384 <__pow5mult>
 8006962:	464a      	mov	r2, r9
 8006964:	4601      	mov	r1, r0
 8006966:	4605      	mov	r5, r0
 8006968:	4658      	mov	r0, fp
 800696a:	f000 fc61 	bl	8007230 <__multiply>
 800696e:	4649      	mov	r1, r9
 8006970:	9004      	str	r0, [sp, #16]
 8006972:	4658      	mov	r0, fp
 8006974:	f000 fb48 	bl	8007008 <_Bfree>
 8006978:	9b04      	ldr	r3, [sp, #16]
 800697a:	4699      	mov	r9, r3
 800697c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800697e:	1b1a      	subs	r2, r3, r4
 8006980:	d004      	beq.n	800698c <_dtoa_r+0x78c>
 8006982:	4649      	mov	r1, r9
 8006984:	4658      	mov	r0, fp
 8006986:	f000 fcfd 	bl	8007384 <__pow5mult>
 800698a:	4681      	mov	r9, r0
 800698c:	2101      	movs	r1, #1
 800698e:	4658      	mov	r0, fp
 8006990:	f000 fc38 	bl	8007204 <__i2b>
 8006994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006996:	4604      	mov	r4, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 81cf 	beq.w	8006d3c <_dtoa_r+0xb3c>
 800699e:	461a      	mov	r2, r3
 80069a0:	4601      	mov	r1, r0
 80069a2:	4658      	mov	r0, fp
 80069a4:	f000 fcee 	bl	8007384 <__pow5mult>
 80069a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	4604      	mov	r4, r0
 80069ae:	f300 8095 	bgt.w	8006adc <_dtoa_r+0x8dc>
 80069b2:	9b02      	ldr	r3, [sp, #8]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f040 8087 	bne.w	8006ac8 <_dtoa_r+0x8c8>
 80069ba:	9b03      	ldr	r3, [sp, #12]
 80069bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f040 8089 	bne.w	8006ad8 <_dtoa_r+0x8d8>
 80069c6:	9b03      	ldr	r3, [sp, #12]
 80069c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069cc:	0d1b      	lsrs	r3, r3, #20
 80069ce:	051b      	lsls	r3, r3, #20
 80069d0:	b12b      	cbz	r3, 80069de <_dtoa_r+0x7de>
 80069d2:	9b08      	ldr	r3, [sp, #32]
 80069d4:	3301      	adds	r3, #1
 80069d6:	9308      	str	r3, [sp, #32]
 80069d8:	f108 0801 	add.w	r8, r8, #1
 80069dc:	2301      	movs	r3, #1
 80069de:	930a      	str	r3, [sp, #40]	@ 0x28
 80069e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 81b0 	beq.w	8006d48 <_dtoa_r+0xb48>
 80069e8:	6923      	ldr	r3, [r4, #16]
 80069ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069ee:	6918      	ldr	r0, [r3, #16]
 80069f0:	f000 fbbc 	bl	800716c <__hi0bits>
 80069f4:	f1c0 0020 	rsb	r0, r0, #32
 80069f8:	9b08      	ldr	r3, [sp, #32]
 80069fa:	4418      	add	r0, r3
 80069fc:	f010 001f 	ands.w	r0, r0, #31
 8006a00:	d077      	beq.n	8006af2 <_dtoa_r+0x8f2>
 8006a02:	f1c0 0320 	rsb	r3, r0, #32
 8006a06:	2b04      	cmp	r3, #4
 8006a08:	dd6b      	ble.n	8006ae2 <_dtoa_r+0x8e2>
 8006a0a:	9b08      	ldr	r3, [sp, #32]
 8006a0c:	f1c0 001c 	rsb	r0, r0, #28
 8006a10:	4403      	add	r3, r0
 8006a12:	4480      	add	r8, r0
 8006a14:	4406      	add	r6, r0
 8006a16:	9308      	str	r3, [sp, #32]
 8006a18:	f1b8 0f00 	cmp.w	r8, #0
 8006a1c:	dd05      	ble.n	8006a2a <_dtoa_r+0x82a>
 8006a1e:	4649      	mov	r1, r9
 8006a20:	4642      	mov	r2, r8
 8006a22:	4658      	mov	r0, fp
 8006a24:	f000 fd08 	bl	8007438 <__lshift>
 8006a28:	4681      	mov	r9, r0
 8006a2a:	9b08      	ldr	r3, [sp, #32]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	dd05      	ble.n	8006a3c <_dtoa_r+0x83c>
 8006a30:	4621      	mov	r1, r4
 8006a32:	461a      	mov	r2, r3
 8006a34:	4658      	mov	r0, fp
 8006a36:	f000 fcff 	bl	8007438 <__lshift>
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d059      	beq.n	8006af6 <_dtoa_r+0x8f6>
 8006a42:	4621      	mov	r1, r4
 8006a44:	4648      	mov	r0, r9
 8006a46:	f000 fd63 	bl	8007510 <__mcmp>
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	da53      	bge.n	8006af6 <_dtoa_r+0x8f6>
 8006a4e:	1e7b      	subs	r3, r7, #1
 8006a50:	9304      	str	r3, [sp, #16]
 8006a52:	4649      	mov	r1, r9
 8006a54:	2300      	movs	r3, #0
 8006a56:	220a      	movs	r2, #10
 8006a58:	4658      	mov	r0, fp
 8006a5a:	f000 faf7 	bl	800704c <__multadd>
 8006a5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a60:	4681      	mov	r9, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 8172 	beq.w	8006d4c <_dtoa_r+0xb4c>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	4629      	mov	r1, r5
 8006a6c:	220a      	movs	r2, #10
 8006a6e:	4658      	mov	r0, fp
 8006a70:	f000 faec 	bl	800704c <__multadd>
 8006a74:	9b00      	ldr	r3, [sp, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	4605      	mov	r5, r0
 8006a7a:	dc67      	bgt.n	8006b4c <_dtoa_r+0x94c>
 8006a7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	dc41      	bgt.n	8006b06 <_dtoa_r+0x906>
 8006a82:	e063      	b.n	8006b4c <_dtoa_r+0x94c>
 8006a84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006a86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a8a:	e746      	b.n	800691a <_dtoa_r+0x71a>
 8006a8c:	9b07      	ldr	r3, [sp, #28]
 8006a8e:	1e5c      	subs	r4, r3, #1
 8006a90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a92:	42a3      	cmp	r3, r4
 8006a94:	bfbf      	itttt	lt
 8006a96:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006a98:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006a9a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006a9c:	1ae3      	sublt	r3, r4, r3
 8006a9e:	bfb4      	ite	lt
 8006aa0:	18d2      	addlt	r2, r2, r3
 8006aa2:	1b1c      	subge	r4, r3, r4
 8006aa4:	9b07      	ldr	r3, [sp, #28]
 8006aa6:	bfbc      	itt	lt
 8006aa8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006aaa:	2400      	movlt	r4, #0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	bfb5      	itete	lt
 8006ab0:	eba8 0603 	sublt.w	r6, r8, r3
 8006ab4:	9b07      	ldrge	r3, [sp, #28]
 8006ab6:	2300      	movlt	r3, #0
 8006ab8:	4646      	movge	r6, r8
 8006aba:	e730      	b.n	800691e <_dtoa_r+0x71e>
 8006abc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006abe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006ac0:	4646      	mov	r6, r8
 8006ac2:	e735      	b.n	8006930 <_dtoa_r+0x730>
 8006ac4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ac6:	e75c      	b.n	8006982 <_dtoa_r+0x782>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	e788      	b.n	80069de <_dtoa_r+0x7de>
 8006acc:	3fe00000 	.word	0x3fe00000
 8006ad0:	40240000 	.word	0x40240000
 8006ad4:	40140000 	.word	0x40140000
 8006ad8:	9b02      	ldr	r3, [sp, #8]
 8006ada:	e780      	b.n	80069de <_dtoa_r+0x7de>
 8006adc:	2300      	movs	r3, #0
 8006ade:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ae0:	e782      	b.n	80069e8 <_dtoa_r+0x7e8>
 8006ae2:	d099      	beq.n	8006a18 <_dtoa_r+0x818>
 8006ae4:	9a08      	ldr	r2, [sp, #32]
 8006ae6:	331c      	adds	r3, #28
 8006ae8:	441a      	add	r2, r3
 8006aea:	4498      	add	r8, r3
 8006aec:	441e      	add	r6, r3
 8006aee:	9208      	str	r2, [sp, #32]
 8006af0:	e792      	b.n	8006a18 <_dtoa_r+0x818>
 8006af2:	4603      	mov	r3, r0
 8006af4:	e7f6      	b.n	8006ae4 <_dtoa_r+0x8e4>
 8006af6:	9b07      	ldr	r3, [sp, #28]
 8006af8:	9704      	str	r7, [sp, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	dc20      	bgt.n	8006b40 <_dtoa_r+0x940>
 8006afe:	9300      	str	r3, [sp, #0]
 8006b00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	dd1e      	ble.n	8006b44 <_dtoa_r+0x944>
 8006b06:	9b00      	ldr	r3, [sp, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f47f aec0 	bne.w	800688e <_dtoa_r+0x68e>
 8006b0e:	4621      	mov	r1, r4
 8006b10:	2205      	movs	r2, #5
 8006b12:	4658      	mov	r0, fp
 8006b14:	f000 fa9a 	bl	800704c <__multadd>
 8006b18:	4601      	mov	r1, r0
 8006b1a:	4604      	mov	r4, r0
 8006b1c:	4648      	mov	r0, r9
 8006b1e:	f000 fcf7 	bl	8007510 <__mcmp>
 8006b22:	2800      	cmp	r0, #0
 8006b24:	f77f aeb3 	ble.w	800688e <_dtoa_r+0x68e>
 8006b28:	4656      	mov	r6, sl
 8006b2a:	2331      	movs	r3, #49	@ 0x31
 8006b2c:	f806 3b01 	strb.w	r3, [r6], #1
 8006b30:	9b04      	ldr	r3, [sp, #16]
 8006b32:	3301      	adds	r3, #1
 8006b34:	9304      	str	r3, [sp, #16]
 8006b36:	e6ae      	b.n	8006896 <_dtoa_r+0x696>
 8006b38:	9c07      	ldr	r4, [sp, #28]
 8006b3a:	9704      	str	r7, [sp, #16]
 8006b3c:	4625      	mov	r5, r4
 8006b3e:	e7f3      	b.n	8006b28 <_dtoa_r+0x928>
 8006b40:	9b07      	ldr	r3, [sp, #28]
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 8104 	beq.w	8006d54 <_dtoa_r+0xb54>
 8006b4c:	2e00      	cmp	r6, #0
 8006b4e:	dd05      	ble.n	8006b5c <_dtoa_r+0x95c>
 8006b50:	4629      	mov	r1, r5
 8006b52:	4632      	mov	r2, r6
 8006b54:	4658      	mov	r0, fp
 8006b56:	f000 fc6f 	bl	8007438 <__lshift>
 8006b5a:	4605      	mov	r5, r0
 8006b5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d05a      	beq.n	8006c18 <_dtoa_r+0xa18>
 8006b62:	6869      	ldr	r1, [r5, #4]
 8006b64:	4658      	mov	r0, fp
 8006b66:	f000 fa0f 	bl	8006f88 <_Balloc>
 8006b6a:	4606      	mov	r6, r0
 8006b6c:	b928      	cbnz	r0, 8006b7a <_dtoa_r+0x97a>
 8006b6e:	4b84      	ldr	r3, [pc, #528]	@ (8006d80 <_dtoa_r+0xb80>)
 8006b70:	4602      	mov	r2, r0
 8006b72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006b76:	f7ff bb5a 	b.w	800622e <_dtoa_r+0x2e>
 8006b7a:	692a      	ldr	r2, [r5, #16]
 8006b7c:	3202      	adds	r2, #2
 8006b7e:	0092      	lsls	r2, r2, #2
 8006b80:	f105 010c 	add.w	r1, r5, #12
 8006b84:	300c      	adds	r0, #12
 8006b86:	f002 f8bf 	bl	8008d08 <memcpy>
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	4631      	mov	r1, r6
 8006b8e:	4658      	mov	r0, fp
 8006b90:	f000 fc52 	bl	8007438 <__lshift>
 8006b94:	f10a 0301 	add.w	r3, sl, #1
 8006b98:	9307      	str	r3, [sp, #28]
 8006b9a:	9b00      	ldr	r3, [sp, #0]
 8006b9c:	4453      	add	r3, sl
 8006b9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ba0:	9b02      	ldr	r3, [sp, #8]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	462f      	mov	r7, r5
 8006ba8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006baa:	4605      	mov	r5, r0
 8006bac:	9b07      	ldr	r3, [sp, #28]
 8006bae:	4621      	mov	r1, r4
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	4648      	mov	r0, r9
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	f7ff fa99 	bl	80060ec <quorem>
 8006bba:	4639      	mov	r1, r7
 8006bbc:	9002      	str	r0, [sp, #8]
 8006bbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006bc2:	4648      	mov	r0, r9
 8006bc4:	f000 fca4 	bl	8007510 <__mcmp>
 8006bc8:	462a      	mov	r2, r5
 8006bca:	9008      	str	r0, [sp, #32]
 8006bcc:	4621      	mov	r1, r4
 8006bce:	4658      	mov	r0, fp
 8006bd0:	f000 fcba 	bl	8007548 <__mdiff>
 8006bd4:	68c2      	ldr	r2, [r0, #12]
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	bb02      	cbnz	r2, 8006c1c <_dtoa_r+0xa1c>
 8006bda:	4601      	mov	r1, r0
 8006bdc:	4648      	mov	r0, r9
 8006bde:	f000 fc97 	bl	8007510 <__mcmp>
 8006be2:	4602      	mov	r2, r0
 8006be4:	4631      	mov	r1, r6
 8006be6:	4658      	mov	r0, fp
 8006be8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006bea:	f000 fa0d 	bl	8007008 <_Bfree>
 8006bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006bf2:	9e07      	ldr	r6, [sp, #28]
 8006bf4:	ea43 0102 	orr.w	r1, r3, r2
 8006bf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bfa:	4319      	orrs	r1, r3
 8006bfc:	d110      	bne.n	8006c20 <_dtoa_r+0xa20>
 8006bfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c02:	d029      	beq.n	8006c58 <_dtoa_r+0xa58>
 8006c04:	9b08      	ldr	r3, [sp, #32]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	dd02      	ble.n	8006c10 <_dtoa_r+0xa10>
 8006c0a:	9b02      	ldr	r3, [sp, #8]
 8006c0c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006c10:	9b00      	ldr	r3, [sp, #0]
 8006c12:	f883 8000 	strb.w	r8, [r3]
 8006c16:	e63f      	b.n	8006898 <_dtoa_r+0x698>
 8006c18:	4628      	mov	r0, r5
 8006c1a:	e7bb      	b.n	8006b94 <_dtoa_r+0x994>
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	e7e1      	b.n	8006be4 <_dtoa_r+0x9e4>
 8006c20:	9b08      	ldr	r3, [sp, #32]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	db04      	blt.n	8006c30 <_dtoa_r+0xa30>
 8006c26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c28:	430b      	orrs	r3, r1
 8006c2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c2c:	430b      	orrs	r3, r1
 8006c2e:	d120      	bne.n	8006c72 <_dtoa_r+0xa72>
 8006c30:	2a00      	cmp	r2, #0
 8006c32:	dded      	ble.n	8006c10 <_dtoa_r+0xa10>
 8006c34:	4649      	mov	r1, r9
 8006c36:	2201      	movs	r2, #1
 8006c38:	4658      	mov	r0, fp
 8006c3a:	f000 fbfd 	bl	8007438 <__lshift>
 8006c3e:	4621      	mov	r1, r4
 8006c40:	4681      	mov	r9, r0
 8006c42:	f000 fc65 	bl	8007510 <__mcmp>
 8006c46:	2800      	cmp	r0, #0
 8006c48:	dc03      	bgt.n	8006c52 <_dtoa_r+0xa52>
 8006c4a:	d1e1      	bne.n	8006c10 <_dtoa_r+0xa10>
 8006c4c:	f018 0f01 	tst.w	r8, #1
 8006c50:	d0de      	beq.n	8006c10 <_dtoa_r+0xa10>
 8006c52:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c56:	d1d8      	bne.n	8006c0a <_dtoa_r+0xa0a>
 8006c58:	9a00      	ldr	r2, [sp, #0]
 8006c5a:	2339      	movs	r3, #57	@ 0x39
 8006c5c:	7013      	strb	r3, [r2, #0]
 8006c5e:	4633      	mov	r3, r6
 8006c60:	461e      	mov	r6, r3
 8006c62:	3b01      	subs	r3, #1
 8006c64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006c68:	2a39      	cmp	r2, #57	@ 0x39
 8006c6a:	d052      	beq.n	8006d12 <_dtoa_r+0xb12>
 8006c6c:	3201      	adds	r2, #1
 8006c6e:	701a      	strb	r2, [r3, #0]
 8006c70:	e612      	b.n	8006898 <_dtoa_r+0x698>
 8006c72:	2a00      	cmp	r2, #0
 8006c74:	dd07      	ble.n	8006c86 <_dtoa_r+0xa86>
 8006c76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c7a:	d0ed      	beq.n	8006c58 <_dtoa_r+0xa58>
 8006c7c:	9a00      	ldr	r2, [sp, #0]
 8006c7e:	f108 0301 	add.w	r3, r8, #1
 8006c82:	7013      	strb	r3, [r2, #0]
 8006c84:	e608      	b.n	8006898 <_dtoa_r+0x698>
 8006c86:	9b07      	ldr	r3, [sp, #28]
 8006c88:	9a07      	ldr	r2, [sp, #28]
 8006c8a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006c8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d028      	beq.n	8006ce6 <_dtoa_r+0xae6>
 8006c94:	4649      	mov	r1, r9
 8006c96:	2300      	movs	r3, #0
 8006c98:	220a      	movs	r2, #10
 8006c9a:	4658      	mov	r0, fp
 8006c9c:	f000 f9d6 	bl	800704c <__multadd>
 8006ca0:	42af      	cmp	r7, r5
 8006ca2:	4681      	mov	r9, r0
 8006ca4:	f04f 0300 	mov.w	r3, #0
 8006ca8:	f04f 020a 	mov.w	r2, #10
 8006cac:	4639      	mov	r1, r7
 8006cae:	4658      	mov	r0, fp
 8006cb0:	d107      	bne.n	8006cc2 <_dtoa_r+0xac2>
 8006cb2:	f000 f9cb 	bl	800704c <__multadd>
 8006cb6:	4607      	mov	r7, r0
 8006cb8:	4605      	mov	r5, r0
 8006cba:	9b07      	ldr	r3, [sp, #28]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	9307      	str	r3, [sp, #28]
 8006cc0:	e774      	b.n	8006bac <_dtoa_r+0x9ac>
 8006cc2:	f000 f9c3 	bl	800704c <__multadd>
 8006cc6:	4629      	mov	r1, r5
 8006cc8:	4607      	mov	r7, r0
 8006cca:	2300      	movs	r3, #0
 8006ccc:	220a      	movs	r2, #10
 8006cce:	4658      	mov	r0, fp
 8006cd0:	f000 f9bc 	bl	800704c <__multadd>
 8006cd4:	4605      	mov	r5, r0
 8006cd6:	e7f0      	b.n	8006cba <_dtoa_r+0xaba>
 8006cd8:	9b00      	ldr	r3, [sp, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	bfcc      	ite	gt
 8006cde:	461e      	movgt	r6, r3
 8006ce0:	2601      	movle	r6, #1
 8006ce2:	4456      	add	r6, sl
 8006ce4:	2700      	movs	r7, #0
 8006ce6:	4649      	mov	r1, r9
 8006ce8:	2201      	movs	r2, #1
 8006cea:	4658      	mov	r0, fp
 8006cec:	f000 fba4 	bl	8007438 <__lshift>
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	4681      	mov	r9, r0
 8006cf4:	f000 fc0c 	bl	8007510 <__mcmp>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	dcb0      	bgt.n	8006c5e <_dtoa_r+0xa5e>
 8006cfc:	d102      	bne.n	8006d04 <_dtoa_r+0xb04>
 8006cfe:	f018 0f01 	tst.w	r8, #1
 8006d02:	d1ac      	bne.n	8006c5e <_dtoa_r+0xa5e>
 8006d04:	4633      	mov	r3, r6
 8006d06:	461e      	mov	r6, r3
 8006d08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d0c:	2a30      	cmp	r2, #48	@ 0x30
 8006d0e:	d0fa      	beq.n	8006d06 <_dtoa_r+0xb06>
 8006d10:	e5c2      	b.n	8006898 <_dtoa_r+0x698>
 8006d12:	459a      	cmp	sl, r3
 8006d14:	d1a4      	bne.n	8006c60 <_dtoa_r+0xa60>
 8006d16:	9b04      	ldr	r3, [sp, #16]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	9304      	str	r3, [sp, #16]
 8006d1c:	2331      	movs	r3, #49	@ 0x31
 8006d1e:	f88a 3000 	strb.w	r3, [sl]
 8006d22:	e5b9      	b.n	8006898 <_dtoa_r+0x698>
 8006d24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006d84 <_dtoa_r+0xb84>
 8006d2a:	b11b      	cbz	r3, 8006d34 <_dtoa_r+0xb34>
 8006d2c:	f10a 0308 	add.w	r3, sl, #8
 8006d30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006d32:	6013      	str	r3, [r2, #0]
 8006d34:	4650      	mov	r0, sl
 8006d36:	b019      	add	sp, #100	@ 0x64
 8006d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	f77f ae37 	ble.w	80069b2 <_dtoa_r+0x7b2>
 8006d44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d46:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d48:	2001      	movs	r0, #1
 8006d4a:	e655      	b.n	80069f8 <_dtoa_r+0x7f8>
 8006d4c:	9b00      	ldr	r3, [sp, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f77f aed6 	ble.w	8006b00 <_dtoa_r+0x900>
 8006d54:	4656      	mov	r6, sl
 8006d56:	4621      	mov	r1, r4
 8006d58:	4648      	mov	r0, r9
 8006d5a:	f7ff f9c7 	bl	80060ec <quorem>
 8006d5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006d62:	f806 8b01 	strb.w	r8, [r6], #1
 8006d66:	9b00      	ldr	r3, [sp, #0]
 8006d68:	eba6 020a 	sub.w	r2, r6, sl
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	ddb3      	ble.n	8006cd8 <_dtoa_r+0xad8>
 8006d70:	4649      	mov	r1, r9
 8006d72:	2300      	movs	r3, #0
 8006d74:	220a      	movs	r2, #10
 8006d76:	4658      	mov	r0, fp
 8006d78:	f000 f968 	bl	800704c <__multadd>
 8006d7c:	4681      	mov	r9, r0
 8006d7e:	e7ea      	b.n	8006d56 <_dtoa_r+0xb56>
 8006d80:	0800a6ae 	.word	0x0800a6ae
 8006d84:	0800a632 	.word	0x0800a632

08006d88 <_free_r>:
 8006d88:	b538      	push	{r3, r4, r5, lr}
 8006d8a:	4605      	mov	r5, r0
 8006d8c:	2900      	cmp	r1, #0
 8006d8e:	d041      	beq.n	8006e14 <_free_r+0x8c>
 8006d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d94:	1f0c      	subs	r4, r1, #4
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	bfb8      	it	lt
 8006d9a:	18e4      	addlt	r4, r4, r3
 8006d9c:	f000 f8e8 	bl	8006f70 <__malloc_lock>
 8006da0:	4a1d      	ldr	r2, [pc, #116]	@ (8006e18 <_free_r+0x90>)
 8006da2:	6813      	ldr	r3, [r2, #0]
 8006da4:	b933      	cbnz	r3, 8006db4 <_free_r+0x2c>
 8006da6:	6063      	str	r3, [r4, #4]
 8006da8:	6014      	str	r4, [r2, #0]
 8006daa:	4628      	mov	r0, r5
 8006dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006db0:	f000 b8e4 	b.w	8006f7c <__malloc_unlock>
 8006db4:	42a3      	cmp	r3, r4
 8006db6:	d908      	bls.n	8006dca <_free_r+0x42>
 8006db8:	6820      	ldr	r0, [r4, #0]
 8006dba:	1821      	adds	r1, r4, r0
 8006dbc:	428b      	cmp	r3, r1
 8006dbe:	bf01      	itttt	eq
 8006dc0:	6819      	ldreq	r1, [r3, #0]
 8006dc2:	685b      	ldreq	r3, [r3, #4]
 8006dc4:	1809      	addeq	r1, r1, r0
 8006dc6:	6021      	streq	r1, [r4, #0]
 8006dc8:	e7ed      	b.n	8006da6 <_free_r+0x1e>
 8006dca:	461a      	mov	r2, r3
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	b10b      	cbz	r3, 8006dd4 <_free_r+0x4c>
 8006dd0:	42a3      	cmp	r3, r4
 8006dd2:	d9fa      	bls.n	8006dca <_free_r+0x42>
 8006dd4:	6811      	ldr	r1, [r2, #0]
 8006dd6:	1850      	adds	r0, r2, r1
 8006dd8:	42a0      	cmp	r0, r4
 8006dda:	d10b      	bne.n	8006df4 <_free_r+0x6c>
 8006ddc:	6820      	ldr	r0, [r4, #0]
 8006dde:	4401      	add	r1, r0
 8006de0:	1850      	adds	r0, r2, r1
 8006de2:	4283      	cmp	r3, r0
 8006de4:	6011      	str	r1, [r2, #0]
 8006de6:	d1e0      	bne.n	8006daa <_free_r+0x22>
 8006de8:	6818      	ldr	r0, [r3, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	6053      	str	r3, [r2, #4]
 8006dee:	4408      	add	r0, r1
 8006df0:	6010      	str	r0, [r2, #0]
 8006df2:	e7da      	b.n	8006daa <_free_r+0x22>
 8006df4:	d902      	bls.n	8006dfc <_free_r+0x74>
 8006df6:	230c      	movs	r3, #12
 8006df8:	602b      	str	r3, [r5, #0]
 8006dfa:	e7d6      	b.n	8006daa <_free_r+0x22>
 8006dfc:	6820      	ldr	r0, [r4, #0]
 8006dfe:	1821      	adds	r1, r4, r0
 8006e00:	428b      	cmp	r3, r1
 8006e02:	bf04      	itt	eq
 8006e04:	6819      	ldreq	r1, [r3, #0]
 8006e06:	685b      	ldreq	r3, [r3, #4]
 8006e08:	6063      	str	r3, [r4, #4]
 8006e0a:	bf04      	itt	eq
 8006e0c:	1809      	addeq	r1, r1, r0
 8006e0e:	6021      	streq	r1, [r4, #0]
 8006e10:	6054      	str	r4, [r2, #4]
 8006e12:	e7ca      	b.n	8006daa <_free_r+0x22>
 8006e14:	bd38      	pop	{r3, r4, r5, pc}
 8006e16:	bf00      	nop
 8006e18:	20000968 	.word	0x20000968

08006e1c <malloc>:
 8006e1c:	4b02      	ldr	r3, [pc, #8]	@ (8006e28 <malloc+0xc>)
 8006e1e:	4601      	mov	r1, r0
 8006e20:	6818      	ldr	r0, [r3, #0]
 8006e22:	f000 b825 	b.w	8006e70 <_malloc_r>
 8006e26:	bf00      	nop
 8006e28:	20000054 	.word	0x20000054

08006e2c <sbrk_aligned>:
 8006e2c:	b570      	push	{r4, r5, r6, lr}
 8006e2e:	4e0f      	ldr	r6, [pc, #60]	@ (8006e6c <sbrk_aligned+0x40>)
 8006e30:	460c      	mov	r4, r1
 8006e32:	6831      	ldr	r1, [r6, #0]
 8006e34:	4605      	mov	r5, r0
 8006e36:	b911      	cbnz	r1, 8006e3e <sbrk_aligned+0x12>
 8006e38:	f001 ff56 	bl	8008ce8 <_sbrk_r>
 8006e3c:	6030      	str	r0, [r6, #0]
 8006e3e:	4621      	mov	r1, r4
 8006e40:	4628      	mov	r0, r5
 8006e42:	f001 ff51 	bl	8008ce8 <_sbrk_r>
 8006e46:	1c43      	adds	r3, r0, #1
 8006e48:	d103      	bne.n	8006e52 <sbrk_aligned+0x26>
 8006e4a:	f04f 34ff 	mov.w	r4, #4294967295
 8006e4e:	4620      	mov	r0, r4
 8006e50:	bd70      	pop	{r4, r5, r6, pc}
 8006e52:	1cc4      	adds	r4, r0, #3
 8006e54:	f024 0403 	bic.w	r4, r4, #3
 8006e58:	42a0      	cmp	r0, r4
 8006e5a:	d0f8      	beq.n	8006e4e <sbrk_aligned+0x22>
 8006e5c:	1a21      	subs	r1, r4, r0
 8006e5e:	4628      	mov	r0, r5
 8006e60:	f001 ff42 	bl	8008ce8 <_sbrk_r>
 8006e64:	3001      	adds	r0, #1
 8006e66:	d1f2      	bne.n	8006e4e <sbrk_aligned+0x22>
 8006e68:	e7ef      	b.n	8006e4a <sbrk_aligned+0x1e>
 8006e6a:	bf00      	nop
 8006e6c:	20000964 	.word	0x20000964

08006e70 <_malloc_r>:
 8006e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e74:	1ccd      	adds	r5, r1, #3
 8006e76:	f025 0503 	bic.w	r5, r5, #3
 8006e7a:	3508      	adds	r5, #8
 8006e7c:	2d0c      	cmp	r5, #12
 8006e7e:	bf38      	it	cc
 8006e80:	250c      	movcc	r5, #12
 8006e82:	2d00      	cmp	r5, #0
 8006e84:	4606      	mov	r6, r0
 8006e86:	db01      	blt.n	8006e8c <_malloc_r+0x1c>
 8006e88:	42a9      	cmp	r1, r5
 8006e8a:	d904      	bls.n	8006e96 <_malloc_r+0x26>
 8006e8c:	230c      	movs	r3, #12
 8006e8e:	6033      	str	r3, [r6, #0]
 8006e90:	2000      	movs	r0, #0
 8006e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f6c <_malloc_r+0xfc>
 8006e9a:	f000 f869 	bl	8006f70 <__malloc_lock>
 8006e9e:	f8d8 3000 	ldr.w	r3, [r8]
 8006ea2:	461c      	mov	r4, r3
 8006ea4:	bb44      	cbnz	r4, 8006ef8 <_malloc_r+0x88>
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	f7ff ffbf 	bl	8006e2c <sbrk_aligned>
 8006eae:	1c43      	adds	r3, r0, #1
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	d158      	bne.n	8006f66 <_malloc_r+0xf6>
 8006eb4:	f8d8 4000 	ldr.w	r4, [r8]
 8006eb8:	4627      	mov	r7, r4
 8006eba:	2f00      	cmp	r7, #0
 8006ebc:	d143      	bne.n	8006f46 <_malloc_r+0xd6>
 8006ebe:	2c00      	cmp	r4, #0
 8006ec0:	d04b      	beq.n	8006f5a <_malloc_r+0xea>
 8006ec2:	6823      	ldr	r3, [r4, #0]
 8006ec4:	4639      	mov	r1, r7
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	eb04 0903 	add.w	r9, r4, r3
 8006ecc:	f001 ff0c 	bl	8008ce8 <_sbrk_r>
 8006ed0:	4581      	cmp	r9, r0
 8006ed2:	d142      	bne.n	8006f5a <_malloc_r+0xea>
 8006ed4:	6821      	ldr	r1, [r4, #0]
 8006ed6:	1a6d      	subs	r5, r5, r1
 8006ed8:	4629      	mov	r1, r5
 8006eda:	4630      	mov	r0, r6
 8006edc:	f7ff ffa6 	bl	8006e2c <sbrk_aligned>
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	d03a      	beq.n	8006f5a <_malloc_r+0xea>
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	442b      	add	r3, r5
 8006ee8:	6023      	str	r3, [r4, #0]
 8006eea:	f8d8 3000 	ldr.w	r3, [r8]
 8006eee:	685a      	ldr	r2, [r3, #4]
 8006ef0:	bb62      	cbnz	r2, 8006f4c <_malloc_r+0xdc>
 8006ef2:	f8c8 7000 	str.w	r7, [r8]
 8006ef6:	e00f      	b.n	8006f18 <_malloc_r+0xa8>
 8006ef8:	6822      	ldr	r2, [r4, #0]
 8006efa:	1b52      	subs	r2, r2, r5
 8006efc:	d420      	bmi.n	8006f40 <_malloc_r+0xd0>
 8006efe:	2a0b      	cmp	r2, #11
 8006f00:	d917      	bls.n	8006f32 <_malloc_r+0xc2>
 8006f02:	1961      	adds	r1, r4, r5
 8006f04:	42a3      	cmp	r3, r4
 8006f06:	6025      	str	r5, [r4, #0]
 8006f08:	bf18      	it	ne
 8006f0a:	6059      	strne	r1, [r3, #4]
 8006f0c:	6863      	ldr	r3, [r4, #4]
 8006f0e:	bf08      	it	eq
 8006f10:	f8c8 1000 	streq.w	r1, [r8]
 8006f14:	5162      	str	r2, [r4, r5]
 8006f16:	604b      	str	r3, [r1, #4]
 8006f18:	4630      	mov	r0, r6
 8006f1a:	f000 f82f 	bl	8006f7c <__malloc_unlock>
 8006f1e:	f104 000b 	add.w	r0, r4, #11
 8006f22:	1d23      	adds	r3, r4, #4
 8006f24:	f020 0007 	bic.w	r0, r0, #7
 8006f28:	1ac2      	subs	r2, r0, r3
 8006f2a:	bf1c      	itt	ne
 8006f2c:	1a1b      	subne	r3, r3, r0
 8006f2e:	50a3      	strne	r3, [r4, r2]
 8006f30:	e7af      	b.n	8006e92 <_malloc_r+0x22>
 8006f32:	6862      	ldr	r2, [r4, #4]
 8006f34:	42a3      	cmp	r3, r4
 8006f36:	bf0c      	ite	eq
 8006f38:	f8c8 2000 	streq.w	r2, [r8]
 8006f3c:	605a      	strne	r2, [r3, #4]
 8006f3e:	e7eb      	b.n	8006f18 <_malloc_r+0xa8>
 8006f40:	4623      	mov	r3, r4
 8006f42:	6864      	ldr	r4, [r4, #4]
 8006f44:	e7ae      	b.n	8006ea4 <_malloc_r+0x34>
 8006f46:	463c      	mov	r4, r7
 8006f48:	687f      	ldr	r7, [r7, #4]
 8006f4a:	e7b6      	b.n	8006eba <_malloc_r+0x4a>
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	42a3      	cmp	r3, r4
 8006f52:	d1fb      	bne.n	8006f4c <_malloc_r+0xdc>
 8006f54:	2300      	movs	r3, #0
 8006f56:	6053      	str	r3, [r2, #4]
 8006f58:	e7de      	b.n	8006f18 <_malloc_r+0xa8>
 8006f5a:	230c      	movs	r3, #12
 8006f5c:	6033      	str	r3, [r6, #0]
 8006f5e:	4630      	mov	r0, r6
 8006f60:	f000 f80c 	bl	8006f7c <__malloc_unlock>
 8006f64:	e794      	b.n	8006e90 <_malloc_r+0x20>
 8006f66:	6005      	str	r5, [r0, #0]
 8006f68:	e7d6      	b.n	8006f18 <_malloc_r+0xa8>
 8006f6a:	bf00      	nop
 8006f6c:	20000968 	.word	0x20000968

08006f70 <__malloc_lock>:
 8006f70:	4801      	ldr	r0, [pc, #4]	@ (8006f78 <__malloc_lock+0x8>)
 8006f72:	f7ff b8b2 	b.w	80060da <__retarget_lock_acquire_recursive>
 8006f76:	bf00      	nop
 8006f78:	20000960 	.word	0x20000960

08006f7c <__malloc_unlock>:
 8006f7c:	4801      	ldr	r0, [pc, #4]	@ (8006f84 <__malloc_unlock+0x8>)
 8006f7e:	f7ff b8ad 	b.w	80060dc <__retarget_lock_release_recursive>
 8006f82:	bf00      	nop
 8006f84:	20000960 	.word	0x20000960

08006f88 <_Balloc>:
 8006f88:	b570      	push	{r4, r5, r6, lr}
 8006f8a:	69c6      	ldr	r6, [r0, #28]
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	460d      	mov	r5, r1
 8006f90:	b976      	cbnz	r6, 8006fb0 <_Balloc+0x28>
 8006f92:	2010      	movs	r0, #16
 8006f94:	f7ff ff42 	bl	8006e1c <malloc>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	61e0      	str	r0, [r4, #28]
 8006f9c:	b920      	cbnz	r0, 8006fa8 <_Balloc+0x20>
 8006f9e:	4b18      	ldr	r3, [pc, #96]	@ (8007000 <_Balloc+0x78>)
 8006fa0:	4818      	ldr	r0, [pc, #96]	@ (8007004 <_Balloc+0x7c>)
 8006fa2:	216b      	movs	r1, #107	@ 0x6b
 8006fa4:	f001 fec8 	bl	8008d38 <__assert_func>
 8006fa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fac:	6006      	str	r6, [r0, #0]
 8006fae:	60c6      	str	r6, [r0, #12]
 8006fb0:	69e6      	ldr	r6, [r4, #28]
 8006fb2:	68f3      	ldr	r3, [r6, #12]
 8006fb4:	b183      	cbz	r3, 8006fd8 <_Balloc+0x50>
 8006fb6:	69e3      	ldr	r3, [r4, #28]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006fbe:	b9b8      	cbnz	r0, 8006ff0 <_Balloc+0x68>
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	fa01 f605 	lsl.w	r6, r1, r5
 8006fc6:	1d72      	adds	r2, r6, #5
 8006fc8:	0092      	lsls	r2, r2, #2
 8006fca:	4620      	mov	r0, r4
 8006fcc:	f001 fed2 	bl	8008d74 <_calloc_r>
 8006fd0:	b160      	cbz	r0, 8006fec <_Balloc+0x64>
 8006fd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fd6:	e00e      	b.n	8006ff6 <_Balloc+0x6e>
 8006fd8:	2221      	movs	r2, #33	@ 0x21
 8006fda:	2104      	movs	r1, #4
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f001 fec9 	bl	8008d74 <_calloc_r>
 8006fe2:	69e3      	ldr	r3, [r4, #28]
 8006fe4:	60f0      	str	r0, [r6, #12]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1e4      	bne.n	8006fb6 <_Balloc+0x2e>
 8006fec:	2000      	movs	r0, #0
 8006fee:	bd70      	pop	{r4, r5, r6, pc}
 8006ff0:	6802      	ldr	r2, [r0, #0]
 8006ff2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ffc:	e7f7      	b.n	8006fee <_Balloc+0x66>
 8006ffe:	bf00      	nop
 8007000:	0800a63f 	.word	0x0800a63f
 8007004:	0800a6bf 	.word	0x0800a6bf

08007008 <_Bfree>:
 8007008:	b570      	push	{r4, r5, r6, lr}
 800700a:	69c6      	ldr	r6, [r0, #28]
 800700c:	4605      	mov	r5, r0
 800700e:	460c      	mov	r4, r1
 8007010:	b976      	cbnz	r6, 8007030 <_Bfree+0x28>
 8007012:	2010      	movs	r0, #16
 8007014:	f7ff ff02 	bl	8006e1c <malloc>
 8007018:	4602      	mov	r2, r0
 800701a:	61e8      	str	r0, [r5, #28]
 800701c:	b920      	cbnz	r0, 8007028 <_Bfree+0x20>
 800701e:	4b09      	ldr	r3, [pc, #36]	@ (8007044 <_Bfree+0x3c>)
 8007020:	4809      	ldr	r0, [pc, #36]	@ (8007048 <_Bfree+0x40>)
 8007022:	218f      	movs	r1, #143	@ 0x8f
 8007024:	f001 fe88 	bl	8008d38 <__assert_func>
 8007028:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800702c:	6006      	str	r6, [r0, #0]
 800702e:	60c6      	str	r6, [r0, #12]
 8007030:	b13c      	cbz	r4, 8007042 <_Bfree+0x3a>
 8007032:	69eb      	ldr	r3, [r5, #28]
 8007034:	6862      	ldr	r2, [r4, #4]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800703c:	6021      	str	r1, [r4, #0]
 800703e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007042:	bd70      	pop	{r4, r5, r6, pc}
 8007044:	0800a63f 	.word	0x0800a63f
 8007048:	0800a6bf 	.word	0x0800a6bf

0800704c <__multadd>:
 800704c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007050:	690d      	ldr	r5, [r1, #16]
 8007052:	4607      	mov	r7, r0
 8007054:	460c      	mov	r4, r1
 8007056:	461e      	mov	r6, r3
 8007058:	f101 0c14 	add.w	ip, r1, #20
 800705c:	2000      	movs	r0, #0
 800705e:	f8dc 3000 	ldr.w	r3, [ip]
 8007062:	b299      	uxth	r1, r3
 8007064:	fb02 6101 	mla	r1, r2, r1, r6
 8007068:	0c1e      	lsrs	r6, r3, #16
 800706a:	0c0b      	lsrs	r3, r1, #16
 800706c:	fb02 3306 	mla	r3, r2, r6, r3
 8007070:	b289      	uxth	r1, r1
 8007072:	3001      	adds	r0, #1
 8007074:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007078:	4285      	cmp	r5, r0
 800707a:	f84c 1b04 	str.w	r1, [ip], #4
 800707e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007082:	dcec      	bgt.n	800705e <__multadd+0x12>
 8007084:	b30e      	cbz	r6, 80070ca <__multadd+0x7e>
 8007086:	68a3      	ldr	r3, [r4, #8]
 8007088:	42ab      	cmp	r3, r5
 800708a:	dc19      	bgt.n	80070c0 <__multadd+0x74>
 800708c:	6861      	ldr	r1, [r4, #4]
 800708e:	4638      	mov	r0, r7
 8007090:	3101      	adds	r1, #1
 8007092:	f7ff ff79 	bl	8006f88 <_Balloc>
 8007096:	4680      	mov	r8, r0
 8007098:	b928      	cbnz	r0, 80070a6 <__multadd+0x5a>
 800709a:	4602      	mov	r2, r0
 800709c:	4b0c      	ldr	r3, [pc, #48]	@ (80070d0 <__multadd+0x84>)
 800709e:	480d      	ldr	r0, [pc, #52]	@ (80070d4 <__multadd+0x88>)
 80070a0:	21ba      	movs	r1, #186	@ 0xba
 80070a2:	f001 fe49 	bl	8008d38 <__assert_func>
 80070a6:	6922      	ldr	r2, [r4, #16]
 80070a8:	3202      	adds	r2, #2
 80070aa:	f104 010c 	add.w	r1, r4, #12
 80070ae:	0092      	lsls	r2, r2, #2
 80070b0:	300c      	adds	r0, #12
 80070b2:	f001 fe29 	bl	8008d08 <memcpy>
 80070b6:	4621      	mov	r1, r4
 80070b8:	4638      	mov	r0, r7
 80070ba:	f7ff ffa5 	bl	8007008 <_Bfree>
 80070be:	4644      	mov	r4, r8
 80070c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070c4:	3501      	adds	r5, #1
 80070c6:	615e      	str	r6, [r3, #20]
 80070c8:	6125      	str	r5, [r4, #16]
 80070ca:	4620      	mov	r0, r4
 80070cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070d0:	0800a6ae 	.word	0x0800a6ae
 80070d4:	0800a6bf 	.word	0x0800a6bf

080070d8 <__s2b>:
 80070d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070dc:	460c      	mov	r4, r1
 80070de:	4615      	mov	r5, r2
 80070e0:	461f      	mov	r7, r3
 80070e2:	2209      	movs	r2, #9
 80070e4:	3308      	adds	r3, #8
 80070e6:	4606      	mov	r6, r0
 80070e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80070ec:	2100      	movs	r1, #0
 80070ee:	2201      	movs	r2, #1
 80070f0:	429a      	cmp	r2, r3
 80070f2:	db09      	blt.n	8007108 <__s2b+0x30>
 80070f4:	4630      	mov	r0, r6
 80070f6:	f7ff ff47 	bl	8006f88 <_Balloc>
 80070fa:	b940      	cbnz	r0, 800710e <__s2b+0x36>
 80070fc:	4602      	mov	r2, r0
 80070fe:	4b19      	ldr	r3, [pc, #100]	@ (8007164 <__s2b+0x8c>)
 8007100:	4819      	ldr	r0, [pc, #100]	@ (8007168 <__s2b+0x90>)
 8007102:	21d3      	movs	r1, #211	@ 0xd3
 8007104:	f001 fe18 	bl	8008d38 <__assert_func>
 8007108:	0052      	lsls	r2, r2, #1
 800710a:	3101      	adds	r1, #1
 800710c:	e7f0      	b.n	80070f0 <__s2b+0x18>
 800710e:	9b08      	ldr	r3, [sp, #32]
 8007110:	6143      	str	r3, [r0, #20]
 8007112:	2d09      	cmp	r5, #9
 8007114:	f04f 0301 	mov.w	r3, #1
 8007118:	6103      	str	r3, [r0, #16]
 800711a:	dd16      	ble.n	800714a <__s2b+0x72>
 800711c:	f104 0909 	add.w	r9, r4, #9
 8007120:	46c8      	mov	r8, r9
 8007122:	442c      	add	r4, r5
 8007124:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007128:	4601      	mov	r1, r0
 800712a:	3b30      	subs	r3, #48	@ 0x30
 800712c:	220a      	movs	r2, #10
 800712e:	4630      	mov	r0, r6
 8007130:	f7ff ff8c 	bl	800704c <__multadd>
 8007134:	45a0      	cmp	r8, r4
 8007136:	d1f5      	bne.n	8007124 <__s2b+0x4c>
 8007138:	f1a5 0408 	sub.w	r4, r5, #8
 800713c:	444c      	add	r4, r9
 800713e:	1b2d      	subs	r5, r5, r4
 8007140:	1963      	adds	r3, r4, r5
 8007142:	42bb      	cmp	r3, r7
 8007144:	db04      	blt.n	8007150 <__s2b+0x78>
 8007146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800714a:	340a      	adds	r4, #10
 800714c:	2509      	movs	r5, #9
 800714e:	e7f6      	b.n	800713e <__s2b+0x66>
 8007150:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007154:	4601      	mov	r1, r0
 8007156:	3b30      	subs	r3, #48	@ 0x30
 8007158:	220a      	movs	r2, #10
 800715a:	4630      	mov	r0, r6
 800715c:	f7ff ff76 	bl	800704c <__multadd>
 8007160:	e7ee      	b.n	8007140 <__s2b+0x68>
 8007162:	bf00      	nop
 8007164:	0800a6ae 	.word	0x0800a6ae
 8007168:	0800a6bf 	.word	0x0800a6bf

0800716c <__hi0bits>:
 800716c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007170:	4603      	mov	r3, r0
 8007172:	bf36      	itet	cc
 8007174:	0403      	lslcc	r3, r0, #16
 8007176:	2000      	movcs	r0, #0
 8007178:	2010      	movcc	r0, #16
 800717a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800717e:	bf3c      	itt	cc
 8007180:	021b      	lslcc	r3, r3, #8
 8007182:	3008      	addcc	r0, #8
 8007184:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007188:	bf3c      	itt	cc
 800718a:	011b      	lslcc	r3, r3, #4
 800718c:	3004      	addcc	r0, #4
 800718e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007192:	bf3c      	itt	cc
 8007194:	009b      	lslcc	r3, r3, #2
 8007196:	3002      	addcc	r0, #2
 8007198:	2b00      	cmp	r3, #0
 800719a:	db05      	blt.n	80071a8 <__hi0bits+0x3c>
 800719c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80071a0:	f100 0001 	add.w	r0, r0, #1
 80071a4:	bf08      	it	eq
 80071a6:	2020      	moveq	r0, #32
 80071a8:	4770      	bx	lr

080071aa <__lo0bits>:
 80071aa:	6803      	ldr	r3, [r0, #0]
 80071ac:	4602      	mov	r2, r0
 80071ae:	f013 0007 	ands.w	r0, r3, #7
 80071b2:	d00b      	beq.n	80071cc <__lo0bits+0x22>
 80071b4:	07d9      	lsls	r1, r3, #31
 80071b6:	d421      	bmi.n	80071fc <__lo0bits+0x52>
 80071b8:	0798      	lsls	r0, r3, #30
 80071ba:	bf49      	itett	mi
 80071bc:	085b      	lsrmi	r3, r3, #1
 80071be:	089b      	lsrpl	r3, r3, #2
 80071c0:	2001      	movmi	r0, #1
 80071c2:	6013      	strmi	r3, [r2, #0]
 80071c4:	bf5c      	itt	pl
 80071c6:	6013      	strpl	r3, [r2, #0]
 80071c8:	2002      	movpl	r0, #2
 80071ca:	4770      	bx	lr
 80071cc:	b299      	uxth	r1, r3
 80071ce:	b909      	cbnz	r1, 80071d4 <__lo0bits+0x2a>
 80071d0:	0c1b      	lsrs	r3, r3, #16
 80071d2:	2010      	movs	r0, #16
 80071d4:	b2d9      	uxtb	r1, r3
 80071d6:	b909      	cbnz	r1, 80071dc <__lo0bits+0x32>
 80071d8:	3008      	adds	r0, #8
 80071da:	0a1b      	lsrs	r3, r3, #8
 80071dc:	0719      	lsls	r1, r3, #28
 80071de:	bf04      	itt	eq
 80071e0:	091b      	lsreq	r3, r3, #4
 80071e2:	3004      	addeq	r0, #4
 80071e4:	0799      	lsls	r1, r3, #30
 80071e6:	bf04      	itt	eq
 80071e8:	089b      	lsreq	r3, r3, #2
 80071ea:	3002      	addeq	r0, #2
 80071ec:	07d9      	lsls	r1, r3, #31
 80071ee:	d403      	bmi.n	80071f8 <__lo0bits+0x4e>
 80071f0:	085b      	lsrs	r3, r3, #1
 80071f2:	f100 0001 	add.w	r0, r0, #1
 80071f6:	d003      	beq.n	8007200 <__lo0bits+0x56>
 80071f8:	6013      	str	r3, [r2, #0]
 80071fa:	4770      	bx	lr
 80071fc:	2000      	movs	r0, #0
 80071fe:	4770      	bx	lr
 8007200:	2020      	movs	r0, #32
 8007202:	4770      	bx	lr

08007204 <__i2b>:
 8007204:	b510      	push	{r4, lr}
 8007206:	460c      	mov	r4, r1
 8007208:	2101      	movs	r1, #1
 800720a:	f7ff febd 	bl	8006f88 <_Balloc>
 800720e:	4602      	mov	r2, r0
 8007210:	b928      	cbnz	r0, 800721e <__i2b+0x1a>
 8007212:	4b05      	ldr	r3, [pc, #20]	@ (8007228 <__i2b+0x24>)
 8007214:	4805      	ldr	r0, [pc, #20]	@ (800722c <__i2b+0x28>)
 8007216:	f240 1145 	movw	r1, #325	@ 0x145
 800721a:	f001 fd8d 	bl	8008d38 <__assert_func>
 800721e:	2301      	movs	r3, #1
 8007220:	6144      	str	r4, [r0, #20]
 8007222:	6103      	str	r3, [r0, #16]
 8007224:	bd10      	pop	{r4, pc}
 8007226:	bf00      	nop
 8007228:	0800a6ae 	.word	0x0800a6ae
 800722c:	0800a6bf 	.word	0x0800a6bf

08007230 <__multiply>:
 8007230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007234:	4614      	mov	r4, r2
 8007236:	690a      	ldr	r2, [r1, #16]
 8007238:	6923      	ldr	r3, [r4, #16]
 800723a:	429a      	cmp	r2, r3
 800723c:	bfa8      	it	ge
 800723e:	4623      	movge	r3, r4
 8007240:	460f      	mov	r7, r1
 8007242:	bfa4      	itt	ge
 8007244:	460c      	movge	r4, r1
 8007246:	461f      	movge	r7, r3
 8007248:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800724c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007250:	68a3      	ldr	r3, [r4, #8]
 8007252:	6861      	ldr	r1, [r4, #4]
 8007254:	eb0a 0609 	add.w	r6, sl, r9
 8007258:	42b3      	cmp	r3, r6
 800725a:	b085      	sub	sp, #20
 800725c:	bfb8      	it	lt
 800725e:	3101      	addlt	r1, #1
 8007260:	f7ff fe92 	bl	8006f88 <_Balloc>
 8007264:	b930      	cbnz	r0, 8007274 <__multiply+0x44>
 8007266:	4602      	mov	r2, r0
 8007268:	4b44      	ldr	r3, [pc, #272]	@ (800737c <__multiply+0x14c>)
 800726a:	4845      	ldr	r0, [pc, #276]	@ (8007380 <__multiply+0x150>)
 800726c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007270:	f001 fd62 	bl	8008d38 <__assert_func>
 8007274:	f100 0514 	add.w	r5, r0, #20
 8007278:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800727c:	462b      	mov	r3, r5
 800727e:	2200      	movs	r2, #0
 8007280:	4543      	cmp	r3, r8
 8007282:	d321      	bcc.n	80072c8 <__multiply+0x98>
 8007284:	f107 0114 	add.w	r1, r7, #20
 8007288:	f104 0214 	add.w	r2, r4, #20
 800728c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007290:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007294:	9302      	str	r3, [sp, #8]
 8007296:	1b13      	subs	r3, r2, r4
 8007298:	3b15      	subs	r3, #21
 800729a:	f023 0303 	bic.w	r3, r3, #3
 800729e:	3304      	adds	r3, #4
 80072a0:	f104 0715 	add.w	r7, r4, #21
 80072a4:	42ba      	cmp	r2, r7
 80072a6:	bf38      	it	cc
 80072a8:	2304      	movcc	r3, #4
 80072aa:	9301      	str	r3, [sp, #4]
 80072ac:	9b02      	ldr	r3, [sp, #8]
 80072ae:	9103      	str	r1, [sp, #12]
 80072b0:	428b      	cmp	r3, r1
 80072b2:	d80c      	bhi.n	80072ce <__multiply+0x9e>
 80072b4:	2e00      	cmp	r6, #0
 80072b6:	dd03      	ble.n	80072c0 <__multiply+0x90>
 80072b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d05b      	beq.n	8007378 <__multiply+0x148>
 80072c0:	6106      	str	r6, [r0, #16]
 80072c2:	b005      	add	sp, #20
 80072c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c8:	f843 2b04 	str.w	r2, [r3], #4
 80072cc:	e7d8      	b.n	8007280 <__multiply+0x50>
 80072ce:	f8b1 a000 	ldrh.w	sl, [r1]
 80072d2:	f1ba 0f00 	cmp.w	sl, #0
 80072d6:	d024      	beq.n	8007322 <__multiply+0xf2>
 80072d8:	f104 0e14 	add.w	lr, r4, #20
 80072dc:	46a9      	mov	r9, r5
 80072de:	f04f 0c00 	mov.w	ip, #0
 80072e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80072e6:	f8d9 3000 	ldr.w	r3, [r9]
 80072ea:	fa1f fb87 	uxth.w	fp, r7
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	fb0a 330b 	mla	r3, sl, fp, r3
 80072f4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80072f8:	f8d9 7000 	ldr.w	r7, [r9]
 80072fc:	4463      	add	r3, ip
 80072fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007302:	fb0a c70b 	mla	r7, sl, fp, ip
 8007306:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800730a:	b29b      	uxth	r3, r3
 800730c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007310:	4572      	cmp	r2, lr
 8007312:	f849 3b04 	str.w	r3, [r9], #4
 8007316:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800731a:	d8e2      	bhi.n	80072e2 <__multiply+0xb2>
 800731c:	9b01      	ldr	r3, [sp, #4]
 800731e:	f845 c003 	str.w	ip, [r5, r3]
 8007322:	9b03      	ldr	r3, [sp, #12]
 8007324:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007328:	3104      	adds	r1, #4
 800732a:	f1b9 0f00 	cmp.w	r9, #0
 800732e:	d021      	beq.n	8007374 <__multiply+0x144>
 8007330:	682b      	ldr	r3, [r5, #0]
 8007332:	f104 0c14 	add.w	ip, r4, #20
 8007336:	46ae      	mov	lr, r5
 8007338:	f04f 0a00 	mov.w	sl, #0
 800733c:	f8bc b000 	ldrh.w	fp, [ip]
 8007340:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007344:	fb09 770b 	mla	r7, r9, fp, r7
 8007348:	4457      	add	r7, sl
 800734a:	b29b      	uxth	r3, r3
 800734c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007350:	f84e 3b04 	str.w	r3, [lr], #4
 8007354:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007358:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800735c:	f8be 3000 	ldrh.w	r3, [lr]
 8007360:	fb09 330a 	mla	r3, r9, sl, r3
 8007364:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007368:	4562      	cmp	r2, ip
 800736a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800736e:	d8e5      	bhi.n	800733c <__multiply+0x10c>
 8007370:	9f01      	ldr	r7, [sp, #4]
 8007372:	51eb      	str	r3, [r5, r7]
 8007374:	3504      	adds	r5, #4
 8007376:	e799      	b.n	80072ac <__multiply+0x7c>
 8007378:	3e01      	subs	r6, #1
 800737a:	e79b      	b.n	80072b4 <__multiply+0x84>
 800737c:	0800a6ae 	.word	0x0800a6ae
 8007380:	0800a6bf 	.word	0x0800a6bf

08007384 <__pow5mult>:
 8007384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007388:	4615      	mov	r5, r2
 800738a:	f012 0203 	ands.w	r2, r2, #3
 800738e:	4607      	mov	r7, r0
 8007390:	460e      	mov	r6, r1
 8007392:	d007      	beq.n	80073a4 <__pow5mult+0x20>
 8007394:	4c25      	ldr	r4, [pc, #148]	@ (800742c <__pow5mult+0xa8>)
 8007396:	3a01      	subs	r2, #1
 8007398:	2300      	movs	r3, #0
 800739a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800739e:	f7ff fe55 	bl	800704c <__multadd>
 80073a2:	4606      	mov	r6, r0
 80073a4:	10ad      	asrs	r5, r5, #2
 80073a6:	d03d      	beq.n	8007424 <__pow5mult+0xa0>
 80073a8:	69fc      	ldr	r4, [r7, #28]
 80073aa:	b97c      	cbnz	r4, 80073cc <__pow5mult+0x48>
 80073ac:	2010      	movs	r0, #16
 80073ae:	f7ff fd35 	bl	8006e1c <malloc>
 80073b2:	4602      	mov	r2, r0
 80073b4:	61f8      	str	r0, [r7, #28]
 80073b6:	b928      	cbnz	r0, 80073c4 <__pow5mult+0x40>
 80073b8:	4b1d      	ldr	r3, [pc, #116]	@ (8007430 <__pow5mult+0xac>)
 80073ba:	481e      	ldr	r0, [pc, #120]	@ (8007434 <__pow5mult+0xb0>)
 80073bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80073c0:	f001 fcba 	bl	8008d38 <__assert_func>
 80073c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073c8:	6004      	str	r4, [r0, #0]
 80073ca:	60c4      	str	r4, [r0, #12]
 80073cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80073d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80073d4:	b94c      	cbnz	r4, 80073ea <__pow5mult+0x66>
 80073d6:	f240 2171 	movw	r1, #625	@ 0x271
 80073da:	4638      	mov	r0, r7
 80073dc:	f7ff ff12 	bl	8007204 <__i2b>
 80073e0:	2300      	movs	r3, #0
 80073e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80073e6:	4604      	mov	r4, r0
 80073e8:	6003      	str	r3, [r0, #0]
 80073ea:	f04f 0900 	mov.w	r9, #0
 80073ee:	07eb      	lsls	r3, r5, #31
 80073f0:	d50a      	bpl.n	8007408 <__pow5mult+0x84>
 80073f2:	4631      	mov	r1, r6
 80073f4:	4622      	mov	r2, r4
 80073f6:	4638      	mov	r0, r7
 80073f8:	f7ff ff1a 	bl	8007230 <__multiply>
 80073fc:	4631      	mov	r1, r6
 80073fe:	4680      	mov	r8, r0
 8007400:	4638      	mov	r0, r7
 8007402:	f7ff fe01 	bl	8007008 <_Bfree>
 8007406:	4646      	mov	r6, r8
 8007408:	106d      	asrs	r5, r5, #1
 800740a:	d00b      	beq.n	8007424 <__pow5mult+0xa0>
 800740c:	6820      	ldr	r0, [r4, #0]
 800740e:	b938      	cbnz	r0, 8007420 <__pow5mult+0x9c>
 8007410:	4622      	mov	r2, r4
 8007412:	4621      	mov	r1, r4
 8007414:	4638      	mov	r0, r7
 8007416:	f7ff ff0b 	bl	8007230 <__multiply>
 800741a:	6020      	str	r0, [r4, #0]
 800741c:	f8c0 9000 	str.w	r9, [r0]
 8007420:	4604      	mov	r4, r0
 8007422:	e7e4      	b.n	80073ee <__pow5mult+0x6a>
 8007424:	4630      	mov	r0, r6
 8007426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800742a:	bf00      	nop
 800742c:	0800a718 	.word	0x0800a718
 8007430:	0800a63f 	.word	0x0800a63f
 8007434:	0800a6bf 	.word	0x0800a6bf

08007438 <__lshift>:
 8007438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800743c:	460c      	mov	r4, r1
 800743e:	6849      	ldr	r1, [r1, #4]
 8007440:	6923      	ldr	r3, [r4, #16]
 8007442:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007446:	68a3      	ldr	r3, [r4, #8]
 8007448:	4607      	mov	r7, r0
 800744a:	4691      	mov	r9, r2
 800744c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007450:	f108 0601 	add.w	r6, r8, #1
 8007454:	42b3      	cmp	r3, r6
 8007456:	db0b      	blt.n	8007470 <__lshift+0x38>
 8007458:	4638      	mov	r0, r7
 800745a:	f7ff fd95 	bl	8006f88 <_Balloc>
 800745e:	4605      	mov	r5, r0
 8007460:	b948      	cbnz	r0, 8007476 <__lshift+0x3e>
 8007462:	4602      	mov	r2, r0
 8007464:	4b28      	ldr	r3, [pc, #160]	@ (8007508 <__lshift+0xd0>)
 8007466:	4829      	ldr	r0, [pc, #164]	@ (800750c <__lshift+0xd4>)
 8007468:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800746c:	f001 fc64 	bl	8008d38 <__assert_func>
 8007470:	3101      	adds	r1, #1
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	e7ee      	b.n	8007454 <__lshift+0x1c>
 8007476:	2300      	movs	r3, #0
 8007478:	f100 0114 	add.w	r1, r0, #20
 800747c:	f100 0210 	add.w	r2, r0, #16
 8007480:	4618      	mov	r0, r3
 8007482:	4553      	cmp	r3, sl
 8007484:	db33      	blt.n	80074ee <__lshift+0xb6>
 8007486:	6920      	ldr	r0, [r4, #16]
 8007488:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800748c:	f104 0314 	add.w	r3, r4, #20
 8007490:	f019 091f 	ands.w	r9, r9, #31
 8007494:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007498:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800749c:	d02b      	beq.n	80074f6 <__lshift+0xbe>
 800749e:	f1c9 0e20 	rsb	lr, r9, #32
 80074a2:	468a      	mov	sl, r1
 80074a4:	2200      	movs	r2, #0
 80074a6:	6818      	ldr	r0, [r3, #0]
 80074a8:	fa00 f009 	lsl.w	r0, r0, r9
 80074ac:	4310      	orrs	r0, r2
 80074ae:	f84a 0b04 	str.w	r0, [sl], #4
 80074b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80074b6:	459c      	cmp	ip, r3
 80074b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80074bc:	d8f3      	bhi.n	80074a6 <__lshift+0x6e>
 80074be:	ebac 0304 	sub.w	r3, ip, r4
 80074c2:	3b15      	subs	r3, #21
 80074c4:	f023 0303 	bic.w	r3, r3, #3
 80074c8:	3304      	adds	r3, #4
 80074ca:	f104 0015 	add.w	r0, r4, #21
 80074ce:	4584      	cmp	ip, r0
 80074d0:	bf38      	it	cc
 80074d2:	2304      	movcc	r3, #4
 80074d4:	50ca      	str	r2, [r1, r3]
 80074d6:	b10a      	cbz	r2, 80074dc <__lshift+0xa4>
 80074d8:	f108 0602 	add.w	r6, r8, #2
 80074dc:	3e01      	subs	r6, #1
 80074de:	4638      	mov	r0, r7
 80074e0:	612e      	str	r6, [r5, #16]
 80074e2:	4621      	mov	r1, r4
 80074e4:	f7ff fd90 	bl	8007008 <_Bfree>
 80074e8:	4628      	mov	r0, r5
 80074ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80074f2:	3301      	adds	r3, #1
 80074f4:	e7c5      	b.n	8007482 <__lshift+0x4a>
 80074f6:	3904      	subs	r1, #4
 80074f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80074fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007500:	459c      	cmp	ip, r3
 8007502:	d8f9      	bhi.n	80074f8 <__lshift+0xc0>
 8007504:	e7ea      	b.n	80074dc <__lshift+0xa4>
 8007506:	bf00      	nop
 8007508:	0800a6ae 	.word	0x0800a6ae
 800750c:	0800a6bf 	.word	0x0800a6bf

08007510 <__mcmp>:
 8007510:	690a      	ldr	r2, [r1, #16]
 8007512:	4603      	mov	r3, r0
 8007514:	6900      	ldr	r0, [r0, #16]
 8007516:	1a80      	subs	r0, r0, r2
 8007518:	b530      	push	{r4, r5, lr}
 800751a:	d10e      	bne.n	800753a <__mcmp+0x2a>
 800751c:	3314      	adds	r3, #20
 800751e:	3114      	adds	r1, #20
 8007520:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007524:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007528:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800752c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007530:	4295      	cmp	r5, r2
 8007532:	d003      	beq.n	800753c <__mcmp+0x2c>
 8007534:	d205      	bcs.n	8007542 <__mcmp+0x32>
 8007536:	f04f 30ff 	mov.w	r0, #4294967295
 800753a:	bd30      	pop	{r4, r5, pc}
 800753c:	42a3      	cmp	r3, r4
 800753e:	d3f3      	bcc.n	8007528 <__mcmp+0x18>
 8007540:	e7fb      	b.n	800753a <__mcmp+0x2a>
 8007542:	2001      	movs	r0, #1
 8007544:	e7f9      	b.n	800753a <__mcmp+0x2a>
	...

08007548 <__mdiff>:
 8007548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800754c:	4689      	mov	r9, r1
 800754e:	4606      	mov	r6, r0
 8007550:	4611      	mov	r1, r2
 8007552:	4648      	mov	r0, r9
 8007554:	4614      	mov	r4, r2
 8007556:	f7ff ffdb 	bl	8007510 <__mcmp>
 800755a:	1e05      	subs	r5, r0, #0
 800755c:	d112      	bne.n	8007584 <__mdiff+0x3c>
 800755e:	4629      	mov	r1, r5
 8007560:	4630      	mov	r0, r6
 8007562:	f7ff fd11 	bl	8006f88 <_Balloc>
 8007566:	4602      	mov	r2, r0
 8007568:	b928      	cbnz	r0, 8007576 <__mdiff+0x2e>
 800756a:	4b3f      	ldr	r3, [pc, #252]	@ (8007668 <__mdiff+0x120>)
 800756c:	f240 2137 	movw	r1, #567	@ 0x237
 8007570:	483e      	ldr	r0, [pc, #248]	@ (800766c <__mdiff+0x124>)
 8007572:	f001 fbe1 	bl	8008d38 <__assert_func>
 8007576:	2301      	movs	r3, #1
 8007578:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800757c:	4610      	mov	r0, r2
 800757e:	b003      	add	sp, #12
 8007580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007584:	bfbc      	itt	lt
 8007586:	464b      	movlt	r3, r9
 8007588:	46a1      	movlt	r9, r4
 800758a:	4630      	mov	r0, r6
 800758c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007590:	bfba      	itte	lt
 8007592:	461c      	movlt	r4, r3
 8007594:	2501      	movlt	r5, #1
 8007596:	2500      	movge	r5, #0
 8007598:	f7ff fcf6 	bl	8006f88 <_Balloc>
 800759c:	4602      	mov	r2, r0
 800759e:	b918      	cbnz	r0, 80075a8 <__mdiff+0x60>
 80075a0:	4b31      	ldr	r3, [pc, #196]	@ (8007668 <__mdiff+0x120>)
 80075a2:	f240 2145 	movw	r1, #581	@ 0x245
 80075a6:	e7e3      	b.n	8007570 <__mdiff+0x28>
 80075a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80075ac:	6926      	ldr	r6, [r4, #16]
 80075ae:	60c5      	str	r5, [r0, #12]
 80075b0:	f109 0310 	add.w	r3, r9, #16
 80075b4:	f109 0514 	add.w	r5, r9, #20
 80075b8:	f104 0e14 	add.w	lr, r4, #20
 80075bc:	f100 0b14 	add.w	fp, r0, #20
 80075c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80075c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80075c8:	9301      	str	r3, [sp, #4]
 80075ca:	46d9      	mov	r9, fp
 80075cc:	f04f 0c00 	mov.w	ip, #0
 80075d0:	9b01      	ldr	r3, [sp, #4]
 80075d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80075d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80075da:	9301      	str	r3, [sp, #4]
 80075dc:	fa1f f38a 	uxth.w	r3, sl
 80075e0:	4619      	mov	r1, r3
 80075e2:	b283      	uxth	r3, r0
 80075e4:	1acb      	subs	r3, r1, r3
 80075e6:	0c00      	lsrs	r0, r0, #16
 80075e8:	4463      	add	r3, ip
 80075ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80075ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80075f8:	4576      	cmp	r6, lr
 80075fa:	f849 3b04 	str.w	r3, [r9], #4
 80075fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007602:	d8e5      	bhi.n	80075d0 <__mdiff+0x88>
 8007604:	1b33      	subs	r3, r6, r4
 8007606:	3b15      	subs	r3, #21
 8007608:	f023 0303 	bic.w	r3, r3, #3
 800760c:	3415      	adds	r4, #21
 800760e:	3304      	adds	r3, #4
 8007610:	42a6      	cmp	r6, r4
 8007612:	bf38      	it	cc
 8007614:	2304      	movcc	r3, #4
 8007616:	441d      	add	r5, r3
 8007618:	445b      	add	r3, fp
 800761a:	461e      	mov	r6, r3
 800761c:	462c      	mov	r4, r5
 800761e:	4544      	cmp	r4, r8
 8007620:	d30e      	bcc.n	8007640 <__mdiff+0xf8>
 8007622:	f108 0103 	add.w	r1, r8, #3
 8007626:	1b49      	subs	r1, r1, r5
 8007628:	f021 0103 	bic.w	r1, r1, #3
 800762c:	3d03      	subs	r5, #3
 800762e:	45a8      	cmp	r8, r5
 8007630:	bf38      	it	cc
 8007632:	2100      	movcc	r1, #0
 8007634:	440b      	add	r3, r1
 8007636:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800763a:	b191      	cbz	r1, 8007662 <__mdiff+0x11a>
 800763c:	6117      	str	r7, [r2, #16]
 800763e:	e79d      	b.n	800757c <__mdiff+0x34>
 8007640:	f854 1b04 	ldr.w	r1, [r4], #4
 8007644:	46e6      	mov	lr, ip
 8007646:	0c08      	lsrs	r0, r1, #16
 8007648:	fa1c fc81 	uxtah	ip, ip, r1
 800764c:	4471      	add	r1, lr
 800764e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007652:	b289      	uxth	r1, r1
 8007654:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007658:	f846 1b04 	str.w	r1, [r6], #4
 800765c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007660:	e7dd      	b.n	800761e <__mdiff+0xd6>
 8007662:	3f01      	subs	r7, #1
 8007664:	e7e7      	b.n	8007636 <__mdiff+0xee>
 8007666:	bf00      	nop
 8007668:	0800a6ae 	.word	0x0800a6ae
 800766c:	0800a6bf 	.word	0x0800a6bf

08007670 <__ulp>:
 8007670:	b082      	sub	sp, #8
 8007672:	ed8d 0b00 	vstr	d0, [sp]
 8007676:	9a01      	ldr	r2, [sp, #4]
 8007678:	4b0f      	ldr	r3, [pc, #60]	@ (80076b8 <__ulp+0x48>)
 800767a:	4013      	ands	r3, r2
 800767c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007680:	2b00      	cmp	r3, #0
 8007682:	dc08      	bgt.n	8007696 <__ulp+0x26>
 8007684:	425b      	negs	r3, r3
 8007686:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800768a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800768e:	da04      	bge.n	800769a <__ulp+0x2a>
 8007690:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007694:	4113      	asrs	r3, r2
 8007696:	2200      	movs	r2, #0
 8007698:	e008      	b.n	80076ac <__ulp+0x3c>
 800769a:	f1a2 0314 	sub.w	r3, r2, #20
 800769e:	2b1e      	cmp	r3, #30
 80076a0:	bfda      	itte	le
 80076a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80076a6:	40da      	lsrle	r2, r3
 80076a8:	2201      	movgt	r2, #1
 80076aa:	2300      	movs	r3, #0
 80076ac:	4619      	mov	r1, r3
 80076ae:	4610      	mov	r0, r2
 80076b0:	ec41 0b10 	vmov	d0, r0, r1
 80076b4:	b002      	add	sp, #8
 80076b6:	4770      	bx	lr
 80076b8:	7ff00000 	.word	0x7ff00000

080076bc <__b2d>:
 80076bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076c0:	6906      	ldr	r6, [r0, #16]
 80076c2:	f100 0814 	add.w	r8, r0, #20
 80076c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80076ca:	1f37      	subs	r7, r6, #4
 80076cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80076d0:	4610      	mov	r0, r2
 80076d2:	f7ff fd4b 	bl	800716c <__hi0bits>
 80076d6:	f1c0 0320 	rsb	r3, r0, #32
 80076da:	280a      	cmp	r0, #10
 80076dc:	600b      	str	r3, [r1, #0]
 80076de:	491b      	ldr	r1, [pc, #108]	@ (800774c <__b2d+0x90>)
 80076e0:	dc15      	bgt.n	800770e <__b2d+0x52>
 80076e2:	f1c0 0c0b 	rsb	ip, r0, #11
 80076e6:	fa22 f30c 	lsr.w	r3, r2, ip
 80076ea:	45b8      	cmp	r8, r7
 80076ec:	ea43 0501 	orr.w	r5, r3, r1
 80076f0:	bf34      	ite	cc
 80076f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80076f6:	2300      	movcs	r3, #0
 80076f8:	3015      	adds	r0, #21
 80076fa:	fa02 f000 	lsl.w	r0, r2, r0
 80076fe:	fa23 f30c 	lsr.w	r3, r3, ip
 8007702:	4303      	orrs	r3, r0
 8007704:	461c      	mov	r4, r3
 8007706:	ec45 4b10 	vmov	d0, r4, r5
 800770a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800770e:	45b8      	cmp	r8, r7
 8007710:	bf3a      	itte	cc
 8007712:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007716:	f1a6 0708 	subcc.w	r7, r6, #8
 800771a:	2300      	movcs	r3, #0
 800771c:	380b      	subs	r0, #11
 800771e:	d012      	beq.n	8007746 <__b2d+0x8a>
 8007720:	f1c0 0120 	rsb	r1, r0, #32
 8007724:	fa23 f401 	lsr.w	r4, r3, r1
 8007728:	4082      	lsls	r2, r0
 800772a:	4322      	orrs	r2, r4
 800772c:	4547      	cmp	r7, r8
 800772e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007732:	bf8c      	ite	hi
 8007734:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007738:	2200      	movls	r2, #0
 800773a:	4083      	lsls	r3, r0
 800773c:	40ca      	lsrs	r2, r1
 800773e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007742:	4313      	orrs	r3, r2
 8007744:	e7de      	b.n	8007704 <__b2d+0x48>
 8007746:	ea42 0501 	orr.w	r5, r2, r1
 800774a:	e7db      	b.n	8007704 <__b2d+0x48>
 800774c:	3ff00000 	.word	0x3ff00000

08007750 <__d2b>:
 8007750:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007754:	460f      	mov	r7, r1
 8007756:	2101      	movs	r1, #1
 8007758:	ec59 8b10 	vmov	r8, r9, d0
 800775c:	4616      	mov	r6, r2
 800775e:	f7ff fc13 	bl	8006f88 <_Balloc>
 8007762:	4604      	mov	r4, r0
 8007764:	b930      	cbnz	r0, 8007774 <__d2b+0x24>
 8007766:	4602      	mov	r2, r0
 8007768:	4b23      	ldr	r3, [pc, #140]	@ (80077f8 <__d2b+0xa8>)
 800776a:	4824      	ldr	r0, [pc, #144]	@ (80077fc <__d2b+0xac>)
 800776c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007770:	f001 fae2 	bl	8008d38 <__assert_func>
 8007774:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007778:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800777c:	b10d      	cbz	r5, 8007782 <__d2b+0x32>
 800777e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007782:	9301      	str	r3, [sp, #4]
 8007784:	f1b8 0300 	subs.w	r3, r8, #0
 8007788:	d023      	beq.n	80077d2 <__d2b+0x82>
 800778a:	4668      	mov	r0, sp
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	f7ff fd0c 	bl	80071aa <__lo0bits>
 8007792:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007796:	b1d0      	cbz	r0, 80077ce <__d2b+0x7e>
 8007798:	f1c0 0320 	rsb	r3, r0, #32
 800779c:	fa02 f303 	lsl.w	r3, r2, r3
 80077a0:	430b      	orrs	r3, r1
 80077a2:	40c2      	lsrs	r2, r0
 80077a4:	6163      	str	r3, [r4, #20]
 80077a6:	9201      	str	r2, [sp, #4]
 80077a8:	9b01      	ldr	r3, [sp, #4]
 80077aa:	61a3      	str	r3, [r4, #24]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	bf0c      	ite	eq
 80077b0:	2201      	moveq	r2, #1
 80077b2:	2202      	movne	r2, #2
 80077b4:	6122      	str	r2, [r4, #16]
 80077b6:	b1a5      	cbz	r5, 80077e2 <__d2b+0x92>
 80077b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80077bc:	4405      	add	r5, r0
 80077be:	603d      	str	r5, [r7, #0]
 80077c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80077c4:	6030      	str	r0, [r6, #0]
 80077c6:	4620      	mov	r0, r4
 80077c8:	b003      	add	sp, #12
 80077ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077ce:	6161      	str	r1, [r4, #20]
 80077d0:	e7ea      	b.n	80077a8 <__d2b+0x58>
 80077d2:	a801      	add	r0, sp, #4
 80077d4:	f7ff fce9 	bl	80071aa <__lo0bits>
 80077d8:	9b01      	ldr	r3, [sp, #4]
 80077da:	6163      	str	r3, [r4, #20]
 80077dc:	3020      	adds	r0, #32
 80077de:	2201      	movs	r2, #1
 80077e0:	e7e8      	b.n	80077b4 <__d2b+0x64>
 80077e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80077e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80077ea:	6038      	str	r0, [r7, #0]
 80077ec:	6918      	ldr	r0, [r3, #16]
 80077ee:	f7ff fcbd 	bl	800716c <__hi0bits>
 80077f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077f6:	e7e5      	b.n	80077c4 <__d2b+0x74>
 80077f8:	0800a6ae 	.word	0x0800a6ae
 80077fc:	0800a6bf 	.word	0x0800a6bf

08007800 <__ratio>:
 8007800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007804:	b085      	sub	sp, #20
 8007806:	e9cd 1000 	strd	r1, r0, [sp]
 800780a:	a902      	add	r1, sp, #8
 800780c:	f7ff ff56 	bl	80076bc <__b2d>
 8007810:	9800      	ldr	r0, [sp, #0]
 8007812:	a903      	add	r1, sp, #12
 8007814:	ec55 4b10 	vmov	r4, r5, d0
 8007818:	f7ff ff50 	bl	80076bc <__b2d>
 800781c:	9b01      	ldr	r3, [sp, #4]
 800781e:	6919      	ldr	r1, [r3, #16]
 8007820:	9b00      	ldr	r3, [sp, #0]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	1ac9      	subs	r1, r1, r3
 8007826:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800782a:	1a9b      	subs	r3, r3, r2
 800782c:	ec5b ab10 	vmov	sl, fp, d0
 8007830:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007834:	2b00      	cmp	r3, #0
 8007836:	bfce      	itee	gt
 8007838:	462a      	movgt	r2, r5
 800783a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800783e:	465a      	movle	r2, fp
 8007840:	462f      	mov	r7, r5
 8007842:	46d9      	mov	r9, fp
 8007844:	bfcc      	ite	gt
 8007846:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800784a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800784e:	464b      	mov	r3, r9
 8007850:	4652      	mov	r2, sl
 8007852:	4620      	mov	r0, r4
 8007854:	4639      	mov	r1, r7
 8007856:	f7f9 f821 	bl	800089c <__aeabi_ddiv>
 800785a:	ec41 0b10 	vmov	d0, r0, r1
 800785e:	b005      	add	sp, #20
 8007860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007864 <__copybits>:
 8007864:	3901      	subs	r1, #1
 8007866:	b570      	push	{r4, r5, r6, lr}
 8007868:	1149      	asrs	r1, r1, #5
 800786a:	6914      	ldr	r4, [r2, #16]
 800786c:	3101      	adds	r1, #1
 800786e:	f102 0314 	add.w	r3, r2, #20
 8007872:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007876:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800787a:	1f05      	subs	r5, r0, #4
 800787c:	42a3      	cmp	r3, r4
 800787e:	d30c      	bcc.n	800789a <__copybits+0x36>
 8007880:	1aa3      	subs	r3, r4, r2
 8007882:	3b11      	subs	r3, #17
 8007884:	f023 0303 	bic.w	r3, r3, #3
 8007888:	3211      	adds	r2, #17
 800788a:	42a2      	cmp	r2, r4
 800788c:	bf88      	it	hi
 800788e:	2300      	movhi	r3, #0
 8007890:	4418      	add	r0, r3
 8007892:	2300      	movs	r3, #0
 8007894:	4288      	cmp	r0, r1
 8007896:	d305      	bcc.n	80078a4 <__copybits+0x40>
 8007898:	bd70      	pop	{r4, r5, r6, pc}
 800789a:	f853 6b04 	ldr.w	r6, [r3], #4
 800789e:	f845 6f04 	str.w	r6, [r5, #4]!
 80078a2:	e7eb      	b.n	800787c <__copybits+0x18>
 80078a4:	f840 3b04 	str.w	r3, [r0], #4
 80078a8:	e7f4      	b.n	8007894 <__copybits+0x30>

080078aa <__any_on>:
 80078aa:	f100 0214 	add.w	r2, r0, #20
 80078ae:	6900      	ldr	r0, [r0, #16]
 80078b0:	114b      	asrs	r3, r1, #5
 80078b2:	4298      	cmp	r0, r3
 80078b4:	b510      	push	{r4, lr}
 80078b6:	db11      	blt.n	80078dc <__any_on+0x32>
 80078b8:	dd0a      	ble.n	80078d0 <__any_on+0x26>
 80078ba:	f011 011f 	ands.w	r1, r1, #31
 80078be:	d007      	beq.n	80078d0 <__any_on+0x26>
 80078c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80078c4:	fa24 f001 	lsr.w	r0, r4, r1
 80078c8:	fa00 f101 	lsl.w	r1, r0, r1
 80078cc:	428c      	cmp	r4, r1
 80078ce:	d10b      	bne.n	80078e8 <__any_on+0x3e>
 80078d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d803      	bhi.n	80078e0 <__any_on+0x36>
 80078d8:	2000      	movs	r0, #0
 80078da:	bd10      	pop	{r4, pc}
 80078dc:	4603      	mov	r3, r0
 80078de:	e7f7      	b.n	80078d0 <__any_on+0x26>
 80078e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80078e4:	2900      	cmp	r1, #0
 80078e6:	d0f5      	beq.n	80078d4 <__any_on+0x2a>
 80078e8:	2001      	movs	r0, #1
 80078ea:	e7f6      	b.n	80078da <__any_on+0x30>

080078ec <sulp>:
 80078ec:	b570      	push	{r4, r5, r6, lr}
 80078ee:	4604      	mov	r4, r0
 80078f0:	460d      	mov	r5, r1
 80078f2:	ec45 4b10 	vmov	d0, r4, r5
 80078f6:	4616      	mov	r6, r2
 80078f8:	f7ff feba 	bl	8007670 <__ulp>
 80078fc:	ec51 0b10 	vmov	r0, r1, d0
 8007900:	b17e      	cbz	r6, 8007922 <sulp+0x36>
 8007902:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007906:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800790a:	2b00      	cmp	r3, #0
 800790c:	dd09      	ble.n	8007922 <sulp+0x36>
 800790e:	051b      	lsls	r3, r3, #20
 8007910:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007914:	2400      	movs	r4, #0
 8007916:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800791a:	4622      	mov	r2, r4
 800791c:	462b      	mov	r3, r5
 800791e:	f7f8 fe93 	bl	8000648 <__aeabi_dmul>
 8007922:	ec41 0b10 	vmov	d0, r0, r1
 8007926:	bd70      	pop	{r4, r5, r6, pc}

08007928 <_strtod_l>:
 8007928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800792c:	b09f      	sub	sp, #124	@ 0x7c
 800792e:	460c      	mov	r4, r1
 8007930:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007932:	2200      	movs	r2, #0
 8007934:	921a      	str	r2, [sp, #104]	@ 0x68
 8007936:	9005      	str	r0, [sp, #20]
 8007938:	f04f 0a00 	mov.w	sl, #0
 800793c:	f04f 0b00 	mov.w	fp, #0
 8007940:	460a      	mov	r2, r1
 8007942:	9219      	str	r2, [sp, #100]	@ 0x64
 8007944:	7811      	ldrb	r1, [r2, #0]
 8007946:	292b      	cmp	r1, #43	@ 0x2b
 8007948:	d04a      	beq.n	80079e0 <_strtod_l+0xb8>
 800794a:	d838      	bhi.n	80079be <_strtod_l+0x96>
 800794c:	290d      	cmp	r1, #13
 800794e:	d832      	bhi.n	80079b6 <_strtod_l+0x8e>
 8007950:	2908      	cmp	r1, #8
 8007952:	d832      	bhi.n	80079ba <_strtod_l+0x92>
 8007954:	2900      	cmp	r1, #0
 8007956:	d03b      	beq.n	80079d0 <_strtod_l+0xa8>
 8007958:	2200      	movs	r2, #0
 800795a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800795c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800795e:	782a      	ldrb	r2, [r5, #0]
 8007960:	2a30      	cmp	r2, #48	@ 0x30
 8007962:	f040 80b3 	bne.w	8007acc <_strtod_l+0x1a4>
 8007966:	786a      	ldrb	r2, [r5, #1]
 8007968:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800796c:	2a58      	cmp	r2, #88	@ 0x58
 800796e:	d16e      	bne.n	8007a4e <_strtod_l+0x126>
 8007970:	9302      	str	r3, [sp, #8]
 8007972:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007974:	9301      	str	r3, [sp, #4]
 8007976:	ab1a      	add	r3, sp, #104	@ 0x68
 8007978:	9300      	str	r3, [sp, #0]
 800797a:	4a8e      	ldr	r2, [pc, #568]	@ (8007bb4 <_strtod_l+0x28c>)
 800797c:	9805      	ldr	r0, [sp, #20]
 800797e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007980:	a919      	add	r1, sp, #100	@ 0x64
 8007982:	f001 fa73 	bl	8008e6c <__gethex>
 8007986:	f010 060f 	ands.w	r6, r0, #15
 800798a:	4604      	mov	r4, r0
 800798c:	d005      	beq.n	800799a <_strtod_l+0x72>
 800798e:	2e06      	cmp	r6, #6
 8007990:	d128      	bne.n	80079e4 <_strtod_l+0xbc>
 8007992:	3501      	adds	r5, #1
 8007994:	2300      	movs	r3, #0
 8007996:	9519      	str	r5, [sp, #100]	@ 0x64
 8007998:	930b      	str	r3, [sp, #44]	@ 0x2c
 800799a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800799c:	2b00      	cmp	r3, #0
 800799e:	f040 858e 	bne.w	80084be <_strtod_l+0xb96>
 80079a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079a4:	b1cb      	cbz	r3, 80079da <_strtod_l+0xb2>
 80079a6:	4652      	mov	r2, sl
 80079a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80079ac:	ec43 2b10 	vmov	d0, r2, r3
 80079b0:	b01f      	add	sp, #124	@ 0x7c
 80079b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b6:	2920      	cmp	r1, #32
 80079b8:	d1ce      	bne.n	8007958 <_strtod_l+0x30>
 80079ba:	3201      	adds	r2, #1
 80079bc:	e7c1      	b.n	8007942 <_strtod_l+0x1a>
 80079be:	292d      	cmp	r1, #45	@ 0x2d
 80079c0:	d1ca      	bne.n	8007958 <_strtod_l+0x30>
 80079c2:	2101      	movs	r1, #1
 80079c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80079c6:	1c51      	adds	r1, r2, #1
 80079c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80079ca:	7852      	ldrb	r2, [r2, #1]
 80079cc:	2a00      	cmp	r2, #0
 80079ce:	d1c5      	bne.n	800795c <_strtod_l+0x34>
 80079d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80079d2:	9419      	str	r4, [sp, #100]	@ 0x64
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f040 8570 	bne.w	80084ba <_strtod_l+0xb92>
 80079da:	4652      	mov	r2, sl
 80079dc:	465b      	mov	r3, fp
 80079de:	e7e5      	b.n	80079ac <_strtod_l+0x84>
 80079e0:	2100      	movs	r1, #0
 80079e2:	e7ef      	b.n	80079c4 <_strtod_l+0x9c>
 80079e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80079e6:	b13a      	cbz	r2, 80079f8 <_strtod_l+0xd0>
 80079e8:	2135      	movs	r1, #53	@ 0x35
 80079ea:	a81c      	add	r0, sp, #112	@ 0x70
 80079ec:	f7ff ff3a 	bl	8007864 <__copybits>
 80079f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80079f2:	9805      	ldr	r0, [sp, #20]
 80079f4:	f7ff fb08 	bl	8007008 <_Bfree>
 80079f8:	3e01      	subs	r6, #1
 80079fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80079fc:	2e04      	cmp	r6, #4
 80079fe:	d806      	bhi.n	8007a0e <_strtod_l+0xe6>
 8007a00:	e8df f006 	tbb	[pc, r6]
 8007a04:	201d0314 	.word	0x201d0314
 8007a08:	14          	.byte	0x14
 8007a09:	00          	.byte	0x00
 8007a0a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007a0e:	05e1      	lsls	r1, r4, #23
 8007a10:	bf48      	it	mi
 8007a12:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007a16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007a1a:	0d1b      	lsrs	r3, r3, #20
 8007a1c:	051b      	lsls	r3, r3, #20
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1bb      	bne.n	800799a <_strtod_l+0x72>
 8007a22:	f7fe fb2f 	bl	8006084 <__errno>
 8007a26:	2322      	movs	r3, #34	@ 0x22
 8007a28:	6003      	str	r3, [r0, #0]
 8007a2a:	e7b6      	b.n	800799a <_strtod_l+0x72>
 8007a2c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007a30:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007a34:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007a38:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007a3c:	e7e7      	b.n	8007a0e <_strtod_l+0xe6>
 8007a3e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007bbc <_strtod_l+0x294>
 8007a42:	e7e4      	b.n	8007a0e <_strtod_l+0xe6>
 8007a44:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007a48:	f04f 3aff 	mov.w	sl, #4294967295
 8007a4c:	e7df      	b.n	8007a0e <_strtod_l+0xe6>
 8007a4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a50:	1c5a      	adds	r2, r3, #1
 8007a52:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a54:	785b      	ldrb	r3, [r3, #1]
 8007a56:	2b30      	cmp	r3, #48	@ 0x30
 8007a58:	d0f9      	beq.n	8007a4e <_strtod_l+0x126>
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d09d      	beq.n	800799a <_strtod_l+0x72>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a64:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a66:	2300      	movs	r3, #0
 8007a68:	9308      	str	r3, [sp, #32]
 8007a6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a6c:	461f      	mov	r7, r3
 8007a6e:	220a      	movs	r2, #10
 8007a70:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007a72:	7805      	ldrb	r5, [r0, #0]
 8007a74:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007a78:	b2d9      	uxtb	r1, r3
 8007a7a:	2909      	cmp	r1, #9
 8007a7c:	d928      	bls.n	8007ad0 <_strtod_l+0x1a8>
 8007a7e:	494e      	ldr	r1, [pc, #312]	@ (8007bb8 <_strtod_l+0x290>)
 8007a80:	2201      	movs	r2, #1
 8007a82:	f001 f8fd 	bl	8008c80 <strncmp>
 8007a86:	2800      	cmp	r0, #0
 8007a88:	d032      	beq.n	8007af0 <_strtod_l+0x1c8>
 8007a8a:	2000      	movs	r0, #0
 8007a8c:	462a      	mov	r2, r5
 8007a8e:	4681      	mov	r9, r0
 8007a90:	463d      	mov	r5, r7
 8007a92:	4603      	mov	r3, r0
 8007a94:	2a65      	cmp	r2, #101	@ 0x65
 8007a96:	d001      	beq.n	8007a9c <_strtod_l+0x174>
 8007a98:	2a45      	cmp	r2, #69	@ 0x45
 8007a9a:	d114      	bne.n	8007ac6 <_strtod_l+0x19e>
 8007a9c:	b91d      	cbnz	r5, 8007aa6 <_strtod_l+0x17e>
 8007a9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007aa0:	4302      	orrs	r2, r0
 8007aa2:	d095      	beq.n	80079d0 <_strtod_l+0xa8>
 8007aa4:	2500      	movs	r5, #0
 8007aa6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007aa8:	1c62      	adds	r2, r4, #1
 8007aaa:	9219      	str	r2, [sp, #100]	@ 0x64
 8007aac:	7862      	ldrb	r2, [r4, #1]
 8007aae:	2a2b      	cmp	r2, #43	@ 0x2b
 8007ab0:	d077      	beq.n	8007ba2 <_strtod_l+0x27a>
 8007ab2:	2a2d      	cmp	r2, #45	@ 0x2d
 8007ab4:	d07b      	beq.n	8007bae <_strtod_l+0x286>
 8007ab6:	f04f 0c00 	mov.w	ip, #0
 8007aba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007abe:	2909      	cmp	r1, #9
 8007ac0:	f240 8082 	bls.w	8007bc8 <_strtod_l+0x2a0>
 8007ac4:	9419      	str	r4, [sp, #100]	@ 0x64
 8007ac6:	f04f 0800 	mov.w	r8, #0
 8007aca:	e0a2      	b.n	8007c12 <_strtod_l+0x2ea>
 8007acc:	2300      	movs	r3, #0
 8007ace:	e7c7      	b.n	8007a60 <_strtod_l+0x138>
 8007ad0:	2f08      	cmp	r7, #8
 8007ad2:	bfd5      	itete	le
 8007ad4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007ad6:	9908      	ldrgt	r1, [sp, #32]
 8007ad8:	fb02 3301 	mlale	r3, r2, r1, r3
 8007adc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007ae0:	f100 0001 	add.w	r0, r0, #1
 8007ae4:	bfd4      	ite	le
 8007ae6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007ae8:	9308      	strgt	r3, [sp, #32]
 8007aea:	3701      	adds	r7, #1
 8007aec:	9019      	str	r0, [sp, #100]	@ 0x64
 8007aee:	e7bf      	b.n	8007a70 <_strtod_l+0x148>
 8007af0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007af2:	1c5a      	adds	r2, r3, #1
 8007af4:	9219      	str	r2, [sp, #100]	@ 0x64
 8007af6:	785a      	ldrb	r2, [r3, #1]
 8007af8:	b37f      	cbz	r7, 8007b5a <_strtod_l+0x232>
 8007afa:	4681      	mov	r9, r0
 8007afc:	463d      	mov	r5, r7
 8007afe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007b02:	2b09      	cmp	r3, #9
 8007b04:	d912      	bls.n	8007b2c <_strtod_l+0x204>
 8007b06:	2301      	movs	r3, #1
 8007b08:	e7c4      	b.n	8007a94 <_strtod_l+0x16c>
 8007b0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b0c:	1c5a      	adds	r2, r3, #1
 8007b0e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007b10:	785a      	ldrb	r2, [r3, #1]
 8007b12:	3001      	adds	r0, #1
 8007b14:	2a30      	cmp	r2, #48	@ 0x30
 8007b16:	d0f8      	beq.n	8007b0a <_strtod_l+0x1e2>
 8007b18:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007b1c:	2b08      	cmp	r3, #8
 8007b1e:	f200 84d3 	bhi.w	80084c8 <_strtod_l+0xba0>
 8007b22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b24:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b26:	4681      	mov	r9, r0
 8007b28:	2000      	movs	r0, #0
 8007b2a:	4605      	mov	r5, r0
 8007b2c:	3a30      	subs	r2, #48	@ 0x30
 8007b2e:	f100 0301 	add.w	r3, r0, #1
 8007b32:	d02a      	beq.n	8007b8a <_strtod_l+0x262>
 8007b34:	4499      	add	r9, r3
 8007b36:	eb00 0c05 	add.w	ip, r0, r5
 8007b3a:	462b      	mov	r3, r5
 8007b3c:	210a      	movs	r1, #10
 8007b3e:	4563      	cmp	r3, ip
 8007b40:	d10d      	bne.n	8007b5e <_strtod_l+0x236>
 8007b42:	1c69      	adds	r1, r5, #1
 8007b44:	4401      	add	r1, r0
 8007b46:	4428      	add	r0, r5
 8007b48:	2808      	cmp	r0, #8
 8007b4a:	dc16      	bgt.n	8007b7a <_strtod_l+0x252>
 8007b4c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007b4e:	230a      	movs	r3, #10
 8007b50:	fb03 2300 	mla	r3, r3, r0, r2
 8007b54:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b56:	2300      	movs	r3, #0
 8007b58:	e018      	b.n	8007b8c <_strtod_l+0x264>
 8007b5a:	4638      	mov	r0, r7
 8007b5c:	e7da      	b.n	8007b14 <_strtod_l+0x1ec>
 8007b5e:	2b08      	cmp	r3, #8
 8007b60:	f103 0301 	add.w	r3, r3, #1
 8007b64:	dc03      	bgt.n	8007b6e <_strtod_l+0x246>
 8007b66:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007b68:	434e      	muls	r6, r1
 8007b6a:	960a      	str	r6, [sp, #40]	@ 0x28
 8007b6c:	e7e7      	b.n	8007b3e <_strtod_l+0x216>
 8007b6e:	2b10      	cmp	r3, #16
 8007b70:	bfde      	ittt	le
 8007b72:	9e08      	ldrle	r6, [sp, #32]
 8007b74:	434e      	mulle	r6, r1
 8007b76:	9608      	strle	r6, [sp, #32]
 8007b78:	e7e1      	b.n	8007b3e <_strtod_l+0x216>
 8007b7a:	280f      	cmp	r0, #15
 8007b7c:	dceb      	bgt.n	8007b56 <_strtod_l+0x22e>
 8007b7e:	9808      	ldr	r0, [sp, #32]
 8007b80:	230a      	movs	r3, #10
 8007b82:	fb03 2300 	mla	r3, r3, r0, r2
 8007b86:	9308      	str	r3, [sp, #32]
 8007b88:	e7e5      	b.n	8007b56 <_strtod_l+0x22e>
 8007b8a:	4629      	mov	r1, r5
 8007b8c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b8e:	1c50      	adds	r0, r2, #1
 8007b90:	9019      	str	r0, [sp, #100]	@ 0x64
 8007b92:	7852      	ldrb	r2, [r2, #1]
 8007b94:	4618      	mov	r0, r3
 8007b96:	460d      	mov	r5, r1
 8007b98:	e7b1      	b.n	8007afe <_strtod_l+0x1d6>
 8007b9a:	f04f 0900 	mov.w	r9, #0
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e77d      	b.n	8007a9e <_strtod_l+0x176>
 8007ba2:	f04f 0c00 	mov.w	ip, #0
 8007ba6:	1ca2      	adds	r2, r4, #2
 8007ba8:	9219      	str	r2, [sp, #100]	@ 0x64
 8007baa:	78a2      	ldrb	r2, [r4, #2]
 8007bac:	e785      	b.n	8007aba <_strtod_l+0x192>
 8007bae:	f04f 0c01 	mov.w	ip, #1
 8007bb2:	e7f8      	b.n	8007ba6 <_strtod_l+0x27e>
 8007bb4:	0800a830 	.word	0x0800a830
 8007bb8:	0800a818 	.word	0x0800a818
 8007bbc:	7ff00000 	.word	0x7ff00000
 8007bc0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007bc2:	1c51      	adds	r1, r2, #1
 8007bc4:	9119      	str	r1, [sp, #100]	@ 0x64
 8007bc6:	7852      	ldrb	r2, [r2, #1]
 8007bc8:	2a30      	cmp	r2, #48	@ 0x30
 8007bca:	d0f9      	beq.n	8007bc0 <_strtod_l+0x298>
 8007bcc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007bd0:	2908      	cmp	r1, #8
 8007bd2:	f63f af78 	bhi.w	8007ac6 <_strtod_l+0x19e>
 8007bd6:	3a30      	subs	r2, #48	@ 0x30
 8007bd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007bda:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007bdc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007bde:	f04f 080a 	mov.w	r8, #10
 8007be2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007be4:	1c56      	adds	r6, r2, #1
 8007be6:	9619      	str	r6, [sp, #100]	@ 0x64
 8007be8:	7852      	ldrb	r2, [r2, #1]
 8007bea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007bee:	f1be 0f09 	cmp.w	lr, #9
 8007bf2:	d939      	bls.n	8007c68 <_strtod_l+0x340>
 8007bf4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007bf6:	1a76      	subs	r6, r6, r1
 8007bf8:	2e08      	cmp	r6, #8
 8007bfa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007bfe:	dc03      	bgt.n	8007c08 <_strtod_l+0x2e0>
 8007c00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007c02:	4588      	cmp	r8, r1
 8007c04:	bfa8      	it	ge
 8007c06:	4688      	movge	r8, r1
 8007c08:	f1bc 0f00 	cmp.w	ip, #0
 8007c0c:	d001      	beq.n	8007c12 <_strtod_l+0x2ea>
 8007c0e:	f1c8 0800 	rsb	r8, r8, #0
 8007c12:	2d00      	cmp	r5, #0
 8007c14:	d14e      	bne.n	8007cb4 <_strtod_l+0x38c>
 8007c16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c18:	4308      	orrs	r0, r1
 8007c1a:	f47f aebe 	bne.w	800799a <_strtod_l+0x72>
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f47f aed6 	bne.w	80079d0 <_strtod_l+0xa8>
 8007c24:	2a69      	cmp	r2, #105	@ 0x69
 8007c26:	d028      	beq.n	8007c7a <_strtod_l+0x352>
 8007c28:	dc25      	bgt.n	8007c76 <_strtod_l+0x34e>
 8007c2a:	2a49      	cmp	r2, #73	@ 0x49
 8007c2c:	d025      	beq.n	8007c7a <_strtod_l+0x352>
 8007c2e:	2a4e      	cmp	r2, #78	@ 0x4e
 8007c30:	f47f aece 	bne.w	80079d0 <_strtod_l+0xa8>
 8007c34:	499b      	ldr	r1, [pc, #620]	@ (8007ea4 <_strtod_l+0x57c>)
 8007c36:	a819      	add	r0, sp, #100	@ 0x64
 8007c38:	f001 fb3a 	bl	80092b0 <__match>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	f43f aec7 	beq.w	80079d0 <_strtod_l+0xa8>
 8007c42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	2b28      	cmp	r3, #40	@ 0x28
 8007c48:	d12e      	bne.n	8007ca8 <_strtod_l+0x380>
 8007c4a:	4997      	ldr	r1, [pc, #604]	@ (8007ea8 <_strtod_l+0x580>)
 8007c4c:	aa1c      	add	r2, sp, #112	@ 0x70
 8007c4e:	a819      	add	r0, sp, #100	@ 0x64
 8007c50:	f001 fb42 	bl	80092d8 <__hexnan>
 8007c54:	2805      	cmp	r0, #5
 8007c56:	d127      	bne.n	8007ca8 <_strtod_l+0x380>
 8007c58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007c5a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007c5e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007c62:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007c66:	e698      	b.n	800799a <_strtod_l+0x72>
 8007c68:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007c6a:	fb08 2101 	mla	r1, r8, r1, r2
 8007c6e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007c72:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c74:	e7b5      	b.n	8007be2 <_strtod_l+0x2ba>
 8007c76:	2a6e      	cmp	r2, #110	@ 0x6e
 8007c78:	e7da      	b.n	8007c30 <_strtod_l+0x308>
 8007c7a:	498c      	ldr	r1, [pc, #560]	@ (8007eac <_strtod_l+0x584>)
 8007c7c:	a819      	add	r0, sp, #100	@ 0x64
 8007c7e:	f001 fb17 	bl	80092b0 <__match>
 8007c82:	2800      	cmp	r0, #0
 8007c84:	f43f aea4 	beq.w	80079d0 <_strtod_l+0xa8>
 8007c88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c8a:	4989      	ldr	r1, [pc, #548]	@ (8007eb0 <_strtod_l+0x588>)
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	a819      	add	r0, sp, #100	@ 0x64
 8007c90:	9319      	str	r3, [sp, #100]	@ 0x64
 8007c92:	f001 fb0d 	bl	80092b0 <__match>
 8007c96:	b910      	cbnz	r0, 8007c9e <_strtod_l+0x376>
 8007c98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	9319      	str	r3, [sp, #100]	@ 0x64
 8007c9e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007ec0 <_strtod_l+0x598>
 8007ca2:	f04f 0a00 	mov.w	sl, #0
 8007ca6:	e678      	b.n	800799a <_strtod_l+0x72>
 8007ca8:	4882      	ldr	r0, [pc, #520]	@ (8007eb4 <_strtod_l+0x58c>)
 8007caa:	f001 f83d 	bl	8008d28 <nan>
 8007cae:	ec5b ab10 	vmov	sl, fp, d0
 8007cb2:	e672      	b.n	800799a <_strtod_l+0x72>
 8007cb4:	eba8 0309 	sub.w	r3, r8, r9
 8007cb8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007cba:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cbc:	2f00      	cmp	r7, #0
 8007cbe:	bf08      	it	eq
 8007cc0:	462f      	moveq	r7, r5
 8007cc2:	2d10      	cmp	r5, #16
 8007cc4:	462c      	mov	r4, r5
 8007cc6:	bfa8      	it	ge
 8007cc8:	2410      	movge	r4, #16
 8007cca:	f7f8 fc43 	bl	8000554 <__aeabi_ui2d>
 8007cce:	2d09      	cmp	r5, #9
 8007cd0:	4682      	mov	sl, r0
 8007cd2:	468b      	mov	fp, r1
 8007cd4:	dc13      	bgt.n	8007cfe <_strtod_l+0x3d6>
 8007cd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f43f ae5e 	beq.w	800799a <_strtod_l+0x72>
 8007cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ce0:	dd78      	ble.n	8007dd4 <_strtod_l+0x4ac>
 8007ce2:	2b16      	cmp	r3, #22
 8007ce4:	dc5f      	bgt.n	8007da6 <_strtod_l+0x47e>
 8007ce6:	4974      	ldr	r1, [pc, #464]	@ (8007eb8 <_strtod_l+0x590>)
 8007ce8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007cec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cf0:	4652      	mov	r2, sl
 8007cf2:	465b      	mov	r3, fp
 8007cf4:	f7f8 fca8 	bl	8000648 <__aeabi_dmul>
 8007cf8:	4682      	mov	sl, r0
 8007cfa:	468b      	mov	fp, r1
 8007cfc:	e64d      	b.n	800799a <_strtod_l+0x72>
 8007cfe:	4b6e      	ldr	r3, [pc, #440]	@ (8007eb8 <_strtod_l+0x590>)
 8007d00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007d04:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007d08:	f7f8 fc9e 	bl	8000648 <__aeabi_dmul>
 8007d0c:	4682      	mov	sl, r0
 8007d0e:	9808      	ldr	r0, [sp, #32]
 8007d10:	468b      	mov	fp, r1
 8007d12:	f7f8 fc1f 	bl	8000554 <__aeabi_ui2d>
 8007d16:	4602      	mov	r2, r0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	4650      	mov	r0, sl
 8007d1c:	4659      	mov	r1, fp
 8007d1e:	f7f8 fadd 	bl	80002dc <__adddf3>
 8007d22:	2d0f      	cmp	r5, #15
 8007d24:	4682      	mov	sl, r0
 8007d26:	468b      	mov	fp, r1
 8007d28:	ddd5      	ble.n	8007cd6 <_strtod_l+0x3ae>
 8007d2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d2c:	1b2c      	subs	r4, r5, r4
 8007d2e:	441c      	add	r4, r3
 8007d30:	2c00      	cmp	r4, #0
 8007d32:	f340 8096 	ble.w	8007e62 <_strtod_l+0x53a>
 8007d36:	f014 030f 	ands.w	r3, r4, #15
 8007d3a:	d00a      	beq.n	8007d52 <_strtod_l+0x42a>
 8007d3c:	495e      	ldr	r1, [pc, #376]	@ (8007eb8 <_strtod_l+0x590>)
 8007d3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007d42:	4652      	mov	r2, sl
 8007d44:	465b      	mov	r3, fp
 8007d46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d4a:	f7f8 fc7d 	bl	8000648 <__aeabi_dmul>
 8007d4e:	4682      	mov	sl, r0
 8007d50:	468b      	mov	fp, r1
 8007d52:	f034 040f 	bics.w	r4, r4, #15
 8007d56:	d073      	beq.n	8007e40 <_strtod_l+0x518>
 8007d58:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007d5c:	dd48      	ble.n	8007df0 <_strtod_l+0x4c8>
 8007d5e:	2400      	movs	r4, #0
 8007d60:	46a0      	mov	r8, r4
 8007d62:	940a      	str	r4, [sp, #40]	@ 0x28
 8007d64:	46a1      	mov	r9, r4
 8007d66:	9a05      	ldr	r2, [sp, #20]
 8007d68:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007ec0 <_strtod_l+0x598>
 8007d6c:	2322      	movs	r3, #34	@ 0x22
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	f04f 0a00 	mov.w	sl, #0
 8007d74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f43f ae0f 	beq.w	800799a <_strtod_l+0x72>
 8007d7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d7e:	9805      	ldr	r0, [sp, #20]
 8007d80:	f7ff f942 	bl	8007008 <_Bfree>
 8007d84:	9805      	ldr	r0, [sp, #20]
 8007d86:	4649      	mov	r1, r9
 8007d88:	f7ff f93e 	bl	8007008 <_Bfree>
 8007d8c:	9805      	ldr	r0, [sp, #20]
 8007d8e:	4641      	mov	r1, r8
 8007d90:	f7ff f93a 	bl	8007008 <_Bfree>
 8007d94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d96:	9805      	ldr	r0, [sp, #20]
 8007d98:	f7ff f936 	bl	8007008 <_Bfree>
 8007d9c:	9805      	ldr	r0, [sp, #20]
 8007d9e:	4621      	mov	r1, r4
 8007da0:	f7ff f932 	bl	8007008 <_Bfree>
 8007da4:	e5f9      	b.n	800799a <_strtod_l+0x72>
 8007da6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007da8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007dac:	4293      	cmp	r3, r2
 8007dae:	dbbc      	blt.n	8007d2a <_strtod_l+0x402>
 8007db0:	4c41      	ldr	r4, [pc, #260]	@ (8007eb8 <_strtod_l+0x590>)
 8007db2:	f1c5 050f 	rsb	r5, r5, #15
 8007db6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007dba:	4652      	mov	r2, sl
 8007dbc:	465b      	mov	r3, fp
 8007dbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dc2:	f7f8 fc41 	bl	8000648 <__aeabi_dmul>
 8007dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dc8:	1b5d      	subs	r5, r3, r5
 8007dca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007dce:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007dd2:	e78f      	b.n	8007cf4 <_strtod_l+0x3cc>
 8007dd4:	3316      	adds	r3, #22
 8007dd6:	dba8      	blt.n	8007d2a <_strtod_l+0x402>
 8007dd8:	4b37      	ldr	r3, [pc, #220]	@ (8007eb8 <_strtod_l+0x590>)
 8007dda:	eba9 0808 	sub.w	r8, r9, r8
 8007dde:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007de2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007de6:	4650      	mov	r0, sl
 8007de8:	4659      	mov	r1, fp
 8007dea:	f7f8 fd57 	bl	800089c <__aeabi_ddiv>
 8007dee:	e783      	b.n	8007cf8 <_strtod_l+0x3d0>
 8007df0:	4b32      	ldr	r3, [pc, #200]	@ (8007ebc <_strtod_l+0x594>)
 8007df2:	9308      	str	r3, [sp, #32]
 8007df4:	2300      	movs	r3, #0
 8007df6:	1124      	asrs	r4, r4, #4
 8007df8:	4650      	mov	r0, sl
 8007dfa:	4659      	mov	r1, fp
 8007dfc:	461e      	mov	r6, r3
 8007dfe:	2c01      	cmp	r4, #1
 8007e00:	dc21      	bgt.n	8007e46 <_strtod_l+0x51e>
 8007e02:	b10b      	cbz	r3, 8007e08 <_strtod_l+0x4e0>
 8007e04:	4682      	mov	sl, r0
 8007e06:	468b      	mov	fp, r1
 8007e08:	492c      	ldr	r1, [pc, #176]	@ (8007ebc <_strtod_l+0x594>)
 8007e0a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007e0e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007e12:	4652      	mov	r2, sl
 8007e14:	465b      	mov	r3, fp
 8007e16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e1a:	f7f8 fc15 	bl	8000648 <__aeabi_dmul>
 8007e1e:	4b28      	ldr	r3, [pc, #160]	@ (8007ec0 <_strtod_l+0x598>)
 8007e20:	460a      	mov	r2, r1
 8007e22:	400b      	ands	r3, r1
 8007e24:	4927      	ldr	r1, [pc, #156]	@ (8007ec4 <_strtod_l+0x59c>)
 8007e26:	428b      	cmp	r3, r1
 8007e28:	4682      	mov	sl, r0
 8007e2a:	d898      	bhi.n	8007d5e <_strtod_l+0x436>
 8007e2c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007e30:	428b      	cmp	r3, r1
 8007e32:	bf86      	itte	hi
 8007e34:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007ec8 <_strtod_l+0x5a0>
 8007e38:	f04f 3aff 	movhi.w	sl, #4294967295
 8007e3c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007e40:	2300      	movs	r3, #0
 8007e42:	9308      	str	r3, [sp, #32]
 8007e44:	e07a      	b.n	8007f3c <_strtod_l+0x614>
 8007e46:	07e2      	lsls	r2, r4, #31
 8007e48:	d505      	bpl.n	8007e56 <_strtod_l+0x52e>
 8007e4a:	9b08      	ldr	r3, [sp, #32]
 8007e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e50:	f7f8 fbfa 	bl	8000648 <__aeabi_dmul>
 8007e54:	2301      	movs	r3, #1
 8007e56:	9a08      	ldr	r2, [sp, #32]
 8007e58:	3208      	adds	r2, #8
 8007e5a:	3601      	adds	r6, #1
 8007e5c:	1064      	asrs	r4, r4, #1
 8007e5e:	9208      	str	r2, [sp, #32]
 8007e60:	e7cd      	b.n	8007dfe <_strtod_l+0x4d6>
 8007e62:	d0ed      	beq.n	8007e40 <_strtod_l+0x518>
 8007e64:	4264      	negs	r4, r4
 8007e66:	f014 020f 	ands.w	r2, r4, #15
 8007e6a:	d00a      	beq.n	8007e82 <_strtod_l+0x55a>
 8007e6c:	4b12      	ldr	r3, [pc, #72]	@ (8007eb8 <_strtod_l+0x590>)
 8007e6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e72:	4650      	mov	r0, sl
 8007e74:	4659      	mov	r1, fp
 8007e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7a:	f7f8 fd0f 	bl	800089c <__aeabi_ddiv>
 8007e7e:	4682      	mov	sl, r0
 8007e80:	468b      	mov	fp, r1
 8007e82:	1124      	asrs	r4, r4, #4
 8007e84:	d0dc      	beq.n	8007e40 <_strtod_l+0x518>
 8007e86:	2c1f      	cmp	r4, #31
 8007e88:	dd20      	ble.n	8007ecc <_strtod_l+0x5a4>
 8007e8a:	2400      	movs	r4, #0
 8007e8c:	46a0      	mov	r8, r4
 8007e8e:	940a      	str	r4, [sp, #40]	@ 0x28
 8007e90:	46a1      	mov	r9, r4
 8007e92:	9a05      	ldr	r2, [sp, #20]
 8007e94:	2322      	movs	r3, #34	@ 0x22
 8007e96:	f04f 0a00 	mov.w	sl, #0
 8007e9a:	f04f 0b00 	mov.w	fp, #0
 8007e9e:	6013      	str	r3, [r2, #0]
 8007ea0:	e768      	b.n	8007d74 <_strtod_l+0x44c>
 8007ea2:	bf00      	nop
 8007ea4:	0800a606 	.word	0x0800a606
 8007ea8:	0800a81c 	.word	0x0800a81c
 8007eac:	0800a5fe 	.word	0x0800a5fe
 8007eb0:	0800a635 	.word	0x0800a635
 8007eb4:	0800a8c4 	.word	0x0800a8c4
 8007eb8:	0800a750 	.word	0x0800a750
 8007ebc:	0800a728 	.word	0x0800a728
 8007ec0:	7ff00000 	.word	0x7ff00000
 8007ec4:	7ca00000 	.word	0x7ca00000
 8007ec8:	7fefffff 	.word	0x7fefffff
 8007ecc:	f014 0310 	ands.w	r3, r4, #16
 8007ed0:	bf18      	it	ne
 8007ed2:	236a      	movne	r3, #106	@ 0x6a
 8007ed4:	4ea9      	ldr	r6, [pc, #676]	@ (800817c <_strtod_l+0x854>)
 8007ed6:	9308      	str	r3, [sp, #32]
 8007ed8:	4650      	mov	r0, sl
 8007eda:	4659      	mov	r1, fp
 8007edc:	2300      	movs	r3, #0
 8007ede:	07e2      	lsls	r2, r4, #31
 8007ee0:	d504      	bpl.n	8007eec <_strtod_l+0x5c4>
 8007ee2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ee6:	f7f8 fbaf 	bl	8000648 <__aeabi_dmul>
 8007eea:	2301      	movs	r3, #1
 8007eec:	1064      	asrs	r4, r4, #1
 8007eee:	f106 0608 	add.w	r6, r6, #8
 8007ef2:	d1f4      	bne.n	8007ede <_strtod_l+0x5b6>
 8007ef4:	b10b      	cbz	r3, 8007efa <_strtod_l+0x5d2>
 8007ef6:	4682      	mov	sl, r0
 8007ef8:	468b      	mov	fp, r1
 8007efa:	9b08      	ldr	r3, [sp, #32]
 8007efc:	b1b3      	cbz	r3, 8007f2c <_strtod_l+0x604>
 8007efe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007f02:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	4659      	mov	r1, fp
 8007f0a:	dd0f      	ble.n	8007f2c <_strtod_l+0x604>
 8007f0c:	2b1f      	cmp	r3, #31
 8007f0e:	dd55      	ble.n	8007fbc <_strtod_l+0x694>
 8007f10:	2b34      	cmp	r3, #52	@ 0x34
 8007f12:	bfde      	ittt	le
 8007f14:	f04f 33ff 	movle.w	r3, #4294967295
 8007f18:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007f1c:	4093      	lslle	r3, r2
 8007f1e:	f04f 0a00 	mov.w	sl, #0
 8007f22:	bfcc      	ite	gt
 8007f24:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007f28:	ea03 0b01 	andle.w	fp, r3, r1
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	2300      	movs	r3, #0
 8007f30:	4650      	mov	r0, sl
 8007f32:	4659      	mov	r1, fp
 8007f34:	f7f8 fdf0 	bl	8000b18 <__aeabi_dcmpeq>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	d1a6      	bne.n	8007e8a <_strtod_l+0x562>
 8007f3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007f42:	9805      	ldr	r0, [sp, #20]
 8007f44:	462b      	mov	r3, r5
 8007f46:	463a      	mov	r2, r7
 8007f48:	f7ff f8c6 	bl	80070d8 <__s2b>
 8007f4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	f43f af05 	beq.w	8007d5e <_strtod_l+0x436>
 8007f54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f56:	2a00      	cmp	r2, #0
 8007f58:	eba9 0308 	sub.w	r3, r9, r8
 8007f5c:	bfa8      	it	ge
 8007f5e:	2300      	movge	r3, #0
 8007f60:	9312      	str	r3, [sp, #72]	@ 0x48
 8007f62:	2400      	movs	r4, #0
 8007f64:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007f68:	9316      	str	r3, [sp, #88]	@ 0x58
 8007f6a:	46a0      	mov	r8, r4
 8007f6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f6e:	9805      	ldr	r0, [sp, #20]
 8007f70:	6859      	ldr	r1, [r3, #4]
 8007f72:	f7ff f809 	bl	8006f88 <_Balloc>
 8007f76:	4681      	mov	r9, r0
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	f43f aef4 	beq.w	8007d66 <_strtod_l+0x43e>
 8007f7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f80:	691a      	ldr	r2, [r3, #16]
 8007f82:	3202      	adds	r2, #2
 8007f84:	f103 010c 	add.w	r1, r3, #12
 8007f88:	0092      	lsls	r2, r2, #2
 8007f8a:	300c      	adds	r0, #12
 8007f8c:	f000 febc 	bl	8008d08 <memcpy>
 8007f90:	ec4b ab10 	vmov	d0, sl, fp
 8007f94:	9805      	ldr	r0, [sp, #20]
 8007f96:	aa1c      	add	r2, sp, #112	@ 0x70
 8007f98:	a91b      	add	r1, sp, #108	@ 0x6c
 8007f9a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007f9e:	f7ff fbd7 	bl	8007750 <__d2b>
 8007fa2:	901a      	str	r0, [sp, #104]	@ 0x68
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	f43f aede 	beq.w	8007d66 <_strtod_l+0x43e>
 8007faa:	9805      	ldr	r0, [sp, #20]
 8007fac:	2101      	movs	r1, #1
 8007fae:	f7ff f929 	bl	8007204 <__i2b>
 8007fb2:	4680      	mov	r8, r0
 8007fb4:	b948      	cbnz	r0, 8007fca <_strtod_l+0x6a2>
 8007fb6:	f04f 0800 	mov.w	r8, #0
 8007fba:	e6d4      	b.n	8007d66 <_strtod_l+0x43e>
 8007fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc4:	ea03 0a0a 	and.w	sl, r3, sl
 8007fc8:	e7b0      	b.n	8007f2c <_strtod_l+0x604>
 8007fca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007fcc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007fce:	2d00      	cmp	r5, #0
 8007fd0:	bfab      	itete	ge
 8007fd2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007fd4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007fd6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007fd8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007fda:	bfac      	ite	ge
 8007fdc:	18ef      	addge	r7, r5, r3
 8007fde:	1b5e      	sublt	r6, r3, r5
 8007fe0:	9b08      	ldr	r3, [sp, #32]
 8007fe2:	1aed      	subs	r5, r5, r3
 8007fe4:	4415      	add	r5, r2
 8007fe6:	4b66      	ldr	r3, [pc, #408]	@ (8008180 <_strtod_l+0x858>)
 8007fe8:	3d01      	subs	r5, #1
 8007fea:	429d      	cmp	r5, r3
 8007fec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007ff0:	da50      	bge.n	8008094 <_strtod_l+0x76c>
 8007ff2:	1b5b      	subs	r3, r3, r5
 8007ff4:	2b1f      	cmp	r3, #31
 8007ff6:	eba2 0203 	sub.w	r2, r2, r3
 8007ffa:	f04f 0101 	mov.w	r1, #1
 8007ffe:	dc3d      	bgt.n	800807c <_strtod_l+0x754>
 8008000:	fa01 f303 	lsl.w	r3, r1, r3
 8008004:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008006:	2300      	movs	r3, #0
 8008008:	9310      	str	r3, [sp, #64]	@ 0x40
 800800a:	18bd      	adds	r5, r7, r2
 800800c:	9b08      	ldr	r3, [sp, #32]
 800800e:	42af      	cmp	r7, r5
 8008010:	4416      	add	r6, r2
 8008012:	441e      	add	r6, r3
 8008014:	463b      	mov	r3, r7
 8008016:	bfa8      	it	ge
 8008018:	462b      	movge	r3, r5
 800801a:	42b3      	cmp	r3, r6
 800801c:	bfa8      	it	ge
 800801e:	4633      	movge	r3, r6
 8008020:	2b00      	cmp	r3, #0
 8008022:	bfc2      	ittt	gt
 8008024:	1aed      	subgt	r5, r5, r3
 8008026:	1af6      	subgt	r6, r6, r3
 8008028:	1aff      	subgt	r7, r7, r3
 800802a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800802c:	2b00      	cmp	r3, #0
 800802e:	dd16      	ble.n	800805e <_strtod_l+0x736>
 8008030:	4641      	mov	r1, r8
 8008032:	9805      	ldr	r0, [sp, #20]
 8008034:	461a      	mov	r2, r3
 8008036:	f7ff f9a5 	bl	8007384 <__pow5mult>
 800803a:	4680      	mov	r8, r0
 800803c:	2800      	cmp	r0, #0
 800803e:	d0ba      	beq.n	8007fb6 <_strtod_l+0x68e>
 8008040:	4601      	mov	r1, r0
 8008042:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008044:	9805      	ldr	r0, [sp, #20]
 8008046:	f7ff f8f3 	bl	8007230 <__multiply>
 800804a:	900e      	str	r0, [sp, #56]	@ 0x38
 800804c:	2800      	cmp	r0, #0
 800804e:	f43f ae8a 	beq.w	8007d66 <_strtod_l+0x43e>
 8008052:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008054:	9805      	ldr	r0, [sp, #20]
 8008056:	f7fe ffd7 	bl	8007008 <_Bfree>
 800805a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800805c:	931a      	str	r3, [sp, #104]	@ 0x68
 800805e:	2d00      	cmp	r5, #0
 8008060:	dc1d      	bgt.n	800809e <_strtod_l+0x776>
 8008062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008064:	2b00      	cmp	r3, #0
 8008066:	dd23      	ble.n	80080b0 <_strtod_l+0x788>
 8008068:	4649      	mov	r1, r9
 800806a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800806c:	9805      	ldr	r0, [sp, #20]
 800806e:	f7ff f989 	bl	8007384 <__pow5mult>
 8008072:	4681      	mov	r9, r0
 8008074:	b9e0      	cbnz	r0, 80080b0 <_strtod_l+0x788>
 8008076:	f04f 0900 	mov.w	r9, #0
 800807a:	e674      	b.n	8007d66 <_strtod_l+0x43e>
 800807c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008080:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008084:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008088:	35e2      	adds	r5, #226	@ 0xe2
 800808a:	fa01 f305 	lsl.w	r3, r1, r5
 800808e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008090:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008092:	e7ba      	b.n	800800a <_strtod_l+0x6e2>
 8008094:	2300      	movs	r3, #0
 8008096:	9310      	str	r3, [sp, #64]	@ 0x40
 8008098:	2301      	movs	r3, #1
 800809a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800809c:	e7b5      	b.n	800800a <_strtod_l+0x6e2>
 800809e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80080a0:	9805      	ldr	r0, [sp, #20]
 80080a2:	462a      	mov	r2, r5
 80080a4:	f7ff f9c8 	bl	8007438 <__lshift>
 80080a8:	901a      	str	r0, [sp, #104]	@ 0x68
 80080aa:	2800      	cmp	r0, #0
 80080ac:	d1d9      	bne.n	8008062 <_strtod_l+0x73a>
 80080ae:	e65a      	b.n	8007d66 <_strtod_l+0x43e>
 80080b0:	2e00      	cmp	r6, #0
 80080b2:	dd07      	ble.n	80080c4 <_strtod_l+0x79c>
 80080b4:	4649      	mov	r1, r9
 80080b6:	9805      	ldr	r0, [sp, #20]
 80080b8:	4632      	mov	r2, r6
 80080ba:	f7ff f9bd 	bl	8007438 <__lshift>
 80080be:	4681      	mov	r9, r0
 80080c0:	2800      	cmp	r0, #0
 80080c2:	d0d8      	beq.n	8008076 <_strtod_l+0x74e>
 80080c4:	2f00      	cmp	r7, #0
 80080c6:	dd08      	ble.n	80080da <_strtod_l+0x7b2>
 80080c8:	4641      	mov	r1, r8
 80080ca:	9805      	ldr	r0, [sp, #20]
 80080cc:	463a      	mov	r2, r7
 80080ce:	f7ff f9b3 	bl	8007438 <__lshift>
 80080d2:	4680      	mov	r8, r0
 80080d4:	2800      	cmp	r0, #0
 80080d6:	f43f ae46 	beq.w	8007d66 <_strtod_l+0x43e>
 80080da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80080dc:	9805      	ldr	r0, [sp, #20]
 80080de:	464a      	mov	r2, r9
 80080e0:	f7ff fa32 	bl	8007548 <__mdiff>
 80080e4:	4604      	mov	r4, r0
 80080e6:	2800      	cmp	r0, #0
 80080e8:	f43f ae3d 	beq.w	8007d66 <_strtod_l+0x43e>
 80080ec:	68c3      	ldr	r3, [r0, #12]
 80080ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 80080f0:	2300      	movs	r3, #0
 80080f2:	60c3      	str	r3, [r0, #12]
 80080f4:	4641      	mov	r1, r8
 80080f6:	f7ff fa0b 	bl	8007510 <__mcmp>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	da46      	bge.n	800818c <_strtod_l+0x864>
 80080fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008100:	ea53 030a 	orrs.w	r3, r3, sl
 8008104:	d16c      	bne.n	80081e0 <_strtod_l+0x8b8>
 8008106:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800810a:	2b00      	cmp	r3, #0
 800810c:	d168      	bne.n	80081e0 <_strtod_l+0x8b8>
 800810e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008112:	0d1b      	lsrs	r3, r3, #20
 8008114:	051b      	lsls	r3, r3, #20
 8008116:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800811a:	d961      	bls.n	80081e0 <_strtod_l+0x8b8>
 800811c:	6963      	ldr	r3, [r4, #20]
 800811e:	b913      	cbnz	r3, 8008126 <_strtod_l+0x7fe>
 8008120:	6923      	ldr	r3, [r4, #16]
 8008122:	2b01      	cmp	r3, #1
 8008124:	dd5c      	ble.n	80081e0 <_strtod_l+0x8b8>
 8008126:	4621      	mov	r1, r4
 8008128:	2201      	movs	r2, #1
 800812a:	9805      	ldr	r0, [sp, #20]
 800812c:	f7ff f984 	bl	8007438 <__lshift>
 8008130:	4641      	mov	r1, r8
 8008132:	4604      	mov	r4, r0
 8008134:	f7ff f9ec 	bl	8007510 <__mcmp>
 8008138:	2800      	cmp	r0, #0
 800813a:	dd51      	ble.n	80081e0 <_strtod_l+0x8b8>
 800813c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008140:	9a08      	ldr	r2, [sp, #32]
 8008142:	0d1b      	lsrs	r3, r3, #20
 8008144:	051b      	lsls	r3, r3, #20
 8008146:	2a00      	cmp	r2, #0
 8008148:	d06b      	beq.n	8008222 <_strtod_l+0x8fa>
 800814a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800814e:	d868      	bhi.n	8008222 <_strtod_l+0x8fa>
 8008150:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008154:	f67f ae9d 	bls.w	8007e92 <_strtod_l+0x56a>
 8008158:	4b0a      	ldr	r3, [pc, #40]	@ (8008184 <_strtod_l+0x85c>)
 800815a:	4650      	mov	r0, sl
 800815c:	4659      	mov	r1, fp
 800815e:	2200      	movs	r2, #0
 8008160:	f7f8 fa72 	bl	8000648 <__aeabi_dmul>
 8008164:	4b08      	ldr	r3, [pc, #32]	@ (8008188 <_strtod_l+0x860>)
 8008166:	400b      	ands	r3, r1
 8008168:	4682      	mov	sl, r0
 800816a:	468b      	mov	fp, r1
 800816c:	2b00      	cmp	r3, #0
 800816e:	f47f ae05 	bne.w	8007d7c <_strtod_l+0x454>
 8008172:	9a05      	ldr	r2, [sp, #20]
 8008174:	2322      	movs	r3, #34	@ 0x22
 8008176:	6013      	str	r3, [r2, #0]
 8008178:	e600      	b.n	8007d7c <_strtod_l+0x454>
 800817a:	bf00      	nop
 800817c:	0800a848 	.word	0x0800a848
 8008180:	fffffc02 	.word	0xfffffc02
 8008184:	39500000 	.word	0x39500000
 8008188:	7ff00000 	.word	0x7ff00000
 800818c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008190:	d165      	bne.n	800825e <_strtod_l+0x936>
 8008192:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008194:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008198:	b35a      	cbz	r2, 80081f2 <_strtod_l+0x8ca>
 800819a:	4a9f      	ldr	r2, [pc, #636]	@ (8008418 <_strtod_l+0xaf0>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d12b      	bne.n	80081f8 <_strtod_l+0x8d0>
 80081a0:	9b08      	ldr	r3, [sp, #32]
 80081a2:	4651      	mov	r1, sl
 80081a4:	b303      	cbz	r3, 80081e8 <_strtod_l+0x8c0>
 80081a6:	4b9d      	ldr	r3, [pc, #628]	@ (800841c <_strtod_l+0xaf4>)
 80081a8:	465a      	mov	r2, fp
 80081aa:	4013      	ands	r3, r2
 80081ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80081b0:	f04f 32ff 	mov.w	r2, #4294967295
 80081b4:	d81b      	bhi.n	80081ee <_strtod_l+0x8c6>
 80081b6:	0d1b      	lsrs	r3, r3, #20
 80081b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80081bc:	fa02 f303 	lsl.w	r3, r2, r3
 80081c0:	4299      	cmp	r1, r3
 80081c2:	d119      	bne.n	80081f8 <_strtod_l+0x8d0>
 80081c4:	4b96      	ldr	r3, [pc, #600]	@ (8008420 <_strtod_l+0xaf8>)
 80081c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d102      	bne.n	80081d2 <_strtod_l+0x8aa>
 80081cc:	3101      	adds	r1, #1
 80081ce:	f43f adca 	beq.w	8007d66 <_strtod_l+0x43e>
 80081d2:	4b92      	ldr	r3, [pc, #584]	@ (800841c <_strtod_l+0xaf4>)
 80081d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081d6:	401a      	ands	r2, r3
 80081d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80081dc:	f04f 0a00 	mov.w	sl, #0
 80081e0:	9b08      	ldr	r3, [sp, #32]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1b8      	bne.n	8008158 <_strtod_l+0x830>
 80081e6:	e5c9      	b.n	8007d7c <_strtod_l+0x454>
 80081e8:	f04f 33ff 	mov.w	r3, #4294967295
 80081ec:	e7e8      	b.n	80081c0 <_strtod_l+0x898>
 80081ee:	4613      	mov	r3, r2
 80081f0:	e7e6      	b.n	80081c0 <_strtod_l+0x898>
 80081f2:	ea53 030a 	orrs.w	r3, r3, sl
 80081f6:	d0a1      	beq.n	800813c <_strtod_l+0x814>
 80081f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80081fa:	b1db      	cbz	r3, 8008234 <_strtod_l+0x90c>
 80081fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081fe:	4213      	tst	r3, r2
 8008200:	d0ee      	beq.n	80081e0 <_strtod_l+0x8b8>
 8008202:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008204:	9a08      	ldr	r2, [sp, #32]
 8008206:	4650      	mov	r0, sl
 8008208:	4659      	mov	r1, fp
 800820a:	b1bb      	cbz	r3, 800823c <_strtod_l+0x914>
 800820c:	f7ff fb6e 	bl	80078ec <sulp>
 8008210:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008214:	ec53 2b10 	vmov	r2, r3, d0
 8008218:	f7f8 f860 	bl	80002dc <__adddf3>
 800821c:	4682      	mov	sl, r0
 800821e:	468b      	mov	fp, r1
 8008220:	e7de      	b.n	80081e0 <_strtod_l+0x8b8>
 8008222:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008226:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800822a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800822e:	f04f 3aff 	mov.w	sl, #4294967295
 8008232:	e7d5      	b.n	80081e0 <_strtod_l+0x8b8>
 8008234:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008236:	ea13 0f0a 	tst.w	r3, sl
 800823a:	e7e1      	b.n	8008200 <_strtod_l+0x8d8>
 800823c:	f7ff fb56 	bl	80078ec <sulp>
 8008240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008244:	ec53 2b10 	vmov	r2, r3, d0
 8008248:	f7f8 f846 	bl	80002d8 <__aeabi_dsub>
 800824c:	2200      	movs	r2, #0
 800824e:	2300      	movs	r3, #0
 8008250:	4682      	mov	sl, r0
 8008252:	468b      	mov	fp, r1
 8008254:	f7f8 fc60 	bl	8000b18 <__aeabi_dcmpeq>
 8008258:	2800      	cmp	r0, #0
 800825a:	d0c1      	beq.n	80081e0 <_strtod_l+0x8b8>
 800825c:	e619      	b.n	8007e92 <_strtod_l+0x56a>
 800825e:	4641      	mov	r1, r8
 8008260:	4620      	mov	r0, r4
 8008262:	f7ff facd 	bl	8007800 <__ratio>
 8008266:	ec57 6b10 	vmov	r6, r7, d0
 800826a:	2200      	movs	r2, #0
 800826c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008270:	4630      	mov	r0, r6
 8008272:	4639      	mov	r1, r7
 8008274:	f7f8 fc64 	bl	8000b40 <__aeabi_dcmple>
 8008278:	2800      	cmp	r0, #0
 800827a:	d06f      	beq.n	800835c <_strtod_l+0xa34>
 800827c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800827e:	2b00      	cmp	r3, #0
 8008280:	d17a      	bne.n	8008378 <_strtod_l+0xa50>
 8008282:	f1ba 0f00 	cmp.w	sl, #0
 8008286:	d158      	bne.n	800833a <_strtod_l+0xa12>
 8008288:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800828a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800828e:	2b00      	cmp	r3, #0
 8008290:	d15a      	bne.n	8008348 <_strtod_l+0xa20>
 8008292:	4b64      	ldr	r3, [pc, #400]	@ (8008424 <_strtod_l+0xafc>)
 8008294:	2200      	movs	r2, #0
 8008296:	4630      	mov	r0, r6
 8008298:	4639      	mov	r1, r7
 800829a:	f7f8 fc47 	bl	8000b2c <__aeabi_dcmplt>
 800829e:	2800      	cmp	r0, #0
 80082a0:	d159      	bne.n	8008356 <_strtod_l+0xa2e>
 80082a2:	4630      	mov	r0, r6
 80082a4:	4639      	mov	r1, r7
 80082a6:	4b60      	ldr	r3, [pc, #384]	@ (8008428 <_strtod_l+0xb00>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	f7f8 f9cd 	bl	8000648 <__aeabi_dmul>
 80082ae:	4606      	mov	r6, r0
 80082b0:	460f      	mov	r7, r1
 80082b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80082b6:	9606      	str	r6, [sp, #24]
 80082b8:	9307      	str	r3, [sp, #28]
 80082ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082be:	4d57      	ldr	r5, [pc, #348]	@ (800841c <_strtod_l+0xaf4>)
 80082c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80082c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082c6:	401d      	ands	r5, r3
 80082c8:	4b58      	ldr	r3, [pc, #352]	@ (800842c <_strtod_l+0xb04>)
 80082ca:	429d      	cmp	r5, r3
 80082cc:	f040 80b2 	bne.w	8008434 <_strtod_l+0xb0c>
 80082d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80082d6:	ec4b ab10 	vmov	d0, sl, fp
 80082da:	f7ff f9c9 	bl	8007670 <__ulp>
 80082de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082e2:	ec51 0b10 	vmov	r0, r1, d0
 80082e6:	f7f8 f9af 	bl	8000648 <__aeabi_dmul>
 80082ea:	4652      	mov	r2, sl
 80082ec:	465b      	mov	r3, fp
 80082ee:	f7f7 fff5 	bl	80002dc <__adddf3>
 80082f2:	460b      	mov	r3, r1
 80082f4:	4949      	ldr	r1, [pc, #292]	@ (800841c <_strtod_l+0xaf4>)
 80082f6:	4a4e      	ldr	r2, [pc, #312]	@ (8008430 <_strtod_l+0xb08>)
 80082f8:	4019      	ands	r1, r3
 80082fa:	4291      	cmp	r1, r2
 80082fc:	4682      	mov	sl, r0
 80082fe:	d942      	bls.n	8008386 <_strtod_l+0xa5e>
 8008300:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008302:	4b47      	ldr	r3, [pc, #284]	@ (8008420 <_strtod_l+0xaf8>)
 8008304:	429a      	cmp	r2, r3
 8008306:	d103      	bne.n	8008310 <_strtod_l+0x9e8>
 8008308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800830a:	3301      	adds	r3, #1
 800830c:	f43f ad2b 	beq.w	8007d66 <_strtod_l+0x43e>
 8008310:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008420 <_strtod_l+0xaf8>
 8008314:	f04f 3aff 	mov.w	sl, #4294967295
 8008318:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800831a:	9805      	ldr	r0, [sp, #20]
 800831c:	f7fe fe74 	bl	8007008 <_Bfree>
 8008320:	9805      	ldr	r0, [sp, #20]
 8008322:	4649      	mov	r1, r9
 8008324:	f7fe fe70 	bl	8007008 <_Bfree>
 8008328:	9805      	ldr	r0, [sp, #20]
 800832a:	4641      	mov	r1, r8
 800832c:	f7fe fe6c 	bl	8007008 <_Bfree>
 8008330:	9805      	ldr	r0, [sp, #20]
 8008332:	4621      	mov	r1, r4
 8008334:	f7fe fe68 	bl	8007008 <_Bfree>
 8008338:	e618      	b.n	8007f6c <_strtod_l+0x644>
 800833a:	f1ba 0f01 	cmp.w	sl, #1
 800833e:	d103      	bne.n	8008348 <_strtod_l+0xa20>
 8008340:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008342:	2b00      	cmp	r3, #0
 8008344:	f43f ada5 	beq.w	8007e92 <_strtod_l+0x56a>
 8008348:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80083f8 <_strtod_l+0xad0>
 800834c:	4f35      	ldr	r7, [pc, #212]	@ (8008424 <_strtod_l+0xafc>)
 800834e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008352:	2600      	movs	r6, #0
 8008354:	e7b1      	b.n	80082ba <_strtod_l+0x992>
 8008356:	4f34      	ldr	r7, [pc, #208]	@ (8008428 <_strtod_l+0xb00>)
 8008358:	2600      	movs	r6, #0
 800835a:	e7aa      	b.n	80082b2 <_strtod_l+0x98a>
 800835c:	4b32      	ldr	r3, [pc, #200]	@ (8008428 <_strtod_l+0xb00>)
 800835e:	4630      	mov	r0, r6
 8008360:	4639      	mov	r1, r7
 8008362:	2200      	movs	r2, #0
 8008364:	f7f8 f970 	bl	8000648 <__aeabi_dmul>
 8008368:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800836a:	4606      	mov	r6, r0
 800836c:	460f      	mov	r7, r1
 800836e:	2b00      	cmp	r3, #0
 8008370:	d09f      	beq.n	80082b2 <_strtod_l+0x98a>
 8008372:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008376:	e7a0      	b.n	80082ba <_strtod_l+0x992>
 8008378:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008400 <_strtod_l+0xad8>
 800837c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008380:	ec57 6b17 	vmov	r6, r7, d7
 8008384:	e799      	b.n	80082ba <_strtod_l+0x992>
 8008386:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800838a:	9b08      	ldr	r3, [sp, #32]
 800838c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1c1      	bne.n	8008318 <_strtod_l+0x9f0>
 8008394:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008398:	0d1b      	lsrs	r3, r3, #20
 800839a:	051b      	lsls	r3, r3, #20
 800839c:	429d      	cmp	r5, r3
 800839e:	d1bb      	bne.n	8008318 <_strtod_l+0x9f0>
 80083a0:	4630      	mov	r0, r6
 80083a2:	4639      	mov	r1, r7
 80083a4:	f7f8 fcb0 	bl	8000d08 <__aeabi_d2lz>
 80083a8:	f7f8 f920 	bl	80005ec <__aeabi_l2d>
 80083ac:	4602      	mov	r2, r0
 80083ae:	460b      	mov	r3, r1
 80083b0:	4630      	mov	r0, r6
 80083b2:	4639      	mov	r1, r7
 80083b4:	f7f7 ff90 	bl	80002d8 <__aeabi_dsub>
 80083b8:	460b      	mov	r3, r1
 80083ba:	4602      	mov	r2, r0
 80083bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80083c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80083c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083c6:	ea46 060a 	orr.w	r6, r6, sl
 80083ca:	431e      	orrs	r6, r3
 80083cc:	d06f      	beq.n	80084ae <_strtod_l+0xb86>
 80083ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8008408 <_strtod_l+0xae0>)
 80083d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d4:	f7f8 fbaa 	bl	8000b2c <__aeabi_dcmplt>
 80083d8:	2800      	cmp	r0, #0
 80083da:	f47f accf 	bne.w	8007d7c <_strtod_l+0x454>
 80083de:	a30c      	add	r3, pc, #48	@ (adr r3, 8008410 <_strtod_l+0xae8>)
 80083e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083e8:	f7f8 fbbe 	bl	8000b68 <__aeabi_dcmpgt>
 80083ec:	2800      	cmp	r0, #0
 80083ee:	d093      	beq.n	8008318 <_strtod_l+0x9f0>
 80083f0:	e4c4      	b.n	8007d7c <_strtod_l+0x454>
 80083f2:	bf00      	nop
 80083f4:	f3af 8000 	nop.w
 80083f8:	00000000 	.word	0x00000000
 80083fc:	bff00000 	.word	0xbff00000
 8008400:	00000000 	.word	0x00000000
 8008404:	3ff00000 	.word	0x3ff00000
 8008408:	94a03595 	.word	0x94a03595
 800840c:	3fdfffff 	.word	0x3fdfffff
 8008410:	35afe535 	.word	0x35afe535
 8008414:	3fe00000 	.word	0x3fe00000
 8008418:	000fffff 	.word	0x000fffff
 800841c:	7ff00000 	.word	0x7ff00000
 8008420:	7fefffff 	.word	0x7fefffff
 8008424:	3ff00000 	.word	0x3ff00000
 8008428:	3fe00000 	.word	0x3fe00000
 800842c:	7fe00000 	.word	0x7fe00000
 8008430:	7c9fffff 	.word	0x7c9fffff
 8008434:	9b08      	ldr	r3, [sp, #32]
 8008436:	b323      	cbz	r3, 8008482 <_strtod_l+0xb5a>
 8008438:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800843c:	d821      	bhi.n	8008482 <_strtod_l+0xb5a>
 800843e:	a328      	add	r3, pc, #160	@ (adr r3, 80084e0 <_strtod_l+0xbb8>)
 8008440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008444:	4630      	mov	r0, r6
 8008446:	4639      	mov	r1, r7
 8008448:	f7f8 fb7a 	bl	8000b40 <__aeabi_dcmple>
 800844c:	b1a0      	cbz	r0, 8008478 <_strtod_l+0xb50>
 800844e:	4639      	mov	r1, r7
 8008450:	4630      	mov	r0, r6
 8008452:	f7f8 fbd1 	bl	8000bf8 <__aeabi_d2uiz>
 8008456:	2801      	cmp	r0, #1
 8008458:	bf38      	it	cc
 800845a:	2001      	movcc	r0, #1
 800845c:	f7f8 f87a 	bl	8000554 <__aeabi_ui2d>
 8008460:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008462:	4606      	mov	r6, r0
 8008464:	460f      	mov	r7, r1
 8008466:	b9fb      	cbnz	r3, 80084a8 <_strtod_l+0xb80>
 8008468:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800846c:	9014      	str	r0, [sp, #80]	@ 0x50
 800846e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008470:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008474:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008478:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800847a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800847e:	1b5b      	subs	r3, r3, r5
 8008480:	9311      	str	r3, [sp, #68]	@ 0x44
 8008482:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008486:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800848a:	f7ff f8f1 	bl	8007670 <__ulp>
 800848e:	4650      	mov	r0, sl
 8008490:	ec53 2b10 	vmov	r2, r3, d0
 8008494:	4659      	mov	r1, fp
 8008496:	f7f8 f8d7 	bl	8000648 <__aeabi_dmul>
 800849a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800849e:	f7f7 ff1d 	bl	80002dc <__adddf3>
 80084a2:	4682      	mov	sl, r0
 80084a4:	468b      	mov	fp, r1
 80084a6:	e770      	b.n	800838a <_strtod_l+0xa62>
 80084a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80084ac:	e7e0      	b.n	8008470 <_strtod_l+0xb48>
 80084ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80084e8 <_strtod_l+0xbc0>)
 80084b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b4:	f7f8 fb3a 	bl	8000b2c <__aeabi_dcmplt>
 80084b8:	e798      	b.n	80083ec <_strtod_l+0xac4>
 80084ba:	2300      	movs	r3, #0
 80084bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80084c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084c2:	6013      	str	r3, [r2, #0]
 80084c4:	f7ff ba6d 	b.w	80079a2 <_strtod_l+0x7a>
 80084c8:	2a65      	cmp	r2, #101	@ 0x65
 80084ca:	f43f ab66 	beq.w	8007b9a <_strtod_l+0x272>
 80084ce:	2a45      	cmp	r2, #69	@ 0x45
 80084d0:	f43f ab63 	beq.w	8007b9a <_strtod_l+0x272>
 80084d4:	2301      	movs	r3, #1
 80084d6:	f7ff bb9e 	b.w	8007c16 <_strtod_l+0x2ee>
 80084da:	bf00      	nop
 80084dc:	f3af 8000 	nop.w
 80084e0:	ffc00000 	.word	0xffc00000
 80084e4:	41dfffff 	.word	0x41dfffff
 80084e8:	94a03595 	.word	0x94a03595
 80084ec:	3fcfffff 	.word	0x3fcfffff

080084f0 <_strtod_r>:
 80084f0:	4b01      	ldr	r3, [pc, #4]	@ (80084f8 <_strtod_r+0x8>)
 80084f2:	f7ff ba19 	b.w	8007928 <_strtod_l>
 80084f6:	bf00      	nop
 80084f8:	200000a4 	.word	0x200000a4

080084fc <__ssputs_r>:
 80084fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008500:	688e      	ldr	r6, [r1, #8]
 8008502:	461f      	mov	r7, r3
 8008504:	42be      	cmp	r6, r7
 8008506:	680b      	ldr	r3, [r1, #0]
 8008508:	4682      	mov	sl, r0
 800850a:	460c      	mov	r4, r1
 800850c:	4690      	mov	r8, r2
 800850e:	d82d      	bhi.n	800856c <__ssputs_r+0x70>
 8008510:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008514:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008518:	d026      	beq.n	8008568 <__ssputs_r+0x6c>
 800851a:	6965      	ldr	r5, [r4, #20]
 800851c:	6909      	ldr	r1, [r1, #16]
 800851e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008522:	eba3 0901 	sub.w	r9, r3, r1
 8008526:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800852a:	1c7b      	adds	r3, r7, #1
 800852c:	444b      	add	r3, r9
 800852e:	106d      	asrs	r5, r5, #1
 8008530:	429d      	cmp	r5, r3
 8008532:	bf38      	it	cc
 8008534:	461d      	movcc	r5, r3
 8008536:	0553      	lsls	r3, r2, #21
 8008538:	d527      	bpl.n	800858a <__ssputs_r+0x8e>
 800853a:	4629      	mov	r1, r5
 800853c:	f7fe fc98 	bl	8006e70 <_malloc_r>
 8008540:	4606      	mov	r6, r0
 8008542:	b360      	cbz	r0, 800859e <__ssputs_r+0xa2>
 8008544:	6921      	ldr	r1, [r4, #16]
 8008546:	464a      	mov	r2, r9
 8008548:	f000 fbde 	bl	8008d08 <memcpy>
 800854c:	89a3      	ldrh	r3, [r4, #12]
 800854e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008556:	81a3      	strh	r3, [r4, #12]
 8008558:	6126      	str	r6, [r4, #16]
 800855a:	6165      	str	r5, [r4, #20]
 800855c:	444e      	add	r6, r9
 800855e:	eba5 0509 	sub.w	r5, r5, r9
 8008562:	6026      	str	r6, [r4, #0]
 8008564:	60a5      	str	r5, [r4, #8]
 8008566:	463e      	mov	r6, r7
 8008568:	42be      	cmp	r6, r7
 800856a:	d900      	bls.n	800856e <__ssputs_r+0x72>
 800856c:	463e      	mov	r6, r7
 800856e:	6820      	ldr	r0, [r4, #0]
 8008570:	4632      	mov	r2, r6
 8008572:	4641      	mov	r1, r8
 8008574:	f000 fb6a 	bl	8008c4c <memmove>
 8008578:	68a3      	ldr	r3, [r4, #8]
 800857a:	1b9b      	subs	r3, r3, r6
 800857c:	60a3      	str	r3, [r4, #8]
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	4433      	add	r3, r6
 8008582:	6023      	str	r3, [r4, #0]
 8008584:	2000      	movs	r0, #0
 8008586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800858a:	462a      	mov	r2, r5
 800858c:	f000 ff51 	bl	8009432 <_realloc_r>
 8008590:	4606      	mov	r6, r0
 8008592:	2800      	cmp	r0, #0
 8008594:	d1e0      	bne.n	8008558 <__ssputs_r+0x5c>
 8008596:	6921      	ldr	r1, [r4, #16]
 8008598:	4650      	mov	r0, sl
 800859a:	f7fe fbf5 	bl	8006d88 <_free_r>
 800859e:	230c      	movs	r3, #12
 80085a0:	f8ca 3000 	str.w	r3, [sl]
 80085a4:	89a3      	ldrh	r3, [r4, #12]
 80085a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085aa:	81a3      	strh	r3, [r4, #12]
 80085ac:	f04f 30ff 	mov.w	r0, #4294967295
 80085b0:	e7e9      	b.n	8008586 <__ssputs_r+0x8a>
	...

080085b4 <_svfiprintf_r>:
 80085b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b8:	4698      	mov	r8, r3
 80085ba:	898b      	ldrh	r3, [r1, #12]
 80085bc:	061b      	lsls	r3, r3, #24
 80085be:	b09d      	sub	sp, #116	@ 0x74
 80085c0:	4607      	mov	r7, r0
 80085c2:	460d      	mov	r5, r1
 80085c4:	4614      	mov	r4, r2
 80085c6:	d510      	bpl.n	80085ea <_svfiprintf_r+0x36>
 80085c8:	690b      	ldr	r3, [r1, #16]
 80085ca:	b973      	cbnz	r3, 80085ea <_svfiprintf_r+0x36>
 80085cc:	2140      	movs	r1, #64	@ 0x40
 80085ce:	f7fe fc4f 	bl	8006e70 <_malloc_r>
 80085d2:	6028      	str	r0, [r5, #0]
 80085d4:	6128      	str	r0, [r5, #16]
 80085d6:	b930      	cbnz	r0, 80085e6 <_svfiprintf_r+0x32>
 80085d8:	230c      	movs	r3, #12
 80085da:	603b      	str	r3, [r7, #0]
 80085dc:	f04f 30ff 	mov.w	r0, #4294967295
 80085e0:	b01d      	add	sp, #116	@ 0x74
 80085e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e6:	2340      	movs	r3, #64	@ 0x40
 80085e8:	616b      	str	r3, [r5, #20]
 80085ea:	2300      	movs	r3, #0
 80085ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80085ee:	2320      	movs	r3, #32
 80085f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80085f8:	2330      	movs	r3, #48	@ 0x30
 80085fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008798 <_svfiprintf_r+0x1e4>
 80085fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008602:	f04f 0901 	mov.w	r9, #1
 8008606:	4623      	mov	r3, r4
 8008608:	469a      	mov	sl, r3
 800860a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800860e:	b10a      	cbz	r2, 8008614 <_svfiprintf_r+0x60>
 8008610:	2a25      	cmp	r2, #37	@ 0x25
 8008612:	d1f9      	bne.n	8008608 <_svfiprintf_r+0x54>
 8008614:	ebba 0b04 	subs.w	fp, sl, r4
 8008618:	d00b      	beq.n	8008632 <_svfiprintf_r+0x7e>
 800861a:	465b      	mov	r3, fp
 800861c:	4622      	mov	r2, r4
 800861e:	4629      	mov	r1, r5
 8008620:	4638      	mov	r0, r7
 8008622:	f7ff ff6b 	bl	80084fc <__ssputs_r>
 8008626:	3001      	adds	r0, #1
 8008628:	f000 80a7 	beq.w	800877a <_svfiprintf_r+0x1c6>
 800862c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800862e:	445a      	add	r2, fp
 8008630:	9209      	str	r2, [sp, #36]	@ 0x24
 8008632:	f89a 3000 	ldrb.w	r3, [sl]
 8008636:	2b00      	cmp	r3, #0
 8008638:	f000 809f 	beq.w	800877a <_svfiprintf_r+0x1c6>
 800863c:	2300      	movs	r3, #0
 800863e:	f04f 32ff 	mov.w	r2, #4294967295
 8008642:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008646:	f10a 0a01 	add.w	sl, sl, #1
 800864a:	9304      	str	r3, [sp, #16]
 800864c:	9307      	str	r3, [sp, #28]
 800864e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008652:	931a      	str	r3, [sp, #104]	@ 0x68
 8008654:	4654      	mov	r4, sl
 8008656:	2205      	movs	r2, #5
 8008658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800865c:	484e      	ldr	r0, [pc, #312]	@ (8008798 <_svfiprintf_r+0x1e4>)
 800865e:	f7f7 fddf 	bl	8000220 <memchr>
 8008662:	9a04      	ldr	r2, [sp, #16]
 8008664:	b9d8      	cbnz	r0, 800869e <_svfiprintf_r+0xea>
 8008666:	06d0      	lsls	r0, r2, #27
 8008668:	bf44      	itt	mi
 800866a:	2320      	movmi	r3, #32
 800866c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008670:	0711      	lsls	r1, r2, #28
 8008672:	bf44      	itt	mi
 8008674:	232b      	movmi	r3, #43	@ 0x2b
 8008676:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800867a:	f89a 3000 	ldrb.w	r3, [sl]
 800867e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008680:	d015      	beq.n	80086ae <_svfiprintf_r+0xfa>
 8008682:	9a07      	ldr	r2, [sp, #28]
 8008684:	4654      	mov	r4, sl
 8008686:	2000      	movs	r0, #0
 8008688:	f04f 0c0a 	mov.w	ip, #10
 800868c:	4621      	mov	r1, r4
 800868e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008692:	3b30      	subs	r3, #48	@ 0x30
 8008694:	2b09      	cmp	r3, #9
 8008696:	d94b      	bls.n	8008730 <_svfiprintf_r+0x17c>
 8008698:	b1b0      	cbz	r0, 80086c8 <_svfiprintf_r+0x114>
 800869a:	9207      	str	r2, [sp, #28]
 800869c:	e014      	b.n	80086c8 <_svfiprintf_r+0x114>
 800869e:	eba0 0308 	sub.w	r3, r0, r8
 80086a2:	fa09 f303 	lsl.w	r3, r9, r3
 80086a6:	4313      	orrs	r3, r2
 80086a8:	9304      	str	r3, [sp, #16]
 80086aa:	46a2      	mov	sl, r4
 80086ac:	e7d2      	b.n	8008654 <_svfiprintf_r+0xa0>
 80086ae:	9b03      	ldr	r3, [sp, #12]
 80086b0:	1d19      	adds	r1, r3, #4
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	9103      	str	r1, [sp, #12]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	bfbb      	ittet	lt
 80086ba:	425b      	neglt	r3, r3
 80086bc:	f042 0202 	orrlt.w	r2, r2, #2
 80086c0:	9307      	strge	r3, [sp, #28]
 80086c2:	9307      	strlt	r3, [sp, #28]
 80086c4:	bfb8      	it	lt
 80086c6:	9204      	strlt	r2, [sp, #16]
 80086c8:	7823      	ldrb	r3, [r4, #0]
 80086ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80086cc:	d10a      	bne.n	80086e4 <_svfiprintf_r+0x130>
 80086ce:	7863      	ldrb	r3, [r4, #1]
 80086d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80086d2:	d132      	bne.n	800873a <_svfiprintf_r+0x186>
 80086d4:	9b03      	ldr	r3, [sp, #12]
 80086d6:	1d1a      	adds	r2, r3, #4
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	9203      	str	r2, [sp, #12]
 80086dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086e0:	3402      	adds	r4, #2
 80086e2:	9305      	str	r3, [sp, #20]
 80086e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80087a8 <_svfiprintf_r+0x1f4>
 80086e8:	7821      	ldrb	r1, [r4, #0]
 80086ea:	2203      	movs	r2, #3
 80086ec:	4650      	mov	r0, sl
 80086ee:	f7f7 fd97 	bl	8000220 <memchr>
 80086f2:	b138      	cbz	r0, 8008704 <_svfiprintf_r+0x150>
 80086f4:	9b04      	ldr	r3, [sp, #16]
 80086f6:	eba0 000a 	sub.w	r0, r0, sl
 80086fa:	2240      	movs	r2, #64	@ 0x40
 80086fc:	4082      	lsls	r2, r0
 80086fe:	4313      	orrs	r3, r2
 8008700:	3401      	adds	r4, #1
 8008702:	9304      	str	r3, [sp, #16]
 8008704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008708:	4824      	ldr	r0, [pc, #144]	@ (800879c <_svfiprintf_r+0x1e8>)
 800870a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800870e:	2206      	movs	r2, #6
 8008710:	f7f7 fd86 	bl	8000220 <memchr>
 8008714:	2800      	cmp	r0, #0
 8008716:	d036      	beq.n	8008786 <_svfiprintf_r+0x1d2>
 8008718:	4b21      	ldr	r3, [pc, #132]	@ (80087a0 <_svfiprintf_r+0x1ec>)
 800871a:	bb1b      	cbnz	r3, 8008764 <_svfiprintf_r+0x1b0>
 800871c:	9b03      	ldr	r3, [sp, #12]
 800871e:	3307      	adds	r3, #7
 8008720:	f023 0307 	bic.w	r3, r3, #7
 8008724:	3308      	adds	r3, #8
 8008726:	9303      	str	r3, [sp, #12]
 8008728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800872a:	4433      	add	r3, r6
 800872c:	9309      	str	r3, [sp, #36]	@ 0x24
 800872e:	e76a      	b.n	8008606 <_svfiprintf_r+0x52>
 8008730:	fb0c 3202 	mla	r2, ip, r2, r3
 8008734:	460c      	mov	r4, r1
 8008736:	2001      	movs	r0, #1
 8008738:	e7a8      	b.n	800868c <_svfiprintf_r+0xd8>
 800873a:	2300      	movs	r3, #0
 800873c:	3401      	adds	r4, #1
 800873e:	9305      	str	r3, [sp, #20]
 8008740:	4619      	mov	r1, r3
 8008742:	f04f 0c0a 	mov.w	ip, #10
 8008746:	4620      	mov	r0, r4
 8008748:	f810 2b01 	ldrb.w	r2, [r0], #1
 800874c:	3a30      	subs	r2, #48	@ 0x30
 800874e:	2a09      	cmp	r2, #9
 8008750:	d903      	bls.n	800875a <_svfiprintf_r+0x1a6>
 8008752:	2b00      	cmp	r3, #0
 8008754:	d0c6      	beq.n	80086e4 <_svfiprintf_r+0x130>
 8008756:	9105      	str	r1, [sp, #20]
 8008758:	e7c4      	b.n	80086e4 <_svfiprintf_r+0x130>
 800875a:	fb0c 2101 	mla	r1, ip, r1, r2
 800875e:	4604      	mov	r4, r0
 8008760:	2301      	movs	r3, #1
 8008762:	e7f0      	b.n	8008746 <_svfiprintf_r+0x192>
 8008764:	ab03      	add	r3, sp, #12
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	462a      	mov	r2, r5
 800876a:	4b0e      	ldr	r3, [pc, #56]	@ (80087a4 <_svfiprintf_r+0x1f0>)
 800876c:	a904      	add	r1, sp, #16
 800876e:	4638      	mov	r0, r7
 8008770:	f7fc fc40 	bl	8004ff4 <_printf_float>
 8008774:	1c42      	adds	r2, r0, #1
 8008776:	4606      	mov	r6, r0
 8008778:	d1d6      	bne.n	8008728 <_svfiprintf_r+0x174>
 800877a:	89ab      	ldrh	r3, [r5, #12]
 800877c:	065b      	lsls	r3, r3, #25
 800877e:	f53f af2d 	bmi.w	80085dc <_svfiprintf_r+0x28>
 8008782:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008784:	e72c      	b.n	80085e0 <_svfiprintf_r+0x2c>
 8008786:	ab03      	add	r3, sp, #12
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	462a      	mov	r2, r5
 800878c:	4b05      	ldr	r3, [pc, #20]	@ (80087a4 <_svfiprintf_r+0x1f0>)
 800878e:	a904      	add	r1, sp, #16
 8008790:	4638      	mov	r0, r7
 8008792:	f7fc fec7 	bl	8005524 <_printf_i>
 8008796:	e7ed      	b.n	8008774 <_svfiprintf_r+0x1c0>
 8008798:	0800a870 	.word	0x0800a870
 800879c:	0800a87a 	.word	0x0800a87a
 80087a0:	08004ff5 	.word	0x08004ff5
 80087a4:	080084fd 	.word	0x080084fd
 80087a8:	0800a876 	.word	0x0800a876

080087ac <__sfputc_r>:
 80087ac:	6893      	ldr	r3, [r2, #8]
 80087ae:	3b01      	subs	r3, #1
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	b410      	push	{r4}
 80087b4:	6093      	str	r3, [r2, #8]
 80087b6:	da08      	bge.n	80087ca <__sfputc_r+0x1e>
 80087b8:	6994      	ldr	r4, [r2, #24]
 80087ba:	42a3      	cmp	r3, r4
 80087bc:	db01      	blt.n	80087c2 <__sfputc_r+0x16>
 80087be:	290a      	cmp	r1, #10
 80087c0:	d103      	bne.n	80087ca <__sfputc_r+0x1e>
 80087c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087c6:	f7fd bb76 	b.w	8005eb6 <__swbuf_r>
 80087ca:	6813      	ldr	r3, [r2, #0]
 80087cc:	1c58      	adds	r0, r3, #1
 80087ce:	6010      	str	r0, [r2, #0]
 80087d0:	7019      	strb	r1, [r3, #0]
 80087d2:	4608      	mov	r0, r1
 80087d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087d8:	4770      	bx	lr

080087da <__sfputs_r>:
 80087da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087dc:	4606      	mov	r6, r0
 80087de:	460f      	mov	r7, r1
 80087e0:	4614      	mov	r4, r2
 80087e2:	18d5      	adds	r5, r2, r3
 80087e4:	42ac      	cmp	r4, r5
 80087e6:	d101      	bne.n	80087ec <__sfputs_r+0x12>
 80087e8:	2000      	movs	r0, #0
 80087ea:	e007      	b.n	80087fc <__sfputs_r+0x22>
 80087ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087f0:	463a      	mov	r2, r7
 80087f2:	4630      	mov	r0, r6
 80087f4:	f7ff ffda 	bl	80087ac <__sfputc_r>
 80087f8:	1c43      	adds	r3, r0, #1
 80087fa:	d1f3      	bne.n	80087e4 <__sfputs_r+0xa>
 80087fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008800 <_vfiprintf_r>:
 8008800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008804:	460d      	mov	r5, r1
 8008806:	b09d      	sub	sp, #116	@ 0x74
 8008808:	4614      	mov	r4, r2
 800880a:	4698      	mov	r8, r3
 800880c:	4606      	mov	r6, r0
 800880e:	b118      	cbz	r0, 8008818 <_vfiprintf_r+0x18>
 8008810:	6a03      	ldr	r3, [r0, #32]
 8008812:	b90b      	cbnz	r3, 8008818 <_vfiprintf_r+0x18>
 8008814:	f7fd fa46 	bl	8005ca4 <__sinit>
 8008818:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800881a:	07d9      	lsls	r1, r3, #31
 800881c:	d405      	bmi.n	800882a <_vfiprintf_r+0x2a>
 800881e:	89ab      	ldrh	r3, [r5, #12]
 8008820:	059a      	lsls	r2, r3, #22
 8008822:	d402      	bmi.n	800882a <_vfiprintf_r+0x2a>
 8008824:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008826:	f7fd fc58 	bl	80060da <__retarget_lock_acquire_recursive>
 800882a:	89ab      	ldrh	r3, [r5, #12]
 800882c:	071b      	lsls	r3, r3, #28
 800882e:	d501      	bpl.n	8008834 <_vfiprintf_r+0x34>
 8008830:	692b      	ldr	r3, [r5, #16]
 8008832:	b99b      	cbnz	r3, 800885c <_vfiprintf_r+0x5c>
 8008834:	4629      	mov	r1, r5
 8008836:	4630      	mov	r0, r6
 8008838:	f7fd fb7c 	bl	8005f34 <__swsetup_r>
 800883c:	b170      	cbz	r0, 800885c <_vfiprintf_r+0x5c>
 800883e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008840:	07dc      	lsls	r4, r3, #31
 8008842:	d504      	bpl.n	800884e <_vfiprintf_r+0x4e>
 8008844:	f04f 30ff 	mov.w	r0, #4294967295
 8008848:	b01d      	add	sp, #116	@ 0x74
 800884a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800884e:	89ab      	ldrh	r3, [r5, #12]
 8008850:	0598      	lsls	r0, r3, #22
 8008852:	d4f7      	bmi.n	8008844 <_vfiprintf_r+0x44>
 8008854:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008856:	f7fd fc41 	bl	80060dc <__retarget_lock_release_recursive>
 800885a:	e7f3      	b.n	8008844 <_vfiprintf_r+0x44>
 800885c:	2300      	movs	r3, #0
 800885e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008860:	2320      	movs	r3, #32
 8008862:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008866:	f8cd 800c 	str.w	r8, [sp, #12]
 800886a:	2330      	movs	r3, #48	@ 0x30
 800886c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008a1c <_vfiprintf_r+0x21c>
 8008870:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008874:	f04f 0901 	mov.w	r9, #1
 8008878:	4623      	mov	r3, r4
 800887a:	469a      	mov	sl, r3
 800887c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008880:	b10a      	cbz	r2, 8008886 <_vfiprintf_r+0x86>
 8008882:	2a25      	cmp	r2, #37	@ 0x25
 8008884:	d1f9      	bne.n	800887a <_vfiprintf_r+0x7a>
 8008886:	ebba 0b04 	subs.w	fp, sl, r4
 800888a:	d00b      	beq.n	80088a4 <_vfiprintf_r+0xa4>
 800888c:	465b      	mov	r3, fp
 800888e:	4622      	mov	r2, r4
 8008890:	4629      	mov	r1, r5
 8008892:	4630      	mov	r0, r6
 8008894:	f7ff ffa1 	bl	80087da <__sfputs_r>
 8008898:	3001      	adds	r0, #1
 800889a:	f000 80a7 	beq.w	80089ec <_vfiprintf_r+0x1ec>
 800889e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088a0:	445a      	add	r2, fp
 80088a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80088a4:	f89a 3000 	ldrb.w	r3, [sl]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f000 809f 	beq.w	80089ec <_vfiprintf_r+0x1ec>
 80088ae:	2300      	movs	r3, #0
 80088b0:	f04f 32ff 	mov.w	r2, #4294967295
 80088b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088b8:	f10a 0a01 	add.w	sl, sl, #1
 80088bc:	9304      	str	r3, [sp, #16]
 80088be:	9307      	str	r3, [sp, #28]
 80088c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80088c6:	4654      	mov	r4, sl
 80088c8:	2205      	movs	r2, #5
 80088ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ce:	4853      	ldr	r0, [pc, #332]	@ (8008a1c <_vfiprintf_r+0x21c>)
 80088d0:	f7f7 fca6 	bl	8000220 <memchr>
 80088d4:	9a04      	ldr	r2, [sp, #16]
 80088d6:	b9d8      	cbnz	r0, 8008910 <_vfiprintf_r+0x110>
 80088d8:	06d1      	lsls	r1, r2, #27
 80088da:	bf44      	itt	mi
 80088dc:	2320      	movmi	r3, #32
 80088de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088e2:	0713      	lsls	r3, r2, #28
 80088e4:	bf44      	itt	mi
 80088e6:	232b      	movmi	r3, #43	@ 0x2b
 80088e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088ec:	f89a 3000 	ldrb.w	r3, [sl]
 80088f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80088f2:	d015      	beq.n	8008920 <_vfiprintf_r+0x120>
 80088f4:	9a07      	ldr	r2, [sp, #28]
 80088f6:	4654      	mov	r4, sl
 80088f8:	2000      	movs	r0, #0
 80088fa:	f04f 0c0a 	mov.w	ip, #10
 80088fe:	4621      	mov	r1, r4
 8008900:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008904:	3b30      	subs	r3, #48	@ 0x30
 8008906:	2b09      	cmp	r3, #9
 8008908:	d94b      	bls.n	80089a2 <_vfiprintf_r+0x1a2>
 800890a:	b1b0      	cbz	r0, 800893a <_vfiprintf_r+0x13a>
 800890c:	9207      	str	r2, [sp, #28]
 800890e:	e014      	b.n	800893a <_vfiprintf_r+0x13a>
 8008910:	eba0 0308 	sub.w	r3, r0, r8
 8008914:	fa09 f303 	lsl.w	r3, r9, r3
 8008918:	4313      	orrs	r3, r2
 800891a:	9304      	str	r3, [sp, #16]
 800891c:	46a2      	mov	sl, r4
 800891e:	e7d2      	b.n	80088c6 <_vfiprintf_r+0xc6>
 8008920:	9b03      	ldr	r3, [sp, #12]
 8008922:	1d19      	adds	r1, r3, #4
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	9103      	str	r1, [sp, #12]
 8008928:	2b00      	cmp	r3, #0
 800892a:	bfbb      	ittet	lt
 800892c:	425b      	neglt	r3, r3
 800892e:	f042 0202 	orrlt.w	r2, r2, #2
 8008932:	9307      	strge	r3, [sp, #28]
 8008934:	9307      	strlt	r3, [sp, #28]
 8008936:	bfb8      	it	lt
 8008938:	9204      	strlt	r2, [sp, #16]
 800893a:	7823      	ldrb	r3, [r4, #0]
 800893c:	2b2e      	cmp	r3, #46	@ 0x2e
 800893e:	d10a      	bne.n	8008956 <_vfiprintf_r+0x156>
 8008940:	7863      	ldrb	r3, [r4, #1]
 8008942:	2b2a      	cmp	r3, #42	@ 0x2a
 8008944:	d132      	bne.n	80089ac <_vfiprintf_r+0x1ac>
 8008946:	9b03      	ldr	r3, [sp, #12]
 8008948:	1d1a      	adds	r2, r3, #4
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	9203      	str	r2, [sp, #12]
 800894e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008952:	3402      	adds	r4, #2
 8008954:	9305      	str	r3, [sp, #20]
 8008956:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008a2c <_vfiprintf_r+0x22c>
 800895a:	7821      	ldrb	r1, [r4, #0]
 800895c:	2203      	movs	r2, #3
 800895e:	4650      	mov	r0, sl
 8008960:	f7f7 fc5e 	bl	8000220 <memchr>
 8008964:	b138      	cbz	r0, 8008976 <_vfiprintf_r+0x176>
 8008966:	9b04      	ldr	r3, [sp, #16]
 8008968:	eba0 000a 	sub.w	r0, r0, sl
 800896c:	2240      	movs	r2, #64	@ 0x40
 800896e:	4082      	lsls	r2, r0
 8008970:	4313      	orrs	r3, r2
 8008972:	3401      	adds	r4, #1
 8008974:	9304      	str	r3, [sp, #16]
 8008976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800897a:	4829      	ldr	r0, [pc, #164]	@ (8008a20 <_vfiprintf_r+0x220>)
 800897c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008980:	2206      	movs	r2, #6
 8008982:	f7f7 fc4d 	bl	8000220 <memchr>
 8008986:	2800      	cmp	r0, #0
 8008988:	d03f      	beq.n	8008a0a <_vfiprintf_r+0x20a>
 800898a:	4b26      	ldr	r3, [pc, #152]	@ (8008a24 <_vfiprintf_r+0x224>)
 800898c:	bb1b      	cbnz	r3, 80089d6 <_vfiprintf_r+0x1d6>
 800898e:	9b03      	ldr	r3, [sp, #12]
 8008990:	3307      	adds	r3, #7
 8008992:	f023 0307 	bic.w	r3, r3, #7
 8008996:	3308      	adds	r3, #8
 8008998:	9303      	str	r3, [sp, #12]
 800899a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800899c:	443b      	add	r3, r7
 800899e:	9309      	str	r3, [sp, #36]	@ 0x24
 80089a0:	e76a      	b.n	8008878 <_vfiprintf_r+0x78>
 80089a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80089a6:	460c      	mov	r4, r1
 80089a8:	2001      	movs	r0, #1
 80089aa:	e7a8      	b.n	80088fe <_vfiprintf_r+0xfe>
 80089ac:	2300      	movs	r3, #0
 80089ae:	3401      	adds	r4, #1
 80089b0:	9305      	str	r3, [sp, #20]
 80089b2:	4619      	mov	r1, r3
 80089b4:	f04f 0c0a 	mov.w	ip, #10
 80089b8:	4620      	mov	r0, r4
 80089ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089be:	3a30      	subs	r2, #48	@ 0x30
 80089c0:	2a09      	cmp	r2, #9
 80089c2:	d903      	bls.n	80089cc <_vfiprintf_r+0x1cc>
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d0c6      	beq.n	8008956 <_vfiprintf_r+0x156>
 80089c8:	9105      	str	r1, [sp, #20]
 80089ca:	e7c4      	b.n	8008956 <_vfiprintf_r+0x156>
 80089cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80089d0:	4604      	mov	r4, r0
 80089d2:	2301      	movs	r3, #1
 80089d4:	e7f0      	b.n	80089b8 <_vfiprintf_r+0x1b8>
 80089d6:	ab03      	add	r3, sp, #12
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	462a      	mov	r2, r5
 80089dc:	4b12      	ldr	r3, [pc, #72]	@ (8008a28 <_vfiprintf_r+0x228>)
 80089de:	a904      	add	r1, sp, #16
 80089e0:	4630      	mov	r0, r6
 80089e2:	f7fc fb07 	bl	8004ff4 <_printf_float>
 80089e6:	4607      	mov	r7, r0
 80089e8:	1c78      	adds	r0, r7, #1
 80089ea:	d1d6      	bne.n	800899a <_vfiprintf_r+0x19a>
 80089ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089ee:	07d9      	lsls	r1, r3, #31
 80089f0:	d405      	bmi.n	80089fe <_vfiprintf_r+0x1fe>
 80089f2:	89ab      	ldrh	r3, [r5, #12]
 80089f4:	059a      	lsls	r2, r3, #22
 80089f6:	d402      	bmi.n	80089fe <_vfiprintf_r+0x1fe>
 80089f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089fa:	f7fd fb6f 	bl	80060dc <__retarget_lock_release_recursive>
 80089fe:	89ab      	ldrh	r3, [r5, #12]
 8008a00:	065b      	lsls	r3, r3, #25
 8008a02:	f53f af1f 	bmi.w	8008844 <_vfiprintf_r+0x44>
 8008a06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a08:	e71e      	b.n	8008848 <_vfiprintf_r+0x48>
 8008a0a:	ab03      	add	r3, sp, #12
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	462a      	mov	r2, r5
 8008a10:	4b05      	ldr	r3, [pc, #20]	@ (8008a28 <_vfiprintf_r+0x228>)
 8008a12:	a904      	add	r1, sp, #16
 8008a14:	4630      	mov	r0, r6
 8008a16:	f7fc fd85 	bl	8005524 <_printf_i>
 8008a1a:	e7e4      	b.n	80089e6 <_vfiprintf_r+0x1e6>
 8008a1c:	0800a870 	.word	0x0800a870
 8008a20:	0800a87a 	.word	0x0800a87a
 8008a24:	08004ff5 	.word	0x08004ff5
 8008a28:	080087db 	.word	0x080087db
 8008a2c:	0800a876 	.word	0x0800a876

08008a30 <__sflush_r>:
 8008a30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a38:	0716      	lsls	r6, r2, #28
 8008a3a:	4605      	mov	r5, r0
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	d454      	bmi.n	8008aea <__sflush_r+0xba>
 8008a40:	684b      	ldr	r3, [r1, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	dc02      	bgt.n	8008a4c <__sflush_r+0x1c>
 8008a46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	dd48      	ble.n	8008ade <__sflush_r+0xae>
 8008a4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a4e:	2e00      	cmp	r6, #0
 8008a50:	d045      	beq.n	8008ade <__sflush_r+0xae>
 8008a52:	2300      	movs	r3, #0
 8008a54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a58:	682f      	ldr	r7, [r5, #0]
 8008a5a:	6a21      	ldr	r1, [r4, #32]
 8008a5c:	602b      	str	r3, [r5, #0]
 8008a5e:	d030      	beq.n	8008ac2 <__sflush_r+0x92>
 8008a60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a62:	89a3      	ldrh	r3, [r4, #12]
 8008a64:	0759      	lsls	r1, r3, #29
 8008a66:	d505      	bpl.n	8008a74 <__sflush_r+0x44>
 8008a68:	6863      	ldr	r3, [r4, #4]
 8008a6a:	1ad2      	subs	r2, r2, r3
 8008a6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a6e:	b10b      	cbz	r3, 8008a74 <__sflush_r+0x44>
 8008a70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a72:	1ad2      	subs	r2, r2, r3
 8008a74:	2300      	movs	r3, #0
 8008a76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a78:	6a21      	ldr	r1, [r4, #32]
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	47b0      	blx	r6
 8008a7e:	1c43      	adds	r3, r0, #1
 8008a80:	89a3      	ldrh	r3, [r4, #12]
 8008a82:	d106      	bne.n	8008a92 <__sflush_r+0x62>
 8008a84:	6829      	ldr	r1, [r5, #0]
 8008a86:	291d      	cmp	r1, #29
 8008a88:	d82b      	bhi.n	8008ae2 <__sflush_r+0xb2>
 8008a8a:	4a2a      	ldr	r2, [pc, #168]	@ (8008b34 <__sflush_r+0x104>)
 8008a8c:	410a      	asrs	r2, r1
 8008a8e:	07d6      	lsls	r6, r2, #31
 8008a90:	d427      	bmi.n	8008ae2 <__sflush_r+0xb2>
 8008a92:	2200      	movs	r2, #0
 8008a94:	6062      	str	r2, [r4, #4]
 8008a96:	04d9      	lsls	r1, r3, #19
 8008a98:	6922      	ldr	r2, [r4, #16]
 8008a9a:	6022      	str	r2, [r4, #0]
 8008a9c:	d504      	bpl.n	8008aa8 <__sflush_r+0x78>
 8008a9e:	1c42      	adds	r2, r0, #1
 8008aa0:	d101      	bne.n	8008aa6 <__sflush_r+0x76>
 8008aa2:	682b      	ldr	r3, [r5, #0]
 8008aa4:	b903      	cbnz	r3, 8008aa8 <__sflush_r+0x78>
 8008aa6:	6560      	str	r0, [r4, #84]	@ 0x54
 8008aa8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008aaa:	602f      	str	r7, [r5, #0]
 8008aac:	b1b9      	cbz	r1, 8008ade <__sflush_r+0xae>
 8008aae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ab2:	4299      	cmp	r1, r3
 8008ab4:	d002      	beq.n	8008abc <__sflush_r+0x8c>
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	f7fe f966 	bl	8006d88 <_free_r>
 8008abc:	2300      	movs	r3, #0
 8008abe:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ac0:	e00d      	b.n	8008ade <__sflush_r+0xae>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	47b0      	blx	r6
 8008ac8:	4602      	mov	r2, r0
 8008aca:	1c50      	adds	r0, r2, #1
 8008acc:	d1c9      	bne.n	8008a62 <__sflush_r+0x32>
 8008ace:	682b      	ldr	r3, [r5, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d0c6      	beq.n	8008a62 <__sflush_r+0x32>
 8008ad4:	2b1d      	cmp	r3, #29
 8008ad6:	d001      	beq.n	8008adc <__sflush_r+0xac>
 8008ad8:	2b16      	cmp	r3, #22
 8008ada:	d11e      	bne.n	8008b1a <__sflush_r+0xea>
 8008adc:	602f      	str	r7, [r5, #0]
 8008ade:	2000      	movs	r0, #0
 8008ae0:	e022      	b.n	8008b28 <__sflush_r+0xf8>
 8008ae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ae6:	b21b      	sxth	r3, r3
 8008ae8:	e01b      	b.n	8008b22 <__sflush_r+0xf2>
 8008aea:	690f      	ldr	r7, [r1, #16]
 8008aec:	2f00      	cmp	r7, #0
 8008aee:	d0f6      	beq.n	8008ade <__sflush_r+0xae>
 8008af0:	0793      	lsls	r3, r2, #30
 8008af2:	680e      	ldr	r6, [r1, #0]
 8008af4:	bf08      	it	eq
 8008af6:	694b      	ldreq	r3, [r1, #20]
 8008af8:	600f      	str	r7, [r1, #0]
 8008afa:	bf18      	it	ne
 8008afc:	2300      	movne	r3, #0
 8008afe:	eba6 0807 	sub.w	r8, r6, r7
 8008b02:	608b      	str	r3, [r1, #8]
 8008b04:	f1b8 0f00 	cmp.w	r8, #0
 8008b08:	dde9      	ble.n	8008ade <__sflush_r+0xae>
 8008b0a:	6a21      	ldr	r1, [r4, #32]
 8008b0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b0e:	4643      	mov	r3, r8
 8008b10:	463a      	mov	r2, r7
 8008b12:	4628      	mov	r0, r5
 8008b14:	47b0      	blx	r6
 8008b16:	2800      	cmp	r0, #0
 8008b18:	dc08      	bgt.n	8008b2c <__sflush_r+0xfc>
 8008b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b22:	81a3      	strh	r3, [r4, #12]
 8008b24:	f04f 30ff 	mov.w	r0, #4294967295
 8008b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b2c:	4407      	add	r7, r0
 8008b2e:	eba8 0800 	sub.w	r8, r8, r0
 8008b32:	e7e7      	b.n	8008b04 <__sflush_r+0xd4>
 8008b34:	dfbffffe 	.word	0xdfbffffe

08008b38 <_fflush_r>:
 8008b38:	b538      	push	{r3, r4, r5, lr}
 8008b3a:	690b      	ldr	r3, [r1, #16]
 8008b3c:	4605      	mov	r5, r0
 8008b3e:	460c      	mov	r4, r1
 8008b40:	b913      	cbnz	r3, 8008b48 <_fflush_r+0x10>
 8008b42:	2500      	movs	r5, #0
 8008b44:	4628      	mov	r0, r5
 8008b46:	bd38      	pop	{r3, r4, r5, pc}
 8008b48:	b118      	cbz	r0, 8008b52 <_fflush_r+0x1a>
 8008b4a:	6a03      	ldr	r3, [r0, #32]
 8008b4c:	b90b      	cbnz	r3, 8008b52 <_fflush_r+0x1a>
 8008b4e:	f7fd f8a9 	bl	8005ca4 <__sinit>
 8008b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d0f3      	beq.n	8008b42 <_fflush_r+0xa>
 8008b5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b5c:	07d0      	lsls	r0, r2, #31
 8008b5e:	d404      	bmi.n	8008b6a <_fflush_r+0x32>
 8008b60:	0599      	lsls	r1, r3, #22
 8008b62:	d402      	bmi.n	8008b6a <_fflush_r+0x32>
 8008b64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b66:	f7fd fab8 	bl	80060da <__retarget_lock_acquire_recursive>
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	4621      	mov	r1, r4
 8008b6e:	f7ff ff5f 	bl	8008a30 <__sflush_r>
 8008b72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b74:	07da      	lsls	r2, r3, #31
 8008b76:	4605      	mov	r5, r0
 8008b78:	d4e4      	bmi.n	8008b44 <_fflush_r+0xc>
 8008b7a:	89a3      	ldrh	r3, [r4, #12]
 8008b7c:	059b      	lsls	r3, r3, #22
 8008b7e:	d4e1      	bmi.n	8008b44 <_fflush_r+0xc>
 8008b80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b82:	f7fd faab 	bl	80060dc <__retarget_lock_release_recursive>
 8008b86:	e7dd      	b.n	8008b44 <_fflush_r+0xc>

08008b88 <__swhatbuf_r>:
 8008b88:	b570      	push	{r4, r5, r6, lr}
 8008b8a:	460c      	mov	r4, r1
 8008b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b90:	2900      	cmp	r1, #0
 8008b92:	b096      	sub	sp, #88	@ 0x58
 8008b94:	4615      	mov	r5, r2
 8008b96:	461e      	mov	r6, r3
 8008b98:	da0d      	bge.n	8008bb6 <__swhatbuf_r+0x2e>
 8008b9a:	89a3      	ldrh	r3, [r4, #12]
 8008b9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ba0:	f04f 0100 	mov.w	r1, #0
 8008ba4:	bf14      	ite	ne
 8008ba6:	2340      	movne	r3, #64	@ 0x40
 8008ba8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008bac:	2000      	movs	r0, #0
 8008bae:	6031      	str	r1, [r6, #0]
 8008bb0:	602b      	str	r3, [r5, #0]
 8008bb2:	b016      	add	sp, #88	@ 0x58
 8008bb4:	bd70      	pop	{r4, r5, r6, pc}
 8008bb6:	466a      	mov	r2, sp
 8008bb8:	f000 f874 	bl	8008ca4 <_fstat_r>
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	dbec      	blt.n	8008b9a <__swhatbuf_r+0x12>
 8008bc0:	9901      	ldr	r1, [sp, #4]
 8008bc2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008bc6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008bca:	4259      	negs	r1, r3
 8008bcc:	4159      	adcs	r1, r3
 8008bce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bd2:	e7eb      	b.n	8008bac <__swhatbuf_r+0x24>

08008bd4 <__smakebuf_r>:
 8008bd4:	898b      	ldrh	r3, [r1, #12]
 8008bd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bd8:	079d      	lsls	r5, r3, #30
 8008bda:	4606      	mov	r6, r0
 8008bdc:	460c      	mov	r4, r1
 8008bde:	d507      	bpl.n	8008bf0 <__smakebuf_r+0x1c>
 8008be0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008be4:	6023      	str	r3, [r4, #0]
 8008be6:	6123      	str	r3, [r4, #16]
 8008be8:	2301      	movs	r3, #1
 8008bea:	6163      	str	r3, [r4, #20]
 8008bec:	b003      	add	sp, #12
 8008bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bf0:	ab01      	add	r3, sp, #4
 8008bf2:	466a      	mov	r2, sp
 8008bf4:	f7ff ffc8 	bl	8008b88 <__swhatbuf_r>
 8008bf8:	9f00      	ldr	r7, [sp, #0]
 8008bfa:	4605      	mov	r5, r0
 8008bfc:	4639      	mov	r1, r7
 8008bfe:	4630      	mov	r0, r6
 8008c00:	f7fe f936 	bl	8006e70 <_malloc_r>
 8008c04:	b948      	cbnz	r0, 8008c1a <__smakebuf_r+0x46>
 8008c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c0a:	059a      	lsls	r2, r3, #22
 8008c0c:	d4ee      	bmi.n	8008bec <__smakebuf_r+0x18>
 8008c0e:	f023 0303 	bic.w	r3, r3, #3
 8008c12:	f043 0302 	orr.w	r3, r3, #2
 8008c16:	81a3      	strh	r3, [r4, #12]
 8008c18:	e7e2      	b.n	8008be0 <__smakebuf_r+0xc>
 8008c1a:	89a3      	ldrh	r3, [r4, #12]
 8008c1c:	6020      	str	r0, [r4, #0]
 8008c1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c22:	81a3      	strh	r3, [r4, #12]
 8008c24:	9b01      	ldr	r3, [sp, #4]
 8008c26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c2a:	b15b      	cbz	r3, 8008c44 <__smakebuf_r+0x70>
 8008c2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c30:	4630      	mov	r0, r6
 8008c32:	f000 f849 	bl	8008cc8 <_isatty_r>
 8008c36:	b128      	cbz	r0, 8008c44 <__smakebuf_r+0x70>
 8008c38:	89a3      	ldrh	r3, [r4, #12]
 8008c3a:	f023 0303 	bic.w	r3, r3, #3
 8008c3e:	f043 0301 	orr.w	r3, r3, #1
 8008c42:	81a3      	strh	r3, [r4, #12]
 8008c44:	89a3      	ldrh	r3, [r4, #12]
 8008c46:	431d      	orrs	r5, r3
 8008c48:	81a5      	strh	r5, [r4, #12]
 8008c4a:	e7cf      	b.n	8008bec <__smakebuf_r+0x18>

08008c4c <memmove>:
 8008c4c:	4288      	cmp	r0, r1
 8008c4e:	b510      	push	{r4, lr}
 8008c50:	eb01 0402 	add.w	r4, r1, r2
 8008c54:	d902      	bls.n	8008c5c <memmove+0x10>
 8008c56:	4284      	cmp	r4, r0
 8008c58:	4623      	mov	r3, r4
 8008c5a:	d807      	bhi.n	8008c6c <memmove+0x20>
 8008c5c:	1e43      	subs	r3, r0, #1
 8008c5e:	42a1      	cmp	r1, r4
 8008c60:	d008      	beq.n	8008c74 <memmove+0x28>
 8008c62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c6a:	e7f8      	b.n	8008c5e <memmove+0x12>
 8008c6c:	4402      	add	r2, r0
 8008c6e:	4601      	mov	r1, r0
 8008c70:	428a      	cmp	r2, r1
 8008c72:	d100      	bne.n	8008c76 <memmove+0x2a>
 8008c74:	bd10      	pop	{r4, pc}
 8008c76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c7e:	e7f7      	b.n	8008c70 <memmove+0x24>

08008c80 <strncmp>:
 8008c80:	b510      	push	{r4, lr}
 8008c82:	b16a      	cbz	r2, 8008ca0 <strncmp+0x20>
 8008c84:	3901      	subs	r1, #1
 8008c86:	1884      	adds	r4, r0, r2
 8008c88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c8c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d103      	bne.n	8008c9c <strncmp+0x1c>
 8008c94:	42a0      	cmp	r0, r4
 8008c96:	d001      	beq.n	8008c9c <strncmp+0x1c>
 8008c98:	2a00      	cmp	r2, #0
 8008c9a:	d1f5      	bne.n	8008c88 <strncmp+0x8>
 8008c9c:	1ad0      	subs	r0, r2, r3
 8008c9e:	bd10      	pop	{r4, pc}
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	e7fc      	b.n	8008c9e <strncmp+0x1e>

08008ca4 <_fstat_r>:
 8008ca4:	b538      	push	{r3, r4, r5, lr}
 8008ca6:	4d07      	ldr	r5, [pc, #28]	@ (8008cc4 <_fstat_r+0x20>)
 8008ca8:	2300      	movs	r3, #0
 8008caa:	4604      	mov	r4, r0
 8008cac:	4608      	mov	r0, r1
 8008cae:	4611      	mov	r1, r2
 8008cb0:	602b      	str	r3, [r5, #0]
 8008cb2:	f7f9 fd69 	bl	8002788 <_fstat>
 8008cb6:	1c43      	adds	r3, r0, #1
 8008cb8:	d102      	bne.n	8008cc0 <_fstat_r+0x1c>
 8008cba:	682b      	ldr	r3, [r5, #0]
 8008cbc:	b103      	cbz	r3, 8008cc0 <_fstat_r+0x1c>
 8008cbe:	6023      	str	r3, [r4, #0]
 8008cc0:	bd38      	pop	{r3, r4, r5, pc}
 8008cc2:	bf00      	nop
 8008cc4:	2000095c 	.word	0x2000095c

08008cc8 <_isatty_r>:
 8008cc8:	b538      	push	{r3, r4, r5, lr}
 8008cca:	4d06      	ldr	r5, [pc, #24]	@ (8008ce4 <_isatty_r+0x1c>)
 8008ccc:	2300      	movs	r3, #0
 8008cce:	4604      	mov	r4, r0
 8008cd0:	4608      	mov	r0, r1
 8008cd2:	602b      	str	r3, [r5, #0]
 8008cd4:	f7f9 fd68 	bl	80027a8 <_isatty>
 8008cd8:	1c43      	adds	r3, r0, #1
 8008cda:	d102      	bne.n	8008ce2 <_isatty_r+0x1a>
 8008cdc:	682b      	ldr	r3, [r5, #0]
 8008cde:	b103      	cbz	r3, 8008ce2 <_isatty_r+0x1a>
 8008ce0:	6023      	str	r3, [r4, #0]
 8008ce2:	bd38      	pop	{r3, r4, r5, pc}
 8008ce4:	2000095c 	.word	0x2000095c

08008ce8 <_sbrk_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	4d06      	ldr	r5, [pc, #24]	@ (8008d04 <_sbrk_r+0x1c>)
 8008cec:	2300      	movs	r3, #0
 8008cee:	4604      	mov	r4, r0
 8008cf0:	4608      	mov	r0, r1
 8008cf2:	602b      	str	r3, [r5, #0]
 8008cf4:	f7f9 fd70 	bl	80027d8 <_sbrk>
 8008cf8:	1c43      	adds	r3, r0, #1
 8008cfa:	d102      	bne.n	8008d02 <_sbrk_r+0x1a>
 8008cfc:	682b      	ldr	r3, [r5, #0]
 8008cfe:	b103      	cbz	r3, 8008d02 <_sbrk_r+0x1a>
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	bd38      	pop	{r3, r4, r5, pc}
 8008d04:	2000095c 	.word	0x2000095c

08008d08 <memcpy>:
 8008d08:	440a      	add	r2, r1
 8008d0a:	4291      	cmp	r1, r2
 8008d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d10:	d100      	bne.n	8008d14 <memcpy+0xc>
 8008d12:	4770      	bx	lr
 8008d14:	b510      	push	{r4, lr}
 8008d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d1e:	4291      	cmp	r1, r2
 8008d20:	d1f9      	bne.n	8008d16 <memcpy+0xe>
 8008d22:	bd10      	pop	{r4, pc}
 8008d24:	0000      	movs	r0, r0
	...

08008d28 <nan>:
 8008d28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008d30 <nan+0x8>
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	00000000 	.word	0x00000000
 8008d34:	7ff80000 	.word	0x7ff80000

08008d38 <__assert_func>:
 8008d38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d3a:	4614      	mov	r4, r2
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	4b09      	ldr	r3, [pc, #36]	@ (8008d64 <__assert_func+0x2c>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4605      	mov	r5, r0
 8008d44:	68d8      	ldr	r0, [r3, #12]
 8008d46:	b954      	cbnz	r4, 8008d5e <__assert_func+0x26>
 8008d48:	4b07      	ldr	r3, [pc, #28]	@ (8008d68 <__assert_func+0x30>)
 8008d4a:	461c      	mov	r4, r3
 8008d4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d50:	9100      	str	r1, [sp, #0]
 8008d52:	462b      	mov	r3, r5
 8008d54:	4905      	ldr	r1, [pc, #20]	@ (8008d6c <__assert_func+0x34>)
 8008d56:	f000 fba7 	bl	80094a8 <fiprintf>
 8008d5a:	f000 fbb7 	bl	80094cc <abort>
 8008d5e:	4b04      	ldr	r3, [pc, #16]	@ (8008d70 <__assert_func+0x38>)
 8008d60:	e7f4      	b.n	8008d4c <__assert_func+0x14>
 8008d62:	bf00      	nop
 8008d64:	20000054 	.word	0x20000054
 8008d68:	0800a8c4 	.word	0x0800a8c4
 8008d6c:	0800a896 	.word	0x0800a896
 8008d70:	0800a889 	.word	0x0800a889

08008d74 <_calloc_r>:
 8008d74:	b570      	push	{r4, r5, r6, lr}
 8008d76:	fba1 5402 	umull	r5, r4, r1, r2
 8008d7a:	b93c      	cbnz	r4, 8008d8c <_calloc_r+0x18>
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	f7fe f877 	bl	8006e70 <_malloc_r>
 8008d82:	4606      	mov	r6, r0
 8008d84:	b928      	cbnz	r0, 8008d92 <_calloc_r+0x1e>
 8008d86:	2600      	movs	r6, #0
 8008d88:	4630      	mov	r0, r6
 8008d8a:	bd70      	pop	{r4, r5, r6, pc}
 8008d8c:	220c      	movs	r2, #12
 8008d8e:	6002      	str	r2, [r0, #0]
 8008d90:	e7f9      	b.n	8008d86 <_calloc_r+0x12>
 8008d92:	462a      	mov	r2, r5
 8008d94:	4621      	mov	r1, r4
 8008d96:	f7fd f923 	bl	8005fe0 <memset>
 8008d9a:	e7f5      	b.n	8008d88 <_calloc_r+0x14>

08008d9c <rshift>:
 8008d9c:	6903      	ldr	r3, [r0, #16]
 8008d9e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008da2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008da6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008daa:	f100 0414 	add.w	r4, r0, #20
 8008dae:	dd45      	ble.n	8008e3c <rshift+0xa0>
 8008db0:	f011 011f 	ands.w	r1, r1, #31
 8008db4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008db8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008dbc:	d10c      	bne.n	8008dd8 <rshift+0x3c>
 8008dbe:	f100 0710 	add.w	r7, r0, #16
 8008dc2:	4629      	mov	r1, r5
 8008dc4:	42b1      	cmp	r1, r6
 8008dc6:	d334      	bcc.n	8008e32 <rshift+0x96>
 8008dc8:	1a9b      	subs	r3, r3, r2
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	1eea      	subs	r2, r5, #3
 8008dce:	4296      	cmp	r6, r2
 8008dd0:	bf38      	it	cc
 8008dd2:	2300      	movcc	r3, #0
 8008dd4:	4423      	add	r3, r4
 8008dd6:	e015      	b.n	8008e04 <rshift+0x68>
 8008dd8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008ddc:	f1c1 0820 	rsb	r8, r1, #32
 8008de0:	40cf      	lsrs	r7, r1
 8008de2:	f105 0e04 	add.w	lr, r5, #4
 8008de6:	46a1      	mov	r9, r4
 8008de8:	4576      	cmp	r6, lr
 8008dea:	46f4      	mov	ip, lr
 8008dec:	d815      	bhi.n	8008e1a <rshift+0x7e>
 8008dee:	1a9a      	subs	r2, r3, r2
 8008df0:	0092      	lsls	r2, r2, #2
 8008df2:	3a04      	subs	r2, #4
 8008df4:	3501      	adds	r5, #1
 8008df6:	42ae      	cmp	r6, r5
 8008df8:	bf38      	it	cc
 8008dfa:	2200      	movcc	r2, #0
 8008dfc:	18a3      	adds	r3, r4, r2
 8008dfe:	50a7      	str	r7, [r4, r2]
 8008e00:	b107      	cbz	r7, 8008e04 <rshift+0x68>
 8008e02:	3304      	adds	r3, #4
 8008e04:	1b1a      	subs	r2, r3, r4
 8008e06:	42a3      	cmp	r3, r4
 8008e08:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008e0c:	bf08      	it	eq
 8008e0e:	2300      	moveq	r3, #0
 8008e10:	6102      	str	r2, [r0, #16]
 8008e12:	bf08      	it	eq
 8008e14:	6143      	streq	r3, [r0, #20]
 8008e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e1a:	f8dc c000 	ldr.w	ip, [ip]
 8008e1e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008e22:	ea4c 0707 	orr.w	r7, ip, r7
 8008e26:	f849 7b04 	str.w	r7, [r9], #4
 8008e2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e2e:	40cf      	lsrs	r7, r1
 8008e30:	e7da      	b.n	8008de8 <rshift+0x4c>
 8008e32:	f851 cb04 	ldr.w	ip, [r1], #4
 8008e36:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e3a:	e7c3      	b.n	8008dc4 <rshift+0x28>
 8008e3c:	4623      	mov	r3, r4
 8008e3e:	e7e1      	b.n	8008e04 <rshift+0x68>

08008e40 <__hexdig_fun>:
 8008e40:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008e44:	2b09      	cmp	r3, #9
 8008e46:	d802      	bhi.n	8008e4e <__hexdig_fun+0xe>
 8008e48:	3820      	subs	r0, #32
 8008e4a:	b2c0      	uxtb	r0, r0
 8008e4c:	4770      	bx	lr
 8008e4e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008e52:	2b05      	cmp	r3, #5
 8008e54:	d801      	bhi.n	8008e5a <__hexdig_fun+0x1a>
 8008e56:	3847      	subs	r0, #71	@ 0x47
 8008e58:	e7f7      	b.n	8008e4a <__hexdig_fun+0xa>
 8008e5a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008e5e:	2b05      	cmp	r3, #5
 8008e60:	d801      	bhi.n	8008e66 <__hexdig_fun+0x26>
 8008e62:	3827      	subs	r0, #39	@ 0x27
 8008e64:	e7f1      	b.n	8008e4a <__hexdig_fun+0xa>
 8008e66:	2000      	movs	r0, #0
 8008e68:	4770      	bx	lr
	...

08008e6c <__gethex>:
 8008e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e70:	b085      	sub	sp, #20
 8008e72:	468a      	mov	sl, r1
 8008e74:	9302      	str	r3, [sp, #8]
 8008e76:	680b      	ldr	r3, [r1, #0]
 8008e78:	9001      	str	r0, [sp, #4]
 8008e7a:	4690      	mov	r8, r2
 8008e7c:	1c9c      	adds	r4, r3, #2
 8008e7e:	46a1      	mov	r9, r4
 8008e80:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008e84:	2830      	cmp	r0, #48	@ 0x30
 8008e86:	d0fa      	beq.n	8008e7e <__gethex+0x12>
 8008e88:	eba9 0303 	sub.w	r3, r9, r3
 8008e8c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008e90:	f7ff ffd6 	bl	8008e40 <__hexdig_fun>
 8008e94:	4605      	mov	r5, r0
 8008e96:	2800      	cmp	r0, #0
 8008e98:	d168      	bne.n	8008f6c <__gethex+0x100>
 8008e9a:	49a0      	ldr	r1, [pc, #640]	@ (800911c <__gethex+0x2b0>)
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	4648      	mov	r0, r9
 8008ea0:	f7ff feee 	bl	8008c80 <strncmp>
 8008ea4:	4607      	mov	r7, r0
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	d167      	bne.n	8008f7a <__gethex+0x10e>
 8008eaa:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008eae:	4626      	mov	r6, r4
 8008eb0:	f7ff ffc6 	bl	8008e40 <__hexdig_fun>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	d062      	beq.n	8008f7e <__gethex+0x112>
 8008eb8:	4623      	mov	r3, r4
 8008eba:	7818      	ldrb	r0, [r3, #0]
 8008ebc:	2830      	cmp	r0, #48	@ 0x30
 8008ebe:	4699      	mov	r9, r3
 8008ec0:	f103 0301 	add.w	r3, r3, #1
 8008ec4:	d0f9      	beq.n	8008eba <__gethex+0x4e>
 8008ec6:	f7ff ffbb 	bl	8008e40 <__hexdig_fun>
 8008eca:	fab0 f580 	clz	r5, r0
 8008ece:	096d      	lsrs	r5, r5, #5
 8008ed0:	f04f 0b01 	mov.w	fp, #1
 8008ed4:	464a      	mov	r2, r9
 8008ed6:	4616      	mov	r6, r2
 8008ed8:	3201      	adds	r2, #1
 8008eda:	7830      	ldrb	r0, [r6, #0]
 8008edc:	f7ff ffb0 	bl	8008e40 <__hexdig_fun>
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d1f8      	bne.n	8008ed6 <__gethex+0x6a>
 8008ee4:	498d      	ldr	r1, [pc, #564]	@ (800911c <__gethex+0x2b0>)
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	4630      	mov	r0, r6
 8008eea:	f7ff fec9 	bl	8008c80 <strncmp>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d13f      	bne.n	8008f72 <__gethex+0x106>
 8008ef2:	b944      	cbnz	r4, 8008f06 <__gethex+0x9a>
 8008ef4:	1c74      	adds	r4, r6, #1
 8008ef6:	4622      	mov	r2, r4
 8008ef8:	4616      	mov	r6, r2
 8008efa:	3201      	adds	r2, #1
 8008efc:	7830      	ldrb	r0, [r6, #0]
 8008efe:	f7ff ff9f 	bl	8008e40 <__hexdig_fun>
 8008f02:	2800      	cmp	r0, #0
 8008f04:	d1f8      	bne.n	8008ef8 <__gethex+0x8c>
 8008f06:	1ba4      	subs	r4, r4, r6
 8008f08:	00a7      	lsls	r7, r4, #2
 8008f0a:	7833      	ldrb	r3, [r6, #0]
 8008f0c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008f10:	2b50      	cmp	r3, #80	@ 0x50
 8008f12:	d13e      	bne.n	8008f92 <__gethex+0x126>
 8008f14:	7873      	ldrb	r3, [r6, #1]
 8008f16:	2b2b      	cmp	r3, #43	@ 0x2b
 8008f18:	d033      	beq.n	8008f82 <__gethex+0x116>
 8008f1a:	2b2d      	cmp	r3, #45	@ 0x2d
 8008f1c:	d034      	beq.n	8008f88 <__gethex+0x11c>
 8008f1e:	1c71      	adds	r1, r6, #1
 8008f20:	2400      	movs	r4, #0
 8008f22:	7808      	ldrb	r0, [r1, #0]
 8008f24:	f7ff ff8c 	bl	8008e40 <__hexdig_fun>
 8008f28:	1e43      	subs	r3, r0, #1
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	2b18      	cmp	r3, #24
 8008f2e:	d830      	bhi.n	8008f92 <__gethex+0x126>
 8008f30:	f1a0 0210 	sub.w	r2, r0, #16
 8008f34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f38:	f7ff ff82 	bl	8008e40 <__hexdig_fun>
 8008f3c:	f100 3cff 	add.w	ip, r0, #4294967295
 8008f40:	fa5f fc8c 	uxtb.w	ip, ip
 8008f44:	f1bc 0f18 	cmp.w	ip, #24
 8008f48:	f04f 030a 	mov.w	r3, #10
 8008f4c:	d91e      	bls.n	8008f8c <__gethex+0x120>
 8008f4e:	b104      	cbz	r4, 8008f52 <__gethex+0xe6>
 8008f50:	4252      	negs	r2, r2
 8008f52:	4417      	add	r7, r2
 8008f54:	f8ca 1000 	str.w	r1, [sl]
 8008f58:	b1ed      	cbz	r5, 8008f96 <__gethex+0x12a>
 8008f5a:	f1bb 0f00 	cmp.w	fp, #0
 8008f5e:	bf0c      	ite	eq
 8008f60:	2506      	moveq	r5, #6
 8008f62:	2500      	movne	r5, #0
 8008f64:	4628      	mov	r0, r5
 8008f66:	b005      	add	sp, #20
 8008f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f6c:	2500      	movs	r5, #0
 8008f6e:	462c      	mov	r4, r5
 8008f70:	e7b0      	b.n	8008ed4 <__gethex+0x68>
 8008f72:	2c00      	cmp	r4, #0
 8008f74:	d1c7      	bne.n	8008f06 <__gethex+0x9a>
 8008f76:	4627      	mov	r7, r4
 8008f78:	e7c7      	b.n	8008f0a <__gethex+0x9e>
 8008f7a:	464e      	mov	r6, r9
 8008f7c:	462f      	mov	r7, r5
 8008f7e:	2501      	movs	r5, #1
 8008f80:	e7c3      	b.n	8008f0a <__gethex+0x9e>
 8008f82:	2400      	movs	r4, #0
 8008f84:	1cb1      	adds	r1, r6, #2
 8008f86:	e7cc      	b.n	8008f22 <__gethex+0xb6>
 8008f88:	2401      	movs	r4, #1
 8008f8a:	e7fb      	b.n	8008f84 <__gethex+0x118>
 8008f8c:	fb03 0002 	mla	r0, r3, r2, r0
 8008f90:	e7ce      	b.n	8008f30 <__gethex+0xc4>
 8008f92:	4631      	mov	r1, r6
 8008f94:	e7de      	b.n	8008f54 <__gethex+0xe8>
 8008f96:	eba6 0309 	sub.w	r3, r6, r9
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	4629      	mov	r1, r5
 8008f9e:	2b07      	cmp	r3, #7
 8008fa0:	dc0a      	bgt.n	8008fb8 <__gethex+0x14c>
 8008fa2:	9801      	ldr	r0, [sp, #4]
 8008fa4:	f7fd fff0 	bl	8006f88 <_Balloc>
 8008fa8:	4604      	mov	r4, r0
 8008faa:	b940      	cbnz	r0, 8008fbe <__gethex+0x152>
 8008fac:	4b5c      	ldr	r3, [pc, #368]	@ (8009120 <__gethex+0x2b4>)
 8008fae:	4602      	mov	r2, r0
 8008fb0:	21e4      	movs	r1, #228	@ 0xe4
 8008fb2:	485c      	ldr	r0, [pc, #368]	@ (8009124 <__gethex+0x2b8>)
 8008fb4:	f7ff fec0 	bl	8008d38 <__assert_func>
 8008fb8:	3101      	adds	r1, #1
 8008fba:	105b      	asrs	r3, r3, #1
 8008fbc:	e7ef      	b.n	8008f9e <__gethex+0x132>
 8008fbe:	f100 0a14 	add.w	sl, r0, #20
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	4655      	mov	r5, sl
 8008fc6:	469b      	mov	fp, r3
 8008fc8:	45b1      	cmp	r9, r6
 8008fca:	d337      	bcc.n	800903c <__gethex+0x1d0>
 8008fcc:	f845 bb04 	str.w	fp, [r5], #4
 8008fd0:	eba5 050a 	sub.w	r5, r5, sl
 8008fd4:	10ad      	asrs	r5, r5, #2
 8008fd6:	6125      	str	r5, [r4, #16]
 8008fd8:	4658      	mov	r0, fp
 8008fda:	f7fe f8c7 	bl	800716c <__hi0bits>
 8008fde:	016d      	lsls	r5, r5, #5
 8008fe0:	f8d8 6000 	ldr.w	r6, [r8]
 8008fe4:	1a2d      	subs	r5, r5, r0
 8008fe6:	42b5      	cmp	r5, r6
 8008fe8:	dd54      	ble.n	8009094 <__gethex+0x228>
 8008fea:	1bad      	subs	r5, r5, r6
 8008fec:	4629      	mov	r1, r5
 8008fee:	4620      	mov	r0, r4
 8008ff0:	f7fe fc5b 	bl	80078aa <__any_on>
 8008ff4:	4681      	mov	r9, r0
 8008ff6:	b178      	cbz	r0, 8009018 <__gethex+0x1ac>
 8008ff8:	1e6b      	subs	r3, r5, #1
 8008ffa:	1159      	asrs	r1, r3, #5
 8008ffc:	f003 021f 	and.w	r2, r3, #31
 8009000:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009004:	f04f 0901 	mov.w	r9, #1
 8009008:	fa09 f202 	lsl.w	r2, r9, r2
 800900c:	420a      	tst	r2, r1
 800900e:	d003      	beq.n	8009018 <__gethex+0x1ac>
 8009010:	454b      	cmp	r3, r9
 8009012:	dc36      	bgt.n	8009082 <__gethex+0x216>
 8009014:	f04f 0902 	mov.w	r9, #2
 8009018:	4629      	mov	r1, r5
 800901a:	4620      	mov	r0, r4
 800901c:	f7ff febe 	bl	8008d9c <rshift>
 8009020:	442f      	add	r7, r5
 8009022:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009026:	42bb      	cmp	r3, r7
 8009028:	da42      	bge.n	80090b0 <__gethex+0x244>
 800902a:	9801      	ldr	r0, [sp, #4]
 800902c:	4621      	mov	r1, r4
 800902e:	f7fd ffeb 	bl	8007008 <_Bfree>
 8009032:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009034:	2300      	movs	r3, #0
 8009036:	6013      	str	r3, [r2, #0]
 8009038:	25a3      	movs	r5, #163	@ 0xa3
 800903a:	e793      	b.n	8008f64 <__gethex+0xf8>
 800903c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009040:	2a2e      	cmp	r2, #46	@ 0x2e
 8009042:	d012      	beq.n	800906a <__gethex+0x1fe>
 8009044:	2b20      	cmp	r3, #32
 8009046:	d104      	bne.n	8009052 <__gethex+0x1e6>
 8009048:	f845 bb04 	str.w	fp, [r5], #4
 800904c:	f04f 0b00 	mov.w	fp, #0
 8009050:	465b      	mov	r3, fp
 8009052:	7830      	ldrb	r0, [r6, #0]
 8009054:	9303      	str	r3, [sp, #12]
 8009056:	f7ff fef3 	bl	8008e40 <__hexdig_fun>
 800905a:	9b03      	ldr	r3, [sp, #12]
 800905c:	f000 000f 	and.w	r0, r0, #15
 8009060:	4098      	lsls	r0, r3
 8009062:	ea4b 0b00 	orr.w	fp, fp, r0
 8009066:	3304      	adds	r3, #4
 8009068:	e7ae      	b.n	8008fc8 <__gethex+0x15c>
 800906a:	45b1      	cmp	r9, r6
 800906c:	d8ea      	bhi.n	8009044 <__gethex+0x1d8>
 800906e:	492b      	ldr	r1, [pc, #172]	@ (800911c <__gethex+0x2b0>)
 8009070:	9303      	str	r3, [sp, #12]
 8009072:	2201      	movs	r2, #1
 8009074:	4630      	mov	r0, r6
 8009076:	f7ff fe03 	bl	8008c80 <strncmp>
 800907a:	9b03      	ldr	r3, [sp, #12]
 800907c:	2800      	cmp	r0, #0
 800907e:	d1e1      	bne.n	8009044 <__gethex+0x1d8>
 8009080:	e7a2      	b.n	8008fc8 <__gethex+0x15c>
 8009082:	1ea9      	subs	r1, r5, #2
 8009084:	4620      	mov	r0, r4
 8009086:	f7fe fc10 	bl	80078aa <__any_on>
 800908a:	2800      	cmp	r0, #0
 800908c:	d0c2      	beq.n	8009014 <__gethex+0x1a8>
 800908e:	f04f 0903 	mov.w	r9, #3
 8009092:	e7c1      	b.n	8009018 <__gethex+0x1ac>
 8009094:	da09      	bge.n	80090aa <__gethex+0x23e>
 8009096:	1b75      	subs	r5, r6, r5
 8009098:	4621      	mov	r1, r4
 800909a:	9801      	ldr	r0, [sp, #4]
 800909c:	462a      	mov	r2, r5
 800909e:	f7fe f9cb 	bl	8007438 <__lshift>
 80090a2:	1b7f      	subs	r7, r7, r5
 80090a4:	4604      	mov	r4, r0
 80090a6:	f100 0a14 	add.w	sl, r0, #20
 80090aa:	f04f 0900 	mov.w	r9, #0
 80090ae:	e7b8      	b.n	8009022 <__gethex+0x1b6>
 80090b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80090b4:	42bd      	cmp	r5, r7
 80090b6:	dd6f      	ble.n	8009198 <__gethex+0x32c>
 80090b8:	1bed      	subs	r5, r5, r7
 80090ba:	42ae      	cmp	r6, r5
 80090bc:	dc34      	bgt.n	8009128 <__gethex+0x2bc>
 80090be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d022      	beq.n	800910c <__gethex+0x2a0>
 80090c6:	2b03      	cmp	r3, #3
 80090c8:	d024      	beq.n	8009114 <__gethex+0x2a8>
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d115      	bne.n	80090fa <__gethex+0x28e>
 80090ce:	42ae      	cmp	r6, r5
 80090d0:	d113      	bne.n	80090fa <__gethex+0x28e>
 80090d2:	2e01      	cmp	r6, #1
 80090d4:	d10b      	bne.n	80090ee <__gethex+0x282>
 80090d6:	9a02      	ldr	r2, [sp, #8]
 80090d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	2301      	movs	r3, #1
 80090e0:	6123      	str	r3, [r4, #16]
 80090e2:	f8ca 3000 	str.w	r3, [sl]
 80090e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090e8:	2562      	movs	r5, #98	@ 0x62
 80090ea:	601c      	str	r4, [r3, #0]
 80090ec:	e73a      	b.n	8008f64 <__gethex+0xf8>
 80090ee:	1e71      	subs	r1, r6, #1
 80090f0:	4620      	mov	r0, r4
 80090f2:	f7fe fbda 	bl	80078aa <__any_on>
 80090f6:	2800      	cmp	r0, #0
 80090f8:	d1ed      	bne.n	80090d6 <__gethex+0x26a>
 80090fa:	9801      	ldr	r0, [sp, #4]
 80090fc:	4621      	mov	r1, r4
 80090fe:	f7fd ff83 	bl	8007008 <_Bfree>
 8009102:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009104:	2300      	movs	r3, #0
 8009106:	6013      	str	r3, [r2, #0]
 8009108:	2550      	movs	r5, #80	@ 0x50
 800910a:	e72b      	b.n	8008f64 <__gethex+0xf8>
 800910c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1f3      	bne.n	80090fa <__gethex+0x28e>
 8009112:	e7e0      	b.n	80090d6 <__gethex+0x26a>
 8009114:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009116:	2b00      	cmp	r3, #0
 8009118:	d1dd      	bne.n	80090d6 <__gethex+0x26a>
 800911a:	e7ee      	b.n	80090fa <__gethex+0x28e>
 800911c:	0800a818 	.word	0x0800a818
 8009120:	0800a6ae 	.word	0x0800a6ae
 8009124:	0800a8c5 	.word	0x0800a8c5
 8009128:	1e6f      	subs	r7, r5, #1
 800912a:	f1b9 0f00 	cmp.w	r9, #0
 800912e:	d130      	bne.n	8009192 <__gethex+0x326>
 8009130:	b127      	cbz	r7, 800913c <__gethex+0x2d0>
 8009132:	4639      	mov	r1, r7
 8009134:	4620      	mov	r0, r4
 8009136:	f7fe fbb8 	bl	80078aa <__any_on>
 800913a:	4681      	mov	r9, r0
 800913c:	117a      	asrs	r2, r7, #5
 800913e:	2301      	movs	r3, #1
 8009140:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009144:	f007 071f 	and.w	r7, r7, #31
 8009148:	40bb      	lsls	r3, r7
 800914a:	4213      	tst	r3, r2
 800914c:	4629      	mov	r1, r5
 800914e:	4620      	mov	r0, r4
 8009150:	bf18      	it	ne
 8009152:	f049 0902 	orrne.w	r9, r9, #2
 8009156:	f7ff fe21 	bl	8008d9c <rshift>
 800915a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800915e:	1b76      	subs	r6, r6, r5
 8009160:	2502      	movs	r5, #2
 8009162:	f1b9 0f00 	cmp.w	r9, #0
 8009166:	d047      	beq.n	80091f8 <__gethex+0x38c>
 8009168:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800916c:	2b02      	cmp	r3, #2
 800916e:	d015      	beq.n	800919c <__gethex+0x330>
 8009170:	2b03      	cmp	r3, #3
 8009172:	d017      	beq.n	80091a4 <__gethex+0x338>
 8009174:	2b01      	cmp	r3, #1
 8009176:	d109      	bne.n	800918c <__gethex+0x320>
 8009178:	f019 0f02 	tst.w	r9, #2
 800917c:	d006      	beq.n	800918c <__gethex+0x320>
 800917e:	f8da 3000 	ldr.w	r3, [sl]
 8009182:	ea49 0903 	orr.w	r9, r9, r3
 8009186:	f019 0f01 	tst.w	r9, #1
 800918a:	d10e      	bne.n	80091aa <__gethex+0x33e>
 800918c:	f045 0510 	orr.w	r5, r5, #16
 8009190:	e032      	b.n	80091f8 <__gethex+0x38c>
 8009192:	f04f 0901 	mov.w	r9, #1
 8009196:	e7d1      	b.n	800913c <__gethex+0x2d0>
 8009198:	2501      	movs	r5, #1
 800919a:	e7e2      	b.n	8009162 <__gethex+0x2f6>
 800919c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800919e:	f1c3 0301 	rsb	r3, r3, #1
 80091a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80091a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d0f0      	beq.n	800918c <__gethex+0x320>
 80091aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80091ae:	f104 0314 	add.w	r3, r4, #20
 80091b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80091b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80091ba:	f04f 0c00 	mov.w	ip, #0
 80091be:	4618      	mov	r0, r3
 80091c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80091c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80091c8:	d01b      	beq.n	8009202 <__gethex+0x396>
 80091ca:	3201      	adds	r2, #1
 80091cc:	6002      	str	r2, [r0, #0]
 80091ce:	2d02      	cmp	r5, #2
 80091d0:	f104 0314 	add.w	r3, r4, #20
 80091d4:	d13c      	bne.n	8009250 <__gethex+0x3e4>
 80091d6:	f8d8 2000 	ldr.w	r2, [r8]
 80091da:	3a01      	subs	r2, #1
 80091dc:	42b2      	cmp	r2, r6
 80091de:	d109      	bne.n	80091f4 <__gethex+0x388>
 80091e0:	1171      	asrs	r1, r6, #5
 80091e2:	2201      	movs	r2, #1
 80091e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80091e8:	f006 061f 	and.w	r6, r6, #31
 80091ec:	fa02 f606 	lsl.w	r6, r2, r6
 80091f0:	421e      	tst	r6, r3
 80091f2:	d13a      	bne.n	800926a <__gethex+0x3fe>
 80091f4:	f045 0520 	orr.w	r5, r5, #32
 80091f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091fa:	601c      	str	r4, [r3, #0]
 80091fc:	9b02      	ldr	r3, [sp, #8]
 80091fe:	601f      	str	r7, [r3, #0]
 8009200:	e6b0      	b.n	8008f64 <__gethex+0xf8>
 8009202:	4299      	cmp	r1, r3
 8009204:	f843 cc04 	str.w	ip, [r3, #-4]
 8009208:	d8d9      	bhi.n	80091be <__gethex+0x352>
 800920a:	68a3      	ldr	r3, [r4, #8]
 800920c:	459b      	cmp	fp, r3
 800920e:	db17      	blt.n	8009240 <__gethex+0x3d4>
 8009210:	6861      	ldr	r1, [r4, #4]
 8009212:	9801      	ldr	r0, [sp, #4]
 8009214:	3101      	adds	r1, #1
 8009216:	f7fd feb7 	bl	8006f88 <_Balloc>
 800921a:	4681      	mov	r9, r0
 800921c:	b918      	cbnz	r0, 8009226 <__gethex+0x3ba>
 800921e:	4b1a      	ldr	r3, [pc, #104]	@ (8009288 <__gethex+0x41c>)
 8009220:	4602      	mov	r2, r0
 8009222:	2184      	movs	r1, #132	@ 0x84
 8009224:	e6c5      	b.n	8008fb2 <__gethex+0x146>
 8009226:	6922      	ldr	r2, [r4, #16]
 8009228:	3202      	adds	r2, #2
 800922a:	f104 010c 	add.w	r1, r4, #12
 800922e:	0092      	lsls	r2, r2, #2
 8009230:	300c      	adds	r0, #12
 8009232:	f7ff fd69 	bl	8008d08 <memcpy>
 8009236:	4621      	mov	r1, r4
 8009238:	9801      	ldr	r0, [sp, #4]
 800923a:	f7fd fee5 	bl	8007008 <_Bfree>
 800923e:	464c      	mov	r4, r9
 8009240:	6923      	ldr	r3, [r4, #16]
 8009242:	1c5a      	adds	r2, r3, #1
 8009244:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009248:	6122      	str	r2, [r4, #16]
 800924a:	2201      	movs	r2, #1
 800924c:	615a      	str	r2, [r3, #20]
 800924e:	e7be      	b.n	80091ce <__gethex+0x362>
 8009250:	6922      	ldr	r2, [r4, #16]
 8009252:	455a      	cmp	r2, fp
 8009254:	dd0b      	ble.n	800926e <__gethex+0x402>
 8009256:	2101      	movs	r1, #1
 8009258:	4620      	mov	r0, r4
 800925a:	f7ff fd9f 	bl	8008d9c <rshift>
 800925e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009262:	3701      	adds	r7, #1
 8009264:	42bb      	cmp	r3, r7
 8009266:	f6ff aee0 	blt.w	800902a <__gethex+0x1be>
 800926a:	2501      	movs	r5, #1
 800926c:	e7c2      	b.n	80091f4 <__gethex+0x388>
 800926e:	f016 061f 	ands.w	r6, r6, #31
 8009272:	d0fa      	beq.n	800926a <__gethex+0x3fe>
 8009274:	4453      	add	r3, sl
 8009276:	f1c6 0620 	rsb	r6, r6, #32
 800927a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800927e:	f7fd ff75 	bl	800716c <__hi0bits>
 8009282:	42b0      	cmp	r0, r6
 8009284:	dbe7      	blt.n	8009256 <__gethex+0x3ea>
 8009286:	e7f0      	b.n	800926a <__gethex+0x3fe>
 8009288:	0800a6ae 	.word	0x0800a6ae

0800928c <L_shift>:
 800928c:	f1c2 0208 	rsb	r2, r2, #8
 8009290:	0092      	lsls	r2, r2, #2
 8009292:	b570      	push	{r4, r5, r6, lr}
 8009294:	f1c2 0620 	rsb	r6, r2, #32
 8009298:	6843      	ldr	r3, [r0, #4]
 800929a:	6804      	ldr	r4, [r0, #0]
 800929c:	fa03 f506 	lsl.w	r5, r3, r6
 80092a0:	432c      	orrs	r4, r5
 80092a2:	40d3      	lsrs	r3, r2
 80092a4:	6004      	str	r4, [r0, #0]
 80092a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80092aa:	4288      	cmp	r0, r1
 80092ac:	d3f4      	bcc.n	8009298 <L_shift+0xc>
 80092ae:	bd70      	pop	{r4, r5, r6, pc}

080092b0 <__match>:
 80092b0:	b530      	push	{r4, r5, lr}
 80092b2:	6803      	ldr	r3, [r0, #0]
 80092b4:	3301      	adds	r3, #1
 80092b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092ba:	b914      	cbnz	r4, 80092c2 <__match+0x12>
 80092bc:	6003      	str	r3, [r0, #0]
 80092be:	2001      	movs	r0, #1
 80092c0:	bd30      	pop	{r4, r5, pc}
 80092c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092c6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80092ca:	2d19      	cmp	r5, #25
 80092cc:	bf98      	it	ls
 80092ce:	3220      	addls	r2, #32
 80092d0:	42a2      	cmp	r2, r4
 80092d2:	d0f0      	beq.n	80092b6 <__match+0x6>
 80092d4:	2000      	movs	r0, #0
 80092d6:	e7f3      	b.n	80092c0 <__match+0x10>

080092d8 <__hexnan>:
 80092d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092dc:	680b      	ldr	r3, [r1, #0]
 80092de:	6801      	ldr	r1, [r0, #0]
 80092e0:	115e      	asrs	r6, r3, #5
 80092e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80092e6:	f013 031f 	ands.w	r3, r3, #31
 80092ea:	b087      	sub	sp, #28
 80092ec:	bf18      	it	ne
 80092ee:	3604      	addne	r6, #4
 80092f0:	2500      	movs	r5, #0
 80092f2:	1f37      	subs	r7, r6, #4
 80092f4:	4682      	mov	sl, r0
 80092f6:	4690      	mov	r8, r2
 80092f8:	9301      	str	r3, [sp, #4]
 80092fa:	f846 5c04 	str.w	r5, [r6, #-4]
 80092fe:	46b9      	mov	r9, r7
 8009300:	463c      	mov	r4, r7
 8009302:	9502      	str	r5, [sp, #8]
 8009304:	46ab      	mov	fp, r5
 8009306:	784a      	ldrb	r2, [r1, #1]
 8009308:	1c4b      	adds	r3, r1, #1
 800930a:	9303      	str	r3, [sp, #12]
 800930c:	b342      	cbz	r2, 8009360 <__hexnan+0x88>
 800930e:	4610      	mov	r0, r2
 8009310:	9105      	str	r1, [sp, #20]
 8009312:	9204      	str	r2, [sp, #16]
 8009314:	f7ff fd94 	bl	8008e40 <__hexdig_fun>
 8009318:	2800      	cmp	r0, #0
 800931a:	d151      	bne.n	80093c0 <__hexnan+0xe8>
 800931c:	9a04      	ldr	r2, [sp, #16]
 800931e:	9905      	ldr	r1, [sp, #20]
 8009320:	2a20      	cmp	r2, #32
 8009322:	d818      	bhi.n	8009356 <__hexnan+0x7e>
 8009324:	9b02      	ldr	r3, [sp, #8]
 8009326:	459b      	cmp	fp, r3
 8009328:	dd13      	ble.n	8009352 <__hexnan+0x7a>
 800932a:	454c      	cmp	r4, r9
 800932c:	d206      	bcs.n	800933c <__hexnan+0x64>
 800932e:	2d07      	cmp	r5, #7
 8009330:	dc04      	bgt.n	800933c <__hexnan+0x64>
 8009332:	462a      	mov	r2, r5
 8009334:	4649      	mov	r1, r9
 8009336:	4620      	mov	r0, r4
 8009338:	f7ff ffa8 	bl	800928c <L_shift>
 800933c:	4544      	cmp	r4, r8
 800933e:	d952      	bls.n	80093e6 <__hexnan+0x10e>
 8009340:	2300      	movs	r3, #0
 8009342:	f1a4 0904 	sub.w	r9, r4, #4
 8009346:	f844 3c04 	str.w	r3, [r4, #-4]
 800934a:	f8cd b008 	str.w	fp, [sp, #8]
 800934e:	464c      	mov	r4, r9
 8009350:	461d      	mov	r5, r3
 8009352:	9903      	ldr	r1, [sp, #12]
 8009354:	e7d7      	b.n	8009306 <__hexnan+0x2e>
 8009356:	2a29      	cmp	r2, #41	@ 0x29
 8009358:	d157      	bne.n	800940a <__hexnan+0x132>
 800935a:	3102      	adds	r1, #2
 800935c:	f8ca 1000 	str.w	r1, [sl]
 8009360:	f1bb 0f00 	cmp.w	fp, #0
 8009364:	d051      	beq.n	800940a <__hexnan+0x132>
 8009366:	454c      	cmp	r4, r9
 8009368:	d206      	bcs.n	8009378 <__hexnan+0xa0>
 800936a:	2d07      	cmp	r5, #7
 800936c:	dc04      	bgt.n	8009378 <__hexnan+0xa0>
 800936e:	462a      	mov	r2, r5
 8009370:	4649      	mov	r1, r9
 8009372:	4620      	mov	r0, r4
 8009374:	f7ff ff8a 	bl	800928c <L_shift>
 8009378:	4544      	cmp	r4, r8
 800937a:	d936      	bls.n	80093ea <__hexnan+0x112>
 800937c:	f1a8 0204 	sub.w	r2, r8, #4
 8009380:	4623      	mov	r3, r4
 8009382:	f853 1b04 	ldr.w	r1, [r3], #4
 8009386:	f842 1f04 	str.w	r1, [r2, #4]!
 800938a:	429f      	cmp	r7, r3
 800938c:	d2f9      	bcs.n	8009382 <__hexnan+0xaa>
 800938e:	1b3b      	subs	r3, r7, r4
 8009390:	f023 0303 	bic.w	r3, r3, #3
 8009394:	3304      	adds	r3, #4
 8009396:	3401      	adds	r4, #1
 8009398:	3e03      	subs	r6, #3
 800939a:	42b4      	cmp	r4, r6
 800939c:	bf88      	it	hi
 800939e:	2304      	movhi	r3, #4
 80093a0:	4443      	add	r3, r8
 80093a2:	2200      	movs	r2, #0
 80093a4:	f843 2b04 	str.w	r2, [r3], #4
 80093a8:	429f      	cmp	r7, r3
 80093aa:	d2fb      	bcs.n	80093a4 <__hexnan+0xcc>
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	b91b      	cbnz	r3, 80093b8 <__hexnan+0xe0>
 80093b0:	4547      	cmp	r7, r8
 80093b2:	d128      	bne.n	8009406 <__hexnan+0x12e>
 80093b4:	2301      	movs	r3, #1
 80093b6:	603b      	str	r3, [r7, #0]
 80093b8:	2005      	movs	r0, #5
 80093ba:	b007      	add	sp, #28
 80093bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c0:	3501      	adds	r5, #1
 80093c2:	2d08      	cmp	r5, #8
 80093c4:	f10b 0b01 	add.w	fp, fp, #1
 80093c8:	dd06      	ble.n	80093d8 <__hexnan+0x100>
 80093ca:	4544      	cmp	r4, r8
 80093cc:	d9c1      	bls.n	8009352 <__hexnan+0x7a>
 80093ce:	2300      	movs	r3, #0
 80093d0:	f844 3c04 	str.w	r3, [r4, #-4]
 80093d4:	2501      	movs	r5, #1
 80093d6:	3c04      	subs	r4, #4
 80093d8:	6822      	ldr	r2, [r4, #0]
 80093da:	f000 000f 	and.w	r0, r0, #15
 80093de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80093e2:	6020      	str	r0, [r4, #0]
 80093e4:	e7b5      	b.n	8009352 <__hexnan+0x7a>
 80093e6:	2508      	movs	r5, #8
 80093e8:	e7b3      	b.n	8009352 <__hexnan+0x7a>
 80093ea:	9b01      	ldr	r3, [sp, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d0dd      	beq.n	80093ac <__hexnan+0xd4>
 80093f0:	f1c3 0320 	rsb	r3, r3, #32
 80093f4:	f04f 32ff 	mov.w	r2, #4294967295
 80093f8:	40da      	lsrs	r2, r3
 80093fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80093fe:	4013      	ands	r3, r2
 8009400:	f846 3c04 	str.w	r3, [r6, #-4]
 8009404:	e7d2      	b.n	80093ac <__hexnan+0xd4>
 8009406:	3f04      	subs	r7, #4
 8009408:	e7d0      	b.n	80093ac <__hexnan+0xd4>
 800940a:	2004      	movs	r0, #4
 800940c:	e7d5      	b.n	80093ba <__hexnan+0xe2>

0800940e <__ascii_mbtowc>:
 800940e:	b082      	sub	sp, #8
 8009410:	b901      	cbnz	r1, 8009414 <__ascii_mbtowc+0x6>
 8009412:	a901      	add	r1, sp, #4
 8009414:	b142      	cbz	r2, 8009428 <__ascii_mbtowc+0x1a>
 8009416:	b14b      	cbz	r3, 800942c <__ascii_mbtowc+0x1e>
 8009418:	7813      	ldrb	r3, [r2, #0]
 800941a:	600b      	str	r3, [r1, #0]
 800941c:	7812      	ldrb	r2, [r2, #0]
 800941e:	1e10      	subs	r0, r2, #0
 8009420:	bf18      	it	ne
 8009422:	2001      	movne	r0, #1
 8009424:	b002      	add	sp, #8
 8009426:	4770      	bx	lr
 8009428:	4610      	mov	r0, r2
 800942a:	e7fb      	b.n	8009424 <__ascii_mbtowc+0x16>
 800942c:	f06f 0001 	mvn.w	r0, #1
 8009430:	e7f8      	b.n	8009424 <__ascii_mbtowc+0x16>

08009432 <_realloc_r>:
 8009432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009436:	4680      	mov	r8, r0
 8009438:	4615      	mov	r5, r2
 800943a:	460c      	mov	r4, r1
 800943c:	b921      	cbnz	r1, 8009448 <_realloc_r+0x16>
 800943e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009442:	4611      	mov	r1, r2
 8009444:	f7fd bd14 	b.w	8006e70 <_malloc_r>
 8009448:	b92a      	cbnz	r2, 8009456 <_realloc_r+0x24>
 800944a:	f7fd fc9d 	bl	8006d88 <_free_r>
 800944e:	2400      	movs	r4, #0
 8009450:	4620      	mov	r0, r4
 8009452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009456:	f000 f840 	bl	80094da <_malloc_usable_size_r>
 800945a:	4285      	cmp	r5, r0
 800945c:	4606      	mov	r6, r0
 800945e:	d802      	bhi.n	8009466 <_realloc_r+0x34>
 8009460:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009464:	d8f4      	bhi.n	8009450 <_realloc_r+0x1e>
 8009466:	4629      	mov	r1, r5
 8009468:	4640      	mov	r0, r8
 800946a:	f7fd fd01 	bl	8006e70 <_malloc_r>
 800946e:	4607      	mov	r7, r0
 8009470:	2800      	cmp	r0, #0
 8009472:	d0ec      	beq.n	800944e <_realloc_r+0x1c>
 8009474:	42b5      	cmp	r5, r6
 8009476:	462a      	mov	r2, r5
 8009478:	4621      	mov	r1, r4
 800947a:	bf28      	it	cs
 800947c:	4632      	movcs	r2, r6
 800947e:	f7ff fc43 	bl	8008d08 <memcpy>
 8009482:	4621      	mov	r1, r4
 8009484:	4640      	mov	r0, r8
 8009486:	f7fd fc7f 	bl	8006d88 <_free_r>
 800948a:	463c      	mov	r4, r7
 800948c:	e7e0      	b.n	8009450 <_realloc_r+0x1e>

0800948e <__ascii_wctomb>:
 800948e:	4603      	mov	r3, r0
 8009490:	4608      	mov	r0, r1
 8009492:	b141      	cbz	r1, 80094a6 <__ascii_wctomb+0x18>
 8009494:	2aff      	cmp	r2, #255	@ 0xff
 8009496:	d904      	bls.n	80094a2 <__ascii_wctomb+0x14>
 8009498:	228a      	movs	r2, #138	@ 0x8a
 800949a:	601a      	str	r2, [r3, #0]
 800949c:	f04f 30ff 	mov.w	r0, #4294967295
 80094a0:	4770      	bx	lr
 80094a2:	700a      	strb	r2, [r1, #0]
 80094a4:	2001      	movs	r0, #1
 80094a6:	4770      	bx	lr

080094a8 <fiprintf>:
 80094a8:	b40e      	push	{r1, r2, r3}
 80094aa:	b503      	push	{r0, r1, lr}
 80094ac:	4601      	mov	r1, r0
 80094ae:	ab03      	add	r3, sp, #12
 80094b0:	4805      	ldr	r0, [pc, #20]	@ (80094c8 <fiprintf+0x20>)
 80094b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80094b6:	6800      	ldr	r0, [r0, #0]
 80094b8:	9301      	str	r3, [sp, #4]
 80094ba:	f7ff f9a1 	bl	8008800 <_vfiprintf_r>
 80094be:	b002      	add	sp, #8
 80094c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80094c4:	b003      	add	sp, #12
 80094c6:	4770      	bx	lr
 80094c8:	20000054 	.word	0x20000054

080094cc <abort>:
 80094cc:	b508      	push	{r3, lr}
 80094ce:	2006      	movs	r0, #6
 80094d0:	f000 f834 	bl	800953c <raise>
 80094d4:	2001      	movs	r0, #1
 80094d6:	f7f9 f907 	bl	80026e8 <_exit>

080094da <_malloc_usable_size_r>:
 80094da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094de:	1f18      	subs	r0, r3, #4
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	bfbc      	itt	lt
 80094e4:	580b      	ldrlt	r3, [r1, r0]
 80094e6:	18c0      	addlt	r0, r0, r3
 80094e8:	4770      	bx	lr

080094ea <_raise_r>:
 80094ea:	291f      	cmp	r1, #31
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4605      	mov	r5, r0
 80094f0:	460c      	mov	r4, r1
 80094f2:	d904      	bls.n	80094fe <_raise_r+0x14>
 80094f4:	2316      	movs	r3, #22
 80094f6:	6003      	str	r3, [r0, #0]
 80094f8:	f04f 30ff 	mov.w	r0, #4294967295
 80094fc:	bd38      	pop	{r3, r4, r5, pc}
 80094fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009500:	b112      	cbz	r2, 8009508 <_raise_r+0x1e>
 8009502:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009506:	b94b      	cbnz	r3, 800951c <_raise_r+0x32>
 8009508:	4628      	mov	r0, r5
 800950a:	f000 f831 	bl	8009570 <_getpid_r>
 800950e:	4622      	mov	r2, r4
 8009510:	4601      	mov	r1, r0
 8009512:	4628      	mov	r0, r5
 8009514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009518:	f000 b818 	b.w	800954c <_kill_r>
 800951c:	2b01      	cmp	r3, #1
 800951e:	d00a      	beq.n	8009536 <_raise_r+0x4c>
 8009520:	1c59      	adds	r1, r3, #1
 8009522:	d103      	bne.n	800952c <_raise_r+0x42>
 8009524:	2316      	movs	r3, #22
 8009526:	6003      	str	r3, [r0, #0]
 8009528:	2001      	movs	r0, #1
 800952a:	e7e7      	b.n	80094fc <_raise_r+0x12>
 800952c:	2100      	movs	r1, #0
 800952e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009532:	4620      	mov	r0, r4
 8009534:	4798      	blx	r3
 8009536:	2000      	movs	r0, #0
 8009538:	e7e0      	b.n	80094fc <_raise_r+0x12>
	...

0800953c <raise>:
 800953c:	4b02      	ldr	r3, [pc, #8]	@ (8009548 <raise+0xc>)
 800953e:	4601      	mov	r1, r0
 8009540:	6818      	ldr	r0, [r3, #0]
 8009542:	f7ff bfd2 	b.w	80094ea <_raise_r>
 8009546:	bf00      	nop
 8009548:	20000054 	.word	0x20000054

0800954c <_kill_r>:
 800954c:	b538      	push	{r3, r4, r5, lr}
 800954e:	4d07      	ldr	r5, [pc, #28]	@ (800956c <_kill_r+0x20>)
 8009550:	2300      	movs	r3, #0
 8009552:	4604      	mov	r4, r0
 8009554:	4608      	mov	r0, r1
 8009556:	4611      	mov	r1, r2
 8009558:	602b      	str	r3, [r5, #0]
 800955a:	f7f9 f8b5 	bl	80026c8 <_kill>
 800955e:	1c43      	adds	r3, r0, #1
 8009560:	d102      	bne.n	8009568 <_kill_r+0x1c>
 8009562:	682b      	ldr	r3, [r5, #0]
 8009564:	b103      	cbz	r3, 8009568 <_kill_r+0x1c>
 8009566:	6023      	str	r3, [r4, #0]
 8009568:	bd38      	pop	{r3, r4, r5, pc}
 800956a:	bf00      	nop
 800956c:	2000095c 	.word	0x2000095c

08009570 <_getpid_r>:
 8009570:	f7f9 b8a2 	b.w	80026b8 <_getpid>

08009574 <pow>:
 8009574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009576:	ed2d 8b02 	vpush	{d8}
 800957a:	eeb0 8a40 	vmov.f32	s16, s0
 800957e:	eef0 8a60 	vmov.f32	s17, s1
 8009582:	ec55 4b11 	vmov	r4, r5, d1
 8009586:	f000 f873 	bl	8009670 <__ieee754_pow>
 800958a:	4622      	mov	r2, r4
 800958c:	462b      	mov	r3, r5
 800958e:	4620      	mov	r0, r4
 8009590:	4629      	mov	r1, r5
 8009592:	ec57 6b10 	vmov	r6, r7, d0
 8009596:	f7f7 faf1 	bl	8000b7c <__aeabi_dcmpun>
 800959a:	2800      	cmp	r0, #0
 800959c:	d13b      	bne.n	8009616 <pow+0xa2>
 800959e:	ec51 0b18 	vmov	r0, r1, d8
 80095a2:	2200      	movs	r2, #0
 80095a4:	2300      	movs	r3, #0
 80095a6:	f7f7 fab7 	bl	8000b18 <__aeabi_dcmpeq>
 80095aa:	b1b8      	cbz	r0, 80095dc <pow+0x68>
 80095ac:	2200      	movs	r2, #0
 80095ae:	2300      	movs	r3, #0
 80095b0:	4620      	mov	r0, r4
 80095b2:	4629      	mov	r1, r5
 80095b4:	f7f7 fab0 	bl	8000b18 <__aeabi_dcmpeq>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	d146      	bne.n	800964a <pow+0xd6>
 80095bc:	ec45 4b10 	vmov	d0, r4, r5
 80095c0:	f000 f848 	bl	8009654 <finite>
 80095c4:	b338      	cbz	r0, 8009616 <pow+0xa2>
 80095c6:	2200      	movs	r2, #0
 80095c8:	2300      	movs	r3, #0
 80095ca:	4620      	mov	r0, r4
 80095cc:	4629      	mov	r1, r5
 80095ce:	f7f7 faad 	bl	8000b2c <__aeabi_dcmplt>
 80095d2:	b300      	cbz	r0, 8009616 <pow+0xa2>
 80095d4:	f7fc fd56 	bl	8006084 <__errno>
 80095d8:	2322      	movs	r3, #34	@ 0x22
 80095da:	e01b      	b.n	8009614 <pow+0xa0>
 80095dc:	ec47 6b10 	vmov	d0, r6, r7
 80095e0:	f000 f838 	bl	8009654 <finite>
 80095e4:	b9e0      	cbnz	r0, 8009620 <pow+0xac>
 80095e6:	eeb0 0a48 	vmov.f32	s0, s16
 80095ea:	eef0 0a68 	vmov.f32	s1, s17
 80095ee:	f000 f831 	bl	8009654 <finite>
 80095f2:	b1a8      	cbz	r0, 8009620 <pow+0xac>
 80095f4:	ec45 4b10 	vmov	d0, r4, r5
 80095f8:	f000 f82c 	bl	8009654 <finite>
 80095fc:	b180      	cbz	r0, 8009620 <pow+0xac>
 80095fe:	4632      	mov	r2, r6
 8009600:	463b      	mov	r3, r7
 8009602:	4630      	mov	r0, r6
 8009604:	4639      	mov	r1, r7
 8009606:	f7f7 fab9 	bl	8000b7c <__aeabi_dcmpun>
 800960a:	2800      	cmp	r0, #0
 800960c:	d0e2      	beq.n	80095d4 <pow+0x60>
 800960e:	f7fc fd39 	bl	8006084 <__errno>
 8009612:	2321      	movs	r3, #33	@ 0x21
 8009614:	6003      	str	r3, [r0, #0]
 8009616:	ecbd 8b02 	vpop	{d8}
 800961a:	ec47 6b10 	vmov	d0, r6, r7
 800961e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009620:	2200      	movs	r2, #0
 8009622:	2300      	movs	r3, #0
 8009624:	4630      	mov	r0, r6
 8009626:	4639      	mov	r1, r7
 8009628:	f7f7 fa76 	bl	8000b18 <__aeabi_dcmpeq>
 800962c:	2800      	cmp	r0, #0
 800962e:	d0f2      	beq.n	8009616 <pow+0xa2>
 8009630:	eeb0 0a48 	vmov.f32	s0, s16
 8009634:	eef0 0a68 	vmov.f32	s1, s17
 8009638:	f000 f80c 	bl	8009654 <finite>
 800963c:	2800      	cmp	r0, #0
 800963e:	d0ea      	beq.n	8009616 <pow+0xa2>
 8009640:	ec45 4b10 	vmov	d0, r4, r5
 8009644:	f000 f806 	bl	8009654 <finite>
 8009648:	e7c3      	b.n	80095d2 <pow+0x5e>
 800964a:	4f01      	ldr	r7, [pc, #4]	@ (8009650 <pow+0xdc>)
 800964c:	2600      	movs	r6, #0
 800964e:	e7e2      	b.n	8009616 <pow+0xa2>
 8009650:	3ff00000 	.word	0x3ff00000

08009654 <finite>:
 8009654:	b082      	sub	sp, #8
 8009656:	ed8d 0b00 	vstr	d0, [sp]
 800965a:	9801      	ldr	r0, [sp, #4]
 800965c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8009660:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009664:	0fc0      	lsrs	r0, r0, #31
 8009666:	b002      	add	sp, #8
 8009668:	4770      	bx	lr
 800966a:	0000      	movs	r0, r0
 800966c:	0000      	movs	r0, r0
	...

08009670 <__ieee754_pow>:
 8009670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009674:	b091      	sub	sp, #68	@ 0x44
 8009676:	ed8d 1b00 	vstr	d1, [sp]
 800967a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800967e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8009682:	ea5a 0001 	orrs.w	r0, sl, r1
 8009686:	ec57 6b10 	vmov	r6, r7, d0
 800968a:	d113      	bne.n	80096b4 <__ieee754_pow+0x44>
 800968c:	19b3      	adds	r3, r6, r6
 800968e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8009692:	4152      	adcs	r2, r2
 8009694:	4298      	cmp	r0, r3
 8009696:	4b98      	ldr	r3, [pc, #608]	@ (80098f8 <__ieee754_pow+0x288>)
 8009698:	4193      	sbcs	r3, r2
 800969a:	f080 84ea 	bcs.w	800a072 <__ieee754_pow+0xa02>
 800969e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096a2:	4630      	mov	r0, r6
 80096a4:	4639      	mov	r1, r7
 80096a6:	f7f6 fe19 	bl	80002dc <__adddf3>
 80096aa:	ec41 0b10 	vmov	d0, r0, r1
 80096ae:	b011      	add	sp, #68	@ 0x44
 80096b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b4:	4a91      	ldr	r2, [pc, #580]	@ (80098fc <__ieee754_pow+0x28c>)
 80096b6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80096ba:	4590      	cmp	r8, r2
 80096bc:	463d      	mov	r5, r7
 80096be:	4633      	mov	r3, r6
 80096c0:	d806      	bhi.n	80096d0 <__ieee754_pow+0x60>
 80096c2:	d101      	bne.n	80096c8 <__ieee754_pow+0x58>
 80096c4:	2e00      	cmp	r6, #0
 80096c6:	d1ea      	bne.n	800969e <__ieee754_pow+0x2e>
 80096c8:	4592      	cmp	sl, r2
 80096ca:	d801      	bhi.n	80096d0 <__ieee754_pow+0x60>
 80096cc:	d10e      	bne.n	80096ec <__ieee754_pow+0x7c>
 80096ce:	b169      	cbz	r1, 80096ec <__ieee754_pow+0x7c>
 80096d0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80096d4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80096d8:	431d      	orrs	r5, r3
 80096da:	d1e0      	bne.n	800969e <__ieee754_pow+0x2e>
 80096dc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80096e0:	18db      	adds	r3, r3, r3
 80096e2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80096e6:	4152      	adcs	r2, r2
 80096e8:	429d      	cmp	r5, r3
 80096ea:	e7d4      	b.n	8009696 <__ieee754_pow+0x26>
 80096ec:	2d00      	cmp	r5, #0
 80096ee:	46c3      	mov	fp, r8
 80096f0:	da3a      	bge.n	8009768 <__ieee754_pow+0xf8>
 80096f2:	4a83      	ldr	r2, [pc, #524]	@ (8009900 <__ieee754_pow+0x290>)
 80096f4:	4592      	cmp	sl, r2
 80096f6:	d84d      	bhi.n	8009794 <__ieee754_pow+0x124>
 80096f8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80096fc:	4592      	cmp	sl, r2
 80096fe:	f240 84c7 	bls.w	800a090 <__ieee754_pow+0xa20>
 8009702:	ea4f 522a 	mov.w	r2, sl, asr #20
 8009706:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800970a:	2a14      	cmp	r2, #20
 800970c:	dd0f      	ble.n	800972e <__ieee754_pow+0xbe>
 800970e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8009712:	fa21 f402 	lsr.w	r4, r1, r2
 8009716:	fa04 f202 	lsl.w	r2, r4, r2
 800971a:	428a      	cmp	r2, r1
 800971c:	f040 84b8 	bne.w	800a090 <__ieee754_pow+0xa20>
 8009720:	f004 0401 	and.w	r4, r4, #1
 8009724:	f1c4 0402 	rsb	r4, r4, #2
 8009728:	2900      	cmp	r1, #0
 800972a:	d158      	bne.n	80097de <__ieee754_pow+0x16e>
 800972c:	e00e      	b.n	800974c <__ieee754_pow+0xdc>
 800972e:	2900      	cmp	r1, #0
 8009730:	d154      	bne.n	80097dc <__ieee754_pow+0x16c>
 8009732:	f1c2 0214 	rsb	r2, r2, #20
 8009736:	fa4a f402 	asr.w	r4, sl, r2
 800973a:	fa04 f202 	lsl.w	r2, r4, r2
 800973e:	4552      	cmp	r2, sl
 8009740:	f040 84a3 	bne.w	800a08a <__ieee754_pow+0xa1a>
 8009744:	f004 0401 	and.w	r4, r4, #1
 8009748:	f1c4 0402 	rsb	r4, r4, #2
 800974c:	4a6d      	ldr	r2, [pc, #436]	@ (8009904 <__ieee754_pow+0x294>)
 800974e:	4592      	cmp	sl, r2
 8009750:	d12e      	bne.n	80097b0 <__ieee754_pow+0x140>
 8009752:	f1b9 0f00 	cmp.w	r9, #0
 8009756:	f280 8494 	bge.w	800a082 <__ieee754_pow+0xa12>
 800975a:	496a      	ldr	r1, [pc, #424]	@ (8009904 <__ieee754_pow+0x294>)
 800975c:	4632      	mov	r2, r6
 800975e:	463b      	mov	r3, r7
 8009760:	2000      	movs	r0, #0
 8009762:	f7f7 f89b 	bl	800089c <__aeabi_ddiv>
 8009766:	e7a0      	b.n	80096aa <__ieee754_pow+0x3a>
 8009768:	2400      	movs	r4, #0
 800976a:	bbc1      	cbnz	r1, 80097de <__ieee754_pow+0x16e>
 800976c:	4a63      	ldr	r2, [pc, #396]	@ (80098fc <__ieee754_pow+0x28c>)
 800976e:	4592      	cmp	sl, r2
 8009770:	d1ec      	bne.n	800974c <__ieee754_pow+0xdc>
 8009772:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8009776:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800977a:	431a      	orrs	r2, r3
 800977c:	f000 8479 	beq.w	800a072 <__ieee754_pow+0xa02>
 8009780:	4b61      	ldr	r3, [pc, #388]	@ (8009908 <__ieee754_pow+0x298>)
 8009782:	4598      	cmp	r8, r3
 8009784:	d908      	bls.n	8009798 <__ieee754_pow+0x128>
 8009786:	f1b9 0f00 	cmp.w	r9, #0
 800978a:	f2c0 8476 	blt.w	800a07a <__ieee754_pow+0xa0a>
 800978e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009792:	e78a      	b.n	80096aa <__ieee754_pow+0x3a>
 8009794:	2402      	movs	r4, #2
 8009796:	e7e8      	b.n	800976a <__ieee754_pow+0xfa>
 8009798:	f1b9 0f00 	cmp.w	r9, #0
 800979c:	f04f 0000 	mov.w	r0, #0
 80097a0:	f04f 0100 	mov.w	r1, #0
 80097a4:	da81      	bge.n	80096aa <__ieee754_pow+0x3a>
 80097a6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80097aa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80097ae:	e77c      	b.n	80096aa <__ieee754_pow+0x3a>
 80097b0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80097b4:	d106      	bne.n	80097c4 <__ieee754_pow+0x154>
 80097b6:	4632      	mov	r2, r6
 80097b8:	463b      	mov	r3, r7
 80097ba:	4630      	mov	r0, r6
 80097bc:	4639      	mov	r1, r7
 80097be:	f7f6 ff43 	bl	8000648 <__aeabi_dmul>
 80097c2:	e772      	b.n	80096aa <__ieee754_pow+0x3a>
 80097c4:	4a51      	ldr	r2, [pc, #324]	@ (800990c <__ieee754_pow+0x29c>)
 80097c6:	4591      	cmp	r9, r2
 80097c8:	d109      	bne.n	80097de <__ieee754_pow+0x16e>
 80097ca:	2d00      	cmp	r5, #0
 80097cc:	db07      	blt.n	80097de <__ieee754_pow+0x16e>
 80097ce:	ec47 6b10 	vmov	d0, r6, r7
 80097d2:	b011      	add	sp, #68	@ 0x44
 80097d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d8:	f000 bd52 	b.w	800a280 <__ieee754_sqrt>
 80097dc:	2400      	movs	r4, #0
 80097de:	ec47 6b10 	vmov	d0, r6, r7
 80097e2:	9302      	str	r3, [sp, #8]
 80097e4:	f000 fc88 	bl	800a0f8 <fabs>
 80097e8:	9b02      	ldr	r3, [sp, #8]
 80097ea:	ec51 0b10 	vmov	r0, r1, d0
 80097ee:	bb53      	cbnz	r3, 8009846 <__ieee754_pow+0x1d6>
 80097f0:	4b44      	ldr	r3, [pc, #272]	@ (8009904 <__ieee754_pow+0x294>)
 80097f2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d002      	beq.n	8009800 <__ieee754_pow+0x190>
 80097fa:	f1b8 0f00 	cmp.w	r8, #0
 80097fe:	d122      	bne.n	8009846 <__ieee754_pow+0x1d6>
 8009800:	f1b9 0f00 	cmp.w	r9, #0
 8009804:	da05      	bge.n	8009812 <__ieee754_pow+0x1a2>
 8009806:	4602      	mov	r2, r0
 8009808:	460b      	mov	r3, r1
 800980a:	2000      	movs	r0, #0
 800980c:	493d      	ldr	r1, [pc, #244]	@ (8009904 <__ieee754_pow+0x294>)
 800980e:	f7f7 f845 	bl	800089c <__aeabi_ddiv>
 8009812:	2d00      	cmp	r5, #0
 8009814:	f6bf af49 	bge.w	80096aa <__ieee754_pow+0x3a>
 8009818:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800981c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8009820:	ea58 0804 	orrs.w	r8, r8, r4
 8009824:	d108      	bne.n	8009838 <__ieee754_pow+0x1c8>
 8009826:	4602      	mov	r2, r0
 8009828:	460b      	mov	r3, r1
 800982a:	4610      	mov	r0, r2
 800982c:	4619      	mov	r1, r3
 800982e:	f7f6 fd53 	bl	80002d8 <__aeabi_dsub>
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	e794      	b.n	8009762 <__ieee754_pow+0xf2>
 8009838:	2c01      	cmp	r4, #1
 800983a:	f47f af36 	bne.w	80096aa <__ieee754_pow+0x3a>
 800983e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009842:	4619      	mov	r1, r3
 8009844:	e731      	b.n	80096aa <__ieee754_pow+0x3a>
 8009846:	0feb      	lsrs	r3, r5, #31
 8009848:	3b01      	subs	r3, #1
 800984a:	ea53 0204 	orrs.w	r2, r3, r4
 800984e:	d102      	bne.n	8009856 <__ieee754_pow+0x1e6>
 8009850:	4632      	mov	r2, r6
 8009852:	463b      	mov	r3, r7
 8009854:	e7e9      	b.n	800982a <__ieee754_pow+0x1ba>
 8009856:	3c01      	subs	r4, #1
 8009858:	431c      	orrs	r4, r3
 800985a:	d016      	beq.n	800988a <__ieee754_pow+0x21a>
 800985c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80098e8 <__ieee754_pow+0x278>
 8009860:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8009864:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009868:	f240 8112 	bls.w	8009a90 <__ieee754_pow+0x420>
 800986c:	4b28      	ldr	r3, [pc, #160]	@ (8009910 <__ieee754_pow+0x2a0>)
 800986e:	459a      	cmp	sl, r3
 8009870:	4b25      	ldr	r3, [pc, #148]	@ (8009908 <__ieee754_pow+0x298>)
 8009872:	d916      	bls.n	80098a2 <__ieee754_pow+0x232>
 8009874:	4598      	cmp	r8, r3
 8009876:	d80b      	bhi.n	8009890 <__ieee754_pow+0x220>
 8009878:	f1b9 0f00 	cmp.w	r9, #0
 800987c:	da0b      	bge.n	8009896 <__ieee754_pow+0x226>
 800987e:	2000      	movs	r0, #0
 8009880:	b011      	add	sp, #68	@ 0x44
 8009882:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009886:	f000 bcf3 	b.w	800a270 <__math_oflow>
 800988a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80098f0 <__ieee754_pow+0x280>
 800988e:	e7e7      	b.n	8009860 <__ieee754_pow+0x1f0>
 8009890:	f1b9 0f00 	cmp.w	r9, #0
 8009894:	dcf3      	bgt.n	800987e <__ieee754_pow+0x20e>
 8009896:	2000      	movs	r0, #0
 8009898:	b011      	add	sp, #68	@ 0x44
 800989a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800989e:	f000 bcdf 	b.w	800a260 <__math_uflow>
 80098a2:	4598      	cmp	r8, r3
 80098a4:	d20c      	bcs.n	80098c0 <__ieee754_pow+0x250>
 80098a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098aa:	2200      	movs	r2, #0
 80098ac:	2300      	movs	r3, #0
 80098ae:	f7f7 f93d 	bl	8000b2c <__aeabi_dcmplt>
 80098b2:	3800      	subs	r0, #0
 80098b4:	bf18      	it	ne
 80098b6:	2001      	movne	r0, #1
 80098b8:	f1b9 0f00 	cmp.w	r9, #0
 80098bc:	daec      	bge.n	8009898 <__ieee754_pow+0x228>
 80098be:	e7df      	b.n	8009880 <__ieee754_pow+0x210>
 80098c0:	4b10      	ldr	r3, [pc, #64]	@ (8009904 <__ieee754_pow+0x294>)
 80098c2:	4598      	cmp	r8, r3
 80098c4:	f04f 0200 	mov.w	r2, #0
 80098c8:	d924      	bls.n	8009914 <__ieee754_pow+0x2a4>
 80098ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098ce:	2300      	movs	r3, #0
 80098d0:	f7f7 f92c 	bl	8000b2c <__aeabi_dcmplt>
 80098d4:	3800      	subs	r0, #0
 80098d6:	bf18      	it	ne
 80098d8:	2001      	movne	r0, #1
 80098da:	f1b9 0f00 	cmp.w	r9, #0
 80098de:	dccf      	bgt.n	8009880 <__ieee754_pow+0x210>
 80098e0:	e7da      	b.n	8009898 <__ieee754_pow+0x228>
 80098e2:	bf00      	nop
 80098e4:	f3af 8000 	nop.w
 80098e8:	00000000 	.word	0x00000000
 80098ec:	3ff00000 	.word	0x3ff00000
 80098f0:	00000000 	.word	0x00000000
 80098f4:	bff00000 	.word	0xbff00000
 80098f8:	fff00000 	.word	0xfff00000
 80098fc:	7ff00000 	.word	0x7ff00000
 8009900:	433fffff 	.word	0x433fffff
 8009904:	3ff00000 	.word	0x3ff00000
 8009908:	3fefffff 	.word	0x3fefffff
 800990c:	3fe00000 	.word	0x3fe00000
 8009910:	43f00000 	.word	0x43f00000
 8009914:	4b5a      	ldr	r3, [pc, #360]	@ (8009a80 <__ieee754_pow+0x410>)
 8009916:	f7f6 fcdf 	bl	80002d8 <__aeabi_dsub>
 800991a:	a351      	add	r3, pc, #324	@ (adr r3, 8009a60 <__ieee754_pow+0x3f0>)
 800991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009920:	4604      	mov	r4, r0
 8009922:	460d      	mov	r5, r1
 8009924:	f7f6 fe90 	bl	8000648 <__aeabi_dmul>
 8009928:	a34f      	add	r3, pc, #316	@ (adr r3, 8009a68 <__ieee754_pow+0x3f8>)
 800992a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992e:	4606      	mov	r6, r0
 8009930:	460f      	mov	r7, r1
 8009932:	4620      	mov	r0, r4
 8009934:	4629      	mov	r1, r5
 8009936:	f7f6 fe87 	bl	8000648 <__aeabi_dmul>
 800993a:	4b52      	ldr	r3, [pc, #328]	@ (8009a84 <__ieee754_pow+0x414>)
 800993c:	4682      	mov	sl, r0
 800993e:	468b      	mov	fp, r1
 8009940:	2200      	movs	r2, #0
 8009942:	4620      	mov	r0, r4
 8009944:	4629      	mov	r1, r5
 8009946:	f7f6 fe7f 	bl	8000648 <__aeabi_dmul>
 800994a:	4602      	mov	r2, r0
 800994c:	460b      	mov	r3, r1
 800994e:	a148      	add	r1, pc, #288	@ (adr r1, 8009a70 <__ieee754_pow+0x400>)
 8009950:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009954:	f7f6 fcc0 	bl	80002d8 <__aeabi_dsub>
 8009958:	4622      	mov	r2, r4
 800995a:	462b      	mov	r3, r5
 800995c:	f7f6 fe74 	bl	8000648 <__aeabi_dmul>
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	2000      	movs	r0, #0
 8009966:	4948      	ldr	r1, [pc, #288]	@ (8009a88 <__ieee754_pow+0x418>)
 8009968:	f7f6 fcb6 	bl	80002d8 <__aeabi_dsub>
 800996c:	4622      	mov	r2, r4
 800996e:	4680      	mov	r8, r0
 8009970:	4689      	mov	r9, r1
 8009972:	462b      	mov	r3, r5
 8009974:	4620      	mov	r0, r4
 8009976:	4629      	mov	r1, r5
 8009978:	f7f6 fe66 	bl	8000648 <__aeabi_dmul>
 800997c:	4602      	mov	r2, r0
 800997e:	460b      	mov	r3, r1
 8009980:	4640      	mov	r0, r8
 8009982:	4649      	mov	r1, r9
 8009984:	f7f6 fe60 	bl	8000648 <__aeabi_dmul>
 8009988:	a33b      	add	r3, pc, #236	@ (adr r3, 8009a78 <__ieee754_pow+0x408>)
 800998a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998e:	f7f6 fe5b 	bl	8000648 <__aeabi_dmul>
 8009992:	4602      	mov	r2, r0
 8009994:	460b      	mov	r3, r1
 8009996:	4650      	mov	r0, sl
 8009998:	4659      	mov	r1, fp
 800999a:	f7f6 fc9d 	bl	80002d8 <__aeabi_dsub>
 800999e:	4602      	mov	r2, r0
 80099a0:	460b      	mov	r3, r1
 80099a2:	4680      	mov	r8, r0
 80099a4:	4689      	mov	r9, r1
 80099a6:	4630      	mov	r0, r6
 80099a8:	4639      	mov	r1, r7
 80099aa:	f7f6 fc97 	bl	80002dc <__adddf3>
 80099ae:	2400      	movs	r4, #0
 80099b0:	4632      	mov	r2, r6
 80099b2:	463b      	mov	r3, r7
 80099b4:	4620      	mov	r0, r4
 80099b6:	460d      	mov	r5, r1
 80099b8:	f7f6 fc8e 	bl	80002d8 <__aeabi_dsub>
 80099bc:	4602      	mov	r2, r0
 80099be:	460b      	mov	r3, r1
 80099c0:	4640      	mov	r0, r8
 80099c2:	4649      	mov	r1, r9
 80099c4:	f7f6 fc88 	bl	80002d8 <__aeabi_dsub>
 80099c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80099d0:	2300      	movs	r3, #0
 80099d2:	9304      	str	r3, [sp, #16]
 80099d4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80099d8:	4606      	mov	r6, r0
 80099da:	460f      	mov	r7, r1
 80099dc:	4652      	mov	r2, sl
 80099de:	465b      	mov	r3, fp
 80099e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099e4:	f7f6 fc78 	bl	80002d8 <__aeabi_dsub>
 80099e8:	4622      	mov	r2, r4
 80099ea:	462b      	mov	r3, r5
 80099ec:	f7f6 fe2c 	bl	8000648 <__aeabi_dmul>
 80099f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099f4:	4680      	mov	r8, r0
 80099f6:	4689      	mov	r9, r1
 80099f8:	4630      	mov	r0, r6
 80099fa:	4639      	mov	r1, r7
 80099fc:	f7f6 fe24 	bl	8000648 <__aeabi_dmul>
 8009a00:	4602      	mov	r2, r0
 8009a02:	460b      	mov	r3, r1
 8009a04:	4640      	mov	r0, r8
 8009a06:	4649      	mov	r1, r9
 8009a08:	f7f6 fc68 	bl	80002dc <__adddf3>
 8009a0c:	4652      	mov	r2, sl
 8009a0e:	465b      	mov	r3, fp
 8009a10:	4606      	mov	r6, r0
 8009a12:	460f      	mov	r7, r1
 8009a14:	4620      	mov	r0, r4
 8009a16:	4629      	mov	r1, r5
 8009a18:	f7f6 fe16 	bl	8000648 <__aeabi_dmul>
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	4602      	mov	r2, r0
 8009a20:	4680      	mov	r8, r0
 8009a22:	4689      	mov	r9, r1
 8009a24:	4630      	mov	r0, r6
 8009a26:	4639      	mov	r1, r7
 8009a28:	f7f6 fc58 	bl	80002dc <__adddf3>
 8009a2c:	4b17      	ldr	r3, [pc, #92]	@ (8009a8c <__ieee754_pow+0x41c>)
 8009a2e:	4299      	cmp	r1, r3
 8009a30:	4604      	mov	r4, r0
 8009a32:	460d      	mov	r5, r1
 8009a34:	468a      	mov	sl, r1
 8009a36:	468b      	mov	fp, r1
 8009a38:	f340 82ef 	ble.w	800a01a <__ieee754_pow+0x9aa>
 8009a3c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009a40:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8009a44:	4303      	orrs	r3, r0
 8009a46:	f000 81e8 	beq.w	8009e1a <__ieee754_pow+0x7aa>
 8009a4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	2300      	movs	r3, #0
 8009a52:	f7f7 f86b 	bl	8000b2c <__aeabi_dcmplt>
 8009a56:	3800      	subs	r0, #0
 8009a58:	bf18      	it	ne
 8009a5a:	2001      	movne	r0, #1
 8009a5c:	e710      	b.n	8009880 <__ieee754_pow+0x210>
 8009a5e:	bf00      	nop
 8009a60:	60000000 	.word	0x60000000
 8009a64:	3ff71547 	.word	0x3ff71547
 8009a68:	f85ddf44 	.word	0xf85ddf44
 8009a6c:	3e54ae0b 	.word	0x3e54ae0b
 8009a70:	55555555 	.word	0x55555555
 8009a74:	3fd55555 	.word	0x3fd55555
 8009a78:	652b82fe 	.word	0x652b82fe
 8009a7c:	3ff71547 	.word	0x3ff71547
 8009a80:	3ff00000 	.word	0x3ff00000
 8009a84:	3fd00000 	.word	0x3fd00000
 8009a88:	3fe00000 	.word	0x3fe00000
 8009a8c:	408fffff 	.word	0x408fffff
 8009a90:	4bd5      	ldr	r3, [pc, #852]	@ (8009de8 <__ieee754_pow+0x778>)
 8009a92:	402b      	ands	r3, r5
 8009a94:	2200      	movs	r2, #0
 8009a96:	b92b      	cbnz	r3, 8009aa4 <__ieee754_pow+0x434>
 8009a98:	4bd4      	ldr	r3, [pc, #848]	@ (8009dec <__ieee754_pow+0x77c>)
 8009a9a:	f7f6 fdd5 	bl	8000648 <__aeabi_dmul>
 8009a9e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8009aa2:	468b      	mov	fp, r1
 8009aa4:	ea4f 532b 	mov.w	r3, fp, asr #20
 8009aa8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009aac:	4413      	add	r3, r2
 8009aae:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ab0:	4bcf      	ldr	r3, [pc, #828]	@ (8009df0 <__ieee754_pow+0x780>)
 8009ab2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8009ab6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8009aba:	459b      	cmp	fp, r3
 8009abc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009ac0:	dd08      	ble.n	8009ad4 <__ieee754_pow+0x464>
 8009ac2:	4bcc      	ldr	r3, [pc, #816]	@ (8009df4 <__ieee754_pow+0x784>)
 8009ac4:	459b      	cmp	fp, r3
 8009ac6:	f340 81a5 	ble.w	8009e14 <__ieee754_pow+0x7a4>
 8009aca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009acc:	3301      	adds	r3, #1
 8009ace:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ad0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009ad4:	f04f 0a00 	mov.w	sl, #0
 8009ad8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009adc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ade:	4bc6      	ldr	r3, [pc, #792]	@ (8009df8 <__ieee754_pow+0x788>)
 8009ae0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009ae4:	ed93 7b00 	vldr	d7, [r3]
 8009ae8:	4629      	mov	r1, r5
 8009aea:	ec53 2b17 	vmov	r2, r3, d7
 8009aee:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009af2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009af6:	f7f6 fbef 	bl	80002d8 <__aeabi_dsub>
 8009afa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009afe:	4606      	mov	r6, r0
 8009b00:	460f      	mov	r7, r1
 8009b02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b06:	f7f6 fbe9 	bl	80002dc <__adddf3>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	2000      	movs	r0, #0
 8009b10:	49ba      	ldr	r1, [pc, #744]	@ (8009dfc <__ieee754_pow+0x78c>)
 8009b12:	f7f6 fec3 	bl	800089c <__aeabi_ddiv>
 8009b16:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	4630      	mov	r0, r6
 8009b20:	4639      	mov	r1, r7
 8009b22:	f7f6 fd91 	bl	8000648 <__aeabi_dmul>
 8009b26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b2a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8009b2e:	106d      	asrs	r5, r5, #1
 8009b30:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8009b34:	f04f 0b00 	mov.w	fp, #0
 8009b38:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009b3c:	4661      	mov	r1, ip
 8009b3e:	2200      	movs	r2, #0
 8009b40:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009b44:	4658      	mov	r0, fp
 8009b46:	46e1      	mov	r9, ip
 8009b48:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8009b4c:	4614      	mov	r4, r2
 8009b4e:	461d      	mov	r5, r3
 8009b50:	f7f6 fd7a 	bl	8000648 <__aeabi_dmul>
 8009b54:	4602      	mov	r2, r0
 8009b56:	460b      	mov	r3, r1
 8009b58:	4630      	mov	r0, r6
 8009b5a:	4639      	mov	r1, r7
 8009b5c:	f7f6 fbbc 	bl	80002d8 <__aeabi_dsub>
 8009b60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b64:	4606      	mov	r6, r0
 8009b66:	460f      	mov	r7, r1
 8009b68:	4620      	mov	r0, r4
 8009b6a:	4629      	mov	r1, r5
 8009b6c:	f7f6 fbb4 	bl	80002d8 <__aeabi_dsub>
 8009b70:	4602      	mov	r2, r0
 8009b72:	460b      	mov	r3, r1
 8009b74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b78:	f7f6 fbae 	bl	80002d8 <__aeabi_dsub>
 8009b7c:	465a      	mov	r2, fp
 8009b7e:	464b      	mov	r3, r9
 8009b80:	f7f6 fd62 	bl	8000648 <__aeabi_dmul>
 8009b84:	4602      	mov	r2, r0
 8009b86:	460b      	mov	r3, r1
 8009b88:	4630      	mov	r0, r6
 8009b8a:	4639      	mov	r1, r7
 8009b8c:	f7f6 fba4 	bl	80002d8 <__aeabi_dsub>
 8009b90:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009b94:	f7f6 fd58 	bl	8000648 <__aeabi_dmul>
 8009b98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009ba0:	4610      	mov	r0, r2
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	f7f6 fd50 	bl	8000648 <__aeabi_dmul>
 8009ba8:	a37d      	add	r3, pc, #500	@ (adr r3, 8009da0 <__ieee754_pow+0x730>)
 8009baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bae:	4604      	mov	r4, r0
 8009bb0:	460d      	mov	r5, r1
 8009bb2:	f7f6 fd49 	bl	8000648 <__aeabi_dmul>
 8009bb6:	a37c      	add	r3, pc, #496	@ (adr r3, 8009da8 <__ieee754_pow+0x738>)
 8009bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbc:	f7f6 fb8e 	bl	80002dc <__adddf3>
 8009bc0:	4622      	mov	r2, r4
 8009bc2:	462b      	mov	r3, r5
 8009bc4:	f7f6 fd40 	bl	8000648 <__aeabi_dmul>
 8009bc8:	a379      	add	r3, pc, #484	@ (adr r3, 8009db0 <__ieee754_pow+0x740>)
 8009bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bce:	f7f6 fb85 	bl	80002dc <__adddf3>
 8009bd2:	4622      	mov	r2, r4
 8009bd4:	462b      	mov	r3, r5
 8009bd6:	f7f6 fd37 	bl	8000648 <__aeabi_dmul>
 8009bda:	a377      	add	r3, pc, #476	@ (adr r3, 8009db8 <__ieee754_pow+0x748>)
 8009bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be0:	f7f6 fb7c 	bl	80002dc <__adddf3>
 8009be4:	4622      	mov	r2, r4
 8009be6:	462b      	mov	r3, r5
 8009be8:	f7f6 fd2e 	bl	8000648 <__aeabi_dmul>
 8009bec:	a374      	add	r3, pc, #464	@ (adr r3, 8009dc0 <__ieee754_pow+0x750>)
 8009bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf2:	f7f6 fb73 	bl	80002dc <__adddf3>
 8009bf6:	4622      	mov	r2, r4
 8009bf8:	462b      	mov	r3, r5
 8009bfa:	f7f6 fd25 	bl	8000648 <__aeabi_dmul>
 8009bfe:	a372      	add	r3, pc, #456	@ (adr r3, 8009dc8 <__ieee754_pow+0x758>)
 8009c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c04:	f7f6 fb6a 	bl	80002dc <__adddf3>
 8009c08:	4622      	mov	r2, r4
 8009c0a:	4606      	mov	r6, r0
 8009c0c:	460f      	mov	r7, r1
 8009c0e:	462b      	mov	r3, r5
 8009c10:	4620      	mov	r0, r4
 8009c12:	4629      	mov	r1, r5
 8009c14:	f7f6 fd18 	bl	8000648 <__aeabi_dmul>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	4630      	mov	r0, r6
 8009c1e:	4639      	mov	r1, r7
 8009c20:	f7f6 fd12 	bl	8000648 <__aeabi_dmul>
 8009c24:	465a      	mov	r2, fp
 8009c26:	4604      	mov	r4, r0
 8009c28:	460d      	mov	r5, r1
 8009c2a:	464b      	mov	r3, r9
 8009c2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c30:	f7f6 fb54 	bl	80002dc <__adddf3>
 8009c34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c38:	f7f6 fd06 	bl	8000648 <__aeabi_dmul>
 8009c3c:	4622      	mov	r2, r4
 8009c3e:	462b      	mov	r3, r5
 8009c40:	f7f6 fb4c 	bl	80002dc <__adddf3>
 8009c44:	465a      	mov	r2, fp
 8009c46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009c4a:	464b      	mov	r3, r9
 8009c4c:	4658      	mov	r0, fp
 8009c4e:	4649      	mov	r1, r9
 8009c50:	f7f6 fcfa 	bl	8000648 <__aeabi_dmul>
 8009c54:	4b6a      	ldr	r3, [pc, #424]	@ (8009e00 <__ieee754_pow+0x790>)
 8009c56:	2200      	movs	r2, #0
 8009c58:	4606      	mov	r6, r0
 8009c5a:	460f      	mov	r7, r1
 8009c5c:	f7f6 fb3e 	bl	80002dc <__adddf3>
 8009c60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009c64:	f7f6 fb3a 	bl	80002dc <__adddf3>
 8009c68:	46d8      	mov	r8, fp
 8009c6a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8009c6e:	460d      	mov	r5, r1
 8009c70:	465a      	mov	r2, fp
 8009c72:	460b      	mov	r3, r1
 8009c74:	4640      	mov	r0, r8
 8009c76:	4649      	mov	r1, r9
 8009c78:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8009c7c:	f7f6 fce4 	bl	8000648 <__aeabi_dmul>
 8009c80:	465c      	mov	r4, fp
 8009c82:	4680      	mov	r8, r0
 8009c84:	4689      	mov	r9, r1
 8009c86:	4b5e      	ldr	r3, [pc, #376]	@ (8009e00 <__ieee754_pow+0x790>)
 8009c88:	2200      	movs	r2, #0
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	4629      	mov	r1, r5
 8009c8e:	f7f6 fb23 	bl	80002d8 <__aeabi_dsub>
 8009c92:	4632      	mov	r2, r6
 8009c94:	463b      	mov	r3, r7
 8009c96:	f7f6 fb1f 	bl	80002d8 <__aeabi_dsub>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ca2:	f7f6 fb19 	bl	80002d8 <__aeabi_dsub>
 8009ca6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009caa:	f7f6 fccd 	bl	8000648 <__aeabi_dmul>
 8009cae:	4622      	mov	r2, r4
 8009cb0:	4606      	mov	r6, r0
 8009cb2:	460f      	mov	r7, r1
 8009cb4:	462b      	mov	r3, r5
 8009cb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cba:	f7f6 fcc5 	bl	8000648 <__aeabi_dmul>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	4630      	mov	r0, r6
 8009cc4:	4639      	mov	r1, r7
 8009cc6:	f7f6 fb09 	bl	80002dc <__adddf3>
 8009cca:	4606      	mov	r6, r0
 8009ccc:	460f      	mov	r7, r1
 8009cce:	4602      	mov	r2, r0
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	4640      	mov	r0, r8
 8009cd4:	4649      	mov	r1, r9
 8009cd6:	f7f6 fb01 	bl	80002dc <__adddf3>
 8009cda:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8009cde:	a33c      	add	r3, pc, #240	@ (adr r3, 8009dd0 <__ieee754_pow+0x760>)
 8009ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce4:	4658      	mov	r0, fp
 8009ce6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8009cea:	460d      	mov	r5, r1
 8009cec:	f7f6 fcac 	bl	8000648 <__aeabi_dmul>
 8009cf0:	465c      	mov	r4, fp
 8009cf2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cf6:	4642      	mov	r2, r8
 8009cf8:	464b      	mov	r3, r9
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	f7f6 faeb 	bl	80002d8 <__aeabi_dsub>
 8009d02:	4602      	mov	r2, r0
 8009d04:	460b      	mov	r3, r1
 8009d06:	4630      	mov	r0, r6
 8009d08:	4639      	mov	r1, r7
 8009d0a:	f7f6 fae5 	bl	80002d8 <__aeabi_dsub>
 8009d0e:	a332      	add	r3, pc, #200	@ (adr r3, 8009dd8 <__ieee754_pow+0x768>)
 8009d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d14:	f7f6 fc98 	bl	8000648 <__aeabi_dmul>
 8009d18:	a331      	add	r3, pc, #196	@ (adr r3, 8009de0 <__ieee754_pow+0x770>)
 8009d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1e:	4606      	mov	r6, r0
 8009d20:	460f      	mov	r7, r1
 8009d22:	4620      	mov	r0, r4
 8009d24:	4629      	mov	r1, r5
 8009d26:	f7f6 fc8f 	bl	8000648 <__aeabi_dmul>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	4630      	mov	r0, r6
 8009d30:	4639      	mov	r1, r7
 8009d32:	f7f6 fad3 	bl	80002dc <__adddf3>
 8009d36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009d38:	4b32      	ldr	r3, [pc, #200]	@ (8009e04 <__ieee754_pow+0x794>)
 8009d3a:	4413      	add	r3, r2
 8009d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d40:	f7f6 facc 	bl	80002dc <__adddf3>
 8009d44:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009d48:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009d4a:	f7f6 fc13 	bl	8000574 <__aeabi_i2d>
 8009d4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009d50:	4b2d      	ldr	r3, [pc, #180]	@ (8009e08 <__ieee754_pow+0x798>)
 8009d52:	4413      	add	r3, r2
 8009d54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d58:	4606      	mov	r6, r0
 8009d5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d5e:	460f      	mov	r7, r1
 8009d60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d64:	f7f6 faba 	bl	80002dc <__adddf3>
 8009d68:	4642      	mov	r2, r8
 8009d6a:	464b      	mov	r3, r9
 8009d6c:	f7f6 fab6 	bl	80002dc <__adddf3>
 8009d70:	4632      	mov	r2, r6
 8009d72:	463b      	mov	r3, r7
 8009d74:	f7f6 fab2 	bl	80002dc <__adddf3>
 8009d78:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8009d7c:	4632      	mov	r2, r6
 8009d7e:	463b      	mov	r3, r7
 8009d80:	4658      	mov	r0, fp
 8009d82:	460d      	mov	r5, r1
 8009d84:	f7f6 faa8 	bl	80002d8 <__aeabi_dsub>
 8009d88:	4642      	mov	r2, r8
 8009d8a:	464b      	mov	r3, r9
 8009d8c:	f7f6 faa4 	bl	80002d8 <__aeabi_dsub>
 8009d90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d94:	f7f6 faa0 	bl	80002d8 <__aeabi_dsub>
 8009d98:	465c      	mov	r4, fp
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	e036      	b.n	8009e0c <__ieee754_pow+0x79c>
 8009d9e:	bf00      	nop
 8009da0:	4a454eef 	.word	0x4a454eef
 8009da4:	3fca7e28 	.word	0x3fca7e28
 8009da8:	93c9db65 	.word	0x93c9db65
 8009dac:	3fcd864a 	.word	0x3fcd864a
 8009db0:	a91d4101 	.word	0xa91d4101
 8009db4:	3fd17460 	.word	0x3fd17460
 8009db8:	518f264d 	.word	0x518f264d
 8009dbc:	3fd55555 	.word	0x3fd55555
 8009dc0:	db6fabff 	.word	0xdb6fabff
 8009dc4:	3fdb6db6 	.word	0x3fdb6db6
 8009dc8:	33333303 	.word	0x33333303
 8009dcc:	3fe33333 	.word	0x3fe33333
 8009dd0:	e0000000 	.word	0xe0000000
 8009dd4:	3feec709 	.word	0x3feec709
 8009dd8:	dc3a03fd 	.word	0xdc3a03fd
 8009ddc:	3feec709 	.word	0x3feec709
 8009de0:	145b01f5 	.word	0x145b01f5
 8009de4:	be3e2fe0 	.word	0xbe3e2fe0
 8009de8:	7ff00000 	.word	0x7ff00000
 8009dec:	43400000 	.word	0x43400000
 8009df0:	0003988e 	.word	0x0003988e
 8009df4:	000bb679 	.word	0x000bb679
 8009df8:	0800a948 	.word	0x0800a948
 8009dfc:	3ff00000 	.word	0x3ff00000
 8009e00:	40080000 	.word	0x40080000
 8009e04:	0800a928 	.word	0x0800a928
 8009e08:	0800a938 	.word	0x0800a938
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e12:	e5d7      	b.n	80099c4 <__ieee754_pow+0x354>
 8009e14:	f04f 0a01 	mov.w	sl, #1
 8009e18:	e65e      	b.n	8009ad8 <__ieee754_pow+0x468>
 8009e1a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800a0ec <__ieee754_pow+0xa7c>)
 8009e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e20:	4630      	mov	r0, r6
 8009e22:	4639      	mov	r1, r7
 8009e24:	f7f6 fa5a 	bl	80002dc <__adddf3>
 8009e28:	4642      	mov	r2, r8
 8009e2a:	e9cd 0100 	strd	r0, r1, [sp]
 8009e2e:	464b      	mov	r3, r9
 8009e30:	4620      	mov	r0, r4
 8009e32:	4629      	mov	r1, r5
 8009e34:	f7f6 fa50 	bl	80002d8 <__aeabi_dsub>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e40:	f7f6 fe92 	bl	8000b68 <__aeabi_dcmpgt>
 8009e44:	2800      	cmp	r0, #0
 8009e46:	f47f ae00 	bne.w	8009a4a <__ieee754_pow+0x3da>
 8009e4a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8009e4e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009e52:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8009e56:	fa43 fa0a 	asr.w	sl, r3, sl
 8009e5a:	44da      	add	sl, fp
 8009e5c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009e60:	489d      	ldr	r0, [pc, #628]	@ (800a0d8 <__ieee754_pow+0xa68>)
 8009e62:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8009e66:	4108      	asrs	r0, r1
 8009e68:	ea00 030a 	and.w	r3, r0, sl
 8009e6c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009e70:	f1c1 0114 	rsb	r1, r1, #20
 8009e74:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8009e78:	fa4a fa01 	asr.w	sl, sl, r1
 8009e7c:	f1bb 0f00 	cmp.w	fp, #0
 8009e80:	4640      	mov	r0, r8
 8009e82:	4649      	mov	r1, r9
 8009e84:	f04f 0200 	mov.w	r2, #0
 8009e88:	bfb8      	it	lt
 8009e8a:	f1ca 0a00 	rsblt	sl, sl, #0
 8009e8e:	f7f6 fa23 	bl	80002d8 <__aeabi_dsub>
 8009e92:	4680      	mov	r8, r0
 8009e94:	4689      	mov	r9, r1
 8009e96:	4632      	mov	r2, r6
 8009e98:	463b      	mov	r3, r7
 8009e9a:	4640      	mov	r0, r8
 8009e9c:	4649      	mov	r1, r9
 8009e9e:	f7f6 fa1d 	bl	80002dc <__adddf3>
 8009ea2:	2400      	movs	r4, #0
 8009ea4:	a37c      	add	r3, pc, #496	@ (adr r3, 800a098 <__ieee754_pow+0xa28>)
 8009ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eaa:	4620      	mov	r0, r4
 8009eac:	460d      	mov	r5, r1
 8009eae:	f7f6 fbcb 	bl	8000648 <__aeabi_dmul>
 8009eb2:	4642      	mov	r2, r8
 8009eb4:	e9cd 0100 	strd	r0, r1, [sp]
 8009eb8:	464b      	mov	r3, r9
 8009eba:	4620      	mov	r0, r4
 8009ebc:	4629      	mov	r1, r5
 8009ebe:	f7f6 fa0b 	bl	80002d8 <__aeabi_dsub>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	4630      	mov	r0, r6
 8009ec8:	4639      	mov	r1, r7
 8009eca:	f7f6 fa05 	bl	80002d8 <__aeabi_dsub>
 8009ece:	a374      	add	r3, pc, #464	@ (adr r3, 800a0a0 <__ieee754_pow+0xa30>)
 8009ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed4:	f7f6 fbb8 	bl	8000648 <__aeabi_dmul>
 8009ed8:	a373      	add	r3, pc, #460	@ (adr r3, 800a0a8 <__ieee754_pow+0xa38>)
 8009eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ede:	4680      	mov	r8, r0
 8009ee0:	4689      	mov	r9, r1
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	4629      	mov	r1, r5
 8009ee6:	f7f6 fbaf 	bl	8000648 <__aeabi_dmul>
 8009eea:	4602      	mov	r2, r0
 8009eec:	460b      	mov	r3, r1
 8009eee:	4640      	mov	r0, r8
 8009ef0:	4649      	mov	r1, r9
 8009ef2:	f7f6 f9f3 	bl	80002dc <__adddf3>
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	460d      	mov	r5, r1
 8009efa:	4602      	mov	r2, r0
 8009efc:	460b      	mov	r3, r1
 8009efe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f02:	f7f6 f9eb 	bl	80002dc <__adddf3>
 8009f06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f0a:	4680      	mov	r8, r0
 8009f0c:	4689      	mov	r9, r1
 8009f0e:	f7f6 f9e3 	bl	80002d8 <__aeabi_dsub>
 8009f12:	4602      	mov	r2, r0
 8009f14:	460b      	mov	r3, r1
 8009f16:	4620      	mov	r0, r4
 8009f18:	4629      	mov	r1, r5
 8009f1a:	f7f6 f9dd 	bl	80002d8 <__aeabi_dsub>
 8009f1e:	4642      	mov	r2, r8
 8009f20:	4606      	mov	r6, r0
 8009f22:	460f      	mov	r7, r1
 8009f24:	464b      	mov	r3, r9
 8009f26:	4640      	mov	r0, r8
 8009f28:	4649      	mov	r1, r9
 8009f2a:	f7f6 fb8d 	bl	8000648 <__aeabi_dmul>
 8009f2e:	a360      	add	r3, pc, #384	@ (adr r3, 800a0b0 <__ieee754_pow+0xa40>)
 8009f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f34:	4604      	mov	r4, r0
 8009f36:	460d      	mov	r5, r1
 8009f38:	f7f6 fb86 	bl	8000648 <__aeabi_dmul>
 8009f3c:	a35e      	add	r3, pc, #376	@ (adr r3, 800a0b8 <__ieee754_pow+0xa48>)
 8009f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f42:	f7f6 f9c9 	bl	80002d8 <__aeabi_dsub>
 8009f46:	4622      	mov	r2, r4
 8009f48:	462b      	mov	r3, r5
 8009f4a:	f7f6 fb7d 	bl	8000648 <__aeabi_dmul>
 8009f4e:	a35c      	add	r3, pc, #368	@ (adr r3, 800a0c0 <__ieee754_pow+0xa50>)
 8009f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f54:	f7f6 f9c2 	bl	80002dc <__adddf3>
 8009f58:	4622      	mov	r2, r4
 8009f5a:	462b      	mov	r3, r5
 8009f5c:	f7f6 fb74 	bl	8000648 <__aeabi_dmul>
 8009f60:	a359      	add	r3, pc, #356	@ (adr r3, 800a0c8 <__ieee754_pow+0xa58>)
 8009f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f66:	f7f6 f9b7 	bl	80002d8 <__aeabi_dsub>
 8009f6a:	4622      	mov	r2, r4
 8009f6c:	462b      	mov	r3, r5
 8009f6e:	f7f6 fb6b 	bl	8000648 <__aeabi_dmul>
 8009f72:	a357      	add	r3, pc, #348	@ (adr r3, 800a0d0 <__ieee754_pow+0xa60>)
 8009f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f78:	f7f6 f9b0 	bl	80002dc <__adddf3>
 8009f7c:	4622      	mov	r2, r4
 8009f7e:	462b      	mov	r3, r5
 8009f80:	f7f6 fb62 	bl	8000648 <__aeabi_dmul>
 8009f84:	4602      	mov	r2, r0
 8009f86:	460b      	mov	r3, r1
 8009f88:	4640      	mov	r0, r8
 8009f8a:	4649      	mov	r1, r9
 8009f8c:	f7f6 f9a4 	bl	80002d8 <__aeabi_dsub>
 8009f90:	4604      	mov	r4, r0
 8009f92:	460d      	mov	r5, r1
 8009f94:	4602      	mov	r2, r0
 8009f96:	460b      	mov	r3, r1
 8009f98:	4640      	mov	r0, r8
 8009f9a:	4649      	mov	r1, r9
 8009f9c:	f7f6 fb54 	bl	8000648 <__aeabi_dmul>
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	e9cd 0100 	strd	r0, r1, [sp]
 8009fa6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009faa:	4620      	mov	r0, r4
 8009fac:	4629      	mov	r1, r5
 8009fae:	f7f6 f993 	bl	80002d8 <__aeabi_dsub>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fba:	f7f6 fc6f 	bl	800089c <__aeabi_ddiv>
 8009fbe:	4632      	mov	r2, r6
 8009fc0:	4604      	mov	r4, r0
 8009fc2:	460d      	mov	r5, r1
 8009fc4:	463b      	mov	r3, r7
 8009fc6:	4640      	mov	r0, r8
 8009fc8:	4649      	mov	r1, r9
 8009fca:	f7f6 fb3d 	bl	8000648 <__aeabi_dmul>
 8009fce:	4632      	mov	r2, r6
 8009fd0:	463b      	mov	r3, r7
 8009fd2:	f7f6 f983 	bl	80002dc <__adddf3>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	460b      	mov	r3, r1
 8009fda:	4620      	mov	r0, r4
 8009fdc:	4629      	mov	r1, r5
 8009fde:	f7f6 f97b 	bl	80002d8 <__aeabi_dsub>
 8009fe2:	4642      	mov	r2, r8
 8009fe4:	464b      	mov	r3, r9
 8009fe6:	f7f6 f977 	bl	80002d8 <__aeabi_dsub>
 8009fea:	460b      	mov	r3, r1
 8009fec:	4602      	mov	r2, r0
 8009fee:	493b      	ldr	r1, [pc, #236]	@ (800a0dc <__ieee754_pow+0xa6c>)
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	f7f6 f971 	bl	80002d8 <__aeabi_dsub>
 8009ff6:	ec41 0b10 	vmov	d0, r0, r1
 8009ffa:	ee10 3a90 	vmov	r3, s1
 8009ffe:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a002:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a006:	da30      	bge.n	800a06a <__ieee754_pow+0x9fa>
 800a008:	4650      	mov	r0, sl
 800a00a:	f000 f87d 	bl	800a108 <scalbn>
 800a00e:	ec51 0b10 	vmov	r0, r1, d0
 800a012:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a016:	f7ff bbd2 	b.w	80097be <__ieee754_pow+0x14e>
 800a01a:	4c31      	ldr	r4, [pc, #196]	@ (800a0e0 <__ieee754_pow+0xa70>)
 800a01c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a020:	42a3      	cmp	r3, r4
 800a022:	d91a      	bls.n	800a05a <__ieee754_pow+0x9ea>
 800a024:	4b2f      	ldr	r3, [pc, #188]	@ (800a0e4 <__ieee754_pow+0xa74>)
 800a026:	440b      	add	r3, r1
 800a028:	4303      	orrs	r3, r0
 800a02a:	d009      	beq.n	800a040 <__ieee754_pow+0x9d0>
 800a02c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a030:	2200      	movs	r2, #0
 800a032:	2300      	movs	r3, #0
 800a034:	f7f6 fd7a 	bl	8000b2c <__aeabi_dcmplt>
 800a038:	3800      	subs	r0, #0
 800a03a:	bf18      	it	ne
 800a03c:	2001      	movne	r0, #1
 800a03e:	e42b      	b.n	8009898 <__ieee754_pow+0x228>
 800a040:	4642      	mov	r2, r8
 800a042:	464b      	mov	r3, r9
 800a044:	f7f6 f948 	bl	80002d8 <__aeabi_dsub>
 800a048:	4632      	mov	r2, r6
 800a04a:	463b      	mov	r3, r7
 800a04c:	f7f6 fd82 	bl	8000b54 <__aeabi_dcmpge>
 800a050:	2800      	cmp	r0, #0
 800a052:	d1eb      	bne.n	800a02c <__ieee754_pow+0x9bc>
 800a054:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800a0f4 <__ieee754_pow+0xa84>
 800a058:	e6f7      	b.n	8009e4a <__ieee754_pow+0x7da>
 800a05a:	469a      	mov	sl, r3
 800a05c:	4b22      	ldr	r3, [pc, #136]	@ (800a0e8 <__ieee754_pow+0xa78>)
 800a05e:	459a      	cmp	sl, r3
 800a060:	f63f aef3 	bhi.w	8009e4a <__ieee754_pow+0x7da>
 800a064:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a068:	e715      	b.n	8009e96 <__ieee754_pow+0x826>
 800a06a:	ec51 0b10 	vmov	r0, r1, d0
 800a06e:	4619      	mov	r1, r3
 800a070:	e7cf      	b.n	800a012 <__ieee754_pow+0x9a2>
 800a072:	491a      	ldr	r1, [pc, #104]	@ (800a0dc <__ieee754_pow+0xa6c>)
 800a074:	2000      	movs	r0, #0
 800a076:	f7ff bb18 	b.w	80096aa <__ieee754_pow+0x3a>
 800a07a:	2000      	movs	r0, #0
 800a07c:	2100      	movs	r1, #0
 800a07e:	f7ff bb14 	b.w	80096aa <__ieee754_pow+0x3a>
 800a082:	4630      	mov	r0, r6
 800a084:	4639      	mov	r1, r7
 800a086:	f7ff bb10 	b.w	80096aa <__ieee754_pow+0x3a>
 800a08a:	460c      	mov	r4, r1
 800a08c:	f7ff bb5e 	b.w	800974c <__ieee754_pow+0xdc>
 800a090:	2400      	movs	r4, #0
 800a092:	f7ff bb49 	b.w	8009728 <__ieee754_pow+0xb8>
 800a096:	bf00      	nop
 800a098:	00000000 	.word	0x00000000
 800a09c:	3fe62e43 	.word	0x3fe62e43
 800a0a0:	fefa39ef 	.word	0xfefa39ef
 800a0a4:	3fe62e42 	.word	0x3fe62e42
 800a0a8:	0ca86c39 	.word	0x0ca86c39
 800a0ac:	be205c61 	.word	0xbe205c61
 800a0b0:	72bea4d0 	.word	0x72bea4d0
 800a0b4:	3e663769 	.word	0x3e663769
 800a0b8:	c5d26bf1 	.word	0xc5d26bf1
 800a0bc:	3ebbbd41 	.word	0x3ebbbd41
 800a0c0:	af25de2c 	.word	0xaf25de2c
 800a0c4:	3f11566a 	.word	0x3f11566a
 800a0c8:	16bebd93 	.word	0x16bebd93
 800a0cc:	3f66c16c 	.word	0x3f66c16c
 800a0d0:	5555553e 	.word	0x5555553e
 800a0d4:	3fc55555 	.word	0x3fc55555
 800a0d8:	fff00000 	.word	0xfff00000
 800a0dc:	3ff00000 	.word	0x3ff00000
 800a0e0:	4090cbff 	.word	0x4090cbff
 800a0e4:	3f6f3400 	.word	0x3f6f3400
 800a0e8:	3fe00000 	.word	0x3fe00000
 800a0ec:	652b82fe 	.word	0x652b82fe
 800a0f0:	3c971547 	.word	0x3c971547
 800a0f4:	4090cc00 	.word	0x4090cc00

0800a0f8 <fabs>:
 800a0f8:	ec51 0b10 	vmov	r0, r1, d0
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a102:	ec43 2b10 	vmov	d0, r2, r3
 800a106:	4770      	bx	lr

0800a108 <scalbn>:
 800a108:	b570      	push	{r4, r5, r6, lr}
 800a10a:	ec55 4b10 	vmov	r4, r5, d0
 800a10e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a112:	4606      	mov	r6, r0
 800a114:	462b      	mov	r3, r5
 800a116:	b991      	cbnz	r1, 800a13e <scalbn+0x36>
 800a118:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a11c:	4323      	orrs	r3, r4
 800a11e:	d03d      	beq.n	800a19c <scalbn+0x94>
 800a120:	4b35      	ldr	r3, [pc, #212]	@ (800a1f8 <scalbn+0xf0>)
 800a122:	4620      	mov	r0, r4
 800a124:	4629      	mov	r1, r5
 800a126:	2200      	movs	r2, #0
 800a128:	f7f6 fa8e 	bl	8000648 <__aeabi_dmul>
 800a12c:	4b33      	ldr	r3, [pc, #204]	@ (800a1fc <scalbn+0xf4>)
 800a12e:	429e      	cmp	r6, r3
 800a130:	4604      	mov	r4, r0
 800a132:	460d      	mov	r5, r1
 800a134:	da0f      	bge.n	800a156 <scalbn+0x4e>
 800a136:	a328      	add	r3, pc, #160	@ (adr r3, 800a1d8 <scalbn+0xd0>)
 800a138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13c:	e01e      	b.n	800a17c <scalbn+0x74>
 800a13e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a142:	4291      	cmp	r1, r2
 800a144:	d10b      	bne.n	800a15e <scalbn+0x56>
 800a146:	4622      	mov	r2, r4
 800a148:	4620      	mov	r0, r4
 800a14a:	4629      	mov	r1, r5
 800a14c:	f7f6 f8c6 	bl	80002dc <__adddf3>
 800a150:	4604      	mov	r4, r0
 800a152:	460d      	mov	r5, r1
 800a154:	e022      	b.n	800a19c <scalbn+0x94>
 800a156:	460b      	mov	r3, r1
 800a158:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a15c:	3936      	subs	r1, #54	@ 0x36
 800a15e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a162:	4296      	cmp	r6, r2
 800a164:	dd0d      	ble.n	800a182 <scalbn+0x7a>
 800a166:	2d00      	cmp	r5, #0
 800a168:	a11d      	add	r1, pc, #116	@ (adr r1, 800a1e0 <scalbn+0xd8>)
 800a16a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a16e:	da02      	bge.n	800a176 <scalbn+0x6e>
 800a170:	a11d      	add	r1, pc, #116	@ (adr r1, 800a1e8 <scalbn+0xe0>)
 800a172:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a176:	a31a      	add	r3, pc, #104	@ (adr r3, 800a1e0 <scalbn+0xd8>)
 800a178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17c:	f7f6 fa64 	bl	8000648 <__aeabi_dmul>
 800a180:	e7e6      	b.n	800a150 <scalbn+0x48>
 800a182:	1872      	adds	r2, r6, r1
 800a184:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a188:	428a      	cmp	r2, r1
 800a18a:	dcec      	bgt.n	800a166 <scalbn+0x5e>
 800a18c:	2a00      	cmp	r2, #0
 800a18e:	dd08      	ble.n	800a1a2 <scalbn+0x9a>
 800a190:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a194:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a198:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a19c:	ec45 4b10 	vmov	d0, r4, r5
 800a1a0:	bd70      	pop	{r4, r5, r6, pc}
 800a1a2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a1a6:	da08      	bge.n	800a1ba <scalbn+0xb2>
 800a1a8:	2d00      	cmp	r5, #0
 800a1aa:	a10b      	add	r1, pc, #44	@ (adr r1, 800a1d8 <scalbn+0xd0>)
 800a1ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1b0:	dac1      	bge.n	800a136 <scalbn+0x2e>
 800a1b2:	a10f      	add	r1, pc, #60	@ (adr r1, 800a1f0 <scalbn+0xe8>)
 800a1b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1b8:	e7bd      	b.n	800a136 <scalbn+0x2e>
 800a1ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a1be:	3236      	adds	r2, #54	@ 0x36
 800a1c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a1c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a200 <scalbn+0xf8>)
 800a1cc:	4629      	mov	r1, r5
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	e7d4      	b.n	800a17c <scalbn+0x74>
 800a1d2:	bf00      	nop
 800a1d4:	f3af 8000 	nop.w
 800a1d8:	c2f8f359 	.word	0xc2f8f359
 800a1dc:	01a56e1f 	.word	0x01a56e1f
 800a1e0:	8800759c 	.word	0x8800759c
 800a1e4:	7e37e43c 	.word	0x7e37e43c
 800a1e8:	8800759c 	.word	0x8800759c
 800a1ec:	fe37e43c 	.word	0xfe37e43c
 800a1f0:	c2f8f359 	.word	0xc2f8f359
 800a1f4:	81a56e1f 	.word	0x81a56e1f
 800a1f8:	43500000 	.word	0x43500000
 800a1fc:	ffff3cb0 	.word	0xffff3cb0
 800a200:	3c900000 	.word	0x3c900000

0800a204 <with_errno>:
 800a204:	b510      	push	{r4, lr}
 800a206:	ed2d 8b02 	vpush	{d8}
 800a20a:	eeb0 8a40 	vmov.f32	s16, s0
 800a20e:	eef0 8a60 	vmov.f32	s17, s1
 800a212:	4604      	mov	r4, r0
 800a214:	f7fb ff36 	bl	8006084 <__errno>
 800a218:	eeb0 0a48 	vmov.f32	s0, s16
 800a21c:	eef0 0a68 	vmov.f32	s1, s17
 800a220:	ecbd 8b02 	vpop	{d8}
 800a224:	6004      	str	r4, [r0, #0]
 800a226:	bd10      	pop	{r4, pc}

0800a228 <xflow>:
 800a228:	4603      	mov	r3, r0
 800a22a:	b507      	push	{r0, r1, r2, lr}
 800a22c:	ec51 0b10 	vmov	r0, r1, d0
 800a230:	b183      	cbz	r3, 800a254 <xflow+0x2c>
 800a232:	4602      	mov	r2, r0
 800a234:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a238:	e9cd 2300 	strd	r2, r3, [sp]
 800a23c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a240:	f7f6 fa02 	bl	8000648 <__aeabi_dmul>
 800a244:	ec41 0b10 	vmov	d0, r0, r1
 800a248:	2022      	movs	r0, #34	@ 0x22
 800a24a:	b003      	add	sp, #12
 800a24c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a250:	f7ff bfd8 	b.w	800a204 <with_errno>
 800a254:	4602      	mov	r2, r0
 800a256:	460b      	mov	r3, r1
 800a258:	e7ee      	b.n	800a238 <xflow+0x10>
 800a25a:	0000      	movs	r0, r0
 800a25c:	0000      	movs	r0, r0
	...

0800a260 <__math_uflow>:
 800a260:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a268 <__math_uflow+0x8>
 800a264:	f7ff bfe0 	b.w	800a228 <xflow>
 800a268:	00000000 	.word	0x00000000
 800a26c:	10000000 	.word	0x10000000

0800a270 <__math_oflow>:
 800a270:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a278 <__math_oflow+0x8>
 800a274:	f7ff bfd8 	b.w	800a228 <xflow>
 800a278:	00000000 	.word	0x00000000
 800a27c:	70000000 	.word	0x70000000

0800a280 <__ieee754_sqrt>:
 800a280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a284:	4a68      	ldr	r2, [pc, #416]	@ (800a428 <__ieee754_sqrt+0x1a8>)
 800a286:	ec55 4b10 	vmov	r4, r5, d0
 800a28a:	43aa      	bics	r2, r5
 800a28c:	462b      	mov	r3, r5
 800a28e:	4621      	mov	r1, r4
 800a290:	d110      	bne.n	800a2b4 <__ieee754_sqrt+0x34>
 800a292:	4622      	mov	r2, r4
 800a294:	4620      	mov	r0, r4
 800a296:	4629      	mov	r1, r5
 800a298:	f7f6 f9d6 	bl	8000648 <__aeabi_dmul>
 800a29c:	4602      	mov	r2, r0
 800a29e:	460b      	mov	r3, r1
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	4629      	mov	r1, r5
 800a2a4:	f7f6 f81a 	bl	80002dc <__adddf3>
 800a2a8:	4604      	mov	r4, r0
 800a2aa:	460d      	mov	r5, r1
 800a2ac:	ec45 4b10 	vmov	d0, r4, r5
 800a2b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b4:	2d00      	cmp	r5, #0
 800a2b6:	dc0e      	bgt.n	800a2d6 <__ieee754_sqrt+0x56>
 800a2b8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a2bc:	4322      	orrs	r2, r4
 800a2be:	d0f5      	beq.n	800a2ac <__ieee754_sqrt+0x2c>
 800a2c0:	b19d      	cbz	r5, 800a2ea <__ieee754_sqrt+0x6a>
 800a2c2:	4622      	mov	r2, r4
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	4629      	mov	r1, r5
 800a2c8:	f7f6 f806 	bl	80002d8 <__aeabi_dsub>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	f7f6 fae4 	bl	800089c <__aeabi_ddiv>
 800a2d4:	e7e8      	b.n	800a2a8 <__ieee754_sqrt+0x28>
 800a2d6:	152a      	asrs	r2, r5, #20
 800a2d8:	d115      	bne.n	800a306 <__ieee754_sqrt+0x86>
 800a2da:	2000      	movs	r0, #0
 800a2dc:	e009      	b.n	800a2f2 <__ieee754_sqrt+0x72>
 800a2de:	0acb      	lsrs	r3, r1, #11
 800a2e0:	3a15      	subs	r2, #21
 800a2e2:	0549      	lsls	r1, r1, #21
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d0fa      	beq.n	800a2de <__ieee754_sqrt+0x5e>
 800a2e8:	e7f7      	b.n	800a2da <__ieee754_sqrt+0x5a>
 800a2ea:	462a      	mov	r2, r5
 800a2ec:	e7fa      	b.n	800a2e4 <__ieee754_sqrt+0x64>
 800a2ee:	005b      	lsls	r3, r3, #1
 800a2f0:	3001      	adds	r0, #1
 800a2f2:	02dc      	lsls	r4, r3, #11
 800a2f4:	d5fb      	bpl.n	800a2ee <__ieee754_sqrt+0x6e>
 800a2f6:	1e44      	subs	r4, r0, #1
 800a2f8:	1b12      	subs	r2, r2, r4
 800a2fa:	f1c0 0420 	rsb	r4, r0, #32
 800a2fe:	fa21 f404 	lsr.w	r4, r1, r4
 800a302:	4323      	orrs	r3, r4
 800a304:	4081      	lsls	r1, r0
 800a306:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a30a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800a30e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a312:	07d2      	lsls	r2, r2, #31
 800a314:	bf5c      	itt	pl
 800a316:	005b      	lslpl	r3, r3, #1
 800a318:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a31c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a320:	bf58      	it	pl
 800a322:	0049      	lslpl	r1, r1, #1
 800a324:	2600      	movs	r6, #0
 800a326:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a32a:	106d      	asrs	r5, r5, #1
 800a32c:	0049      	lsls	r1, r1, #1
 800a32e:	2016      	movs	r0, #22
 800a330:	4632      	mov	r2, r6
 800a332:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a336:	1917      	adds	r7, r2, r4
 800a338:	429f      	cmp	r7, r3
 800a33a:	bfde      	ittt	le
 800a33c:	193a      	addle	r2, r7, r4
 800a33e:	1bdb      	suble	r3, r3, r7
 800a340:	1936      	addle	r6, r6, r4
 800a342:	0fcf      	lsrs	r7, r1, #31
 800a344:	3801      	subs	r0, #1
 800a346:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800a34a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a34e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a352:	d1f0      	bne.n	800a336 <__ieee754_sqrt+0xb6>
 800a354:	4604      	mov	r4, r0
 800a356:	2720      	movs	r7, #32
 800a358:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a35c:	429a      	cmp	r2, r3
 800a35e:	eb00 0e0c 	add.w	lr, r0, ip
 800a362:	db02      	blt.n	800a36a <__ieee754_sqrt+0xea>
 800a364:	d113      	bne.n	800a38e <__ieee754_sqrt+0x10e>
 800a366:	458e      	cmp	lr, r1
 800a368:	d811      	bhi.n	800a38e <__ieee754_sqrt+0x10e>
 800a36a:	f1be 0f00 	cmp.w	lr, #0
 800a36e:	eb0e 000c 	add.w	r0, lr, ip
 800a372:	da42      	bge.n	800a3fa <__ieee754_sqrt+0x17a>
 800a374:	2800      	cmp	r0, #0
 800a376:	db40      	blt.n	800a3fa <__ieee754_sqrt+0x17a>
 800a378:	f102 0801 	add.w	r8, r2, #1
 800a37c:	1a9b      	subs	r3, r3, r2
 800a37e:	458e      	cmp	lr, r1
 800a380:	bf88      	it	hi
 800a382:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a386:	eba1 010e 	sub.w	r1, r1, lr
 800a38a:	4464      	add	r4, ip
 800a38c:	4642      	mov	r2, r8
 800a38e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a392:	3f01      	subs	r7, #1
 800a394:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a398:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a39c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a3a0:	d1dc      	bne.n	800a35c <__ieee754_sqrt+0xdc>
 800a3a2:	4319      	orrs	r1, r3
 800a3a4:	d01b      	beq.n	800a3de <__ieee754_sqrt+0x15e>
 800a3a6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800a42c <__ieee754_sqrt+0x1ac>
 800a3aa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800a430 <__ieee754_sqrt+0x1b0>
 800a3ae:	e9da 0100 	ldrd	r0, r1, [sl]
 800a3b2:	e9db 2300 	ldrd	r2, r3, [fp]
 800a3b6:	f7f5 ff8f 	bl	80002d8 <__aeabi_dsub>
 800a3ba:	e9da 8900 	ldrd	r8, r9, [sl]
 800a3be:	4602      	mov	r2, r0
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	4640      	mov	r0, r8
 800a3c4:	4649      	mov	r1, r9
 800a3c6:	f7f6 fbbb 	bl	8000b40 <__aeabi_dcmple>
 800a3ca:	b140      	cbz	r0, 800a3de <__ieee754_sqrt+0x15e>
 800a3cc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a3d0:	e9da 0100 	ldrd	r0, r1, [sl]
 800a3d4:	e9db 2300 	ldrd	r2, r3, [fp]
 800a3d8:	d111      	bne.n	800a3fe <__ieee754_sqrt+0x17e>
 800a3da:	3601      	adds	r6, #1
 800a3dc:	463c      	mov	r4, r7
 800a3de:	1072      	asrs	r2, r6, #1
 800a3e0:	0863      	lsrs	r3, r4, #1
 800a3e2:	07f1      	lsls	r1, r6, #31
 800a3e4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a3e8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a3ec:	bf48      	it	mi
 800a3ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a3f2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	e756      	b.n	800a2a8 <__ieee754_sqrt+0x28>
 800a3fa:	4690      	mov	r8, r2
 800a3fc:	e7be      	b.n	800a37c <__ieee754_sqrt+0xfc>
 800a3fe:	f7f5 ff6d 	bl	80002dc <__adddf3>
 800a402:	e9da 8900 	ldrd	r8, r9, [sl]
 800a406:	4602      	mov	r2, r0
 800a408:	460b      	mov	r3, r1
 800a40a:	4640      	mov	r0, r8
 800a40c:	4649      	mov	r1, r9
 800a40e:	f7f6 fb8d 	bl	8000b2c <__aeabi_dcmplt>
 800a412:	b120      	cbz	r0, 800a41e <__ieee754_sqrt+0x19e>
 800a414:	1ca0      	adds	r0, r4, #2
 800a416:	bf08      	it	eq
 800a418:	3601      	addeq	r6, #1
 800a41a:	3402      	adds	r4, #2
 800a41c:	e7df      	b.n	800a3de <__ieee754_sqrt+0x15e>
 800a41e:	1c63      	adds	r3, r4, #1
 800a420:	f023 0401 	bic.w	r4, r3, #1
 800a424:	e7db      	b.n	800a3de <__ieee754_sqrt+0x15e>
 800a426:	bf00      	nop
 800a428:	7ff00000 	.word	0x7ff00000
 800a42c:	20000218 	.word	0x20000218
 800a430:	20000210 	.word	0x20000210

0800a434 <_init>:
 800a434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a436:	bf00      	nop
 800a438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a43a:	bc08      	pop	{r3}
 800a43c:	469e      	mov	lr, r3
 800a43e:	4770      	bx	lr

0800a440 <_fini>:
 800a440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a442:	bf00      	nop
 800a444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a446:	bc08      	pop	{r3}
 800a448:	469e      	mov	lr, r3
 800a44a:	4770      	bx	lr
