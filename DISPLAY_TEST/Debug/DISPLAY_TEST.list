
DISPLAY_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8c4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a00  0800aaa8  0800aaa8  0000baa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4a8  0800e4a8  000101dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e4a8  0800e4a8  0000f4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e4b0  0800e4b0  000101dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e4b0  0800e4b0  0000f4b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e4b4  0800e4b4  0000f4b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800e4b8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000764  200001dc  0800e694  000101dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000940  0800e694  00010940  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001584a  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036db  00000000  00000000  00025a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  00029138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f55  00000000  00000000  0002a548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024bb6  00000000  00000000  0002b49d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001af62  00000000  00000000  00050053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d572b  00000000  00000000  0006afb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001406e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006868  00000000  00000000  00140724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00146f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800aa8c 	.word	0x0800aa8c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	0800aa8c 	.word	0x0800aa8c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&_dat, 1, 500);
 800103e:	1df9      	adds	r1, r7, #7
 8001040:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001044:	2201      	movs	r2, #1
 8001046:	4803      	ldr	r0, [pc, #12]	@ (8001054 <DEV_SPI_WRite+0x20>)
 8001048:	f003 fa75 	bl	8004536 <HAL_SPI_Transmit>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000220 	.word	0x20000220

08001058 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 800105c:	2201      	movs	r2, #1
 800105e:	2180      	movs	r1, #128	@ 0x80
 8001060:	480a      	ldr	r0, [pc, #40]	@ (800108c <DEV_Module_Init+0x34>)
 8001062:	f002 f95b 	bl	800331c <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8001066:	2201      	movs	r2, #1
 8001068:	2110      	movs	r1, #16
 800106a:	4809      	ldr	r0, [pc, #36]	@ (8001090 <DEV_Module_Init+0x38>)
 800106c:	f002 f956 	bl	800331c <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001076:	4805      	ldr	r0, [pc, #20]	@ (800108c <DEV_Module_Init+0x34>)
 8001078:	f002 f950 	bl	800331c <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800107c:	2104      	movs	r1, #4
 800107e:	4805      	ldr	r0, [pc, #20]	@ (8001094 <DEV_Module_Init+0x3c>)
 8001080:	f003 fd20 	bl	8004ac4 <HAL_TIM_PWM_Start>
		return 0;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40020800 	.word	0x40020800
 8001090:	40020000 	.word	0x40020000
 8001094:	2000027c 	.word	0x2000027c

08001098 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4604      	mov	r4, r0
 80010a0:	4608      	mov	r0, r1
 80010a2:	4611      	mov	r1, r2
 80010a4:	461a      	mov	r2, r3
 80010a6:	4623      	mov	r3, r4
 80010a8:	80fb      	strh	r3, [r7, #6]
 80010aa:	4603      	mov	r3, r0
 80010ac:	80bb      	strh	r3, [r7, #4]
 80010ae:	460b      	mov	r3, r1
 80010b0:	807b      	strh	r3, [r7, #2]
 80010b2:	4613      	mov	r3, r2
 80010b4:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 80010b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001128 <Paint_NewImage+0x90>)
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 80010bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001128 <Paint_NewImage+0x90>)
 80010be:	88bb      	ldrh	r3, [r7, #4]
 80010c0:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 80010c2:	4a19      	ldr	r2, [pc, #100]	@ (8001128 <Paint_NewImage+0x90>)
 80010c4:	883b      	ldrh	r3, [r7, #0]
 80010c6:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 80010c8:	4a17      	ldr	r2, [pc, #92]	@ (8001128 <Paint_NewImage+0x90>)
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 80010ce:	4a16      	ldr	r2, [pc, #88]	@ (8001128 <Paint_NewImage+0x90>)
 80010d0:	88bb      	ldrh	r3, [r7, #4]
 80010d2:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 80010d4:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <Paint_NewImage+0x90>)
 80010d6:	8a5b      	ldrh	r3, [r3, #18]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	4619      	mov	r1, r3
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <Paint_NewImage+0x90>)
 80010de:	8a9b      	ldrh	r3, [r3, #20]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	461a      	mov	r2, r3
 80010e4:	4811      	ldr	r0, [pc, #68]	@ (800112c <Paint_NewImage+0x94>)
 80010e6:	f006 f8db 	bl	80072a0 <iprintf>
   
    Paint.Rotate = Rotate;
 80010ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001128 <Paint_NewImage+0x90>)
 80010ec:	887b      	ldrh	r3, [r7, #2]
 80010ee:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <Paint_NewImage+0x90>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 80010f6:	887b      	ldrh	r3, [r7, #2]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d002      	beq.n	8001102 <Paint_NewImage+0x6a>
 80010fc:	887b      	ldrh	r3, [r7, #2]
 80010fe:	2bb4      	cmp	r3, #180	@ 0xb4
 8001100:	d106      	bne.n	8001110 <Paint_NewImage+0x78>
        Paint.Width = Width;
 8001102:	4a09      	ldr	r2, [pc, #36]	@ (8001128 <Paint_NewImage+0x90>)
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8001108:	4a07      	ldr	r2, [pc, #28]	@ (8001128 <Paint_NewImage+0x90>)
 800110a:	88bb      	ldrh	r3, [r7, #4]
 800110c:	80d3      	strh	r3, [r2, #6]
 800110e:	e006      	b.n	800111e <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 8001110:	4a05      	ldr	r2, [pc, #20]	@ (8001128 <Paint_NewImage+0x90>)
 8001112:	88bb      	ldrh	r3, [r7, #4]
 8001114:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8001116:	4a04      	ldr	r2, [pc, #16]	@ (8001128 <Paint_NewImage+0x90>)
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	80d3      	strh	r3, [r2, #6]
    }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bd90      	pop	{r4, r7, pc}
 8001126:	bf00      	nop
 8001128:	200001f8 	.word	0x200001f8
 800112c:	0800aaa8 	.word	0x0800aaa8

08001130 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8001138:	4a04      	ldr	r2, [pc, #16]	@ (800114c <Paint_SetClearFuntion+0x1c>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6013      	str	r3, [r2, #0]
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000214 	.word	0x20000214

08001150 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 8001158:	4a04      	ldr	r2, [pc, #16]	@ (800116c <Paint_SetDisplayFuntion+0x1c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000210 	.word	0x20000210

08001170 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	80fb      	strh	r3, [r7, #6]
 800117a:	460b      	mov	r3, r1
 800117c:	80bb      	strh	r3, [r7, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8001182:	4b50      	ldr	r3, [pc, #320]	@ (80012c4 <Paint_SetPixel+0x154>)
 8001184:	889b      	ldrh	r3, [r3, #4]
 8001186:	b29b      	uxth	r3, r3
 8001188:	88fa      	ldrh	r2, [r7, #6]
 800118a:	429a      	cmp	r2, r3
 800118c:	d805      	bhi.n	800119a <Paint_SetPixel+0x2a>
 800118e:	4b4d      	ldr	r3, [pc, #308]	@ (80012c4 <Paint_SetPixel+0x154>)
 8001190:	88db      	ldrh	r3, [r3, #6]
 8001192:	b29b      	uxth	r3, r3
 8001194:	88ba      	ldrh	r2, [r7, #4]
 8001196:	429a      	cmp	r2, r3
 8001198:	d903      	bls.n	80011a2 <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 800119a:	484b      	ldr	r0, [pc, #300]	@ (80012c8 <Paint_SetPixel+0x158>)
 800119c:	f006 f8e8 	bl	8007370 <puts>
        return;
 80011a0:	e08c      	b.n	80012bc <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 80011a2:	4b48      	ldr	r3, [pc, #288]	@ (80012c4 <Paint_SetPixel+0x154>)
 80011a4:	89db      	ldrh	r3, [r3, #14]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80011ac:	d02d      	beq.n	800120a <Paint_SetPixel+0x9a>
 80011ae:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80011b2:	f300 8080 	bgt.w	80012b6 <Paint_SetPixel+0x146>
 80011b6:	2bb4      	cmp	r3, #180	@ 0xb4
 80011b8:	d016      	beq.n	80011e8 <Paint_SetPixel+0x78>
 80011ba:	2bb4      	cmp	r3, #180	@ 0xb4
 80011bc:	dc7b      	bgt.n	80012b6 <Paint_SetPixel+0x146>
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d002      	beq.n	80011c8 <Paint_SetPixel+0x58>
 80011c2:	2b5a      	cmp	r3, #90	@ 0x5a
 80011c4:	d005      	beq.n	80011d2 <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 80011c6:	e076      	b.n	80012b6 <Paint_SetPixel+0x146>
        X = Xpoint;
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 80011cc:	88bb      	ldrh	r3, [r7, #4]
 80011ce:	81bb      	strh	r3, [r7, #12]
        break;
 80011d0:	e026      	b.n	8001220 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 80011d2:	4b3c      	ldr	r3, [pc, #240]	@ (80012c4 <Paint_SetPixel+0x154>)
 80011d4:	891b      	ldrh	r3, [r3, #8]
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	88bb      	ldrh	r3, [r7, #4]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	b29b      	uxth	r3, r3
 80011de:	3b01      	subs	r3, #1
 80011e0:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	81bb      	strh	r3, [r7, #12]
        break;
 80011e6:	e01b      	b.n	8001220 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 80011e8:	4b36      	ldr	r3, [pc, #216]	@ (80012c4 <Paint_SetPixel+0x154>)
 80011ea:	891b      	ldrh	r3, [r3, #8]
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	3b01      	subs	r3, #1
 80011f6:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 80011f8:	4b32      	ldr	r3, [pc, #200]	@ (80012c4 <Paint_SetPixel+0x154>)
 80011fa:	895b      	ldrh	r3, [r3, #10]
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	88bb      	ldrh	r3, [r7, #4]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	b29b      	uxth	r3, r3
 8001204:	3b01      	subs	r3, #1
 8001206:	81bb      	strh	r3, [r7, #12]
        break;
 8001208:	e00a      	b.n	8001220 <Paint_SetPixel+0xb0>
        X = Ypoint;
 800120a:	88bb      	ldrh	r3, [r7, #4]
 800120c:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 800120e:	4b2d      	ldr	r3, [pc, #180]	@ (80012c4 <Paint_SetPixel+0x154>)
 8001210:	895b      	ldrh	r3, [r3, #10]
 8001212:	b29a      	uxth	r2, r3
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	b29b      	uxth	r3, r3
 800121a:	3b01      	subs	r3, #1
 800121c:	81bb      	strh	r3, [r7, #12]
        break;
 800121e:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8001220:	4b28      	ldr	r3, [pc, #160]	@ (80012c4 <Paint_SetPixel+0x154>)
 8001222:	8a1b      	ldrh	r3, [r3, #16]
 8001224:	b29b      	uxth	r3, r3
 8001226:	2b03      	cmp	r3, #3
 8001228:	d847      	bhi.n	80012ba <Paint_SetPixel+0x14a>
 800122a:	a201      	add	r2, pc, #4	@ (adr r2, 8001230 <Paint_SetPixel+0xc0>)
 800122c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001230:	08001287 	.word	0x08001287
 8001234:	08001241 	.word	0x08001241
 8001238:	08001253 	.word	0x08001253
 800123c:	08001265 	.word	0x08001265
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8001240:	4b20      	ldr	r3, [pc, #128]	@ (80012c4 <Paint_SetPixel+0x154>)
 8001242:	891b      	ldrh	r3, [r3, #8]
 8001244:	b29a      	uxth	r2, r3
 8001246:	89fb      	ldrh	r3, [r7, #14]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	b29b      	uxth	r3, r3
 800124c:	3b01      	subs	r3, #1
 800124e:	81fb      	strh	r3, [r7, #14]
        break;
 8001250:	e01a      	b.n	8001288 <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8001252:	4b1c      	ldr	r3, [pc, #112]	@ (80012c4 <Paint_SetPixel+0x154>)
 8001254:	895b      	ldrh	r3, [r3, #10]
 8001256:	b29a      	uxth	r2, r3
 8001258:	89bb      	ldrh	r3, [r7, #12]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	b29b      	uxth	r3, r3
 800125e:	3b01      	subs	r3, #1
 8001260:	81bb      	strh	r3, [r7, #12]
        break;
 8001262:	e011      	b.n	8001288 <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8001264:	4b17      	ldr	r3, [pc, #92]	@ (80012c4 <Paint_SetPixel+0x154>)
 8001266:	891b      	ldrh	r3, [r3, #8]
 8001268:	b29a      	uxth	r2, r3
 800126a:	89fb      	ldrh	r3, [r7, #14]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	b29b      	uxth	r3, r3
 8001270:	3b01      	subs	r3, #1
 8001272:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8001274:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <Paint_SetPixel+0x154>)
 8001276:	895b      	ldrh	r3, [r3, #10]
 8001278:	b29a      	uxth	r2, r3
 800127a:	89bb      	ldrh	r3, [r7, #12]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	b29b      	uxth	r3, r3
 8001280:	3b01      	subs	r3, #1
 8001282:	81bb      	strh	r3, [r7, #12]
        break;
 8001284:	e000      	b.n	8001288 <Paint_SetPixel+0x118>
        break;
 8001286:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8001288:	4b0e      	ldr	r3, [pc, #56]	@ (80012c4 <Paint_SetPixel+0x154>)
 800128a:	891b      	ldrh	r3, [r3, #8]
 800128c:	b29b      	uxth	r3, r3
 800128e:	89fa      	ldrh	r2, [r7, #14]
 8001290:	429a      	cmp	r2, r3
 8001292:	d805      	bhi.n	80012a0 <Paint_SetPixel+0x130>
 8001294:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <Paint_SetPixel+0x154>)
 8001296:	895b      	ldrh	r3, [r3, #10]
 8001298:	b29b      	uxth	r3, r3
 800129a:	89ba      	ldrh	r2, [r7, #12]
 800129c:	429a      	cmp	r2, r3
 800129e:	d903      	bls.n	80012a8 <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 80012a0:	4809      	ldr	r0, [pc, #36]	@ (80012c8 <Paint_SetPixel+0x158>)
 80012a2:	f006 f865 	bl	8007370 <puts>
        return;
 80012a6:	e009      	b.n	80012bc <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 80012a8:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <Paint_SetPixel+0x15c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	887a      	ldrh	r2, [r7, #2]
 80012ae:	89b9      	ldrh	r1, [r7, #12]
 80012b0:	89f8      	ldrh	r0, [r7, #14]
 80012b2:	4798      	blx	r3
 80012b4:	e002      	b.n	80012bc <Paint_SetPixel+0x14c>
        return;
 80012b6:	bf00      	nop
 80012b8:	e000      	b.n	80012bc <Paint_SetPixel+0x14c>
        return;
 80012ba:	bf00      	nop
}
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200001f8 	.word	0x200001f8
 80012c8:	0800aba8 	.word	0x0800aba8
 80012cc:	20000210 	.word	0x20000210

080012d0 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 80012da:	4b04      	ldr	r3, [pc, #16]	@ (80012ec <Paint_Clear+0x1c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	88fa      	ldrh	r2, [r7, #6]
 80012e0:	4610      	mov	r0, r2
 80012e2:	4798      	blx	r3
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000214 	.word	0x20000214

080012f0 <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4604      	mov	r4, r0
 80012f8:	4608      	mov	r0, r1
 80012fa:	4611      	mov	r1, r2
 80012fc:	461a      	mov	r2, r3
 80012fe:	4623      	mov	r3, r4
 8001300:	80fb      	strh	r3, [r7, #6]
 8001302:	4603      	mov	r3, r0
 8001304:	80bb      	strh	r3, [r7, #4]
 8001306:	460b      	mov	r3, r1
 8001308:	807b      	strh	r3, [r7, #2]
 800130a:	4613      	mov	r3, r2
 800130c:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800130e:	4b44      	ldr	r3, [pc, #272]	@ (8001420 <Paint_DrawPoint+0x130>)
 8001310:	889b      	ldrh	r3, [r3, #4]
 8001312:	b29b      	uxth	r3, r3
 8001314:	88fa      	ldrh	r2, [r7, #6]
 8001316:	429a      	cmp	r2, r3
 8001318:	d805      	bhi.n	8001326 <Paint_DrawPoint+0x36>
 800131a:	4b41      	ldr	r3, [pc, #260]	@ (8001420 <Paint_DrawPoint+0x130>)
 800131c:	88db      	ldrh	r3, [r3, #6]
 800131e:	b29b      	uxth	r3, r3
 8001320:	88ba      	ldrh	r2, [r7, #4]
 8001322:	429a      	cmp	r2, r3
 8001324:	d903      	bls.n	800132e <Paint_DrawPoint+0x3e>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 8001326:	483f      	ldr	r0, [pc, #252]	@ (8001424 <Paint_DrawPoint+0x134>)
 8001328:	f006 f822 	bl	8007370 <puts>
        return;
 800132c:	e074      	b.n	8001418 <Paint_DrawPoint+0x128>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND) {
 800132e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d144      	bne.n	80013c0 <Paint_DrawPoint+0xd0>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 8001336:	2300      	movs	r3, #0
 8001338:	81fb      	strh	r3, [r7, #14]
 800133a:	e039      	b.n	80013b0 <Paint_DrawPoint+0xc0>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800133c:	2300      	movs	r3, #0
 800133e:	81bb      	strh	r3, [r7, #12]
 8001340:	e029      	b.n	8001396 <Paint_DrawPoint+0xa6>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 8001342:	88fa      	ldrh	r2, [r7, #6]
 8001344:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001348:	441a      	add	r2, r3
 800134a:	787b      	ldrb	r3, [r7, #1]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	db28      	blt.n	80013a4 <Paint_DrawPoint+0xb4>
 8001352:	88ba      	ldrh	r2, [r7, #4]
 8001354:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001358:	441a      	add	r2, r3
 800135a:	787b      	ldrb	r3, [r7, #1]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	db20      	blt.n	80013a4 <Paint_DrawPoint+0xb4>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8001362:	89fa      	ldrh	r2, [r7, #14]
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	4413      	add	r3, r2
 8001368:	b29a      	uxth	r2, r3
 800136a:	787b      	ldrb	r3, [r7, #1]
 800136c:	b29b      	uxth	r3, r3
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	b298      	uxth	r0, r3
 8001372:	89ba      	ldrh	r2, [r7, #12]
 8001374:	88bb      	ldrh	r3, [r7, #4]
 8001376:	4413      	add	r3, r2
 8001378:	b29a      	uxth	r2, r3
 800137a:	787b      	ldrb	r3, [r7, #1]
 800137c:	b29b      	uxth	r3, r3
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	b29b      	uxth	r3, r3
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	4619      	mov	r1, r3
 8001386:	f7ff fef3 	bl	8001170 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800138a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800138e:	b29b      	uxth	r3, r3
 8001390:	3301      	adds	r3, #1
 8001392:	b29b      	uxth	r3, r3
 8001394:	81bb      	strh	r3, [r7, #12]
 8001396:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800139a:	787b      	ldrb	r3, [r7, #1]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	3b01      	subs	r3, #1
 80013a0:	429a      	cmp	r2, r3
 80013a2:	dbce      	blt.n	8001342 <Paint_DrawPoint+0x52>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 80013a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	3301      	adds	r3, #1
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	81fb      	strh	r3, [r7, #14]
 80013b0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80013b4:	787b      	ldrb	r3, [r7, #1]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	3b01      	subs	r3, #1
 80013ba:	429a      	cmp	r2, r3
 80013bc:	dbbe      	blt.n	800133c <Paint_DrawPoint+0x4c>
 80013be:	e02b      	b.n	8001418 <Paint_DrawPoint+0x128>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80013c0:	2300      	movs	r3, #0
 80013c2:	81fb      	strh	r3, [r7, #14]
 80013c4:	e023      	b.n	800140e <Paint_DrawPoint+0x11e>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80013c6:	2300      	movs	r3, #0
 80013c8:	81bb      	strh	r3, [r7, #12]
 80013ca:	e015      	b.n	80013f8 <Paint_DrawPoint+0x108>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 80013cc:	89fa      	ldrh	r2, [r7, #14]
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	4413      	add	r3, r2
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	3b01      	subs	r3, #1
 80013d6:	b298      	uxth	r0, r3
 80013d8:	89ba      	ldrh	r2, [r7, #12]
 80013da:	88bb      	ldrh	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	b29b      	uxth	r3, r3
 80013e0:	3b01      	subs	r3, #1
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	887a      	ldrh	r2, [r7, #2]
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fec2 	bl	8001170 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80013ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	3301      	adds	r3, #1
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	81bb      	strh	r3, [r7, #12]
 80013f8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80013fc:	787b      	ldrb	r3, [r7, #1]
 80013fe:	429a      	cmp	r2, r3
 8001400:	dbe4      	blt.n	80013cc <Paint_DrawPoint+0xdc>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8001402:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001406:	b29b      	uxth	r3, r3
 8001408:	3301      	adds	r3, #1
 800140a:	b29b      	uxth	r3, r3
 800140c:	81fb      	strh	r3, [r7, #14]
 800140e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001412:	787b      	ldrb	r3, [r7, #1]
 8001414:	429a      	cmp	r2, r3
 8001416:	dbd6      	blt.n	80013c6 <Paint_DrawPoint+0xd6>
            }
        }
    }
}
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	bd90      	pop	{r4, r7, pc}
 800141e:	bf00      	nop
 8001420:	200001f8 	.word	0x200001f8
 8001424:	0800abd0 	.word	0x0800abd0

08001428 <Paint_DrawCircle>:
    Color     ：The color of the ：circle segment
    Filled    : Whether it is filled: 1 filling 0：Do not
******************************************************************************/
void Paint_DrawCircle(  UWORD X_Center, UWORD Y_Center, UWORD Radius, 
                        UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill )
{
 8001428:	b590      	push	{r4, r7, lr}
 800142a:	b087      	sub	sp, #28
 800142c:	af02      	add	r7, sp, #8
 800142e:	4604      	mov	r4, r0
 8001430:	4608      	mov	r0, r1
 8001432:	4611      	mov	r1, r2
 8001434:	461a      	mov	r2, r3
 8001436:	4623      	mov	r3, r4
 8001438:	80fb      	strh	r3, [r7, #6]
 800143a:	4603      	mov	r3, r0
 800143c:	80bb      	strh	r3, [r7, #4]
 800143e:	460b      	mov	r3, r1
 8001440:	807b      	strh	r3, [r7, #2]
 8001442:	4613      	mov	r3, r2
 8001444:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 8001446:	4b68      	ldr	r3, [pc, #416]	@ (80015e8 <Paint_DrawCircle+0x1c0>)
 8001448:	889b      	ldrh	r3, [r3, #4]
 800144a:	b29b      	uxth	r3, r3
 800144c:	88fa      	ldrh	r2, [r7, #6]
 800144e:	429a      	cmp	r2, r3
 8001450:	d805      	bhi.n	800145e <Paint_DrawCircle+0x36>
 8001452:	4b65      	ldr	r3, [pc, #404]	@ (80015e8 <Paint_DrawCircle+0x1c0>)
 8001454:	88db      	ldrh	r3, [r3, #6]
 8001456:	b29b      	uxth	r3, r3
 8001458:	88ba      	ldrh	r2, [r7, #4]
 800145a:	429a      	cmp	r2, r3
 800145c:	d303      	bcc.n	8001466 <Paint_DrawCircle+0x3e>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 800145e:	4863      	ldr	r0, [pc, #396]	@ (80015ec <Paint_DrawCircle+0x1c4>)
 8001460:	f005 ff86 	bl	8007370 <puts>
        return;
 8001464:	e16b      	b.n	800173e <Paint_DrawCircle+0x316>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 800146a:	887b      	ldrh	r3, [r7, #2]
 800146c:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 800146e:	887b      	ldrh	r3, [r7, #2]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	b29b      	uxth	r3, r3
 8001474:	f1c3 0303 	rsb	r3, r3, #3
 8001478:	b29b      	uxth	r3, r3
 800147a:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 800147c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001480:	2b01      	cmp	r3, #1
 8001482:	f040 8155 	bne.w	8001730 <Paint_DrawCircle+0x308>
        while (XCurrent <= YCurrent ) { //Realistic circles
 8001486:	e0a6      	b.n	80015d6 <Paint_DrawCircle+0x1ae>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8001488:	89fb      	ldrh	r3, [r7, #14]
 800148a:	813b      	strh	r3, [r7, #8]
 800148c:	e075      	b.n	800157a <Paint_DrawCircle+0x152>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 800148e:	89fa      	ldrh	r2, [r7, #14]
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	4413      	add	r3, r2
 8001494:	b298      	uxth	r0, r3
 8001496:	893a      	ldrh	r2, [r7, #8]
 8001498:	88bb      	ldrh	r3, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	b299      	uxth	r1, r3
 800149e:	883a      	ldrh	r2, [r7, #0]
 80014a0:	2301      	movs	r3, #1
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2301      	movs	r3, #1
 80014a6:	f7ff ff23 	bl	80012f0 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 80014aa:	89fb      	ldrh	r3, [r7, #14]
 80014ac:	88fa      	ldrh	r2, [r7, #6]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	b298      	uxth	r0, r3
 80014b2:	893a      	ldrh	r2, [r7, #8]
 80014b4:	88bb      	ldrh	r3, [r7, #4]
 80014b6:	4413      	add	r3, r2
 80014b8:	b299      	uxth	r1, r3
 80014ba:	883a      	ldrh	r2, [r7, #0]
 80014bc:	2301      	movs	r3, #1
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2301      	movs	r3, #1
 80014c2:	f7ff ff15 	bl	80012f0 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 80014c6:	893b      	ldrh	r3, [r7, #8]
 80014c8:	88fa      	ldrh	r2, [r7, #6]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	b298      	uxth	r0, r3
 80014ce:	89fa      	ldrh	r2, [r7, #14]
 80014d0:	88bb      	ldrh	r3, [r7, #4]
 80014d2:	4413      	add	r3, r2
 80014d4:	b299      	uxth	r1, r3
 80014d6:	883a      	ldrh	r2, [r7, #0]
 80014d8:	2301      	movs	r3, #1
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	2301      	movs	r3, #1
 80014de:	f7ff ff07 	bl	80012f0 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 80014e2:	893b      	ldrh	r3, [r7, #8]
 80014e4:	88fa      	ldrh	r2, [r7, #6]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	b298      	uxth	r0, r3
 80014ea:	89fb      	ldrh	r3, [r7, #14]
 80014ec:	88ba      	ldrh	r2, [r7, #4]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	b299      	uxth	r1, r3
 80014f2:	883a      	ldrh	r2, [r7, #0]
 80014f4:	2301      	movs	r3, #1
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2301      	movs	r3, #1
 80014fa:	f7ff fef9 	bl	80012f0 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 80014fe:	89fb      	ldrh	r3, [r7, #14]
 8001500:	88fa      	ldrh	r2, [r7, #6]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	b298      	uxth	r0, r3
 8001506:	893b      	ldrh	r3, [r7, #8]
 8001508:	88ba      	ldrh	r2, [r7, #4]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	b299      	uxth	r1, r3
 800150e:	883a      	ldrh	r2, [r7, #0]
 8001510:	2301      	movs	r3, #1
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2301      	movs	r3, #1
 8001516:	f7ff feeb 	bl	80012f0 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 800151a:	89fa      	ldrh	r2, [r7, #14]
 800151c:	88fb      	ldrh	r3, [r7, #6]
 800151e:	4413      	add	r3, r2
 8001520:	b298      	uxth	r0, r3
 8001522:	893b      	ldrh	r3, [r7, #8]
 8001524:	88ba      	ldrh	r2, [r7, #4]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	b299      	uxth	r1, r3
 800152a:	883a      	ldrh	r2, [r7, #0]
 800152c:	2301      	movs	r3, #1
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2301      	movs	r3, #1
 8001532:	f7ff fedd 	bl	80012f0 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 8001536:	893a      	ldrh	r2, [r7, #8]
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	4413      	add	r3, r2
 800153c:	b298      	uxth	r0, r3
 800153e:	89fb      	ldrh	r3, [r7, #14]
 8001540:	88ba      	ldrh	r2, [r7, #4]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	b299      	uxth	r1, r3
 8001546:	883a      	ldrh	r2, [r7, #0]
 8001548:	2301      	movs	r3, #1
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2301      	movs	r3, #1
 800154e:	f7ff fecf 	bl	80012f0 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8001552:	893a      	ldrh	r2, [r7, #8]
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	4413      	add	r3, r2
 8001558:	b298      	uxth	r0, r3
 800155a:	89fa      	ldrh	r2, [r7, #14]
 800155c:	88bb      	ldrh	r3, [r7, #4]
 800155e:	4413      	add	r3, r2
 8001560:	b299      	uxth	r1, r3
 8001562:	883a      	ldrh	r2, [r7, #0]
 8001564:	2301      	movs	r3, #1
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2301      	movs	r3, #1
 800156a:	f7ff fec1 	bl	80012f0 <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 800156e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001572:	b29b      	uxth	r3, r3
 8001574:	3301      	adds	r3, #1
 8001576:	b29b      	uxth	r3, r3
 8001578:	813b      	strh	r3, [r7, #8]
 800157a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800157e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001582:	429a      	cmp	r2, r3
 8001584:	dd83      	ble.n	800148e <Paint_DrawCircle+0x66>
            }
            if (Esp < 0 )
 8001586:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800158a:	2b00      	cmp	r3, #0
 800158c:	da09      	bge.n	80015a2 <Paint_DrawCircle+0x17a>
                Esp += 4 * XCurrent + 6;
 800158e:	89fb      	ldrh	r3, [r7, #14]
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	b29a      	uxth	r2, r3
 8001594:	897b      	ldrh	r3, [r7, #10]
 8001596:	4413      	add	r3, r2
 8001598:	b29b      	uxth	r3, r3
 800159a:	3306      	adds	r3, #6
 800159c:	b29b      	uxth	r3, r3
 800159e:	817b      	strh	r3, [r7, #10]
 80015a0:	e013      	b.n	80015ca <Paint_DrawCircle+0x1a2>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 80015a2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	897b      	ldrh	r3, [r7, #10]
 80015b4:	4413      	add	r3, r2
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	330a      	adds	r3, #10
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 80015be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	3b01      	subs	r3, #1
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 80015ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	3301      	adds	r3, #1
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 80015d6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015de:	429a      	cmp	r2, r3
 80015e0:	f77f af52 	ble.w	8001488 <Paint_DrawCircle+0x60>
 80015e4:	e0ab      	b.n	800173e <Paint_DrawCircle+0x316>
 80015e6:	bf00      	nop
 80015e8:	200001f8 	.word	0x200001f8
 80015ec:	0800ac80 	.word	0x0800ac80
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 80015f0:	89fa      	ldrh	r2, [r7, #14]
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	4413      	add	r3, r2
 80015f6:	b298      	uxth	r0, r3
 80015f8:	89ba      	ldrh	r2, [r7, #12]
 80015fa:	88bb      	ldrh	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	b299      	uxth	r1, r3
 8001600:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001604:	883a      	ldrh	r2, [r7, #0]
 8001606:	2401      	movs	r4, #1
 8001608:	9400      	str	r4, [sp, #0]
 800160a:	f7ff fe71 	bl	80012f0 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 800160e:	89fb      	ldrh	r3, [r7, #14]
 8001610:	88fa      	ldrh	r2, [r7, #6]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	b298      	uxth	r0, r3
 8001616:	89ba      	ldrh	r2, [r7, #12]
 8001618:	88bb      	ldrh	r3, [r7, #4]
 800161a:	4413      	add	r3, r2
 800161c:	b299      	uxth	r1, r3
 800161e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001622:	883a      	ldrh	r2, [r7, #0]
 8001624:	2401      	movs	r4, #1
 8001626:	9400      	str	r4, [sp, #0]
 8001628:	f7ff fe62 	bl	80012f0 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 800162c:	89bb      	ldrh	r3, [r7, #12]
 800162e:	88fa      	ldrh	r2, [r7, #6]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	b298      	uxth	r0, r3
 8001634:	89fa      	ldrh	r2, [r7, #14]
 8001636:	88bb      	ldrh	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	b299      	uxth	r1, r3
 800163c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001640:	883a      	ldrh	r2, [r7, #0]
 8001642:	2401      	movs	r4, #1
 8001644:	9400      	str	r4, [sp, #0]
 8001646:	f7ff fe53 	bl	80012f0 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 800164a:	89bb      	ldrh	r3, [r7, #12]
 800164c:	88fa      	ldrh	r2, [r7, #6]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	b298      	uxth	r0, r3
 8001652:	89fb      	ldrh	r3, [r7, #14]
 8001654:	88ba      	ldrh	r2, [r7, #4]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	b299      	uxth	r1, r3
 800165a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800165e:	883a      	ldrh	r2, [r7, #0]
 8001660:	2401      	movs	r4, #1
 8001662:	9400      	str	r4, [sp, #0]
 8001664:	f7ff fe44 	bl	80012f0 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 8001668:	89fb      	ldrh	r3, [r7, #14]
 800166a:	88fa      	ldrh	r2, [r7, #6]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	b298      	uxth	r0, r3
 8001670:	89bb      	ldrh	r3, [r7, #12]
 8001672:	88ba      	ldrh	r2, [r7, #4]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	b299      	uxth	r1, r3
 8001678:	f897 3020 	ldrb.w	r3, [r7, #32]
 800167c:	883a      	ldrh	r2, [r7, #0]
 800167e:	2401      	movs	r4, #1
 8001680:	9400      	str	r4, [sp, #0]
 8001682:	f7ff fe35 	bl	80012f0 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 8001686:	89fa      	ldrh	r2, [r7, #14]
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	4413      	add	r3, r2
 800168c:	b298      	uxth	r0, r3
 800168e:	89bb      	ldrh	r3, [r7, #12]
 8001690:	88ba      	ldrh	r2, [r7, #4]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	b299      	uxth	r1, r3
 8001696:	f897 3020 	ldrb.w	r3, [r7, #32]
 800169a:	883a      	ldrh	r2, [r7, #0]
 800169c:	2401      	movs	r4, #1
 800169e:	9400      	str	r4, [sp, #0]
 80016a0:	f7ff fe26 	bl	80012f0 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 80016a4:	89ba      	ldrh	r2, [r7, #12]
 80016a6:	88fb      	ldrh	r3, [r7, #6]
 80016a8:	4413      	add	r3, r2
 80016aa:	b298      	uxth	r0, r3
 80016ac:	89fb      	ldrh	r3, [r7, #14]
 80016ae:	88ba      	ldrh	r2, [r7, #4]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	b299      	uxth	r1, r3
 80016b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016b8:	883a      	ldrh	r2, [r7, #0]
 80016ba:	2401      	movs	r4, #1
 80016bc:	9400      	str	r4, [sp, #0]
 80016be:	f7ff fe17 	bl	80012f0 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 80016c2:	89ba      	ldrh	r2, [r7, #12]
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	4413      	add	r3, r2
 80016c8:	b298      	uxth	r0, r3
 80016ca:	89fa      	ldrh	r2, [r7, #14]
 80016cc:	88bb      	ldrh	r3, [r7, #4]
 80016ce:	4413      	add	r3, r2
 80016d0:	b299      	uxth	r1, r3
 80016d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016d6:	883a      	ldrh	r2, [r7, #0]
 80016d8:	2401      	movs	r4, #1
 80016da:	9400      	str	r4, [sp, #0]
 80016dc:	f7ff fe08 	bl	80012f0 <Paint_DrawPoint>

            if (Esp < 0 )
 80016e0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	da09      	bge.n	80016fc <Paint_DrawCircle+0x2d4>
                Esp += 4 * XCurrent + 6;
 80016e8:	89fb      	ldrh	r3, [r7, #14]
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	897b      	ldrh	r3, [r7, #10]
 80016f0:	4413      	add	r3, r2
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3306      	adds	r3, #6
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	817b      	strh	r3, [r7, #10]
 80016fa:	e013      	b.n	8001724 <Paint_DrawCircle+0x2fc>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 80016fc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001700:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	b29b      	uxth	r3, r3
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	b29a      	uxth	r2, r3
 800170c:	897b      	ldrh	r3, [r7, #10]
 800170e:	4413      	add	r3, r2
 8001710:	b29b      	uxth	r3, r3
 8001712:	330a      	adds	r3, #10
 8001714:	b29b      	uxth	r3, r3
 8001716:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8001718:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800171c:	b29b      	uxth	r3, r3
 800171e:	3b01      	subs	r3, #1
 8001720:	b29b      	uxth	r3, r3
 8001722:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8001724:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001728:	b29b      	uxth	r3, r3
 800172a:	3301      	adds	r3, #1
 800172c:	b29b      	uxth	r3, r3
 800172e:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 8001730:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001734:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001738:	429a      	cmp	r2, r3
 800173a:	f77f af59 	ble.w	80015f0 <Paint_DrawCircle+0x1c8>
        }
    }
}
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	bd90      	pop	{r4, r7, pc}

08001744 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af00      	add	r7, sp, #0
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	4603      	mov	r3, r0
 800174e:	81fb      	strh	r3, [r7, #14]
 8001750:	460b      	mov	r3, r1
 8001752:	81bb      	strh	r3, [r7, #12]
 8001754:	4613      	mov	r3, r2
 8001756:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001758:	4b4e      	ldr	r3, [pc, #312]	@ (8001894 <Paint_DrawChar+0x150>)
 800175a:	889b      	ldrh	r3, [r3, #4]
 800175c:	b29b      	uxth	r3, r3
 800175e:	89fa      	ldrh	r2, [r7, #14]
 8001760:	429a      	cmp	r2, r3
 8001762:	d805      	bhi.n	8001770 <Paint_DrawChar+0x2c>
 8001764:	4b4b      	ldr	r3, [pc, #300]	@ (8001894 <Paint_DrawChar+0x150>)
 8001766:	88db      	ldrh	r3, [r3, #6]
 8001768:	b29b      	uxth	r3, r3
 800176a:	89ba      	ldrh	r2, [r7, #12]
 800176c:	429a      	cmp	r2, r3
 800176e:	d903      	bls.n	8001778 <Paint_DrawChar+0x34>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8001770:	4849      	ldr	r0, [pc, #292]	@ (8001898 <Paint_DrawChar+0x154>)
 8001772:	f005 fdfd 	bl	8007370 <puts>
        return;
 8001776:	e089      	b.n	800188c <Paint_DrawChar+0x148>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8001778:	7afb      	ldrb	r3, [r7, #11]
 800177a:	3b20      	subs	r3, #32
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	88d2      	ldrh	r2, [r2, #6]
 8001780:	fb02 f303 	mul.w	r3, r2, r3
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	8892      	ldrh	r2, [r2, #4]
 8001788:	08d2      	lsrs	r2, r2, #3
 800178a:	b292      	uxth	r2, r2
 800178c:	4611      	mov	r1, r2
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	8892      	ldrh	r2, [r2, #4]
 8001792:	f002 0207 	and.w	r2, r2, #7
 8001796:	b292      	uxth	r2, r2
 8001798:	2a00      	cmp	r2, #0
 800179a:	bf14      	ite	ne
 800179c:	2201      	movne	r2, #1
 800179e:	2200      	moveq	r2, #0
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	440a      	add	r2, r1
 80017a4:	fb02 f303 	mul.w	r3, r2, r3
 80017a8:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	4413      	add	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 80017b4:	2300      	movs	r3, #0
 80017b6:	83fb      	strh	r3, [r7, #30]
 80017b8:	e063      	b.n	8001882 <Paint_DrawChar+0x13e>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80017ba:	2300      	movs	r3, #0
 80017bc:	83bb      	strh	r3, [r7, #28]
 80017be:	e04e      	b.n	800185e <Paint_DrawChar+0x11a>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80017c0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80017c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d118      	bne.n	80017fc <Paint_DrawChar+0xb8>
                if (*ptr & (0x80 >> (Column % 8)))
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	4619      	mov	r1, r3
 80017d0:	8bbb      	ldrh	r3, [r7, #28]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	2280      	movs	r2, #128	@ 0x80
 80017d8:	fa42 f303 	asr.w	r3, r2, r3
 80017dc:	400b      	ands	r3, r1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d031      	beq.n	8001846 <Paint_DrawChar+0x102>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80017e2:	89fa      	ldrh	r2, [r7, #14]
 80017e4:	8bbb      	ldrh	r3, [r7, #28]
 80017e6:	4413      	add	r3, r2
 80017e8:	b298      	uxth	r0, r3
 80017ea:	89ba      	ldrh	r2, [r7, #12]
 80017ec:	8bfb      	ldrh	r3, [r7, #30]
 80017ee:	4413      	add	r3, r2
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80017f4:	4619      	mov	r1, r3
 80017f6:	f7ff fcbb 	bl	8001170 <Paint_SetPixel>
 80017fa:	e024      	b.n	8001846 <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4619      	mov	r1, r3
 8001802:	8bbb      	ldrh	r3, [r7, #28]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	2280      	movs	r2, #128	@ 0x80
 800180a:	fa42 f303 	asr.w	r3, r2, r3
 800180e:	400b      	ands	r3, r1
 8001810:	2b00      	cmp	r3, #0
 8001812:	d00c      	beq.n	800182e <Paint_DrawChar+0xea>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001814:	89fa      	ldrh	r2, [r7, #14]
 8001816:	8bbb      	ldrh	r3, [r7, #28]
 8001818:	4413      	add	r3, r2
 800181a:	b298      	uxth	r0, r3
 800181c:	89ba      	ldrh	r2, [r7, #12]
 800181e:	8bfb      	ldrh	r3, [r7, #30]
 8001820:	4413      	add	r3, r2
 8001822:	b29b      	uxth	r3, r3
 8001824:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001826:	4619      	mov	r1, r3
 8001828:	f7ff fca2 	bl	8001170 <Paint_SetPixel>
 800182c:	e00b      	b.n	8001846 <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800182e:	89fa      	ldrh	r2, [r7, #14]
 8001830:	8bbb      	ldrh	r3, [r7, #28]
 8001832:	4413      	add	r3, r2
 8001834:	b298      	uxth	r0, r3
 8001836:	89ba      	ldrh	r2, [r7, #12]
 8001838:	8bfb      	ldrh	r3, [r7, #30]
 800183a:	4413      	add	r3, r2
 800183c:	b29b      	uxth	r3, r3
 800183e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001840:	4619      	mov	r1, r3
 8001842:	f7ff fc95 	bl	8001170 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8001846:	8bbb      	ldrh	r3, [r7, #28]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	b29b      	uxth	r3, r3
 800184e:	2b07      	cmp	r3, #7
 8001850:	d102      	bne.n	8001858 <Paint_DrawChar+0x114>
                ptr++;
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	3301      	adds	r3, #1
 8001856:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8001858:	8bbb      	ldrh	r3, [r7, #28]
 800185a:	3301      	adds	r3, #1
 800185c:	83bb      	strh	r3, [r7, #28]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	889b      	ldrh	r3, [r3, #4]
 8001862:	8bba      	ldrh	r2, [r7, #28]
 8001864:	429a      	cmp	r2, r3
 8001866:	d3ab      	bcc.n	80017c0 <Paint_DrawChar+0x7c>
        }// Write a line
        if (Font->Width % 8 != 0)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	889b      	ldrh	r3, [r3, #4]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	b29b      	uxth	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d002      	beq.n	800187c <Paint_DrawChar+0x138>
            ptr++;
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	3301      	adds	r3, #1
 800187a:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 800187c:	8bfb      	ldrh	r3, [r7, #30]
 800187e:	3301      	adds	r3, #1
 8001880:	83fb      	strh	r3, [r7, #30]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	88db      	ldrh	r3, [r3, #6]
 8001886:	8bfa      	ldrh	r2, [r7, #30]
 8001888:	429a      	cmp	r2, r3
 800188a:	d396      	bcc.n	80017ba <Paint_DrawChar+0x76>
    }// Write all
}
 800188c:	3720      	adds	r7, #32
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200001f8 	.word	0x200001f8
 8001898:	0800acc4 	.word	0x0800acc4

0800189c <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af02      	add	r7, sp, #8
 80018a2:	60ba      	str	r2, [r7, #8]
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	4603      	mov	r3, r0
 80018a8:	81fb      	strh	r3, [r7, #14]
 80018aa:	460b      	mov	r3, r1
 80018ac:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 80018ae:	89fb      	ldrh	r3, [r7, #14]
 80018b0:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 80018b2:	89bb      	ldrh	r3, [r7, #12]
 80018b4:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80018b6:	4b23      	ldr	r3, [pc, #140]	@ (8001944 <Paint_DrawString_EN+0xa8>)
 80018b8:	889b      	ldrh	r3, [r3, #4]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	89fa      	ldrh	r2, [r7, #14]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d805      	bhi.n	80018ce <Paint_DrawString_EN+0x32>
 80018c2:	4b20      	ldr	r3, [pc, #128]	@ (8001944 <Paint_DrawString_EN+0xa8>)
 80018c4:	88db      	ldrh	r3, [r3, #6]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	89ba      	ldrh	r2, [r7, #12]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d933      	bls.n	8001936 <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 80018ce:	481e      	ldr	r0, [pc, #120]	@ (8001948 <Paint_DrawString_EN+0xac>)
 80018d0:	f005 fd4e 	bl	8007370 <puts>
        return;
 80018d4:	e033      	b.n	800193e <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 80018d6:	8afb      	ldrh	r3, [r7, #22]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	8892      	ldrh	r2, [r2, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	4a19      	ldr	r2, [pc, #100]	@ (8001944 <Paint_DrawString_EN+0xa8>)
 80018e0:	8892      	ldrh	r2, [r2, #4]
 80018e2:	b292      	uxth	r2, r2
 80018e4:	4293      	cmp	r3, r2
 80018e6:	dd06      	ble.n	80018f6 <Paint_DrawString_EN+0x5a>
            Xpoint = Xstart;
 80018e8:	89fb      	ldrh	r3, [r7, #14]
 80018ea:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	88da      	ldrh	r2, [r3, #6]
 80018f0:	8abb      	ldrh	r3, [r7, #20]
 80018f2:	4413      	add	r3, r2
 80018f4:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 80018f6:	8abb      	ldrh	r3, [r7, #20]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	88d2      	ldrh	r2, [r2, #6]
 80018fc:	4413      	add	r3, r2
 80018fe:	4a11      	ldr	r2, [pc, #68]	@ (8001944 <Paint_DrawString_EN+0xa8>)
 8001900:	88d2      	ldrh	r2, [r2, #6]
 8001902:	b292      	uxth	r2, r2
 8001904:	4293      	cmp	r3, r2
 8001906:	dd03      	ble.n	8001910 <Paint_DrawString_EN+0x74>
            Xpoint = Xstart;
 8001908:	89fb      	ldrh	r3, [r7, #14]
 800190a:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 800190c:	89bb      	ldrh	r3, [r7, #12]
 800190e:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	781a      	ldrb	r2, [r3, #0]
 8001914:	8ab9      	ldrh	r1, [r7, #20]
 8001916:	8af8      	ldrh	r0, [r7, #22]
 8001918:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	8c3b      	ldrh	r3, [r7, #32]
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f7ff ff0f 	bl	8001744 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	3301      	adds	r3, #1
 800192a:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	889a      	ldrh	r2, [r3, #4]
 8001930:	8afb      	ldrh	r3, [r7, #22]
 8001932:	4413      	add	r3, r2
 8001934:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1cb      	bne.n	80018d6 <Paint_DrawString_EN+0x3a>
    }
}
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	200001f8 	.word	0x200001f8
 8001948:	0800ad04 	.word	0x0800ad04

0800194c <Paint_DrawImage>:
    yStart           : Y starting coordinates
    xEnd             ：Image width
    yEnd             : Image height
******************************************************************************/
void Paint_DrawImage(const unsigned char *image, UWORD xStart, UWORD yStart, UWORD W_Image, UWORD H_Image) 
{
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b087      	sub	sp, #28
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	4608      	mov	r0, r1
 8001956:	4611      	mov	r1, r2
 8001958:	461a      	mov	r2, r3
 800195a:	4603      	mov	r3, r0
 800195c:	817b      	strh	r3, [r7, #10]
 800195e:	460b      	mov	r3, r1
 8001960:	813b      	strh	r3, [r7, #8]
 8001962:	4613      	mov	r3, r2
 8001964:	80fb      	strh	r3, [r7, #6]
    int i,j; 
		for(j = 0; j < H_Image; j++){
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	e049      	b.n	8001a00 <Paint_DrawImage+0xb4>
			for(i = 0; i < W_Image; i++){
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	e03f      	b.n	80019f2 <Paint_DrawImage+0xa6>
				if(xStart+i < Paint.WidthMemory  &&  yStart+j < Paint.HeightMemory)//Exceeded part does not display
 8001972:	897a      	ldrh	r2, [r7, #10]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	4413      	add	r3, r2
 8001978:	4a26      	ldr	r2, [pc, #152]	@ (8001a14 <Paint_DrawImage+0xc8>)
 800197a:	8912      	ldrh	r2, [r2, #8]
 800197c:	b292      	uxth	r2, r2
 800197e:	4293      	cmp	r3, r2
 8001980:	da34      	bge.n	80019ec <Paint_DrawImage+0xa0>
 8001982:	893a      	ldrh	r2, [r7, #8]
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4413      	add	r3, r2
 8001988:	4a22      	ldr	r2, [pc, #136]	@ (8001a14 <Paint_DrawImage+0xc8>)
 800198a:	8952      	ldrh	r2, [r2, #10]
 800198c:	b292      	uxth	r2, r2
 800198e:	4293      	cmp	r3, r2
 8001990:	da2c      	bge.n	80019ec <Paint_DrawImage+0xa0>
					Paint_SetPixel(xStart + i, yStart + j, (*(image + j*W_Image*2 + i*2+1))<<8 | (*(image + j*W_Image*2 + i*2)));
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	b29a      	uxth	r2, r3
 8001996:	897b      	ldrh	r3, [r7, #10]
 8001998:	4413      	add	r3, r2
 800199a:	b298      	uxth	r0, r3
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	b29a      	uxth	r2, r3
 80019a0:	893b      	ldrh	r3, [r7, #8]
 80019a2:	4413      	add	r3, r2
 80019a4:	b29c      	uxth	r4, r3
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	fb02 f303 	mul.w	r3, r2, r3
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	461a      	mov	r2, r3
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	3301      	adds	r3, #1
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	4413      	add	r3, r2
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b21a      	sxth	r2, r3
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	6939      	ldr	r1, [r7, #16]
 80019c8:	fb01 f303 	mul.w	r3, r1, r3
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4619      	mov	r1, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	440b      	add	r3, r1
 80019d6:	68f9      	ldr	r1, [r7, #12]
 80019d8:	440b      	add	r3, r1
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	b21b      	sxth	r3, r3
 80019de:	4313      	orrs	r3, r2
 80019e0:	b21b      	sxth	r3, r3
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	461a      	mov	r2, r3
 80019e6:	4621      	mov	r1, r4
 80019e8:	f7ff fbc2 	bl	8001170 <Paint_SetPixel>
			for(i = 0; i < W_Image; i++){
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	3301      	adds	r3, #1
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	dbbb      	blt.n	8001972 <Paint_DrawImage+0x26>
		for(j = 0; j < H_Image; j++){
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	3301      	adds	r3, #1
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	dbb1      	blt.n	800196c <Paint_DrawImage+0x20>
				//j*W_Image*2 			   Y offset
				//i*2              	   X offset
			}
		}
      
}
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	371c      	adds	r7, #28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd90      	pop	{r4, r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200001f8 	.word	0x200001f8

08001a18 <LCD_1IN28_Reset>:
/******************************************************************************
function :	Hardware reset
parameter:
******************************************************************************/
static void LCD_1IN28_Reset(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
    LCD_1IN28_RST_1;
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a22:	480d      	ldr	r0, [pc, #52]	@ (8001a58 <LCD_1IN28_Reset+0x40>)
 8001a24:	f001 fc7a 	bl	800331c <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8001a28:	2064      	movs	r0, #100	@ 0x64
 8001a2a:	f001 f9d9 	bl	8002de0 <HAL_Delay>
    LCD_1IN28_RST_0;
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a34:	4808      	ldr	r0, [pc, #32]	@ (8001a58 <LCD_1IN28_Reset+0x40>)
 8001a36:	f001 fc71 	bl	800331c <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8001a3a:	2064      	movs	r0, #100	@ 0x64
 8001a3c:	f001 f9d0 	bl	8002de0 <HAL_Delay>
    LCD_1IN28_RST_1;
 8001a40:	2201      	movs	r2, #1
 8001a42:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a46:	4804      	ldr	r0, [pc, #16]	@ (8001a58 <LCD_1IN28_Reset+0x40>)
 8001a48:	f001 fc68 	bl	800331c <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8001a4c:	2064      	movs	r0, #100	@ 0x64
 8001a4e:	f001 f9c7 	bl	8002de0 <HAL_Delay>
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40020800 	.word	0x40020800

08001a5c <LCD_1IN28_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void LCD_1IN28_SendCommand(UBYTE Reg)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
    LCD_1IN28_DC_0;
 8001a66:	2200      	movs	r2, #0
 8001a68:	2180      	movs	r1, #128	@ 0x80
 8001a6a:	4808      	ldr	r0, [pc, #32]	@ (8001a8c <LCD_1IN28_SendCommand+0x30>)
 8001a6c:	f001 fc56 	bl	800331c <HAL_GPIO_WritePin>
    LCD_1IN28_CS_0;
 8001a70:	2200      	movs	r2, #0
 8001a72:	2110      	movs	r1, #16
 8001a74:	4806      	ldr	r0, [pc, #24]	@ (8001a90 <LCD_1IN28_SendCommand+0x34>)
 8001a76:	f001 fc51 	bl	800331c <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fad9 	bl	8001034 <DEV_SPI_WRite>
    // LCD_1IN28_CS_1;
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40020800 	.word	0x40020800
 8001a90:	40020000 	.word	0x40020000

08001a94 <LCD_1IN28_SendData_8Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_8Bit(UBYTE Data)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
    LCD_1IN28_DC_1;
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	2180      	movs	r1, #128	@ 0x80
 8001aa2:	480a      	ldr	r0, [pc, #40]	@ (8001acc <LCD_1IN28_SendData_8Bit+0x38>)
 8001aa4:	f001 fc3a 	bl	800331c <HAL_GPIO_WritePin>
    LCD_1IN28_CS_0;
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2110      	movs	r1, #16
 8001aac:	4808      	ldr	r0, [pc, #32]	@ (8001ad0 <LCD_1IN28_SendData_8Bit+0x3c>)
 8001aae:	f001 fc35 	bl	800331c <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fabd 	bl	8001034 <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 8001aba:	2201      	movs	r2, #1
 8001abc:	2110      	movs	r1, #16
 8001abe:	4804      	ldr	r0, [pc, #16]	@ (8001ad0 <LCD_1IN28_SendData_8Bit+0x3c>)
 8001ac0:	f001 fc2c 	bl	800331c <HAL_GPIO_WritePin>
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40020800 	.word	0x40020800
 8001ad0:	40020000 	.word	0x40020000

08001ad4 <LCD_1IN28_SendData_16Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_16Bit(UWORD Data)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	80fb      	strh	r3, [r7, #6]
    LCD_1IN28_DC_1;
 8001ade:	2201      	movs	r2, #1
 8001ae0:	2180      	movs	r1, #128	@ 0x80
 8001ae2:	480e      	ldr	r0, [pc, #56]	@ (8001b1c <LCD_1IN28_SendData_16Bit+0x48>)
 8001ae4:	f001 fc1a 	bl	800331c <HAL_GPIO_WritePin>
    LCD_1IN28_CS_0;
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2110      	movs	r1, #16
 8001aec:	480c      	ldr	r0, [pc, #48]	@ (8001b20 <LCD_1IN28_SendData_16Bit+0x4c>)
 8001aee:	f001 fc15 	bl	800331c <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data >> 8);
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fa9a 	bl	8001034 <DEV_SPI_WRite>
    DEV_SPI_WRITE(Data);
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fa95 	bl	8001034 <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	2110      	movs	r1, #16
 8001b0e:	4804      	ldr	r0, [pc, #16]	@ (8001b20 <LCD_1IN28_SendData_16Bit+0x4c>)
 8001b10:	f001 fc04 	bl	800331c <HAL_GPIO_WritePin>
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40020800 	.word	0x40020800
 8001b20:	40020000 	.word	0x40020000

08001b24 <LCD_1IN28_InitReg>:
/******************************************************************************
function :	Initialize the lcd register
parameter:
******************************************************************************/
static void LCD_1IN28_InitReg(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  LCD_1IN28_SendCommand(0xEF);
 8001b28:	20ef      	movs	r0, #239	@ 0xef
 8001b2a:	f7ff ff97 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEB);
 8001b2e:	20eb      	movs	r0, #235	@ 0xeb
 8001b30:	f7ff ff94 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 8001b34:	2014      	movs	r0, #20
 8001b36:	f7ff ffad 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0xFE);			 
 8001b3a:	20fe      	movs	r0, #254	@ 0xfe
 8001b3c:	f7ff ff8e 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEF); 
 8001b40:	20ef      	movs	r0, #239	@ 0xef
 8001b42:	f7ff ff8b 	bl	8001a5c <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0xEB);	
 8001b46:	20eb      	movs	r0, #235	@ 0xeb
 8001b48:	f7ff ff88 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 8001b4c:	2014      	movs	r0, #20
 8001b4e:	f7ff ffa1 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x84);			
 8001b52:	2084      	movs	r0, #132	@ 0x84
 8001b54:	f7ff ff82 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x40); 
 8001b58:	2040      	movs	r0, #64	@ 0x40
 8001b5a:	f7ff ff9b 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x85);			
 8001b5e:	2085      	movs	r0, #133	@ 0x85
 8001b60:	f7ff ff7c 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8001b64:	20ff      	movs	r0, #255	@ 0xff
 8001b66:	f7ff ff95 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x86);			
 8001b6a:	2086      	movs	r0, #134	@ 0x86
 8001b6c:	f7ff ff76 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8001b70:	20ff      	movs	r0, #255	@ 0xff
 8001b72:	f7ff ff8f 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x87);			
 8001b76:	2087      	movs	r0, #135	@ 0x87
 8001b78:	f7ff ff70 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 8001b7c:	20ff      	movs	r0, #255	@ 0xff
 8001b7e:	f7ff ff89 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x88);			
 8001b82:	2088      	movs	r0, #136	@ 0x88
 8001b84:	f7ff ff6a 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x0A);
 8001b88:	200a      	movs	r0, #10
 8001b8a:	f7ff ff83 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x89);			
 8001b8e:	2089      	movs	r0, #137	@ 0x89
 8001b90:	f7ff ff64 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21); 
 8001b94:	2021      	movs	r0, #33	@ 0x21
 8001b96:	f7ff ff7d 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8A);			
 8001b9a:	208a      	movs	r0, #138	@ 0x8a
 8001b9c:	f7ff ff5e 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00); 
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f7ff ff77 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8B);			
 8001ba6:	208b      	movs	r0, #139	@ 0x8b
 8001ba8:	f7ff ff58 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x80); 
 8001bac:	2080      	movs	r0, #128	@ 0x80
 8001bae:	f7ff ff71 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8C);			
 8001bb2:	208c      	movs	r0, #140	@ 0x8c
 8001bb4:	f7ff ff52 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f7ff ff6b 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8D);			
 8001bbe:	208d      	movs	r0, #141	@ 0x8d
 8001bc0:	f7ff ff4c 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	f7ff ff65 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8E);			
 8001bca:	208e      	movs	r0, #142	@ 0x8e
 8001bcc:	f7ff ff46 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8001bd0:	20ff      	movs	r0, #255	@ 0xff
 8001bd2:	f7ff ff5f 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8F);			
 8001bd6:	208f      	movs	r0, #143	@ 0x8f
 8001bd8:	f7ff ff40 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8001bdc:	20ff      	movs	r0, #255	@ 0xff
 8001bde:	f7ff ff59 	bl	8001a94 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0xB6);
 8001be2:	20b6      	movs	r0, #182	@ 0xb6
 8001be4:	f7ff ff3a 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8001be8:	2000      	movs	r0, #0
 8001bea:	f7ff ff53 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x20);
 8001bee:	2020      	movs	r0, #32
 8001bf0:	f7ff ff50 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x36);
 8001bf4:	2036      	movs	r0, #54	@ 0x36
 8001bf6:	f7ff ff31 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);//Set as vertical screen
 8001bfa:	2008      	movs	r0, #8
 8001bfc:	f7ff ff4a 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x3A);			
 8001c00:	203a      	movs	r0, #58	@ 0x3a
 8001c02:	f7ff ff2b 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x05); 
 8001c06:	2005      	movs	r0, #5
 8001c08:	f7ff ff44 	bl	8001a94 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x90);			
 8001c0c:	2090      	movs	r0, #144	@ 0x90
 8001c0e:	f7ff ff25 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);
 8001c12:	2008      	movs	r0, #8
 8001c14:	f7ff ff3e 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001c18:	2008      	movs	r0, #8
 8001c1a:	f7ff ff3b 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001c1e:	2008      	movs	r0, #8
 8001c20:	f7ff ff38 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08); 
 8001c24:	2008      	movs	r0, #8
 8001c26:	f7ff ff35 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBD);			
 8001c2a:	20bd      	movs	r0, #189	@ 0xbd
 8001c2c:	f7ff ff16 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x06);
 8001c30:	2006      	movs	r0, #6
 8001c32:	f7ff ff2f 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xBC);			
 8001c36:	20bc      	movs	r0, #188	@ 0xbc
 8001c38:	f7ff ff10 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);	
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f7ff ff29 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xFF);			
 8001c42:	20ff      	movs	r0, #255	@ 0xff
 8001c44:	f7ff ff0a 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x60);
 8001c48:	2060      	movs	r0, #96	@ 0x60
 8001c4a:	f7ff ff23 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8001c4e:	2001      	movs	r0, #1
 8001c50:	f7ff ff20 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8001c54:	2004      	movs	r0, #4
 8001c56:	f7ff ff1d 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC3);			
 8001c5a:	20c3      	movs	r0, #195	@ 0xc3
 8001c5c:	f7ff fefe 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8001c60:	2013      	movs	r0, #19
 8001c62:	f7ff ff17 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendCommand(0xC4);			
 8001c66:	20c4      	movs	r0, #196	@ 0xc4
 8001c68:	f7ff fef8 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8001c6c:	2013      	movs	r0, #19
 8001c6e:	f7ff ff11 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC9);			
 8001c72:	20c9      	movs	r0, #201	@ 0xc9
 8001c74:	f7ff fef2 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x22);
 8001c78:	2022      	movs	r0, #34	@ 0x22
 8001c7a:	f7ff ff0b 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBE);			
 8001c7e:	20be      	movs	r0, #190	@ 0xbe
 8001c80:	f7ff feec 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x11); 
 8001c84:	2011      	movs	r0, #17
 8001c86:	f7ff ff05 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE1);			
 8001c8a:	20e1      	movs	r0, #225	@ 0xe1
 8001c8c:	f7ff fee6 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);
 8001c90:	2010      	movs	r0, #16
 8001c92:	f7ff feff 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E);
 8001c96:	200e      	movs	r0, #14
 8001c98:	f7ff fefc 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xDF);			
 8001c9c:	20df      	movs	r0, #223	@ 0xdf
 8001c9e:	f7ff fedd 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21);
 8001ca2:	2021      	movs	r0, #33	@ 0x21
 8001ca4:	f7ff fef6 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0c);
 8001ca8:	200c      	movs	r0, #12
 8001caa:	f7ff fef3 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x02);
 8001cae:	2002      	movs	r0, #2
 8001cb0:	f7ff fef0 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF0);   
 8001cb4:	20f0      	movs	r0, #240	@ 0xf0
 8001cb6:	f7ff fed1 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x45);
 8001cba:	2045      	movs	r0, #69	@ 0x45
 8001cbc:	f7ff feea 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8001cc0:	2009      	movs	r0, #9
 8001cc2:	f7ff fee7 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001cc6:	2008      	movs	r0, #8
 8001cc8:	f7ff fee4 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001ccc:	2008      	movs	r0, #8
 8001cce:	f7ff fee1 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x26);
 8001cd2:	2026      	movs	r0, #38	@ 0x26
 8001cd4:	f7ff fede 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 8001cd8:	202a      	movs	r0, #42	@ 0x2a
 8001cda:	f7ff fedb 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF1);    
 8001cde:	20f1      	movs	r0, #241	@ 0xf1
 8001ce0:	f7ff febc 	bl	8001a5c <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8001ce4:	2043      	movs	r0, #67	@ 0x43
 8001ce6:	f7ff fed5 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 8001cea:	2070      	movs	r0, #112	@ 0x70
 8001cec:	f7ff fed2 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 8001cf0:	2072      	movs	r0, #114	@ 0x72
 8001cf2:	f7ff fecf 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8001cf6:	2036      	movs	r0, #54	@ 0x36
 8001cf8:	f7ff fecc 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37);  
 8001cfc:	2037      	movs	r0, #55	@ 0x37
 8001cfe:	f7ff fec9 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 8001d02:	206f      	movs	r0, #111	@ 0x6f
 8001d04:	f7ff fec6 	bl	8001a94 <LCD_1IN28_SendData_8Bit>


 	LCD_1IN28_SendCommand(0xF2);   
 8001d08:	20f2      	movs	r0, #242	@ 0xf2
 8001d0a:	f7ff fea7 	bl	8001a5c <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x45);
 8001d0e:	2045      	movs	r0, #69	@ 0x45
 8001d10:	f7ff fec0 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x09);
 8001d14:	2009      	movs	r0, #9
 8001d16:	f7ff febd 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 8001d1a:	2008      	movs	r0, #8
 8001d1c:	f7ff feba 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 8001d20:	2008      	movs	r0, #8
 8001d22:	f7ff feb7 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x26);
 8001d26:	2026      	movs	r0, #38	@ 0x26
 8001d28:	f7ff feb4 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 8001d2c:	202a      	movs	r0, #42	@ 0x2a
 8001d2e:	f7ff feb1 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF3);   
 8001d32:	20f3      	movs	r0, #243	@ 0xf3
 8001d34:	f7ff fe92 	bl	8001a5c <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8001d38:	2043      	movs	r0, #67	@ 0x43
 8001d3a:	f7ff feab 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 8001d3e:	2070      	movs	r0, #112	@ 0x70
 8001d40:	f7ff fea8 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 8001d44:	2072      	movs	r0, #114	@ 0x72
 8001d46:	f7ff fea5 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8001d4a:	2036      	movs	r0, #54	@ 0x36
 8001d4c:	f7ff fea2 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37); 
 8001d50:	2037      	movs	r0, #55	@ 0x37
 8001d52:	f7ff fe9f 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 8001d56:	206f      	movs	r0, #111	@ 0x6f
 8001d58:	f7ff fe9c 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xED);	
 8001d5c:	20ed      	movs	r0, #237	@ 0xed
 8001d5e:	f7ff fe7d 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x1B); 
 8001d62:	201b      	movs	r0, #27
 8001d64:	f7ff fe96 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0B); 
 8001d68:	200b      	movs	r0, #11
 8001d6a:	f7ff fe93 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xAE);			
 8001d6e:	20ae      	movs	r0, #174	@ 0xae
 8001d70:	f7ff fe74 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x77);
 8001d74:	2077      	movs	r0, #119	@ 0x77
 8001d76:	f7ff fe8d 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xCD);			
 8001d7a:	20cd      	movs	r0, #205	@ 0xcd
 8001d7c:	f7ff fe6e 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x63);		
 8001d80:	2063      	movs	r0, #99	@ 0x63
 8001d82:	f7ff fe87 	bl	8001a94 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x70);			
 8001d86:	2070      	movs	r0, #112	@ 0x70
 8001d88:	f7ff fe68 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x07);
 8001d8c:	2007      	movs	r0, #7
 8001d8e:	f7ff fe81 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001d92:	2007      	movs	r0, #7
 8001d94:	f7ff fe7e 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8001d98:	2004      	movs	r0, #4
 8001d9a:	f7ff fe7b 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E); 
 8001d9e:	200e      	movs	r0, #14
 8001da0:	f7ff fe78 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F); 
 8001da4:	200f      	movs	r0, #15
 8001da6:	f7ff fe75 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8001daa:	2009      	movs	r0, #9
 8001dac:	f7ff fe72 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001db0:	2007      	movs	r0, #7
 8001db2:	f7ff fe6f 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001db6:	2008      	movs	r0, #8
 8001db8:	f7ff fe6c 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x03);
 8001dbc:	2003      	movs	r0, #3
 8001dbe:	f7ff fe69 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE8);			
 8001dc2:	20e8      	movs	r0, #232	@ 0xe8
 8001dc4:	f7ff fe4a 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x34);
 8001dc8:	2034      	movs	r0, #52	@ 0x34
 8001dca:	f7ff fe63 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x62);			
 8001dce:	2062      	movs	r0, #98	@ 0x62
 8001dd0:	f7ff fe44 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 8001dd4:	2018      	movs	r0, #24
 8001dd6:	f7ff fe5d 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0D);
 8001dda:	200d      	movs	r0, #13
 8001ddc:	f7ff fe5a 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001de0:	2071      	movs	r0, #113	@ 0x71
 8001de2:	f7ff fe57 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xED);
 8001de6:	20ed      	movs	r0, #237	@ 0xed
 8001de8:	f7ff fe54 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8001dec:	2070      	movs	r0, #112	@ 0x70
 8001dee:	f7ff fe51 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001df2:	2070      	movs	r0, #112	@ 0x70
 8001df4:	f7ff fe4e 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8001df8:	2018      	movs	r0, #24
 8001dfa:	f7ff fe4b 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F);
 8001dfe:	200f      	movs	r0, #15
 8001e00:	f7ff fe48 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001e04:	2071      	movs	r0, #113	@ 0x71
 8001e06:	f7ff fe45 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xEF);
 8001e0a:	20ef      	movs	r0, #239	@ 0xef
 8001e0c:	f7ff fe42 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8001e10:	2070      	movs	r0, #112	@ 0x70
 8001e12:	f7ff fe3f 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001e16:	2070      	movs	r0, #112	@ 0x70
 8001e18:	f7ff fe3c 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x63);			
 8001e1c:	2063      	movs	r0, #99	@ 0x63
 8001e1e:	f7ff fe1d 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 8001e22:	2018      	movs	r0, #24
 8001e24:	f7ff fe36 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x11);
 8001e28:	2011      	movs	r0, #17
 8001e2a:	f7ff fe33 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001e2e:	2071      	movs	r0, #113	@ 0x71
 8001e30:	f7ff fe30 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001e34:	20f1      	movs	r0, #241	@ 0xf1
 8001e36:	f7ff fe2d 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8001e3a:	2070      	movs	r0, #112	@ 0x70
 8001e3c:	f7ff fe2a 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001e40:	2070      	movs	r0, #112	@ 0x70
 8001e42:	f7ff fe27 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8001e46:	2018      	movs	r0, #24
 8001e48:	f7ff fe24 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x13);
 8001e4c:	2013      	movs	r0, #19
 8001e4e:	f7ff fe21 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001e52:	2071      	movs	r0, #113	@ 0x71
 8001e54:	f7ff fe1e 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF3);
 8001e58:	20f3      	movs	r0, #243	@ 0xf3
 8001e5a:	f7ff fe1b 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8001e5e:	2070      	movs	r0, #112	@ 0x70
 8001e60:	f7ff fe18 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001e64:	2070      	movs	r0, #112	@ 0x70
 8001e66:	f7ff fe15 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x64);			
 8001e6a:	2064      	movs	r0, #100	@ 0x64
 8001e6c:	f7ff fdf6 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x28);
 8001e70:	2028      	movs	r0, #40	@ 0x28
 8001e72:	f7ff fe0f 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x29);
 8001e76:	2029      	movs	r0, #41	@ 0x29
 8001e78:	f7ff fe0c 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001e7c:	20f1      	movs	r0, #241	@ 0xf1
 8001e7e:	f7ff fe09 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8001e82:	2001      	movs	r0, #1
 8001e84:	f7ff fe06 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001e88:	20f1      	movs	r0, #241	@ 0xf1
 8001e8a:	f7ff fe03 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f7ff fe00 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001e94:	2007      	movs	r0, #7
 8001e96:	f7ff fdfd 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x66);			
 8001e9a:	2066      	movs	r0, #102	@ 0x66
 8001e9c:	f7ff fdde 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3C);
 8001ea0:	203c      	movs	r0, #60	@ 0x3c
 8001ea2:	f7ff fdf7 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f7ff fdf4 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xCD);
 8001eac:	20cd      	movs	r0, #205	@ 0xcd
 8001eae:	f7ff fdf1 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x67);
 8001eb2:	2067      	movs	r0, #103	@ 0x67
 8001eb4:	f7ff fdee 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 8001eb8:	2045      	movs	r0, #69	@ 0x45
 8001eba:	f7ff fdeb 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 8001ebe:	2045      	movs	r0, #69	@ 0x45
 8001ec0:	f7ff fde8 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 8001ec4:	2010      	movs	r0, #16
 8001ec6:	f7ff fde5 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f7ff fde2 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f7ff fddf 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f7ff fddc 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x67);			
 8001edc:	2067      	movs	r0, #103	@ 0x67
 8001ede:	f7ff fdbd 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f7ff fdd6 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x3C);
 8001ee8:	203c      	movs	r0, #60	@ 0x3c
 8001eea:	f7ff fdd3 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f7ff fdd0 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7ff fdcd 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001efa:	2000      	movs	r0, #0
 8001efc:	f7ff fdca 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8001f00:	2001      	movs	r0, #1
 8001f02:	f7ff fdc7 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x54);
 8001f06:	2054      	movs	r0, #84	@ 0x54
 8001f08:	f7ff fdc4 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 8001f0c:	2010      	movs	r0, #16
 8001f0e:	f7ff fdc1 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x32);
 8001f12:	2032      	movs	r0, #50	@ 0x32
 8001f14:	f7ff fdbe 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x98);
 8001f18:	2098      	movs	r0, #152	@ 0x98
 8001f1a:	f7ff fdbb 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x74);			
 8001f1e:	2074      	movs	r0, #116	@ 0x74
 8001f20:	f7ff fd9c 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);	
 8001f24:	2010      	movs	r0, #16
 8001f26:	f7ff fdb5 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x85);	
 8001f2a:	2085      	movs	r0, #133	@ 0x85
 8001f2c:	f7ff fdb2 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x80);
 8001f30:	2080      	movs	r0, #128	@ 0x80
 8001f32:	f7ff fdaf 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 8001f36:	2000      	movs	r0, #0
 8001f38:	f7ff fdac 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f7ff fda9 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x4E);
 8001f42:	204e      	movs	r0, #78	@ 0x4e
 8001f44:	f7ff fda6 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);					
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f7ff fda3 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0x98);			
 8001f4e:	2098      	movs	r0, #152	@ 0x98
 8001f50:	f7ff fd84 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3e);
 8001f54:	203e      	movs	r0, #62	@ 0x3e
 8001f56:	f7ff fd9d 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001f5a:	2007      	movs	r0, #7
 8001f5c:	f7ff fd9a 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x35);	
 8001f60:	2035      	movs	r0, #53	@ 0x35
 8001f62:	f7ff fd7b 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0x21);
 8001f66:	2021      	movs	r0, #33	@ 0x21
 8001f68:	f7ff fd78 	bl	8001a5c <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0x11);
 8001f6c:	2011      	movs	r0, #17
 8001f6e:	f7ff fd75 	bl	8001a5c <LCD_1IN28_SendCommand>
	DEV_Delay_ms(120);
 8001f72:	2078      	movs	r0, #120	@ 0x78
 8001f74:	f000 ff34 	bl	8002de0 <HAL_Delay>
	LCD_1IN28_SendCommand(0x29);
 8001f78:	2029      	movs	r0, #41	@ 0x29
 8001f7a:	f7ff fd6f 	bl	8001a5c <LCD_1IN28_SendCommand>
	DEV_Delay_ms(20);
 8001f7e:	2014      	movs	r0, #20
 8001f80:	f000 ff2e 	bl	8002de0 <HAL_Delay>
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <LCD_1IN28_SetAttributes>:
function:	Set the resolution and scanning method of the screen
parameter:
		Scan_dir:   Scan direction
********************************************************************************/
static void LCD_1IN28_SetAttributes(UBYTE Scan_dir)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    LCD_1IN28.SCAN_DIR = Scan_dir;
 8001f92:	4a12      	ldr	r2, [pc, #72]	@ (8001fdc <LCD_1IN28_SetAttributes+0x54>)
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	7113      	strb	r3, [r2, #4]
    UBYTE MemoryAccessReg = 0x08;
 8001f98:	2308      	movs	r3, #8
 8001f9a:	73fb      	strb	r3, [r7, #15]

    //Get GRAM and LCD width and height
    if(Scan_dir == HORIZONTAL) {
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d108      	bne.n	8001fb4 <LCD_1IN28_SetAttributes+0x2c>
        LCD_1IN28.HEIGHT	= LCD_1IN28_HEIGHT;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fdc <LCD_1IN28_SetAttributes+0x54>)
 8001fa4:	22f0      	movs	r2, #240	@ 0xf0
 8001fa6:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_WIDTH;
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fdc <LCD_1IN28_SetAttributes+0x54>)
 8001faa:	22f0      	movs	r2, #240	@ 0xf0
 8001fac:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0XC8;
 8001fae:	23c8      	movs	r3, #200	@ 0xc8
 8001fb0:	73fb      	strb	r3, [r7, #15]
 8001fb2:	e007      	b.n	8001fc4 <LCD_1IN28_SetAttributes+0x3c>
    } else {
        LCD_1IN28.HEIGHT	= LCD_1IN28_WIDTH;
 8001fb4:	4b09      	ldr	r3, [pc, #36]	@ (8001fdc <LCD_1IN28_SetAttributes+0x54>)
 8001fb6:	22f0      	movs	r2, #240	@ 0xf0
 8001fb8:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_HEIGHT;
 8001fba:	4b08      	ldr	r3, [pc, #32]	@ (8001fdc <LCD_1IN28_SetAttributes+0x54>)
 8001fbc:	22f0      	movs	r2, #240	@ 0xf0
 8001fbe:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0X68;
 8001fc0:	2368      	movs	r3, #104	@ 0x68
 8001fc2:	73fb      	strb	r3, [r7, #15]
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN28_SendCommand(0x36); //MX, MY, RGB mode
 8001fc4:	2036      	movs	r0, #54	@ 0x36
 8001fc6:	f7ff fd49 	bl	8001a5c <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(MemoryAccessReg);	//0x08 set RGB
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fd61 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
}
 8001fd2:	bf00      	nop
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000218 	.word	0x20000218

08001fe0 <LCD_1IN28_Init>:
/********************************************************************************
function :	Initialize the lcd
parameter:
********************************************************************************/
void LCD_1IN28_Init(UBYTE Scan_dir)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN28_Reset();
 8001fea:	f7ff fd15 	bl	8001a18 <LCD_1IN28_Reset>

    //Set the resolution and scanning method of the screen
    LCD_1IN28_SetAttributes(Scan_dir);
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ffc9 	bl	8001f88 <LCD_1IN28_SetAttributes>
    
    //Set the initialization register
    LCD_1IN28_InitReg();
 8001ff6:	f7ff fd95 	bl	8001b24 <LCD_1IN28_InitReg>

    //set brightness
    LCD_1IN28_SendCommand(0x51); //MX, MY, RGB mode
 8001ffa:	2051      	movs	r0, #81	@ 0x51
 8001ffc:	f7ff fd2e 	bl	8001a5c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFB);	//0x08 set RGB
 8002000:	20fb      	movs	r0, #251	@ 0xfb
 8002002:	f7ff fd47 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <LCD_1IN28_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN28_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 800200e:	b590      	push	{r4, r7, lr}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	4604      	mov	r4, r0
 8002016:	4608      	mov	r0, r1
 8002018:	4611      	mov	r1, r2
 800201a:	461a      	mov	r2, r3
 800201c:	4623      	mov	r3, r4
 800201e:	80fb      	strh	r3, [r7, #6]
 8002020:	4603      	mov	r3, r0
 8002022:	80bb      	strh	r3, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	807b      	strh	r3, [r7, #2]
 8002028:	4613      	mov	r3, r2
 800202a:	803b      	strh	r3, [r7, #0]
    //set the X coordinates
    LCD_1IN28_SendCommand(0x2A);
 800202c:	202a      	movs	r0, #42	@ 0x2a
 800202e:	f7ff fd15 	bl	8001a5c <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8002032:	2000      	movs	r0, #0
 8002034:	f7ff fd2e 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xstart);
 8002038:	88fb      	ldrh	r3, [r7, #6]
 800203a:	b2db      	uxtb	r3, r3
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fd29 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 8002042:	2000      	movs	r0, #0
 8002044:	f7ff fd26 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xend);
 8002048:	887b      	ldrh	r3, [r7, #2]
 800204a:	b2db      	uxtb	r3, r3
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fd21 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

    //set the Y coordinates
    LCD_1IN28_SendCommand(0x2B);
 8002052:	202b      	movs	r0, #43	@ 0x2b
 8002054:	f7ff fd02 	bl	8001a5c <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8002058:	2000      	movs	r0, #0
 800205a:	f7ff fd1b 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(Ystart);
 800205e:	88bb      	ldrh	r3, [r7, #4]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff fd16 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 8002068:	2000      	movs	r0, #0
 800206a:	f7ff fd13 	bl	8001a94 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Yend);
 800206e:	883b      	ldrh	r3, [r7, #0]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fd0e 	bl	8001a94 <LCD_1IN28_SendData_8Bit>

    LCD_1IN28_SendCommand(0X2C);
 8002078:	202c      	movs	r0, #44	@ 0x2c
 800207a:	f7ff fcef 	bl	8001a5c <LCD_1IN28_SendCommand>
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	bd90      	pop	{r4, r7, pc}
	...

08002088 <LCD_1IN28_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void LCD_1IN28_Clear(UWORD Color)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN28_SetWindows(0, 0, LCD_1IN28_WIDTH-1, LCD_1IN28_HEIGHT-1);
 8002092:	23ef      	movs	r3, #239	@ 0xef
 8002094:	22ef      	movs	r2, #239	@ 0xef
 8002096:	2100      	movs	r1, #0
 8002098:	2000      	movs	r0, #0
 800209a:	f7ff ffb8 	bl	800200e <LCD_1IN28_SetWindows>

	DEV_Digital_Write(DEV_DC_PIN, 1);
 800209e:	2201      	movs	r2, #1
 80020a0:	2180      	movs	r1, #128	@ 0x80
 80020a2:	4813      	ldr	r0, [pc, #76]	@ (80020f0 <LCD_1IN28_Clear+0x68>)
 80020a4:	f001 f93a 	bl	800331c <HAL_GPIO_WritePin>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 80020a8:	2300      	movs	r3, #0
 80020aa:	81fb      	strh	r3, [r7, #14]
 80020ac:	e017      	b.n	80020de <LCD_1IN28_Clear+0x56>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 80020ae:	2300      	movs	r3, #0
 80020b0:	81bb      	strh	r3, [r7, #12]
 80020b2:	e00e      	b.n	80020d2 <LCD_1IN28_Clear+0x4a>
			DEV_SPI_WRITE(Color>>8);
 80020b4:	88fb      	ldrh	r3, [r7, #6]
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe ffb9 	bl	8001034 <DEV_SPI_WRite>
			DEV_SPI_WRITE(Color);
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe ffb4 	bl	8001034 <DEV_SPI_WRite>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 80020cc:	89bb      	ldrh	r3, [r7, #12]
 80020ce:	3301      	adds	r3, #1
 80020d0:	81bb      	strh	r3, [r7, #12]
 80020d2:	89bb      	ldrh	r3, [r7, #12]
 80020d4:	2bef      	cmp	r3, #239	@ 0xef
 80020d6:	d9ed      	bls.n	80020b4 <LCD_1IN28_Clear+0x2c>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 80020d8:	89fb      	ldrh	r3, [r7, #14]
 80020da:	3301      	adds	r3, #1
 80020dc:	81fb      	strh	r3, [r7, #14]
 80020de:	89fb      	ldrh	r3, [r7, #14]
 80020e0:	2bef      	cmp	r3, #239	@ 0xef
 80020e2:	d9e4      	bls.n	80020ae <LCD_1IN28_Clear+0x26>
		}
	 }
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40020800 	.word	0x40020800

080020f4 <LCD_1IN28_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_1IN28_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	80fb      	strh	r3, [r7, #6]
 80020fe:	460b      	mov	r3, r1
 8002100:	80bb      	strh	r3, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	807b      	strh	r3, [r7, #2]
	LCD_1IN28_SetWindows(x,y,x,y);
 8002106:	88bb      	ldrh	r3, [r7, #4]
 8002108:	88fa      	ldrh	r2, [r7, #6]
 800210a:	88b9      	ldrh	r1, [r7, #4]
 800210c:	88f8      	ldrh	r0, [r7, #6]
 800210e:	f7ff ff7e 	bl	800200e <LCD_1IN28_SetWindows>
	LCD_1IN28_SendData_16Bit(Color); 	    
 8002112:	887b      	ldrh	r3, [r7, #2]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fcdd 	bl	8001ad4 <LCD_1IN28_SendData_16Bit>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <LCD_1IN28_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_1IN28_SetBackLight(UWORD Value)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	80fb      	strh	r3, [r7, #6]
	DEV_Set_PWM(Value);
 800212e:	4a04      	ldr	r2, [pc, #16]	@ (8002140 <LCD_1IN28_SetBackLight+0x1c>)
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	40010000 	.word	0x40010000

08002144 <LCD_1in28_test>:
#include "../LCD/LCD_1in28.h"
#include "../Config/DEV_Config.h"


void LCD_1in28_test()
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af02      	add	r7, sp, #8
	printf("LCD_1IN28_test Demo\r\n");
 800214a:	482d      	ldr	r0, [pc, #180]	@ (8002200 <LCD_1in28_test+0xbc>)
 800214c:	f005 f910 	bl	8007370 <puts>
	DEV_Module_Init();
 8002150:	f7fe ff82 	bl	8001058 <DEV_Module_Init>
  
  printf("LCD_1IN28_ Init and Clear...\r\n");
 8002154:	482b      	ldr	r0, [pc, #172]	@ (8002204 <LCD_1in28_test+0xc0>)
 8002156:	f005 f90b 	bl	8007370 <puts>
	LCD_1IN28_SetBackLight(5000);
 800215a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800215e:	f7ff ffe1 	bl	8002124 <LCD_1IN28_SetBackLight>
	LCD_1IN28_Init(VERTICAL);
 8002162:	2001      	movs	r0, #1
 8002164:	f7ff ff3c 	bl	8001fe0 <LCD_1IN28_Init>
 	LCD_1IN28_Clear(BLACK);
 8002168:	2000      	movs	r0, #0
 800216a:	f7ff ff8d 	bl	8002088 <LCD_1IN28_Clear>
	
	printf("Paint_NewImage\r\n");
 800216e:	4826      	ldr	r0, [pc, #152]	@ (8002208 <LCD_1in28_test+0xc4>)
 8002170:	f005 f8fe 	bl	8007370 <puts>
	Paint_NewImage(LCD_1IN28_WIDTH,LCD_1IN28_HEIGHT, 0, BLACK);
 8002174:	2300      	movs	r3, #0
 8002176:	2200      	movs	r2, #0
 8002178:	21f0      	movs	r1, #240	@ 0xf0
 800217a:	20f0      	movs	r0, #240	@ 0xf0
 800217c:	f7fe ff8c 	bl	8001098 <Paint_NewImage>
	
	printf("Set Clear and Display Funtion\r\n");
 8002180:	4822      	ldr	r0, [pc, #136]	@ (800220c <LCD_1in28_test+0xc8>)
 8002182:	f005 f8f5 	bl	8007370 <puts>
	Paint_SetClearFuntion(LCD_1IN28_Clear);
 8002186:	4822      	ldr	r0, [pc, #136]	@ (8002210 <LCD_1in28_test+0xcc>)
 8002188:	f7fe ffd2 	bl	8001130 <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_1IN28_DrawPaint);
 800218c:	4821      	ldr	r0, [pc, #132]	@ (8002214 <LCD_1in28_test+0xd0>)
 800218e:	f7fe ffdf 	bl	8001150 <Paint_SetDisplayFuntion>

  printf("Paint_Clear\r\n");
 8002192:	4821      	ldr	r0, [pc, #132]	@ (8002218 <LCD_1in28_test+0xd4>)
 8002194:	f005 f8ec 	bl	8007370 <puts>
	Paint_Clear(BLACK);
 8002198:	2000      	movs	r0, #0
 800219a:	f7ff f899 	bl	80012d0 <Paint_Clear>
//  DEV_Delay_ms(1000);
	
	printf("drawing...\r\n");
 800219e:	481f      	ldr	r0, [pc, #124]	@ (800221c <LCD_1in28_test+0xd8>)
 80021a0:	f005 f8e6 	bl	8007370 <puts>
	Paint_DrawCircle(120,120, 120, BLUE ,DOT_PIXEL_2X2,DRAW_FILL_EMPTY);
 80021a4:	2300      	movs	r3, #0
 80021a6:	9301      	str	r3, [sp, #4]
 80021a8:	2302      	movs	r3, #2
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	231f      	movs	r3, #31
 80021ae:	2278      	movs	r2, #120	@ 0x78
 80021b0:	2178      	movs	r1, #120	@ 0x78
 80021b2:	2078      	movs	r0, #120	@ 0x78
 80021b4:	f7ff f938 	bl	8001428 <Paint_DrawCircle>
//  Paint_DrawLine  (120, 0, 120, 12,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
//  Paint_DrawLine  (120, 228, 120, 240,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
//  Paint_DrawLine  (0, 120, 12, 120,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
//  Paint_DrawLine  (228, 120, 240, 120,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
	
  Paint_DrawImage(gImage_70X70, 85, 25, 70, 70); 
 80021b8:	2346      	movs	r3, #70	@ 0x46
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	2346      	movs	r3, #70	@ 0x46
 80021be:	2219      	movs	r2, #25
 80021c0:	2155      	movs	r1, #85	@ 0x55
 80021c2:	4817      	ldr	r0, [pc, #92]	@ (8002220 <LCD_1in28_test+0xdc>)
 80021c4:	f7ff fbc2 	bl	800194c <Paint_DrawImage>
//  Paint_DrawString_CN(56,140, "΢ѩ����",   &Font24CN,BLACK,  WHITE);
  Paint_DrawString_EN(30,140, "GOYOYO",   &Font16,BLACK,  WHITE);
 80021c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021cc:	9301      	str	r3, [sp, #4]
 80021ce:	2300      	movs	r3, #0
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	4b14      	ldr	r3, [pc, #80]	@ (8002224 <LCD_1in28_test+0xe0>)
 80021d4:	4a14      	ldr	r2, [pc, #80]	@ (8002228 <LCD_1in28_test+0xe4>)
 80021d6:	218c      	movs	r1, #140	@ 0x8c
 80021d8:	201e      	movs	r0, #30
 80021da:	f7ff fb5f 	bl	800189c <Paint_DrawString_EN>
  Paint_DrawString_EN(123, 123, "TEST",&Font16,  BLACK, GREEN);
 80021de:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80021e2:	9301      	str	r3, [sp, #4]
 80021e4:	2300      	movs	r3, #0
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002224 <LCD_1in28_test+0xe0>)
 80021ea:	4a10      	ldr	r2, [pc, #64]	@ (800222c <LCD_1in28_test+0xe8>)
 80021ec:	217b      	movs	r1, #123	@ 0x7b
 80021ee:	207b      	movs	r0, #123	@ 0x7b
 80021f0:	f7ff fb54 	bl	800189c <Paint_DrawString_EN>
	
//	Paint_DrawLine  (120, 120, 70, 70,YELLOW ,DOT_PIXEL_3X3,LINE_STYLE_SOLID);
//	Paint_DrawLine  (120, 120, 176, 64,BLUE ,DOT_PIXEL_3X3,LINE_STYLE_SOLID);
	//Paint_DrawLine  (120, 120, 120, 210,RED ,DOT_PIXEL_2X2,LINE_STYLE_SOLID);
	
	printf("quit...\r\n");
 80021f4:	480e      	ldr	r0, [pc, #56]	@ (8002230 <LCD_1in28_test+0xec>)
 80021f6:	f005 f8bb 	bl	8007370 <puts>
	//DEV_Module_Exit();
  
}
 80021fa:	bf00      	nop
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	0800ad9c 	.word	0x0800ad9c
 8002204:	0800adb4 	.word	0x0800adb4
 8002208:	0800add4 	.word	0x0800add4
 800220c:	0800ade4 	.word	0x0800ade4
 8002210:	08002089 	.word	0x08002089
 8002214:	080020f5 	.word	0x080020f5
 8002218:	0800ae04 	.word	0x0800ae04
 800221c:	0800ae14 	.word	0x0800ae14
 8002220:	0800ba1c 	.word	0x0800ba1c
 8002224:	20000000 	.word	0x20000000
 8002228:	0800ae20 	.word	0x0800ae20
 800222c:	0800ae28 	.word	0x0800ae28
 8002230:	0800ae30 	.word	0x0800ae30

08002234 <MX_GPIO_Init>:
        * EXTI
     PD8   ------> USART3_TX
     PD9   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08c      	sub	sp, #48	@ 0x30
 8002238:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223a:	f107 031c 	add.w	r3, r7, #28
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	609a      	str	r2, [r3, #8]
 8002246:	60da      	str	r2, [r3, #12]
 8002248:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	61bb      	str	r3, [r7, #24]
 800224e:	4b6f      	ldr	r3, [pc, #444]	@ (800240c <MX_GPIO_Init+0x1d8>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	4a6e      	ldr	r2, [pc, #440]	@ (800240c <MX_GPIO_Init+0x1d8>)
 8002254:	f043 0304 	orr.w	r3, r3, #4
 8002258:	6313      	str	r3, [r2, #48]	@ 0x30
 800225a:	4b6c      	ldr	r3, [pc, #432]	@ (800240c <MX_GPIO_Init+0x1d8>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	61bb      	str	r3, [r7, #24]
 8002264:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	4b68      	ldr	r3, [pc, #416]	@ (800240c <MX_GPIO_Init+0x1d8>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	4a67      	ldr	r2, [pc, #412]	@ (800240c <MX_GPIO_Init+0x1d8>)
 8002270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002274:	6313      	str	r3, [r2, #48]	@ 0x30
 8002276:	4b65      	ldr	r3, [pc, #404]	@ (800240c <MX_GPIO_Init+0x1d8>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	4b61      	ldr	r3, [pc, #388]	@ (800240c <MX_GPIO_Init+0x1d8>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	4a60      	ldr	r2, [pc, #384]	@ (800240c <MX_GPIO_Init+0x1d8>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6313      	str	r3, [r2, #48]	@ 0x30
 8002292:	4b5e      	ldr	r3, [pc, #376]	@ (800240c <MX_GPIO_Init+0x1d8>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	4b5a      	ldr	r3, [pc, #360]	@ (800240c <MX_GPIO_Init+0x1d8>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	4a59      	ldr	r2, [pc, #356]	@ (800240c <MX_GPIO_Init+0x1d8>)
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ae:	4b57      	ldr	r3, [pc, #348]	@ (800240c <MX_GPIO_Init+0x1d8>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	4b53      	ldr	r3, [pc, #332]	@ (800240c <MX_GPIO_Init+0x1d8>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	4a52      	ldr	r2, [pc, #328]	@ (800240c <MX_GPIO_Init+0x1d8>)
 80022c4:	f043 0310 	orr.w	r3, r3, #16
 80022c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ca:	4b50      	ldr	r3, [pc, #320]	@ (800240c <MX_GPIO_Init+0x1d8>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	f003 0310 	and.w	r3, r3, #16
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	4b4c      	ldr	r3, [pc, #304]	@ (800240c <MX_GPIO_Init+0x1d8>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	4a4b      	ldr	r2, [pc, #300]	@ (800240c <MX_GPIO_Init+0x1d8>)
 80022e0:	f043 0308 	orr.w	r3, r3, #8
 80022e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e6:	4b49      	ldr	r3, [pc, #292]	@ (800240c <MX_GPIO_Init+0x1d8>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	607b      	str	r3, [r7, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	603b      	str	r3, [r7, #0]
 80022f6:	4b45      	ldr	r3, [pc, #276]	@ (800240c <MX_GPIO_Init+0x1d8>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	4a44      	ldr	r2, [pc, #272]	@ (800240c <MX_GPIO_Init+0x1d8>)
 80022fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002300:	6313      	str	r3, [r2, #48]	@ 0x30
 8002302:	4b42      	ldr	r3, [pc, #264]	@ (800240c <MX_GPIO_Init+0x1d8>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_RESET);
 800230e:	2200      	movs	r2, #0
 8002310:	2110      	movs	r1, #16
 8002312:	483f      	ldr	r0, [pc, #252]	@ (8002410 <MX_GPIO_Init+0x1dc>)
 8002314:	f001 f802 	bl	800331c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002318:	2200      	movs	r2, #0
 800231a:	f244 0181 	movw	r1, #16513	@ 0x4081
 800231e:	483d      	ldr	r0, [pc, #244]	@ (8002414 <MX_GPIO_Init+0x1e0>)
 8002320:	f000 fffc 	bl	800331c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002324:	2200      	movs	r2, #0
 8002326:	2140      	movs	r1, #64	@ 0x40
 8002328:	483b      	ldr	r0, [pc, #236]	@ (8002418 <MX_GPIO_Init+0x1e4>)
 800232a:	f000 fff7 	bl	800331c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DISP_DC_Pin|DISP_RST_Pin, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8002334:	4839      	ldr	r0, [pc, #228]	@ (800241c <MX_GPIO_Init+0x1e8>)
 8002336:	f000 fff1 	bl	800331c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800233a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800233e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002340:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002344:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800234a:	f107 031c 	add.w	r3, r7, #28
 800234e:	4619      	mov	r1, r3
 8002350:	4832      	ldr	r0, [pc, #200]	@ (800241c <MX_GPIO_Init+0x1e8>)
 8002352:	f000 fe4f 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8002356:	2310      	movs	r3, #16
 8002358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235a:	2301      	movs	r3, #1
 800235c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002362:	2300      	movs	r3, #0
 8002364:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8002366:	f107 031c 	add.w	r3, r7, #28
 800236a:	4619      	mov	r1, r3
 800236c:	4828      	ldr	r0, [pc, #160]	@ (8002410 <MX_GPIO_Init+0x1dc>)
 800236e:	f000 fe41 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002372:	f244 0381 	movw	r3, #16513	@ 0x4081
 8002376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002378:	2301      	movs	r3, #1
 800237a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002380:	2300      	movs	r3, #0
 8002382:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002384:	f107 031c 	add.w	r3, r7, #28
 8002388:	4619      	mov	r1, r3
 800238a:	4822      	ldr	r0, [pc, #136]	@ (8002414 <MX_GPIO_Init+0x1e0>)
 800238c:	f000 fe32 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002390:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002396:	2302      	movs	r3, #2
 8002398:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239e:	2303      	movs	r3, #3
 80023a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023a2:	2307      	movs	r3, #7
 80023a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023a6:	f107 031c 	add.w	r3, r7, #28
 80023aa:	4619      	mov	r1, r3
 80023ac:	481c      	ldr	r0, [pc, #112]	@ (8002420 <MX_GPIO_Init+0x1ec>)
 80023ae:	f000 fe21 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80023b2:	2340      	movs	r3, #64	@ 0x40
 80023b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b6:	2301      	movs	r3, #1
 80023b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023be:	2300      	movs	r3, #0
 80023c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80023c2:	f107 031c 	add.w	r3, r7, #28
 80023c6:	4619      	mov	r1, r3
 80023c8:	4813      	ldr	r0, [pc, #76]	@ (8002418 <MX_GPIO_Init+0x1e4>)
 80023ca:	f000 fe13 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80023ce:	2380      	movs	r3, #128	@ 0x80
 80023d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d2:	2300      	movs	r3, #0
 80023d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80023da:	f107 031c 	add.w	r3, r7, #28
 80023de:	4619      	mov	r1, r3
 80023e0:	480d      	ldr	r0, [pc, #52]	@ (8002418 <MX_GPIO_Init+0x1e4>)
 80023e2:	f000 fe07 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DISP_DC_Pin|DISP_RST_Pin;
 80023e6:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80023ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ec:	2301      	movs	r3, #1
 80023ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023f8:	f107 031c 	add.w	r3, r7, #28
 80023fc:	4619      	mov	r1, r3
 80023fe:	4807      	ldr	r0, [pc, #28]	@ (800241c <MX_GPIO_Init+0x1e8>)
 8002400:	f000 fdf8 	bl	8002ff4 <HAL_GPIO_Init>

}
 8002404:	bf00      	nop
 8002406:	3730      	adds	r7, #48	@ 0x30
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40023800 	.word	0x40023800
 8002410:	40020000 	.word	0x40020000
 8002414:	40020400 	.word	0x40020400
 8002418:	40021800 	.word	0x40021800
 800241c:	40020800 	.word	0x40020800
 8002420:	40020c00 	.word	0x40020c00

08002424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002428:	f000 fc68 	bl	8002cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800242c:	f000 f80e 	bl	800244c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002430:	f7ff ff00 	bl	8002234 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002434:	f000 fb9a 	bl	8002b6c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8002438:	f000 f87a 	bl	8002530 <MX_SPI1_Init>
  MX_TIM1_Init();
 800243c:	f000 fa26 	bl	800288c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002440:	f000 fb22 	bl	8002a88 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_1in28_test();
 8002444:	f7ff fe7e 	bl	8002144 <LCD_1in28_test>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002448:	bf00      	nop
 800244a:	e7fd      	b.n	8002448 <main+0x24>

0800244c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b094      	sub	sp, #80	@ 0x50
 8002450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002452:	f107 031c 	add.w	r3, r7, #28
 8002456:	2234      	movs	r2, #52	@ 0x34
 8002458:	2100      	movs	r1, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f005 f888 	bl	8007570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002460:	f107 0308 	add.w	r3, r7, #8
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002470:	2300      	movs	r3, #0
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	4b29      	ldr	r3, [pc, #164]	@ (800251c <SystemClock_Config+0xd0>)
 8002476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002478:	4a28      	ldr	r2, [pc, #160]	@ (800251c <SystemClock_Config+0xd0>)
 800247a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800247e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002480:	4b26      	ldr	r3, [pc, #152]	@ (800251c <SystemClock_Config+0xd0>)
 8002482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002488:	607b      	str	r3, [r7, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800248c:	2300      	movs	r3, #0
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	4b23      	ldr	r3, [pc, #140]	@ (8002520 <SystemClock_Config+0xd4>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a22      	ldr	r2, [pc, #136]	@ (8002520 <SystemClock_Config+0xd4>)
 8002496:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b20      	ldr	r3, [pc, #128]	@ (8002520 <SystemClock_Config+0xd4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80024a4:	603b      	str	r3, [r7, #0]
 80024a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024a8:	2301      	movs	r3, #1
 80024aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80024ac:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80024b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024b2:	2302      	movs	r3, #2
 80024b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80024ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80024bc:	2308      	movs	r3, #8
 80024be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 80024c0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80024c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80024c6:	2304      	movs	r3, #4
 80024c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80024ca:	2308      	movs	r3, #8
 80024cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80024ce:	2302      	movs	r3, #2
 80024d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024d2:	f107 031c 	add.w	r3, r7, #28
 80024d6:	4618      	mov	r0, r3
 80024d8:	f001 fd20 	bl	8003f1c <HAL_RCC_OscConfig>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80024e2:	f000 f81f 	bl	8002524 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024e6:	230f      	movs	r3, #15
 80024e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024ea:	2302      	movs	r3, #2
 80024ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80024fc:	f107 0308 	add.w	r3, r7, #8
 8002500:	2103      	movs	r1, #3
 8002502:	4618      	mov	r0, r3
 8002504:	f001 f85e 	bl	80035c4 <HAL_RCC_ClockConfig>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800250e:	f000 f809 	bl	8002524 <Error_Handler>
  }
}
 8002512:	bf00      	nop
 8002514:	3750      	adds	r7, #80	@ 0x50
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800
 8002520:	40007000 	.word	0x40007000

08002524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002528:	b672      	cpsid	i
}
 800252a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <Error_Handler+0x8>

08002530 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002534:	4b17      	ldr	r3, [pc, #92]	@ (8002594 <MX_SPI1_Init+0x64>)
 8002536:	4a18      	ldr	r2, [pc, #96]	@ (8002598 <MX_SPI1_Init+0x68>)
 8002538:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800253a:	4b16      	ldr	r3, [pc, #88]	@ (8002594 <MX_SPI1_Init+0x64>)
 800253c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002540:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002542:	4b14      	ldr	r3, [pc, #80]	@ (8002594 <MX_SPI1_Init+0x64>)
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002548:	4b12      	ldr	r3, [pc, #72]	@ (8002594 <MX_SPI1_Init+0x64>)
 800254a:	2200      	movs	r2, #0
 800254c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800254e:	4b11      	ldr	r3, [pc, #68]	@ (8002594 <MX_SPI1_Init+0x64>)
 8002550:	2200      	movs	r2, #0
 8002552:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002554:	4b0f      	ldr	r3, [pc, #60]	@ (8002594 <MX_SPI1_Init+0x64>)
 8002556:	2200      	movs	r2, #0
 8002558:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800255a:	4b0e      	ldr	r3, [pc, #56]	@ (8002594 <MX_SPI1_Init+0x64>)
 800255c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002560:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002562:	4b0c      	ldr	r3, [pc, #48]	@ (8002594 <MX_SPI1_Init+0x64>)
 8002564:	2220      	movs	r2, #32
 8002566:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002568:	4b0a      	ldr	r3, [pc, #40]	@ (8002594 <MX_SPI1_Init+0x64>)
 800256a:	2200      	movs	r2, #0
 800256c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800256e:	4b09      	ldr	r3, [pc, #36]	@ (8002594 <MX_SPI1_Init+0x64>)
 8002570:	2200      	movs	r2, #0
 8002572:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002574:	4b07      	ldr	r3, [pc, #28]	@ (8002594 <MX_SPI1_Init+0x64>)
 8002576:	2200      	movs	r2, #0
 8002578:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800257a:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <MX_SPI1_Init+0x64>)
 800257c:	220a      	movs	r2, #10
 800257e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002580:	4804      	ldr	r0, [pc, #16]	@ (8002594 <MX_SPI1_Init+0x64>)
 8002582:	f001 ff4f 	bl	8004424 <HAL_SPI_Init>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800258c:	f7ff ffca 	bl	8002524 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20000220 	.word	0x20000220
 8002598:	40013000 	.word	0x40013000

0800259c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08a      	sub	sp, #40	@ 0x28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a19      	ldr	r2, [pc, #100]	@ (8002620 <HAL_SPI_MspInit+0x84>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d12b      	bne.n	8002616 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	4b18      	ldr	r3, [pc, #96]	@ (8002624 <HAL_SPI_MspInit+0x88>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c6:	4a17      	ldr	r2, [pc, #92]	@ (8002624 <HAL_SPI_MspInit+0x88>)
 80025c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ce:	4b15      	ldr	r3, [pc, #84]	@ (8002624 <HAL_SPI_MspInit+0x88>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	4b11      	ldr	r3, [pc, #68]	@ (8002624 <HAL_SPI_MspInit+0x88>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e2:	4a10      	ldr	r2, [pc, #64]	@ (8002624 <HAL_SPI_MspInit+0x88>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002624 <HAL_SPI_MspInit+0x88>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80025f6:	23a0      	movs	r3, #160	@ 0xa0
 80025f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fa:	2302      	movs	r3, #2
 80025fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002602:	2303      	movs	r3, #3
 8002604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002606:	2305      	movs	r3, #5
 8002608:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260a:	f107 0314 	add.w	r3, r7, #20
 800260e:	4619      	mov	r1, r3
 8002610:	4805      	ldr	r0, [pc, #20]	@ (8002628 <HAL_SPI_MspInit+0x8c>)
 8002612:	f000 fcef 	bl	8002ff4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002616:	bf00      	nop
 8002618:	3728      	adds	r7, #40	@ 0x28
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40013000 	.word	0x40013000
 8002624:	40023800 	.word	0x40023800
 8002628:	40020000 	.word	0x40020000

0800262c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	4b10      	ldr	r3, [pc, #64]	@ (8002678 <HAL_MspInit+0x4c>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263a:	4a0f      	ldr	r2, [pc, #60]	@ (8002678 <HAL_MspInit+0x4c>)
 800263c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002640:	6453      	str	r3, [r2, #68]	@ 0x44
 8002642:	4b0d      	ldr	r3, [pc, #52]	@ (8002678 <HAL_MspInit+0x4c>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002646:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800264a:	607b      	str	r3, [r7, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	4b09      	ldr	r3, [pc, #36]	@ (8002678 <HAL_MspInit+0x4c>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002656:	4a08      	ldr	r2, [pc, #32]	@ (8002678 <HAL_MspInit+0x4c>)
 8002658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800265c:	6413      	str	r3, [r2, #64]	@ 0x40
 800265e:	4b06      	ldr	r3, [pc, #24]	@ (8002678 <HAL_MspInit+0x4c>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40023800 	.word	0x40023800

0800267c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002680:	bf00      	nop
 8002682:	e7fd      	b.n	8002680 <NMI_Handler+0x4>

08002684 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002688:	bf00      	nop
 800268a:	e7fd      	b.n	8002688 <HardFault_Handler+0x4>

0800268c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002690:	bf00      	nop
 8002692:	e7fd      	b.n	8002690 <MemManage_Handler+0x4>

08002694 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002698:	bf00      	nop
 800269a:	e7fd      	b.n	8002698 <BusFault_Handler+0x4>

0800269c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026a0:	bf00      	nop
 80026a2:	e7fd      	b.n	80026a0 <UsageFault_Handler+0x4>

080026a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026b2:	b480      	push	{r7}
 80026b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026c4:	bf00      	nop
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026d2:	f000 fb65 	bl	8002da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}

080026da <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0
	return 1;
 80026de:	2301      	movs	r3, #1
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <_kill>:

int _kill(int pid, int sig)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026f4:	f004 ff9e 	bl	8007634 <__errno>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2216      	movs	r2, #22
 80026fc:	601a      	str	r2, [r3, #0]
	return -1;
 80026fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <_exit>:

void _exit (int status)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002712:	f04f 31ff 	mov.w	r1, #4294967295
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff ffe7 	bl	80026ea <_kill>
	while (1) {}		/* Make sure we hang here */
 800271c:	bf00      	nop
 800271e:	e7fd      	b.n	800271c <_exit+0x12>

08002720 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	e00a      	b.n	8002748 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002732:	f3af 8000 	nop.w
 8002736:	4601      	mov	r1, r0
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	60ba      	str	r2, [r7, #8]
 800273e:	b2ca      	uxtb	r2, r1
 8002740:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	3301      	adds	r3, #1
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	429a      	cmp	r2, r3
 800274e:	dbf0      	blt.n	8002732 <_read+0x12>
	}

return len;
 8002750:	687b      	ldr	r3, [r7, #4]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b086      	sub	sp, #24
 800275e:	af00      	add	r7, sp, #0
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	e009      	b.n	8002780 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	60ba      	str	r2, [r7, #8]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	3301      	adds	r3, #1
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	429a      	cmp	r2, r3
 8002786:	dbf1      	blt.n	800276c <_write+0x12>
	}
	return len;
 8002788:	687b      	ldr	r3, [r7, #4]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <_close>:

int _close(int file)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
	return -1;
 800279a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800279e:	4618      	mov	r0, r3
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
 80027b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027ba:	605a      	str	r2, [r3, #4]
	return 0;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <_isatty>:

int _isatty(int file)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
	return 1;
 80027d2:	2301      	movs	r3, #1
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
	return 0;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002804:	4a14      	ldr	r2, [pc, #80]	@ (8002858 <_sbrk+0x5c>)
 8002806:	4b15      	ldr	r3, [pc, #84]	@ (800285c <_sbrk+0x60>)
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002810:	4b13      	ldr	r3, [pc, #76]	@ (8002860 <_sbrk+0x64>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d102      	bne.n	800281e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002818:	4b11      	ldr	r3, [pc, #68]	@ (8002860 <_sbrk+0x64>)
 800281a:	4a12      	ldr	r2, [pc, #72]	@ (8002864 <_sbrk+0x68>)
 800281c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800281e:	4b10      	ldr	r3, [pc, #64]	@ (8002860 <_sbrk+0x64>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4413      	add	r3, r2
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	429a      	cmp	r2, r3
 800282a:	d207      	bcs.n	800283c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800282c:	f004 ff02 	bl	8007634 <__errno>
 8002830:	4603      	mov	r3, r0
 8002832:	220c      	movs	r2, #12
 8002834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002836:	f04f 33ff 	mov.w	r3, #4294967295
 800283a:	e009      	b.n	8002850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800283c:	4b08      	ldr	r3, [pc, #32]	@ (8002860 <_sbrk+0x64>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002842:	4b07      	ldr	r3, [pc, #28]	@ (8002860 <_sbrk+0x64>)
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	4a05      	ldr	r2, [pc, #20]	@ (8002860 <_sbrk+0x64>)
 800284c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800284e:	68fb      	ldr	r3, [r7, #12]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20050000 	.word	0x20050000
 800285c:	00000400 	.word	0x00000400
 8002860:	20000278 	.word	0x20000278
 8002864:	20000940 	.word	0x20000940

08002868 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800286c:	4b06      	ldr	r3, [pc, #24]	@ (8002888 <SystemInit+0x20>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002872:	4a05      	ldr	r2, [pc, #20]	@ (8002888 <SystemInit+0x20>)
 8002874:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002878:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b096      	sub	sp, #88	@ 0x58
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002892:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	609a      	str	r2, [r3, #8]
 800289e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028a0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	609a      	str	r2, [r3, #8]
 80028b6:	60da      	str	r2, [r3, #12]
 80028b8:	611a      	str	r2, [r3, #16]
 80028ba:	615a      	str	r2, [r3, #20]
 80028bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	2220      	movs	r2, #32
 80028c2:	2100      	movs	r1, #0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f004 fe53 	bl	8007570 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028ca:	4b3f      	ldr	r3, [pc, #252]	@ (80029c8 <MX_TIM1_Init+0x13c>)
 80028cc:	4a3f      	ldr	r2, [pc, #252]	@ (80029cc <MX_TIM1_Init+0x140>)
 80028ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000;
 80028d0:	4b3d      	ldr	r3, [pc, #244]	@ (80029c8 <MX_TIM1_Init+0x13c>)
 80028d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80028d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d8:	4b3b      	ldr	r3, [pc, #236]	@ (80029c8 <MX_TIM1_Init+0x13c>)
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80028de:	4b3a      	ldr	r3, [pc, #232]	@ (80029c8 <MX_TIM1_Init+0x13c>)
 80028e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80028e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e6:	4b38      	ldr	r3, [pc, #224]	@ (80029c8 <MX_TIM1_Init+0x13c>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028ec:	4b36      	ldr	r3, [pc, #216]	@ (80029c8 <MX_TIM1_Init+0x13c>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028f2:	4b35      	ldr	r3, [pc, #212]	@ (80029c8 <MX_TIM1_Init+0x13c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028f8:	4833      	ldr	r0, [pc, #204]	@ (80029c8 <MX_TIM1_Init+0x13c>)
 80028fa:	f002 f83b 	bl	8004974 <HAL_TIM_Base_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002904:	f7ff fe0e 	bl	8002524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002908:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800290c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800290e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002912:	4619      	mov	r1, r3
 8002914:	482c      	ldr	r0, [pc, #176]	@ (80029c8 <MX_TIM1_Init+0x13c>)
 8002916:	f002 fa5f 	bl	8004dd8 <HAL_TIM_ConfigClockSource>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002920:	f7ff fe00 	bl	8002524 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002924:	4828      	ldr	r0, [pc, #160]	@ (80029c8 <MX_TIM1_Init+0x13c>)
 8002926:	f002 f874 	bl	8004a12 <HAL_TIM_PWM_Init>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002930:	f7ff fdf8 	bl	8002524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002934:	2300      	movs	r3, #0
 8002936:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002938:	2300      	movs	r3, #0
 800293a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800293c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002940:	4619      	mov	r1, r3
 8002942:	4821      	ldr	r0, [pc, #132]	@ (80029c8 <MX_TIM1_Init+0x13c>)
 8002944:	f002 fe2c 	bl	80055a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800294e:	f7ff fde9 	bl	8002524 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002952:	2360      	movs	r3, #96	@ 0x60
 8002954:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002956:	2300      	movs	r3, #0
 8002958:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800295a:	2300      	movs	r3, #0
 800295c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800295e:	2300      	movs	r3, #0
 8002960:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002962:	2300      	movs	r3, #0
 8002964:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002966:	2300      	movs	r3, #0
 8002968:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800296a:	2300      	movs	r3, #0
 800296c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800296e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002972:	2204      	movs	r2, #4
 8002974:	4619      	mov	r1, r3
 8002976:	4814      	ldr	r0, [pc, #80]	@ (80029c8 <MX_TIM1_Init+0x13c>)
 8002978:	f002 f96c 	bl	8004c54 <HAL_TIM_PWM_ConfigChannel>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8002982:	f7ff fdcf 	bl	8002524 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800299a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800299e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029a0:	2300      	movs	r3, #0
 80029a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80029a4:	1d3b      	adds	r3, r7, #4
 80029a6:	4619      	mov	r1, r3
 80029a8:	4807      	ldr	r0, [pc, #28]	@ (80029c8 <MX_TIM1_Init+0x13c>)
 80029aa:	f002 fe75 	bl	8005698 <HAL_TIMEx_ConfigBreakDeadTime>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80029b4:	f7ff fdb6 	bl	8002524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80029b8:	4803      	ldr	r0, [pc, #12]	@ (80029c8 <MX_TIM1_Init+0x13c>)
 80029ba:	f000 f82b 	bl	8002a14 <HAL_TIM_MspPostInit>

}
 80029be:	bf00      	nop
 80029c0:	3758      	adds	r7, #88	@ 0x58
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	2000027c 	.word	0x2000027c
 80029cc:	40010000 	.word	0x40010000

080029d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a0b      	ldr	r2, [pc, #44]	@ (8002a0c <HAL_TIM_Base_MspInit+0x3c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d10d      	bne.n	80029fe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002a10 <HAL_TIM_Base_MspInit+0x40>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ea:	4a09      	ldr	r2, [pc, #36]	@ (8002a10 <HAL_TIM_Base_MspInit+0x40>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80029f2:	4b07      	ldr	r3, [pc, #28]	@ (8002a10 <HAL_TIM_Base_MspInit+0x40>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80029fe:	bf00      	nop
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40010000 	.word	0x40010000
 8002a10:	40023800 	.word	0x40023800

08002a14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1c:	f107 030c 	add.w	r3, r7, #12
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a12      	ldr	r2, [pc, #72]	@ (8002a7c <HAL_TIM_MspPostInit+0x68>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d11e      	bne.n	8002a74 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	4b11      	ldr	r3, [pc, #68]	@ (8002a80 <HAL_TIM_MspPostInit+0x6c>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	4a10      	ldr	r2, [pc, #64]	@ (8002a80 <HAL_TIM_MspPostInit+0x6c>)
 8002a40:	f043 0310 	orr.w	r3, r3, #16
 8002a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a46:	4b0e      	ldr	r3, [pc, #56]	@ (8002a80 <HAL_TIM_MspPostInit+0x6c>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a52:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a64:	2301      	movs	r3, #1
 8002a66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a68:	f107 030c 	add.w	r3, r7, #12
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4805      	ldr	r0, [pc, #20]	@ (8002a84 <HAL_TIM_MspPostInit+0x70>)
 8002a70:	f000 fac0 	bl	8002ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a74:	bf00      	nop
 8002a76:	3720      	adds	r7, #32
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40010000 	.word	0x40010000
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40021000 	.word	0x40021000

08002a88 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a8c:	4b11      	ldr	r3, [pc, #68]	@ (8002ad4 <MX_USART2_UART_Init+0x4c>)
 8002a8e:	4a12      	ldr	r2, [pc, #72]	@ (8002ad8 <MX_USART2_UART_Init+0x50>)
 8002a90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a92:	4b10      	ldr	r3, [pc, #64]	@ (8002ad4 <MX_USART2_UART_Init+0x4c>)
 8002a94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad4 <MX_USART2_UART_Init+0x4c>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad4 <MX_USART2_UART_Init+0x4c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <MX_USART2_UART_Init+0x4c>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002aac:	4b09      	ldr	r3, [pc, #36]	@ (8002ad4 <MX_USART2_UART_Init+0x4c>)
 8002aae:	220c      	movs	r2, #12
 8002ab0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ab2:	4b08      	ldr	r3, [pc, #32]	@ (8002ad4 <MX_USART2_UART_Init+0x4c>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ab8:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <MX_USART2_UART_Init+0x4c>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002abe:	4805      	ldr	r0, [pc, #20]	@ (8002ad4 <MX_USART2_UART_Init+0x4c>)
 8002ac0:	f002 fe3c 	bl	800573c <HAL_UART_Init>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002aca:	f7ff fd2b 	bl	8002524 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	200002c4 	.word	0x200002c4
 8002ad8:	40004400 	.word	0x40004400

08002adc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	@ 0x28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	f107 0314 	add.w	r3, r7, #20
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a19      	ldr	r2, [pc, #100]	@ (8002b60 <HAL_UART_MspInit+0x84>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d12b      	bne.n	8002b56 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	4b18      	ldr	r3, [pc, #96]	@ (8002b64 <HAL_UART_MspInit+0x88>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	4a17      	ldr	r2, [pc, #92]	@ (8002b64 <HAL_UART_MspInit+0x88>)
 8002b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b0e:	4b15      	ldr	r3, [pc, #84]	@ (8002b64 <HAL_UART_MspInit+0x88>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b16:	613b      	str	r3, [r7, #16]
 8002b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	4b11      	ldr	r3, [pc, #68]	@ (8002b64 <HAL_UART_MspInit+0x88>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	4a10      	ldr	r2, [pc, #64]	@ (8002b64 <HAL_UART_MspInit+0x88>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b64 <HAL_UART_MspInit+0x88>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b36:	230c      	movs	r3, #12
 8002b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b42:	2303      	movs	r3, #3
 8002b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b46:	2307      	movs	r3, #7
 8002b48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4a:	f107 0314 	add.w	r3, r7, #20
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4805      	ldr	r0, [pc, #20]	@ (8002b68 <HAL_UART_MspInit+0x8c>)
 8002b52:	f000 fa4f 	bl	8002ff4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002b56:	bf00      	nop
 8002b58:	3728      	adds	r7, #40	@ 0x28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40004400 	.word	0x40004400
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40020000 	.word	0x40020000

08002b6c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002b70:	4b15      	ldr	r3, [pc, #84]	@ (8002bc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002b72:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002b76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002b78:	4b13      	ldr	r3, [pc, #76]	@ (8002bc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002b7a:	2206      	movs	r2, #6
 8002b7c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002b7e:	4b12      	ldr	r3, [pc, #72]	@ (8002bc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002b80:	2202      	movs	r2, #2
 8002b82:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002b84:	4b10      	ldr	r3, [pc, #64]	@ (8002bc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002b90:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002b96:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002ba2:	4b09      	ldr	r3, [pc, #36]	@ (8002bc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002ba8:	4b07      	ldr	r3, [pc, #28]	@ (8002bc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002bae:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002bb4:	4804      	ldr	r0, [pc, #16]	@ (8002bc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002bb6:	f000 fbca 	bl	800334e <HAL_PCD_Init>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8002bc0:	f7ff fcb0 	bl	8002524 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002bc4:	bf00      	nop
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	2000030c 	.word	0x2000030c

08002bcc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b0a0      	sub	sp, #128	@ 0x80
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]
 8002be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002be4:	f107 0314 	add.w	r3, r7, #20
 8002be8:	2258      	movs	r2, #88	@ 0x58
 8002bea:	2100      	movs	r1, #0
 8002bec:	4618      	mov	r0, r3
 8002bee:	f004 fcbf 	bl	8007570 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bfa:	d14d      	bne.n	8002c98 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002bfc:	2320      	movs	r3, #32
 8002bfe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8002c00:	2300      	movs	r3, #0
 8002c02:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c04:	f107 0314 	add.w	r3, r7, #20
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 fefb 	bl	8003a04 <HAL_RCCEx_PeriphCLKConfig>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8002c14:	f7ff fc86 	bl	8002524 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c18:	2300      	movs	r3, #0
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	4b20      	ldr	r3, [pc, #128]	@ (8002ca0 <HAL_PCD_MspInit+0xd4>)
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c20:	4a1f      	ldr	r2, [pc, #124]	@ (8002ca0 <HAL_PCD_MspInit+0xd4>)
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c28:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca0 <HAL_PCD_MspInit+0xd4>)
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002c34:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002c38:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c42:	2303      	movs	r3, #3
 8002c44:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002c46:	230a      	movs	r3, #10
 8002c48:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4814      	ldr	r0, [pc, #80]	@ (8002ca4 <HAL_PCD_MspInit+0xd8>)
 8002c52:	f000 f9cf 	bl	8002ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002c56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002c64:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002c68:	4619      	mov	r1, r3
 8002c6a:	480e      	ldr	r0, [pc, #56]	@ (8002ca4 <HAL_PCD_MspInit+0xd8>)
 8002c6c:	f000 f9c2 	bl	8002ff4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002c70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca0 <HAL_PCD_MspInit+0xd4>)
 8002c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c74:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca0 <HAL_PCD_MspInit+0xd4>)
 8002c76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c7a:	6353      	str	r3, [r2, #52]	@ 0x34
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	4b07      	ldr	r3, [pc, #28]	@ (8002ca0 <HAL_PCD_MspInit+0xd4>)
 8002c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c84:	4a06      	ldr	r2, [pc, #24]	@ (8002ca0 <HAL_PCD_MspInit+0xd4>)
 8002c86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c8a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ca0 <HAL_PCD_MspInit+0xd4>)
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002c98:	bf00      	nop
 8002c9a:	3780      	adds	r7, #128	@ 0x80
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40020000 	.word	0x40020000

08002ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002ca8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ce0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cac:	480d      	ldr	r0, [pc, #52]	@ (8002ce4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cae:	490e      	ldr	r1, [pc, #56]	@ (8002ce8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cb0:	4a0e      	ldr	r2, [pc, #56]	@ (8002cec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb4:	e002      	b.n	8002cbc <LoopCopyDataInit>

08002cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cba:	3304      	adds	r3, #4

08002cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cc0:	d3f9      	bcc.n	8002cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cc2:	4a0b      	ldr	r2, [pc, #44]	@ (8002cf0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002cc4:	4c0b      	ldr	r4, [pc, #44]	@ (8002cf4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cc8:	e001      	b.n	8002cce <LoopFillZerobss>

08002cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ccc:	3204      	adds	r2, #4

08002cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cd0:	d3fb      	bcc.n	8002cca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002cd2:	f7ff fdc9 	bl	8002868 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cd6:	f004 fcb3 	bl	8007640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cda:	f7ff fba3 	bl	8002424 <main>
  bx  lr    
 8002cde:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002ce0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ce8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002cec:	0800e4b8 	.word	0x0800e4b8
  ldr r2, =_sbss
 8002cf0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002cf4:	20000940 	.word	0x20000940

08002cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cf8:	e7fe      	b.n	8002cf8 <ADC_IRQHandler>
	...

08002cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d00:	4b0e      	ldr	r3, [pc, #56]	@ (8002d3c <HAL_Init+0x40>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a0d      	ldr	r2, [pc, #52]	@ (8002d3c <HAL_Init+0x40>)
 8002d06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d3c <HAL_Init+0x40>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a0a      	ldr	r2, [pc, #40]	@ (8002d3c <HAL_Init+0x40>)
 8002d12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d18:	4b08      	ldr	r3, [pc, #32]	@ (8002d3c <HAL_Init+0x40>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a07      	ldr	r2, [pc, #28]	@ (8002d3c <HAL_Init+0x40>)
 8002d1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d24:	2003      	movs	r0, #3
 8002d26:	f000 f931 	bl	8002f8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f000 f808 	bl	8002d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d30:	f7ff fc7c 	bl	800262c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023c00 	.word	0x40023c00

08002d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d48:	4b12      	ldr	r3, [pc, #72]	@ (8002d94 <HAL_InitTick+0x54>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b12      	ldr	r3, [pc, #72]	@ (8002d98 <HAL_InitTick+0x58>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	4619      	mov	r1, r3
 8002d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 f93b 	bl	8002fda <HAL_SYSTICK_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e00e      	b.n	8002d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b0f      	cmp	r3, #15
 8002d72:	d80a      	bhi.n	8002d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d74:	2200      	movs	r2, #0
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7c:	f000 f911 	bl	8002fa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d80:	4a06      	ldr	r2, [pc, #24]	@ (8002d9c <HAL_InitTick+0x5c>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e000      	b.n	8002d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	20000008 	.word	0x20000008
 8002d98:	20000010 	.word	0x20000010
 8002d9c:	2000000c 	.word	0x2000000c

08002da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da4:	4b06      	ldr	r3, [pc, #24]	@ (8002dc0 <HAL_IncTick+0x20>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	461a      	mov	r2, r3
 8002daa:	4b06      	ldr	r3, [pc, #24]	@ (8002dc4 <HAL_IncTick+0x24>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4413      	add	r3, r2
 8002db0:	4a04      	ldr	r2, [pc, #16]	@ (8002dc4 <HAL_IncTick+0x24>)
 8002db2:	6013      	str	r3, [r2, #0]
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	20000010 	.word	0x20000010
 8002dc4:	200007f0 	.word	0x200007f0

08002dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return uwTick;
 8002dcc:	4b03      	ldr	r3, [pc, #12]	@ (8002ddc <HAL_GetTick+0x14>)
 8002dce:	681b      	ldr	r3, [r3, #0]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	200007f0 	.word	0x200007f0

08002de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002de8:	f7ff ffee 	bl	8002dc8 <HAL_GetTick>
 8002dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df8:	d005      	beq.n	8002e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002e24 <HAL_Delay+0x44>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4413      	add	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e06:	bf00      	nop
 8002e08:	f7ff ffde 	bl	8002dc8 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d8f7      	bhi.n	8002e08 <HAL_Delay+0x28>
  {
  }
}
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000010 	.word	0x20000010

08002e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e38:	4b0c      	ldr	r3, [pc, #48]	@ (8002e6c <__NVIC_SetPriorityGrouping+0x44>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e44:	4013      	ands	r3, r2
 8002e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e5a:	4a04      	ldr	r2, [pc, #16]	@ (8002e6c <__NVIC_SetPriorityGrouping+0x44>)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	60d3      	str	r3, [r2, #12]
}
 8002e60:	bf00      	nop
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e74:	4b04      	ldr	r3, [pc, #16]	@ (8002e88 <__NVIC_GetPriorityGrouping+0x18>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	f003 0307 	and.w	r3, r3, #7
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	6039      	str	r1, [r7, #0]
 8002e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	db0a      	blt.n	8002eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	490c      	ldr	r1, [pc, #48]	@ (8002ed8 <__NVIC_SetPriority+0x4c>)
 8002ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eaa:	0112      	lsls	r2, r2, #4
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	440b      	add	r3, r1
 8002eb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eb4:	e00a      	b.n	8002ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	4908      	ldr	r1, [pc, #32]	@ (8002edc <__NVIC_SetPriority+0x50>)
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	3b04      	subs	r3, #4
 8002ec4:	0112      	lsls	r2, r2, #4
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	440b      	add	r3, r1
 8002eca:	761a      	strb	r2, [r3, #24]
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	e000e100 	.word	0xe000e100
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b089      	sub	sp, #36	@ 0x24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f1c3 0307 	rsb	r3, r3, #7
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	bf28      	it	cs
 8002efe:	2304      	movcs	r3, #4
 8002f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	3304      	adds	r3, #4
 8002f06:	2b06      	cmp	r3, #6
 8002f08:	d902      	bls.n	8002f10 <NVIC_EncodePriority+0x30>
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3b03      	subs	r3, #3
 8002f0e:	e000      	b.n	8002f12 <NVIC_EncodePriority+0x32>
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f14:	f04f 32ff 	mov.w	r2, #4294967295
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43da      	mvns	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	401a      	ands	r2, r3
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f28:	f04f 31ff 	mov.w	r1, #4294967295
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f32:	43d9      	mvns	r1, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f38:	4313      	orrs	r3, r2
         );
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3724      	adds	r7, #36	@ 0x24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
	...

08002f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f58:	d301      	bcc.n	8002f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e00f      	b.n	8002f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f88 <SysTick_Config+0x40>)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f66:	210f      	movs	r1, #15
 8002f68:	f04f 30ff 	mov.w	r0, #4294967295
 8002f6c:	f7ff ff8e 	bl	8002e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f70:	4b05      	ldr	r3, [pc, #20]	@ (8002f88 <SysTick_Config+0x40>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f76:	4b04      	ldr	r3, [pc, #16]	@ (8002f88 <SysTick_Config+0x40>)
 8002f78:	2207      	movs	r2, #7
 8002f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	e000e010 	.word	0xe000e010

08002f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff ff47 	bl	8002e28 <__NVIC_SetPriorityGrouping>
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b086      	sub	sp, #24
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	4603      	mov	r3, r0
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607a      	str	r2, [r7, #4]
 8002fae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fb4:	f7ff ff5c 	bl	8002e70 <__NVIC_GetPriorityGrouping>
 8002fb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	68b9      	ldr	r1, [r7, #8]
 8002fbe:	6978      	ldr	r0, [r7, #20]
 8002fc0:	f7ff ff8e 	bl	8002ee0 <NVIC_EncodePriority>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff ff5d 	bl	8002e8c <__NVIC_SetPriority>
}
 8002fd2:	bf00      	nop
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff ffb0 	bl	8002f48 <SysTick_Config>
 8002fe8:	4603      	mov	r3, r0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b089      	sub	sp, #36	@ 0x24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003002:	2300      	movs	r3, #0
 8003004:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003006:	2300      	movs	r3, #0
 8003008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	e165      	b.n	80032dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003010:	2201      	movs	r2, #1
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	4013      	ands	r3, r2
 8003022:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	429a      	cmp	r2, r3
 800302a:	f040 8154 	bne.w	80032d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b01      	cmp	r3, #1
 8003038:	d005      	beq.n	8003046 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003042:	2b02      	cmp	r3, #2
 8003044:	d130      	bne.n	80030a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	2203      	movs	r2, #3
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43db      	mvns	r3, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4013      	ands	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800307c:	2201      	movs	r2, #1
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 0201 	and.w	r2, r3, #1
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d017      	beq.n	80030e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	2203      	movs	r2, #3
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d123      	bne.n	8003138 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	08da      	lsrs	r2, r3, #3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3208      	adds	r2, #8
 80030f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	220f      	movs	r2, #15
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	08da      	lsrs	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3208      	adds	r2, #8
 8003132:	69b9      	ldr	r1, [r7, #24]
 8003134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	2203      	movs	r2, #3
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 0203 	and.w	r2, r3, #3
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 80ae 	beq.w	80032d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	4b5d      	ldr	r3, [pc, #372]	@ (80032f4 <HAL_GPIO_Init+0x300>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003182:	4a5c      	ldr	r2, [pc, #368]	@ (80032f4 <HAL_GPIO_Init+0x300>)
 8003184:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003188:	6453      	str	r3, [r2, #68]	@ 0x44
 800318a:	4b5a      	ldr	r3, [pc, #360]	@ (80032f4 <HAL_GPIO_Init+0x300>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003196:	4a58      	ldr	r2, [pc, #352]	@ (80032f8 <HAL_GPIO_Init+0x304>)
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	089b      	lsrs	r3, r3, #2
 800319c:	3302      	adds	r3, #2
 800319e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	220f      	movs	r2, #15
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a4f      	ldr	r2, [pc, #316]	@ (80032fc <HAL_GPIO_Init+0x308>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d025      	beq.n	800320e <HAL_GPIO_Init+0x21a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a4e      	ldr	r2, [pc, #312]	@ (8003300 <HAL_GPIO_Init+0x30c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d01f      	beq.n	800320a <HAL_GPIO_Init+0x216>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a4d      	ldr	r2, [pc, #308]	@ (8003304 <HAL_GPIO_Init+0x310>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d019      	beq.n	8003206 <HAL_GPIO_Init+0x212>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a4c      	ldr	r2, [pc, #304]	@ (8003308 <HAL_GPIO_Init+0x314>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d013      	beq.n	8003202 <HAL_GPIO_Init+0x20e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a4b      	ldr	r2, [pc, #300]	@ (800330c <HAL_GPIO_Init+0x318>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00d      	beq.n	80031fe <HAL_GPIO_Init+0x20a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003310 <HAL_GPIO_Init+0x31c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d007      	beq.n	80031fa <HAL_GPIO_Init+0x206>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a49      	ldr	r2, [pc, #292]	@ (8003314 <HAL_GPIO_Init+0x320>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d101      	bne.n	80031f6 <HAL_GPIO_Init+0x202>
 80031f2:	2306      	movs	r3, #6
 80031f4:	e00c      	b.n	8003210 <HAL_GPIO_Init+0x21c>
 80031f6:	2307      	movs	r3, #7
 80031f8:	e00a      	b.n	8003210 <HAL_GPIO_Init+0x21c>
 80031fa:	2305      	movs	r3, #5
 80031fc:	e008      	b.n	8003210 <HAL_GPIO_Init+0x21c>
 80031fe:	2304      	movs	r3, #4
 8003200:	e006      	b.n	8003210 <HAL_GPIO_Init+0x21c>
 8003202:	2303      	movs	r3, #3
 8003204:	e004      	b.n	8003210 <HAL_GPIO_Init+0x21c>
 8003206:	2302      	movs	r3, #2
 8003208:	e002      	b.n	8003210 <HAL_GPIO_Init+0x21c>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <HAL_GPIO_Init+0x21c>
 800320e:	2300      	movs	r3, #0
 8003210:	69fa      	ldr	r2, [r7, #28]
 8003212:	f002 0203 	and.w	r2, r2, #3
 8003216:	0092      	lsls	r2, r2, #2
 8003218:	4093      	lsls	r3, r2
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003220:	4935      	ldr	r1, [pc, #212]	@ (80032f8 <HAL_GPIO_Init+0x304>)
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	089b      	lsrs	r3, r3, #2
 8003226:	3302      	adds	r3, #2
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800322e:	4b3a      	ldr	r3, [pc, #232]	@ (8003318 <HAL_GPIO_Init+0x324>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	43db      	mvns	r3, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4013      	ands	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003252:	4a31      	ldr	r2, [pc, #196]	@ (8003318 <HAL_GPIO_Init+0x324>)
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003258:	4b2f      	ldr	r3, [pc, #188]	@ (8003318 <HAL_GPIO_Init+0x324>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	43db      	mvns	r3, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4013      	ands	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800327c:	4a26      	ldr	r2, [pc, #152]	@ (8003318 <HAL_GPIO_Init+0x324>)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003282:	4b25      	ldr	r3, [pc, #148]	@ (8003318 <HAL_GPIO_Init+0x324>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	43db      	mvns	r3, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4013      	ands	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003318 <HAL_GPIO_Init+0x324>)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003318 <HAL_GPIO_Init+0x324>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032d0:	4a11      	ldr	r2, [pc, #68]	@ (8003318 <HAL_GPIO_Init+0x324>)
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3301      	adds	r3, #1
 80032da:	61fb      	str	r3, [r7, #28]
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	f67f ae96 	bls.w	8003010 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop
 80032e8:	3724      	adds	r7, #36	@ 0x24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40023800 	.word	0x40023800
 80032f8:	40013800 	.word	0x40013800
 80032fc:	40020000 	.word	0x40020000
 8003300:	40020400 	.word	0x40020400
 8003304:	40020800 	.word	0x40020800
 8003308:	40020c00 	.word	0x40020c00
 800330c:	40021000 	.word	0x40021000
 8003310:	40021400 	.word	0x40021400
 8003314:	40021800 	.word	0x40021800
 8003318:	40013c00 	.word	0x40013c00

0800331c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	807b      	strh	r3, [r7, #2]
 8003328:	4613      	mov	r3, r2
 800332a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800332c:	787b      	ldrb	r3, [r7, #1]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003332:	887a      	ldrh	r2, [r7, #2]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003338:	e003      	b.n	8003342 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800333a:	887b      	ldrh	r3, [r7, #2]
 800333c:	041a      	lsls	r2, r3, #16
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	619a      	str	r2, [r3, #24]
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b086      	sub	sp, #24
 8003352:	af02      	add	r7, sp, #8
 8003354:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e108      	b.n	8003572 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d106      	bne.n	8003380 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff fc26 	bl	8002bcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2203      	movs	r2, #3
 8003384:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800338e:	d102      	bne.n	8003396 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f002 fd06 	bl	8005dac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6818      	ldr	r0, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	7c1a      	ldrb	r2, [r3, #16]
 80033a8:	f88d 2000 	strb.w	r2, [sp]
 80033ac:	3304      	adds	r3, #4
 80033ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033b0:	f002 fc98 	bl	8005ce4 <USB_CoreInit>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2202      	movs	r2, #2
 80033be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e0d5      	b.n	8003572 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2100      	movs	r1, #0
 80033cc:	4618      	mov	r0, r3
 80033ce:	f002 fcfe 	bl	8005dce <USB_SetCurrentMode>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0c6      	b.n	8003572 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e4:	2300      	movs	r3, #0
 80033e6:	73fb      	strb	r3, [r7, #15]
 80033e8:	e04a      	b.n	8003480 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033ea:	7bfa      	ldrb	r2, [r7, #15]
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	3315      	adds	r3, #21
 80033fa:	2201      	movs	r2, #1
 80033fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033fe:	7bfa      	ldrb	r2, [r7, #15]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	3314      	adds	r3, #20
 800340e:	7bfa      	ldrb	r2, [r7, #15]
 8003410:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003412:	7bfa      	ldrb	r2, [r7, #15]
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	b298      	uxth	r0, r3
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	332e      	adds	r3, #46	@ 0x2e
 8003426:	4602      	mov	r2, r0
 8003428:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800342a:	7bfa      	ldrb	r2, [r7, #15]
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	3318      	adds	r3, #24
 800343a:	2200      	movs	r2, #0
 800343c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800343e:	7bfa      	ldrb	r2, [r7, #15]
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	331c      	adds	r3, #28
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003452:	7bfa      	ldrb	r2, [r7, #15]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	3320      	adds	r3, #32
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003466:	7bfa      	ldrb	r2, [r7, #15]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4413      	add	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	3324      	adds	r3, #36	@ 0x24
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	3301      	adds	r3, #1
 800347e:	73fb      	strb	r3, [r7, #15]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	791b      	ldrb	r3, [r3, #4]
 8003484:	7bfa      	ldrb	r2, [r7, #15]
 8003486:	429a      	cmp	r2, r3
 8003488:	d3af      	bcc.n	80033ea <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800348a:	2300      	movs	r3, #0
 800348c:	73fb      	strb	r3, [r7, #15]
 800348e:	e044      	b.n	800351a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003490:	7bfa      	ldrb	r2, [r7, #15]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80034a2:	2200      	movs	r2, #0
 80034a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034a6:	7bfa      	ldrb	r2, [r7, #15]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80034b8:	7bfa      	ldrb	r2, [r7, #15]
 80034ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034bc:	7bfa      	ldrb	r2, [r7, #15]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80034ce:	2200      	movs	r2, #0
 80034d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034d2:	7bfa      	ldrb	r2, [r7, #15]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034e8:	7bfa      	ldrb	r2, [r7, #15]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034fe:	7bfa      	ldrb	r2, [r7, #15]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	3301      	adds	r3, #1
 8003518:	73fb      	strb	r3, [r7, #15]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	791b      	ldrb	r3, [r3, #4]
 800351e:	7bfa      	ldrb	r2, [r7, #15]
 8003520:	429a      	cmp	r2, r3
 8003522:	d3b5      	bcc.n	8003490 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6818      	ldr	r0, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	7c1a      	ldrb	r2, [r3, #16]
 800352c:	f88d 2000 	strb.w	r2, [sp]
 8003530:	3304      	adds	r3, #4
 8003532:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003534:	f002 fc98 	bl	8005e68 <USB_DevInit>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2202      	movs	r2, #2
 8003542:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e013      	b.n	8003572 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	7b1b      	ldrb	r3, [r3, #12]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d102      	bne.n	8003566 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f80a 	bl	800357a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f002 fe53 	bl	8006216 <USB_DevDisconnect>

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800357a:	b480      	push	{r7}
 800357c:	b085      	sub	sp, #20
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ac:	f043 0303 	orr.w	r3, r3, #3
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
	...

080035c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e0cc      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035d8:	4b68      	ldr	r3, [pc, #416]	@ (800377c <HAL_RCC_ClockConfig+0x1b8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d90c      	bls.n	8003600 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e6:	4b65      	ldr	r3, [pc, #404]	@ (800377c <HAL_RCC_ClockConfig+0x1b8>)
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ee:	4b63      	ldr	r3, [pc, #396]	@ (800377c <HAL_RCC_ClockConfig+0x1b8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e0b8      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d020      	beq.n	800364e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003618:	4b59      	ldr	r3, [pc, #356]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	4a58      	ldr	r2, [pc, #352]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003622:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003630:	4b53      	ldr	r3, [pc, #332]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	4a52      	ldr	r2, [pc, #328]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800363a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800363c:	4b50      	ldr	r3, [pc, #320]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	494d      	ldr	r1, [pc, #308]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	4313      	orrs	r3, r2
 800364c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d044      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d107      	bne.n	8003672 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003662:	4b47      	ldr	r3, [pc, #284]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d119      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e07f      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d003      	beq.n	8003682 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800367e:	2b03      	cmp	r3, #3
 8003680:	d107      	bne.n	8003692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003682:	4b3f      	ldr	r3, [pc, #252]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d109      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e06f      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003692:	4b3b      	ldr	r3, [pc, #236]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e067      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036a2:	4b37      	ldr	r3, [pc, #220]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f023 0203 	bic.w	r2, r3, #3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	4934      	ldr	r1, [pc, #208]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036b4:	f7ff fb88 	bl	8002dc8 <HAL_GetTick>
 80036b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ba:	e00a      	b.n	80036d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036bc:	f7ff fb84 	bl	8002dc8 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e04f      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 020c 	and.w	r2, r3, #12
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d1eb      	bne.n	80036bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036e4:	4b25      	ldr	r3, [pc, #148]	@ (800377c <HAL_RCC_ClockConfig+0x1b8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d20c      	bcs.n	800370c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b22      	ldr	r3, [pc, #136]	@ (800377c <HAL_RCC_ClockConfig+0x1b8>)
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fa:	4b20      	ldr	r3, [pc, #128]	@ (800377c <HAL_RCC_ClockConfig+0x1b8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e032      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003718:	4b19      	ldr	r3, [pc, #100]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	4916      	ldr	r1, [pc, #88]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	4313      	orrs	r3, r2
 8003728:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d009      	beq.n	800374a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003736:	4b12      	ldr	r3, [pc, #72]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	490e      	ldr	r1, [pc, #56]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	4313      	orrs	r3, r2
 8003748:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800374a:	f000 f821 	bl	8003790 <HAL_RCC_GetSysClockFreq>
 800374e:	4602      	mov	r2, r0
 8003750:	4b0b      	ldr	r3, [pc, #44]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	490a      	ldr	r1, [pc, #40]	@ (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 800375c:	5ccb      	ldrb	r3, [r1, r3]
 800375e:	fa22 f303 	lsr.w	r3, r2, r3
 8003762:	4a09      	ldr	r2, [pc, #36]	@ (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003766:	4b09      	ldr	r3, [pc, #36]	@ (800378c <HAL_RCC_ClockConfig+0x1c8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff fae8 	bl	8002d40 <HAL_InitTick>

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40023c00 	.word	0x40023c00
 8003780:	40023800 	.word	0x40023800
 8003784:	0800e064 	.word	0x0800e064
 8003788:	20000008 	.word	0x20000008
 800378c:	2000000c 	.word	0x2000000c

08003790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003794:	b094      	sub	sp, #80	@ 0x50
 8003796:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	647b      	str	r3, [r7, #68]	@ 0x44
 800379c:	2300      	movs	r3, #0
 800379e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037a0:	2300      	movs	r3, #0
 80037a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037a8:	4b79      	ldr	r3, [pc, #484]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x200>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 030c 	and.w	r3, r3, #12
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d00d      	beq.n	80037d0 <HAL_RCC_GetSysClockFreq+0x40>
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	f200 80e1 	bhi.w	800397c <HAL_RCC_GetSysClockFreq+0x1ec>
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_RCC_GetSysClockFreq+0x34>
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d003      	beq.n	80037ca <HAL_RCC_GetSysClockFreq+0x3a>
 80037c2:	e0db      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037c4:	4b73      	ldr	r3, [pc, #460]	@ (8003994 <HAL_RCC_GetSysClockFreq+0x204>)
 80037c6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80037c8:	e0db      	b.n	8003982 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ca:	4b73      	ldr	r3, [pc, #460]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x208>)
 80037cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037ce:	e0d8      	b.n	8003982 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x200>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037da:	4b6d      	ldr	r3, [pc, #436]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x200>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d063      	beq.n	80038ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x200>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	099b      	lsrs	r3, r3, #6
 80037ec:	2200      	movs	r2, #0
 80037ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80037f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80037fa:	2300      	movs	r3, #0
 80037fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80037fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003802:	4622      	mov	r2, r4
 8003804:	462b      	mov	r3, r5
 8003806:	f04f 0000 	mov.w	r0, #0
 800380a:	f04f 0100 	mov.w	r1, #0
 800380e:	0159      	lsls	r1, r3, #5
 8003810:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003814:	0150      	lsls	r0, r2, #5
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4621      	mov	r1, r4
 800381c:	1a51      	subs	r1, r2, r1
 800381e:	6139      	str	r1, [r7, #16]
 8003820:	4629      	mov	r1, r5
 8003822:	eb63 0301 	sbc.w	r3, r3, r1
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003834:	4659      	mov	r1, fp
 8003836:	018b      	lsls	r3, r1, #6
 8003838:	4651      	mov	r1, sl
 800383a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800383e:	4651      	mov	r1, sl
 8003840:	018a      	lsls	r2, r1, #6
 8003842:	4651      	mov	r1, sl
 8003844:	ebb2 0801 	subs.w	r8, r2, r1
 8003848:	4659      	mov	r1, fp
 800384a:	eb63 0901 	sbc.w	r9, r3, r1
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800385a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800385e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003862:	4690      	mov	r8, r2
 8003864:	4699      	mov	r9, r3
 8003866:	4623      	mov	r3, r4
 8003868:	eb18 0303 	adds.w	r3, r8, r3
 800386c:	60bb      	str	r3, [r7, #8]
 800386e:	462b      	mov	r3, r5
 8003870:	eb49 0303 	adc.w	r3, r9, r3
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003882:	4629      	mov	r1, r5
 8003884:	024b      	lsls	r3, r1, #9
 8003886:	4621      	mov	r1, r4
 8003888:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800388c:	4621      	mov	r1, r4
 800388e:	024a      	lsls	r2, r1, #9
 8003890:	4610      	mov	r0, r2
 8003892:	4619      	mov	r1, r3
 8003894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003896:	2200      	movs	r2, #0
 8003898:	62bb      	str	r3, [r7, #40]	@ 0x28
 800389a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800389c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038a0:	f7fd fa1a 	bl	8000cd8 <__aeabi_uldivmod>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4613      	mov	r3, r2
 80038aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038ac:	e058      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ae:	4b38      	ldr	r3, [pc, #224]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x200>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	099b      	lsrs	r3, r3, #6
 80038b4:	2200      	movs	r2, #0
 80038b6:	4618      	mov	r0, r3
 80038b8:	4611      	mov	r1, r2
 80038ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038be:	623b      	str	r3, [r7, #32]
 80038c0:	2300      	movs	r3, #0
 80038c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80038c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038c8:	4642      	mov	r2, r8
 80038ca:	464b      	mov	r3, r9
 80038cc:	f04f 0000 	mov.w	r0, #0
 80038d0:	f04f 0100 	mov.w	r1, #0
 80038d4:	0159      	lsls	r1, r3, #5
 80038d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038da:	0150      	lsls	r0, r2, #5
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4641      	mov	r1, r8
 80038e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80038e6:	4649      	mov	r1, r9
 80038e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003900:	ebb2 040a 	subs.w	r4, r2, sl
 8003904:	eb63 050b 	sbc.w	r5, r3, fp
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	00eb      	lsls	r3, r5, #3
 8003912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003916:	00e2      	lsls	r2, r4, #3
 8003918:	4614      	mov	r4, r2
 800391a:	461d      	mov	r5, r3
 800391c:	4643      	mov	r3, r8
 800391e:	18e3      	adds	r3, r4, r3
 8003920:	603b      	str	r3, [r7, #0]
 8003922:	464b      	mov	r3, r9
 8003924:	eb45 0303 	adc.w	r3, r5, r3
 8003928:	607b      	str	r3, [r7, #4]
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003936:	4629      	mov	r1, r5
 8003938:	028b      	lsls	r3, r1, #10
 800393a:	4621      	mov	r1, r4
 800393c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003940:	4621      	mov	r1, r4
 8003942:	028a      	lsls	r2, r1, #10
 8003944:	4610      	mov	r0, r2
 8003946:	4619      	mov	r1, r3
 8003948:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800394a:	2200      	movs	r2, #0
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	61fa      	str	r2, [r7, #28]
 8003950:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003954:	f7fd f9c0 	bl	8000cd8 <__aeabi_uldivmod>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4613      	mov	r3, r2
 800395e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003960:	4b0b      	ldr	r3, [pc, #44]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x200>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	0c1b      	lsrs	r3, r3, #16
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	3301      	adds	r3, #1
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003970:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003972:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003974:	fbb2 f3f3 	udiv	r3, r2, r3
 8003978:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800397a:	e002      	b.n	8003982 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800397c:	4b05      	ldr	r3, [pc, #20]	@ (8003994 <HAL_RCC_GetSysClockFreq+0x204>)
 800397e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003982:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003984:	4618      	mov	r0, r3
 8003986:	3750      	adds	r7, #80	@ 0x50
 8003988:	46bd      	mov	sp, r7
 800398a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800398e:	bf00      	nop
 8003990:	40023800 	.word	0x40023800
 8003994:	00f42400 	.word	0x00f42400
 8003998:	007a1200 	.word	0x007a1200

0800399c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a0:	4b03      	ldr	r3, [pc, #12]	@ (80039b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039a2:	681b      	ldr	r3, [r3, #0]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	20000008 	.word	0x20000008

080039b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039b8:	f7ff fff0 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80039bc:	4602      	mov	r2, r0
 80039be:	4b05      	ldr	r3, [pc, #20]	@ (80039d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	0a9b      	lsrs	r3, r3, #10
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	4903      	ldr	r1, [pc, #12]	@ (80039d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ca:	5ccb      	ldrb	r3, [r1, r3]
 80039cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40023800 	.word	0x40023800
 80039d8:	0800e074 	.word	0x0800e074

080039dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039e0:	f7ff ffdc 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80039e4:	4602      	mov	r2, r0
 80039e6:	4b05      	ldr	r3, [pc, #20]	@ (80039fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	0b5b      	lsrs	r3, r3, #13
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	4903      	ldr	r1, [pc, #12]	@ (8003a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039f2:	5ccb      	ldrb	r3, [r1, r3]
 80039f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40023800 	.word	0x40023800
 8003a00:	0800e074 	.word	0x0800e074

08003a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d010      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003a28:	4b7a      	ldr	r3, [pc, #488]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a2e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	4977      	ldr	r1, [pc, #476]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8003a46:	2301      	movs	r3, #1
 8003a48:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d010      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003a56:	4b6f      	ldr	r3, [pc, #444]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a5c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	496b      	ldr	r1, [pc, #428]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8003a74:	2301      	movs	r3, #1
 8003a76:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d022      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8003a84:	4b63      	ldr	r3, [pc, #396]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a92:	4960      	ldr	r1, [pc, #384]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aaa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003aae:	d10c      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8003ab0:	4b58      	ldr	r3, [pc, #352]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ab6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	021b      	lsls	r3, r3, #8
 8003ac2:	4954      	ldr	r1, [pc, #336]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d022      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8003ad6:	4b4f      	ldr	r3, [pc, #316]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003adc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae4:	494b      	ldr	r1, [pc, #300]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003af4:	2301      	movs	r3, #1
 8003af6:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003afc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b00:	d10c      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8003b02:	4b44      	ldr	r3, [pc, #272]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b08:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	3b01      	subs	r3, #1
 8003b12:	021b      	lsls	r3, r3, #8
 8003b14:	493f      	ldr	r1, [pc, #252]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 808a 	beq.w	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	4b39      	ldr	r3, [pc, #228]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b32:	4a38      	ldr	r2, [pc, #224]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b3a:	4b36      	ldr	r3, [pc, #216]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b46:	4b34      	ldr	r3, [pc, #208]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a33      	ldr	r2, [pc, #204]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8003b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b52:	f7ff f939 	bl	8002dc8 <HAL_GetTick>
 8003b56:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b58:	e008      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b5a:	f7ff f935 	bl	8002dc8 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e1d1      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0f0      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b78:	4b26      	ldr	r3, [pc, #152]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b80:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d02f      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d028      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b96:	4b1f      	ldr	r3, [pc, #124]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b9e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003bac:	4a19      	ldr	r2, [pc, #100]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003bb2:	4b18      	ldr	r3, [pc, #96]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d114      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003bbe:	f7ff f903 	bl	8002dc8 <HAL_GetTick>
 8003bc2:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc4:	e00a      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc6:	f7ff f8ff 	bl	8002dc8 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e199      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0ee      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bf0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bf4:	d114      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003bf6:	4b07      	ldr	r3, [pc, #28]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003c06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c0a:	4902      	ldr	r1, [pc, #8]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	608b      	str	r3, [r1, #8]
 8003c10:	e00c      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8003c12:	bf00      	nop
 8003c14:	40023800 	.word	0x40023800
 8003c18:	40007000 	.word	0x40007000
 8003c1c:	42470e40 	.word	0x42470e40
 8003c20:	4b89      	ldr	r3, [pc, #548]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	4a88      	ldr	r2, [pc, #544]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003c26:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003c2a:	6093      	str	r3, [r2, #8]
 8003c2c:	4b86      	ldr	r3, [pc, #536]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003c2e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c38:	4983      	ldr	r1, [pc, #524]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d004      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 8003c50:	4b7e      	ldr	r3, [pc, #504]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8003c52:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003c60:	4b79      	ldr	r3, [pc, #484]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c66:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6e:	4976      	ldr	r1, [pc, #472]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d011      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c82:	4b71      	ldr	r3, [pc, #452]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c88:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c90:	496d      	ldr	r1, [pc, #436]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003cb2:	4b65      	ldr	r3, [pc, #404]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cb8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc0:	4961      	ldr	r1, [pc, #388]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d004      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b80      	cmp	r3, #128	@ 0x80
 8003cd4:	f040 80c6 	bne.w	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cd8:	4b5d      	ldr	r3, [pc, #372]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cde:	f7ff f873 	bl	8002dc8 <HAL_GetTick>
 8003ce2:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ce6:	f7ff f86f 	bl	8002dc8 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e10b      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cf8:	4b53      	ldr	r3, [pc, #332]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1f0      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8003d04:	4a53      	ldr	r2, [pc, #332]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d0a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d023      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d019      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d004      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d48:	d00e      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d019      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d115      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d66:	d110      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	019b      	lsls	r3, r3, #6
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	061b      	lsls	r3, r3, #24
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	071b      	lsls	r3, r3, #28
 8003d82:	4931      	ldr	r1, [pc, #196]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d009      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d026      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d122      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003db2:	4b25      	ldr	r3, [pc, #148]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003db8:	0e1b      	lsrs	r3, r3, #24
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	019b      	lsls	r3, r3, #6
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	061b      	lsls	r3, r3, #24
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	071b      	lsls	r3, r3, #28
 8003dd8:	491b      	ldr	r1, [pc, #108]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8003de0:	4b19      	ldr	r3, [pc, #100]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003de6:	f023 021f 	bic.w	r2, r3, #31
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	4915      	ldr	r1, [pc, #84]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d010      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	019b      	lsls	r3, r3, #6
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	061b      	lsls	r3, r3, #24
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	071b      	lsls	r3, r3, #28
 8003e1e:	490a      	ldr	r1, [pc, #40]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e26:	4b0a      	ldr	r3, [pc, #40]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e2c:	f7fe ffcc 	bl	8002dc8 <HAL_GetTick>
 8003e30:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e32:	e011      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e34:	f7fe ffc8 	bl	8002dc8 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d90a      	bls.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e064      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003e46:	bf00      	nop
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	424711e0 	.word	0x424711e0
 8003e50:	42470068 	.word	0x42470068
 8003e54:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e58:	4b2f      	ldr	r3, [pc, #188]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0e7      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e70:	4b29      	ldr	r3, [pc, #164]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e76:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e7e:	4926      	ldr	r1, [pc, #152]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003e92:	4b21      	ldr	r3, [pc, #132]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e98:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea0:	491d      	ldr	r1, [pc, #116]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003eb4:	4b18      	ldr	r3, [pc, #96]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec2:	4915      	ldr	r1, [pc, #84]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8003ed6:	4b10      	ldr	r3, [pc, #64]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003edc:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee4:	490c      	ldr	r1, [pc, #48]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00a      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ef8:	4b07      	ldr	r3, [pc, #28]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003efe:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f06:	4904      	ldr	r1, [pc, #16]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3720      	adds	r7, #32
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40023800 	.word	0x40023800

08003f1c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e273      	b.n	8004416 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d075      	beq.n	8004026 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f3a:	4b88      	ldr	r3, [pc, #544]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d00c      	beq.n	8003f60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f46:	4b85      	ldr	r3, [pc, #532]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f4e:	2b08      	cmp	r3, #8
 8003f50:	d112      	bne.n	8003f78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f52:	4b82      	ldr	r3, [pc, #520]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f5e:	d10b      	bne.n	8003f78 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f60:	4b7e      	ldr	r3, [pc, #504]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d05b      	beq.n	8004024 <HAL_RCC_OscConfig+0x108>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d157      	bne.n	8004024 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e24e      	b.n	8004416 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f80:	d106      	bne.n	8003f90 <HAL_RCC_OscConfig+0x74>
 8003f82:	4b76      	ldr	r3, [pc, #472]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a75      	ldr	r2, [pc, #468]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 8003f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	e01d      	b.n	8003fcc <HAL_RCC_OscConfig+0xb0>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f98:	d10c      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x98>
 8003f9a:	4b70      	ldr	r3, [pc, #448]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a6f      	ldr	r2, [pc, #444]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 8003fa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	4b6d      	ldr	r3, [pc, #436]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a6c      	ldr	r2, [pc, #432]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 8003fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	e00b      	b.n	8003fcc <HAL_RCC_OscConfig+0xb0>
 8003fb4:	4b69      	ldr	r3, [pc, #420]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a68      	ldr	r2, [pc, #416]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 8003fba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	4b66      	ldr	r3, [pc, #408]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a65      	ldr	r2, [pc, #404]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 8003fc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d013      	beq.n	8003ffc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fe fef8 	bl	8002dc8 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fdc:	f7fe fef4 	bl	8002dc8 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b64      	cmp	r3, #100	@ 0x64
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e213      	b.n	8004416 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fee:	4b5b      	ldr	r3, [pc, #364]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0xc0>
 8003ffa:	e014      	b.n	8004026 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7fe fee4 	bl	8002dc8 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004004:	f7fe fee0 	bl	8002dc8 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b64      	cmp	r3, #100	@ 0x64
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e1ff      	b.n	8004416 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004016:	4b51      	ldr	r3, [pc, #324]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f0      	bne.n	8004004 <HAL_RCC_OscConfig+0xe8>
 8004022:	e000      	b.n	8004026 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d063      	beq.n	80040fa <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004032:	4b4a      	ldr	r3, [pc, #296]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 030c 	and.w	r3, r3, #12
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00b      	beq.n	8004056 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800403e:	4b47      	ldr	r3, [pc, #284]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004046:	2b08      	cmp	r3, #8
 8004048:	d11c      	bne.n	8004084 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800404a:	4b44      	ldr	r3, [pc, #272]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d116      	bne.n	8004084 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004056:	4b41      	ldr	r3, [pc, #260]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d005      	beq.n	800406e <HAL_RCC_OscConfig+0x152>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d001      	beq.n	800406e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e1d3      	b.n	8004416 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406e:	4b3b      	ldr	r3, [pc, #236]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	4937      	ldr	r1, [pc, #220]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 800407e:	4313      	orrs	r3, r2
 8004080:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004082:	e03a      	b.n	80040fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d020      	beq.n	80040ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800408c:	4b34      	ldr	r3, [pc, #208]	@ (8004160 <HAL_RCC_OscConfig+0x244>)
 800408e:	2201      	movs	r2, #1
 8004090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004092:	f7fe fe99 	bl	8002dc8 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800409a:	f7fe fe95 	bl	8002dc8 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e1b4      	b.n	8004416 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ac:	4b2b      	ldr	r3, [pc, #172]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b8:	4b28      	ldr	r3, [pc, #160]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	4925      	ldr	r1, [pc, #148]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	600b      	str	r3, [r1, #0]
 80040cc:	e015      	b.n	80040fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ce:	4b24      	ldr	r3, [pc, #144]	@ (8004160 <HAL_RCC_OscConfig+0x244>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fe fe78 	bl	8002dc8 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040dc:	f7fe fe74 	bl	8002dc8 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e193      	b.n	8004416 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ee:	4b1b      	ldr	r3, [pc, #108]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f0      	bne.n	80040dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b00      	cmp	r3, #0
 8004104:	d036      	beq.n	8004174 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d016      	beq.n	800413c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800410e:	4b15      	ldr	r3, [pc, #84]	@ (8004164 <HAL_RCC_OscConfig+0x248>)
 8004110:	2201      	movs	r2, #1
 8004112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004114:	f7fe fe58 	bl	8002dc8 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800411c:	f7fe fe54 	bl	8002dc8 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e173      	b.n	8004416 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800412e:	4b0b      	ldr	r3, [pc, #44]	@ (800415c <HAL_RCC_OscConfig+0x240>)
 8004130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0f0      	beq.n	800411c <HAL_RCC_OscConfig+0x200>
 800413a:	e01b      	b.n	8004174 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800413c:	4b09      	ldr	r3, [pc, #36]	@ (8004164 <HAL_RCC_OscConfig+0x248>)
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004142:	f7fe fe41 	bl	8002dc8 <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004148:	e00e      	b.n	8004168 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800414a:	f7fe fe3d 	bl	8002dc8 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d907      	bls.n	8004168 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e15c      	b.n	8004416 <HAL_RCC_OscConfig+0x4fa>
 800415c:	40023800 	.word	0x40023800
 8004160:	42470000 	.word	0x42470000
 8004164:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004168:	4b8a      	ldr	r3, [pc, #552]	@ (8004394 <HAL_RCC_OscConfig+0x478>)
 800416a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1ea      	bne.n	800414a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 8097 	beq.w	80042b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004182:	2300      	movs	r3, #0
 8004184:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004186:	4b83      	ldr	r3, [pc, #524]	@ (8004394 <HAL_RCC_OscConfig+0x478>)
 8004188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10f      	bne.n	80041b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	60bb      	str	r3, [r7, #8]
 8004196:	4b7f      	ldr	r3, [pc, #508]	@ (8004394 <HAL_RCC_OscConfig+0x478>)
 8004198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419a:	4a7e      	ldr	r2, [pc, #504]	@ (8004394 <HAL_RCC_OscConfig+0x478>)
 800419c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80041a2:	4b7c      	ldr	r3, [pc, #496]	@ (8004394 <HAL_RCC_OscConfig+0x478>)
 80041a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ae:	2301      	movs	r3, #1
 80041b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b2:	4b79      	ldr	r3, [pc, #484]	@ (8004398 <HAL_RCC_OscConfig+0x47c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d118      	bne.n	80041f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041be:	4b76      	ldr	r3, [pc, #472]	@ (8004398 <HAL_RCC_OscConfig+0x47c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a75      	ldr	r2, [pc, #468]	@ (8004398 <HAL_RCC_OscConfig+0x47c>)
 80041c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ca:	f7fe fdfd 	bl	8002dc8 <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d2:	f7fe fdf9 	bl	8002dc8 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e118      	b.n	8004416 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e4:	4b6c      	ldr	r3, [pc, #432]	@ (8004398 <HAL_RCC_OscConfig+0x47c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0f0      	beq.n	80041d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d106      	bne.n	8004206 <HAL_RCC_OscConfig+0x2ea>
 80041f8:	4b66      	ldr	r3, [pc, #408]	@ (8004394 <HAL_RCC_OscConfig+0x478>)
 80041fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041fc:	4a65      	ldr	r2, [pc, #404]	@ (8004394 <HAL_RCC_OscConfig+0x478>)
 80041fe:	f043 0301 	orr.w	r3, r3, #1
 8004202:	6713      	str	r3, [r2, #112]	@ 0x70
 8004204:	e01c      	b.n	8004240 <HAL_RCC_OscConfig+0x324>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	2b05      	cmp	r3, #5
 800420c:	d10c      	bne.n	8004228 <HAL_RCC_OscConfig+0x30c>
 800420e:	4b61      	ldr	r3, [pc, #388]	@ (8004394 <HAL_RCC_OscConfig+0x478>)
 8004210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004212:	4a60      	ldr	r2, [pc, #384]	@ (8004394 <HAL_RCC_OscConfig+0x478>)
 8004214:	f043 0304 	orr.w	r3, r3, #4
 8004218:	6713      	str	r3, [r2, #112]	@ 0x70
 800421a:	4b5e      	ldr	r3, [pc, #376]	@ (8004394 <HAL_RCC_OscConfig+0x478>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800421e:	4a5d      	ldr	r2, [pc, #372]	@ (8004394 <HAL_RCC_OscConfig+0x478>)
 8004220:	f043 0301 	orr.w	r3, r3, #1
 8004224:	6713      	str	r3, [r2, #112]	@ 0x70
 8004226:	e00b      	b.n	8004240 <HAL_RCC_OscConfig+0x324>
 8004228:	4b5a      	ldr	r3, [pc, #360]	@ (8004394 <HAL_RCC_OscConfig+0x478>)
 800422a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800422c:	4a59      	ldr	r2, [pc, #356]	@ (8004394 <HAL_RCC_OscConfig+0x478>)
 800422e:	f023 0301 	bic.w	r3, r3, #1
 8004232:	6713      	str	r3, [r2, #112]	@ 0x70
 8004234:	4b57      	ldr	r3, [pc, #348]	@ (8004394 <HAL_RCC_OscConfig+0x478>)
 8004236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004238:	4a56      	ldr	r2, [pc, #344]	@ (8004394 <HAL_RCC_OscConfig+0x478>)
 800423a:	f023 0304 	bic.w	r3, r3, #4
 800423e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d015      	beq.n	8004274 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004248:	f7fe fdbe 	bl	8002dc8 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424e:	e00a      	b.n	8004266 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004250:	f7fe fdba 	bl	8002dc8 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800425e:	4293      	cmp	r3, r2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e0d7      	b.n	8004416 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004266:	4b4b      	ldr	r3, [pc, #300]	@ (8004394 <HAL_RCC_OscConfig+0x478>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0ee      	beq.n	8004250 <HAL_RCC_OscConfig+0x334>
 8004272:	e014      	b.n	800429e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004274:	f7fe fda8 	bl	8002dc8 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800427a:	e00a      	b.n	8004292 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800427c:	f7fe fda4 	bl	8002dc8 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800428a:	4293      	cmp	r3, r2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e0c1      	b.n	8004416 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004292:	4b40      	ldr	r3, [pc, #256]	@ (8004394 <HAL_RCC_OscConfig+0x478>)
 8004294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1ee      	bne.n	800427c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800429e:	7dfb      	ldrb	r3, [r7, #23]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d105      	bne.n	80042b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004394 <HAL_RCC_OscConfig+0x478>)
 80042a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a8:	4a3a      	ldr	r2, [pc, #232]	@ (8004394 <HAL_RCC_OscConfig+0x478>)
 80042aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 80ad 	beq.w	8004414 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042ba:	4b36      	ldr	r3, [pc, #216]	@ (8004394 <HAL_RCC_OscConfig+0x478>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 030c 	and.w	r3, r3, #12
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d060      	beq.n	8004388 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d145      	bne.n	800435a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ce:	4b33      	ldr	r3, [pc, #204]	@ (800439c <HAL_RCC_OscConfig+0x480>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d4:	f7fe fd78 	bl	8002dc8 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042dc:	f7fe fd74 	bl	8002dc8 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e093      	b.n	8004416 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ee:	4b29      	ldr	r3, [pc, #164]	@ (8004394 <HAL_RCC_OscConfig+0x478>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f0      	bne.n	80042dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69da      	ldr	r2, [r3, #28]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004308:	019b      	lsls	r3, r3, #6
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004310:	085b      	lsrs	r3, r3, #1
 8004312:	3b01      	subs	r3, #1
 8004314:	041b      	lsls	r3, r3, #16
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431c:	061b      	lsls	r3, r3, #24
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004324:	071b      	lsls	r3, r3, #28
 8004326:	491b      	ldr	r1, [pc, #108]	@ (8004394 <HAL_RCC_OscConfig+0x478>)
 8004328:	4313      	orrs	r3, r2
 800432a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800432c:	4b1b      	ldr	r3, [pc, #108]	@ (800439c <HAL_RCC_OscConfig+0x480>)
 800432e:	2201      	movs	r2, #1
 8004330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004332:	f7fe fd49 	bl	8002dc8 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800433a:	f7fe fd45 	bl	8002dc8 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e064      	b.n	8004416 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434c:	4b11      	ldr	r3, [pc, #68]	@ (8004394 <HAL_RCC_OscConfig+0x478>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0f0      	beq.n	800433a <HAL_RCC_OscConfig+0x41e>
 8004358:	e05c      	b.n	8004414 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435a:	4b10      	ldr	r3, [pc, #64]	@ (800439c <HAL_RCC_OscConfig+0x480>)
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004360:	f7fe fd32 	bl	8002dc8 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004368:	f7fe fd2e 	bl	8002dc8 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e04d      	b.n	8004416 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437a:	4b06      	ldr	r3, [pc, #24]	@ (8004394 <HAL_RCC_OscConfig+0x478>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0x44c>
 8004386:	e045      	b.n	8004414 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d107      	bne.n	80043a0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e040      	b.n	8004416 <HAL_RCC_OscConfig+0x4fa>
 8004394:	40023800 	.word	0x40023800
 8004398:	40007000 	.word	0x40007000
 800439c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004420 <HAL_RCC_OscConfig+0x504>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d030      	beq.n	8004410 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d129      	bne.n	8004410 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d122      	bne.n	8004410 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80043d0:	4013      	ands	r3, r2
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80043d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043d8:	4293      	cmp	r3, r2
 80043da:	d119      	bne.n	8004410 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e6:	085b      	lsrs	r3, r3, #1
 80043e8:	3b01      	subs	r3, #1
 80043ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d10f      	bne.n	8004410 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d107      	bne.n	8004410 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800440c:	429a      	cmp	r2, r3
 800440e:	d001      	beq.n	8004414 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e000      	b.n	8004416 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	40023800 	.word	0x40023800

08004424 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e07b      	b.n	800452e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443a:	2b00      	cmp	r3, #0
 800443c:	d108      	bne.n	8004450 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004446:	d009      	beq.n	800445c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	61da      	str	r2, [r3, #28]
 800444e:	e005      	b.n	800445c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7fe f890 	bl	800259c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004492:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80044a4:	431a      	orrs	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e0:	ea42 0103 	orr.w	r1, r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	0c1b      	lsrs	r3, r3, #16
 80044fa:	f003 0104 	and.w	r1, r3, #4
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004502:	f003 0210 	and.w	r2, r3, #16
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69da      	ldr	r2, [r3, #28]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800451c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b088      	sub	sp, #32
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	603b      	str	r3, [r7, #0]
 8004542:	4613      	mov	r3, r2
 8004544:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_SPI_Transmit+0x22>
 8004554:	2302      	movs	r3, #2
 8004556:	e12d      	b.n	80047b4 <HAL_SPI_Transmit+0x27e>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004560:	f7fe fc32 	bl	8002dc8 <HAL_GetTick>
 8004564:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004566:	88fb      	ldrh	r3, [r7, #6]
 8004568:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b01      	cmp	r3, #1
 8004574:	d002      	beq.n	800457c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004576:	2302      	movs	r3, #2
 8004578:	77fb      	strb	r3, [r7, #31]
    goto error;
 800457a:	e116      	b.n	80047aa <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <HAL_SPI_Transmit+0x52>
 8004582:	88fb      	ldrh	r3, [r7, #6]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d102      	bne.n	800458e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800458c:	e10d      	b.n	80047aa <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2203      	movs	r2, #3
 8004592:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	88fa      	ldrh	r2, [r7, #6]
 80045a6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	88fa      	ldrh	r2, [r7, #6]
 80045ac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045d4:	d10f      	bne.n	80045f6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004600:	2b40      	cmp	r3, #64	@ 0x40
 8004602:	d007      	beq.n	8004614 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004612:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800461c:	d14f      	bne.n	80046be <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <HAL_SPI_Transmit+0xf6>
 8004626:	8afb      	ldrh	r3, [r7, #22]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d142      	bne.n	80046b2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004630:	881a      	ldrh	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463c:	1c9a      	adds	r2, r3, #2
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004650:	e02f      	b.n	80046b2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b02      	cmp	r3, #2
 800465e:	d112      	bne.n	8004686 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004664:	881a      	ldrh	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004670:	1c9a      	adds	r2, r3, #2
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800467a:	b29b      	uxth	r3, r3
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004684:	e015      	b.n	80046b2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004686:	f7fe fb9f 	bl	8002dc8 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d803      	bhi.n	800469e <HAL_SPI_Transmit+0x168>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469c:	d102      	bne.n	80046a4 <HAL_SPI_Transmit+0x16e>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d106      	bne.n	80046b2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80046b0:	e07b      	b.n	80047aa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1ca      	bne.n	8004652 <HAL_SPI_Transmit+0x11c>
 80046bc:	e050      	b.n	8004760 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <HAL_SPI_Transmit+0x196>
 80046c6:	8afb      	ldrh	r3, [r7, #22]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d144      	bne.n	8004756 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	330c      	adds	r3, #12
 80046d6:	7812      	ldrb	r2, [r2, #0]
 80046d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80046f2:	e030      	b.n	8004756 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d113      	bne.n	800472a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	330c      	adds	r3, #12
 800470c:	7812      	ldrb	r2, [r2, #0]
 800470e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004728:	e015      	b.n	8004756 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800472a:	f7fe fb4d 	bl	8002dc8 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d803      	bhi.n	8004742 <HAL_SPI_Transmit+0x20c>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d102      	bne.n	8004748 <HAL_SPI_Transmit+0x212>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d106      	bne.n	8004756 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004754:	e029      	b.n	80047aa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800475a:	b29b      	uxth	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1c9      	bne.n	80046f4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	6839      	ldr	r1, [r7, #0]
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 f8b1 	bl	80048cc <SPI_EndRxTxTransaction>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2220      	movs	r2, #32
 8004774:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10a      	bne.n	8004794 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800477e:	2300      	movs	r3, #0
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	613b      	str	r3, [r7, #16]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	613b      	str	r3, [r7, #16]
 8004792:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004798:	2b00      	cmp	r3, #0
 800479a:	d002      	beq.n	80047a2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	77fb      	strb	r3, [r7, #31]
 80047a0:	e003      	b.n	80047aa <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80047b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3720      	adds	r7, #32
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	603b      	str	r3, [r7, #0]
 80047c8:	4613      	mov	r3, r2
 80047ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047cc:	f7fe fafc 	bl	8002dc8 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d4:	1a9b      	subs	r3, r3, r2
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	4413      	add	r3, r2
 80047da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047dc:	f7fe faf4 	bl	8002dc8 <HAL_GetTick>
 80047e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047e2:	4b39      	ldr	r3, [pc, #228]	@ (80048c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	015b      	lsls	r3, r3, #5
 80047e8:	0d1b      	lsrs	r3, r3, #20
 80047ea:	69fa      	ldr	r2, [r7, #28]
 80047ec:	fb02 f303 	mul.w	r3, r2, r3
 80047f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047f2:	e054      	b.n	800489e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fa:	d050      	beq.n	800489e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047fc:	f7fe fae4 	bl	8002dc8 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	69fa      	ldr	r2, [r7, #28]
 8004808:	429a      	cmp	r2, r3
 800480a:	d902      	bls.n	8004812 <SPI_WaitFlagStateUntilTimeout+0x56>
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d13d      	bne.n	800488e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004820:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800482a:	d111      	bne.n	8004850 <SPI_WaitFlagStateUntilTimeout+0x94>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004834:	d004      	beq.n	8004840 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800483e:	d107      	bne.n	8004850 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800484e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004854:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004858:	d10f      	bne.n	800487a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004878:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e017      	b.n	80048be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	3b01      	subs	r3, #1
 800489c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	4013      	ands	r3, r2
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	bf0c      	ite	eq
 80048ae:	2301      	moveq	r3, #1
 80048b0:	2300      	movne	r3, #0
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	461a      	mov	r2, r3
 80048b6:	79fb      	ldrb	r3, [r7, #7]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d19b      	bne.n	80047f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3720      	adds	r7, #32
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	20000008 	.word	0x20000008

080048cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b088      	sub	sp, #32
 80048d0:	af02      	add	r7, sp, #8
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2201      	movs	r2, #1
 80048e0:	2102      	movs	r1, #2
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f7ff ff6a 	bl	80047bc <SPI_WaitFlagStateUntilTimeout>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d007      	beq.n	80048fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f2:	f043 0220 	orr.w	r2, r3, #32
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e032      	b.n	8004964 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80048fe:	4b1b      	ldr	r3, [pc, #108]	@ (800496c <SPI_EndRxTxTransaction+0xa0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a1b      	ldr	r2, [pc, #108]	@ (8004970 <SPI_EndRxTxTransaction+0xa4>)
 8004904:	fba2 2303 	umull	r2, r3, r2, r3
 8004908:	0d5b      	lsrs	r3, r3, #21
 800490a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800490e:	fb02 f303 	mul.w	r3, r2, r3
 8004912:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800491c:	d112      	bne.n	8004944 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2200      	movs	r2, #0
 8004926:	2180      	movs	r1, #128	@ 0x80
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f7ff ff47 	bl	80047bc <SPI_WaitFlagStateUntilTimeout>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d016      	beq.n	8004962 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004938:	f043 0220 	orr.w	r2, r3, #32
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e00f      	b.n	8004964 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00a      	beq.n	8004960 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	3b01      	subs	r3, #1
 800494e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800495a:	2b80      	cmp	r3, #128	@ 0x80
 800495c:	d0f2      	beq.n	8004944 <SPI_EndRxTxTransaction+0x78>
 800495e:	e000      	b.n	8004962 <SPI_EndRxTxTransaction+0x96>
        break;
 8004960:	bf00      	nop
  }

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20000008 	.word	0x20000008
 8004970:	165e9f81 	.word	0x165e9f81

08004974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e041      	b.n	8004a0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7fe f818 	bl	80029d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3304      	adds	r3, #4
 80049b0:	4619      	mov	r1, r3
 80049b2:	4610      	mov	r0, r2
 80049b4:	f000 fad8 	bl	8004f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b082      	sub	sp, #8
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e041      	b.n	8004aa8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d106      	bne.n	8004a3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f839 	bl	8004ab0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2202      	movs	r2, #2
 8004a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4610      	mov	r0, r2
 8004a52:	f000 fa89 	bl	8004f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d109      	bne.n	8004ae8 <HAL_TIM_PWM_Start+0x24>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	bf14      	ite	ne
 8004ae0:	2301      	movne	r3, #1
 8004ae2:	2300      	moveq	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	e022      	b.n	8004b2e <HAL_TIM_PWM_Start+0x6a>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d109      	bne.n	8004b02 <HAL_TIM_PWM_Start+0x3e>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	bf14      	ite	ne
 8004afa:	2301      	movne	r3, #1
 8004afc:	2300      	moveq	r3, #0
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	e015      	b.n	8004b2e <HAL_TIM_PWM_Start+0x6a>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d109      	bne.n	8004b1c <HAL_TIM_PWM_Start+0x58>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	bf14      	ite	ne
 8004b14:	2301      	movne	r3, #1
 8004b16:	2300      	moveq	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	e008      	b.n	8004b2e <HAL_TIM_PWM_Start+0x6a>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	bf14      	ite	ne
 8004b28:	2301      	movne	r3, #1
 8004b2a:	2300      	moveq	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e07c      	b.n	8004c30 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d104      	bne.n	8004b46 <HAL_TIM_PWM_Start+0x82>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b44:	e013      	b.n	8004b6e <HAL_TIM_PWM_Start+0xaa>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d104      	bne.n	8004b56 <HAL_TIM_PWM_Start+0x92>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b54:	e00b      	b.n	8004b6e <HAL_TIM_PWM_Start+0xaa>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d104      	bne.n	8004b66 <HAL_TIM_PWM_Start+0xa2>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b64:	e003      	b.n	8004b6e <HAL_TIM_PWM_Start+0xaa>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2201      	movs	r2, #1
 8004b74:	6839      	ldr	r1, [r7, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fcec 	bl	8005554 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a2d      	ldr	r2, [pc, #180]	@ (8004c38 <HAL_TIM_PWM_Start+0x174>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d004      	beq.n	8004b90 <HAL_TIM_PWM_Start+0xcc>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a2c      	ldr	r2, [pc, #176]	@ (8004c3c <HAL_TIM_PWM_Start+0x178>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d101      	bne.n	8004b94 <HAL_TIM_PWM_Start+0xd0>
 8004b90:	2301      	movs	r3, #1
 8004b92:	e000      	b.n	8004b96 <HAL_TIM_PWM_Start+0xd2>
 8004b94:	2300      	movs	r3, #0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d007      	beq.n	8004baa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ba8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a22      	ldr	r2, [pc, #136]	@ (8004c38 <HAL_TIM_PWM_Start+0x174>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d022      	beq.n	8004bfa <HAL_TIM_PWM_Start+0x136>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bbc:	d01d      	beq.n	8004bfa <HAL_TIM_PWM_Start+0x136>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8004c40 <HAL_TIM_PWM_Start+0x17c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d018      	beq.n	8004bfa <HAL_TIM_PWM_Start+0x136>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8004c44 <HAL_TIM_PWM_Start+0x180>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <HAL_TIM_PWM_Start+0x136>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8004c48 <HAL_TIM_PWM_Start+0x184>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00e      	beq.n	8004bfa <HAL_TIM_PWM_Start+0x136>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a16      	ldr	r2, [pc, #88]	@ (8004c3c <HAL_TIM_PWM_Start+0x178>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d009      	beq.n	8004bfa <HAL_TIM_PWM_Start+0x136>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a18      	ldr	r2, [pc, #96]	@ (8004c4c <HAL_TIM_PWM_Start+0x188>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d004      	beq.n	8004bfa <HAL_TIM_PWM_Start+0x136>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a16      	ldr	r2, [pc, #88]	@ (8004c50 <HAL_TIM_PWM_Start+0x18c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d111      	bne.n	8004c1e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2b06      	cmp	r3, #6
 8004c0a:	d010      	beq.n	8004c2e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0201 	orr.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1c:	e007      	b.n	8004c2e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f042 0201 	orr.w	r2, r2, #1
 8004c2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40010000 	.word	0x40010000
 8004c3c:	40010400 	.word	0x40010400
 8004c40:	40000400 	.word	0x40000400
 8004c44:	40000800 	.word	0x40000800
 8004c48:	40000c00 	.word	0x40000c00
 8004c4c:	40014000 	.word	0x40014000
 8004c50:	40001800 	.word	0x40001800

08004c54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e0ae      	b.n	8004dd0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b0c      	cmp	r3, #12
 8004c7e:	f200 809f 	bhi.w	8004dc0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c82:	a201      	add	r2, pc, #4	@ (adr r2, 8004c88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c88:	08004cbd 	.word	0x08004cbd
 8004c8c:	08004dc1 	.word	0x08004dc1
 8004c90:	08004dc1 	.word	0x08004dc1
 8004c94:	08004dc1 	.word	0x08004dc1
 8004c98:	08004cfd 	.word	0x08004cfd
 8004c9c:	08004dc1 	.word	0x08004dc1
 8004ca0:	08004dc1 	.word	0x08004dc1
 8004ca4:	08004dc1 	.word	0x08004dc1
 8004ca8:	08004d3f 	.word	0x08004d3f
 8004cac:	08004dc1 	.word	0x08004dc1
 8004cb0:	08004dc1 	.word	0x08004dc1
 8004cb4:	08004dc1 	.word	0x08004dc1
 8004cb8:	08004d7f 	.word	0x08004d7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68b9      	ldr	r1, [r7, #8]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 f9fc 	bl	80050c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699a      	ldr	r2, [r3, #24]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0208 	orr.w	r2, r2, #8
 8004cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699a      	ldr	r2, [r3, #24]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0204 	bic.w	r2, r2, #4
 8004ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6999      	ldr	r1, [r3, #24]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	691a      	ldr	r2, [r3, #16]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	619a      	str	r2, [r3, #24]
      break;
 8004cfa:	e064      	b.n	8004dc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 fa4c 	bl	80051a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699a      	ldr	r2, [r3, #24]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699a      	ldr	r2, [r3, #24]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6999      	ldr	r1, [r3, #24]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	021a      	lsls	r2, r3, #8
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	619a      	str	r2, [r3, #24]
      break;
 8004d3c:	e043      	b.n	8004dc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 faa1 	bl	800528c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69da      	ldr	r2, [r3, #28]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f042 0208 	orr.w	r2, r2, #8
 8004d58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69da      	ldr	r2, [r3, #28]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0204 	bic.w	r2, r2, #4
 8004d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69d9      	ldr	r1, [r3, #28]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	61da      	str	r2, [r3, #28]
      break;
 8004d7c:	e023      	b.n	8004dc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68b9      	ldr	r1, [r7, #8]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 faf5 	bl	8005374 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69da      	ldr	r2, [r3, #28]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69da      	ldr	r2, [r3, #28]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	69d9      	ldr	r1, [r3, #28]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	021a      	lsls	r2, r3, #8
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	61da      	str	r2, [r3, #28]
      break;
 8004dbe:	e002      	b.n	8004dc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8004dc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3718      	adds	r7, #24
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <HAL_TIM_ConfigClockSource+0x1c>
 8004df0:	2302      	movs	r3, #2
 8004df2:	e0b4      	b.n	8004f5e <HAL_TIM_ConfigClockSource+0x186>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004e12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e2c:	d03e      	beq.n	8004eac <HAL_TIM_ConfigClockSource+0xd4>
 8004e2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e32:	f200 8087 	bhi.w	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
 8004e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e3a:	f000 8086 	beq.w	8004f4a <HAL_TIM_ConfigClockSource+0x172>
 8004e3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e42:	d87f      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
 8004e44:	2b70      	cmp	r3, #112	@ 0x70
 8004e46:	d01a      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0xa6>
 8004e48:	2b70      	cmp	r3, #112	@ 0x70
 8004e4a:	d87b      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
 8004e4c:	2b60      	cmp	r3, #96	@ 0x60
 8004e4e:	d050      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x11a>
 8004e50:	2b60      	cmp	r3, #96	@ 0x60
 8004e52:	d877      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
 8004e54:	2b50      	cmp	r3, #80	@ 0x50
 8004e56:	d03c      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0xfa>
 8004e58:	2b50      	cmp	r3, #80	@ 0x50
 8004e5a:	d873      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
 8004e5c:	2b40      	cmp	r3, #64	@ 0x40
 8004e5e:	d058      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x13a>
 8004e60:	2b40      	cmp	r3, #64	@ 0x40
 8004e62:	d86f      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
 8004e64:	2b30      	cmp	r3, #48	@ 0x30
 8004e66:	d064      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x15a>
 8004e68:	2b30      	cmp	r3, #48	@ 0x30
 8004e6a:	d86b      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d060      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x15a>
 8004e70:	2b20      	cmp	r3, #32
 8004e72:	d867      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d05c      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x15a>
 8004e78:	2b10      	cmp	r3, #16
 8004e7a:	d05a      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x15a>
 8004e7c:	e062      	b.n	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e8e:	f000 fb41 	bl	8005514 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ea0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	609a      	str	r2, [r3, #8]
      break;
 8004eaa:	e04f      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ebc:	f000 fb2a 	bl	8005514 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ece:	609a      	str	r2, [r3, #8]
      break;
 8004ed0:	e03c      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f000 fa9e 	bl	8005420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2150      	movs	r1, #80	@ 0x50
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 faf7 	bl	80054de <TIM_ITRx_SetConfig>
      break;
 8004ef0:	e02c      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004efe:	461a      	mov	r2, r3
 8004f00:	f000 fabd 	bl	800547e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2160      	movs	r1, #96	@ 0x60
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fae7 	bl	80054de <TIM_ITRx_SetConfig>
      break;
 8004f10:	e01c      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f000 fa7e 	bl	8005420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2140      	movs	r1, #64	@ 0x40
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fad7 	bl	80054de <TIM_ITRx_SetConfig>
      break;
 8004f30:	e00c      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	f000 face 	bl	80054de <TIM_ITRx_SetConfig>
      break;
 8004f42:	e003      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	73fb      	strb	r3, [r7, #15]
      break;
 8004f48:	e000      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a46      	ldr	r2, [pc, #280]	@ (8005094 <TIM_Base_SetConfig+0x12c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d013      	beq.n	8004fa8 <TIM_Base_SetConfig+0x40>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f86:	d00f      	beq.n	8004fa8 <TIM_Base_SetConfig+0x40>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a43      	ldr	r2, [pc, #268]	@ (8005098 <TIM_Base_SetConfig+0x130>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00b      	beq.n	8004fa8 <TIM_Base_SetConfig+0x40>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a42      	ldr	r2, [pc, #264]	@ (800509c <TIM_Base_SetConfig+0x134>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d007      	beq.n	8004fa8 <TIM_Base_SetConfig+0x40>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a41      	ldr	r2, [pc, #260]	@ (80050a0 <TIM_Base_SetConfig+0x138>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d003      	beq.n	8004fa8 <TIM_Base_SetConfig+0x40>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a40      	ldr	r2, [pc, #256]	@ (80050a4 <TIM_Base_SetConfig+0x13c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d108      	bne.n	8004fba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a35      	ldr	r2, [pc, #212]	@ (8005094 <TIM_Base_SetConfig+0x12c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d02b      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fc8:	d027      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a32      	ldr	r2, [pc, #200]	@ (8005098 <TIM_Base_SetConfig+0x130>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d023      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a31      	ldr	r2, [pc, #196]	@ (800509c <TIM_Base_SetConfig+0x134>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d01f      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a30      	ldr	r2, [pc, #192]	@ (80050a0 <TIM_Base_SetConfig+0x138>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d01b      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a2f      	ldr	r2, [pc, #188]	@ (80050a4 <TIM_Base_SetConfig+0x13c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d017      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a2e      	ldr	r2, [pc, #184]	@ (80050a8 <TIM_Base_SetConfig+0x140>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d013      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a2d      	ldr	r2, [pc, #180]	@ (80050ac <TIM_Base_SetConfig+0x144>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00f      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a2c      	ldr	r2, [pc, #176]	@ (80050b0 <TIM_Base_SetConfig+0x148>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00b      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a2b      	ldr	r2, [pc, #172]	@ (80050b4 <TIM_Base_SetConfig+0x14c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d007      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a2a      	ldr	r2, [pc, #168]	@ (80050b8 <TIM_Base_SetConfig+0x150>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d003      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a29      	ldr	r2, [pc, #164]	@ (80050bc <TIM_Base_SetConfig+0x154>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d108      	bne.n	800502c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a10      	ldr	r2, [pc, #64]	@ (8005094 <TIM_Base_SetConfig+0x12c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d003      	beq.n	8005060 <TIM_Base_SetConfig+0xf8>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a12      	ldr	r2, [pc, #72]	@ (80050a4 <TIM_Base_SetConfig+0x13c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d103      	bne.n	8005068 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b01      	cmp	r3, #1
 8005078:	d105      	bne.n	8005086 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f023 0201 	bic.w	r2, r3, #1
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	611a      	str	r2, [r3, #16]
  }
}
 8005086:	bf00      	nop
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40010000 	.word	0x40010000
 8005098:	40000400 	.word	0x40000400
 800509c:	40000800 	.word	0x40000800
 80050a0:	40000c00 	.word	0x40000c00
 80050a4:	40010400 	.word	0x40010400
 80050a8:	40014000 	.word	0x40014000
 80050ac:	40014400 	.word	0x40014400
 80050b0:	40014800 	.word	0x40014800
 80050b4:	40001800 	.word	0x40001800
 80050b8:	40001c00 	.word	0x40001c00
 80050bc:	40002000 	.word	0x40002000

080050c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	f023 0201 	bic.w	r2, r3, #1
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0303 	bic.w	r3, r3, #3
 80050f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f023 0302 	bic.w	r3, r3, #2
 8005108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4313      	orrs	r3, r2
 8005112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a20      	ldr	r2, [pc, #128]	@ (8005198 <TIM_OC1_SetConfig+0xd8>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d003      	beq.n	8005124 <TIM_OC1_SetConfig+0x64>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a1f      	ldr	r2, [pc, #124]	@ (800519c <TIM_OC1_SetConfig+0xdc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d10c      	bne.n	800513e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f023 0308 	bic.w	r3, r3, #8
 800512a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f023 0304 	bic.w	r3, r3, #4
 800513c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a15      	ldr	r2, [pc, #84]	@ (8005198 <TIM_OC1_SetConfig+0xd8>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d003      	beq.n	800514e <TIM_OC1_SetConfig+0x8e>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a14      	ldr	r2, [pc, #80]	@ (800519c <TIM_OC1_SetConfig+0xdc>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d111      	bne.n	8005172 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800515c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	4313      	orrs	r3, r2
 8005166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4313      	orrs	r3, r2
 8005170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	621a      	str	r2, [r3, #32]
}
 800518c:	bf00      	nop
 800518e:	371c      	adds	r7, #28
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	40010000 	.word	0x40010000
 800519c:	40010400 	.word	0x40010400

080051a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	f023 0210 	bic.w	r2, r3, #16
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	021b      	lsls	r3, r3, #8
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f023 0320 	bic.w	r3, r3, #32
 80051ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a22      	ldr	r2, [pc, #136]	@ (8005284 <TIM_OC2_SetConfig+0xe4>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d003      	beq.n	8005208 <TIM_OC2_SetConfig+0x68>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a21      	ldr	r2, [pc, #132]	@ (8005288 <TIM_OC2_SetConfig+0xe8>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d10d      	bne.n	8005224 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800520e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005222:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a17      	ldr	r2, [pc, #92]	@ (8005284 <TIM_OC2_SetConfig+0xe4>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d003      	beq.n	8005234 <TIM_OC2_SetConfig+0x94>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a16      	ldr	r2, [pc, #88]	@ (8005288 <TIM_OC2_SetConfig+0xe8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d113      	bne.n	800525c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800523a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005242:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	621a      	str	r2, [r3, #32]
}
 8005276:	bf00      	nop
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	40010000 	.word	0x40010000
 8005288:	40010400 	.word	0x40010400

0800528c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 0303 	bic.w	r3, r3, #3
 80052c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	021b      	lsls	r3, r3, #8
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	4313      	orrs	r3, r2
 80052e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a21      	ldr	r2, [pc, #132]	@ (800536c <TIM_OC3_SetConfig+0xe0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d003      	beq.n	80052f2 <TIM_OC3_SetConfig+0x66>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a20      	ldr	r2, [pc, #128]	@ (8005370 <TIM_OC3_SetConfig+0xe4>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d10d      	bne.n	800530e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	021b      	lsls	r3, r3, #8
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	4313      	orrs	r3, r2
 8005304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800530c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a16      	ldr	r2, [pc, #88]	@ (800536c <TIM_OC3_SetConfig+0xe0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d003      	beq.n	800531e <TIM_OC3_SetConfig+0x92>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a15      	ldr	r2, [pc, #84]	@ (8005370 <TIM_OC3_SetConfig+0xe4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d113      	bne.n	8005346 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800532c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	4313      	orrs	r3, r2
 8005344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	621a      	str	r2, [r3, #32]
}
 8005360:	bf00      	nop
 8005362:	371c      	adds	r7, #28
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	40010000 	.word	0x40010000
 8005370:	40010400 	.word	0x40010400

08005374 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	021b      	lsls	r3, r3, #8
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	031b      	lsls	r3, r3, #12
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a12      	ldr	r2, [pc, #72]	@ (8005418 <TIM_OC4_SetConfig+0xa4>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d003      	beq.n	80053dc <TIM_OC4_SetConfig+0x68>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a11      	ldr	r2, [pc, #68]	@ (800541c <TIM_OC4_SetConfig+0xa8>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d109      	bne.n	80053f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	019b      	lsls	r3, r3, #6
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	621a      	str	r2, [r3, #32]
}
 800540a:	bf00      	nop
 800540c:	371c      	adds	r7, #28
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40010000 	.word	0x40010000
 800541c:	40010400 	.word	0x40010400

08005420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005420:	b480      	push	{r7}
 8005422:	b087      	sub	sp, #28
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	f023 0201 	bic.w	r2, r3, #1
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800544a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	4313      	orrs	r3, r2
 8005454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f023 030a 	bic.w	r3, r3, #10
 800545c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	621a      	str	r2, [r3, #32]
}
 8005472:	bf00      	nop
 8005474:	371c      	adds	r7, #28
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800547e:	b480      	push	{r7}
 8005480:	b087      	sub	sp, #28
 8005482:	af00      	add	r7, sp, #0
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	f023 0210 	bic.w	r2, r3, #16
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	031b      	lsls	r3, r3, #12
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80054ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	621a      	str	r2, [r3, #32]
}
 80054d2:	bf00      	nop
 80054d4:	371c      	adds	r7, #28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054de:	b480      	push	{r7}
 80054e0:	b085      	sub	sp, #20
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
 80054e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f043 0307 	orr.w	r3, r3, #7
 8005500:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	609a      	str	r2, [r3, #8]
}
 8005508:	bf00      	nop
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
 8005520:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800552e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	021a      	lsls	r2, r3, #8
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	431a      	orrs	r2, r3
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	4313      	orrs	r3, r2
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	4313      	orrs	r3, r2
 8005540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	609a      	str	r2, [r3, #8]
}
 8005548:	bf00      	nop
 800554a:	371c      	adds	r7, #28
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f003 031f 	and.w	r3, r3, #31
 8005566:	2201      	movs	r2, #1
 8005568:	fa02 f303 	lsl.w	r3, r2, r3
 800556c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6a1a      	ldr	r2, [r3, #32]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	43db      	mvns	r3, r3
 8005576:	401a      	ands	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a1a      	ldr	r2, [r3, #32]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f003 031f 	and.w	r3, r3, #31
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	fa01 f303 	lsl.w	r3, r1, r3
 800558c:	431a      	orrs	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	621a      	str	r2, [r3, #32]
}
 8005592:	bf00      	nop
 8005594:	371c      	adds	r7, #28
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
	...

080055a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e05a      	b.n	800566e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a21      	ldr	r2, [pc, #132]	@ (800567c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d022      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005604:	d01d      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a1d      	ldr	r2, [pc, #116]	@ (8005680 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d018      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a1b      	ldr	r2, [pc, #108]	@ (8005684 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d013      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a1a      	ldr	r2, [pc, #104]	@ (8005688 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d00e      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a18      	ldr	r2, [pc, #96]	@ (800568c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d009      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a17      	ldr	r2, [pc, #92]	@ (8005690 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d004      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a15      	ldr	r2, [pc, #84]	@ (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d10c      	bne.n	800565c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005648:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	4313      	orrs	r3, r2
 8005652:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	40010000 	.word	0x40010000
 8005680:	40000400 	.word	0x40000400
 8005684:	40000800 	.word	0x40000800
 8005688:	40000c00 	.word	0x40000c00
 800568c:	40010400 	.word	0x40010400
 8005690:	40014000 	.word	0x40014000
 8005694:	40001800 	.word	0x40001800

08005698 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e03d      	b.n	8005730 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	4313      	orrs	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e042      	b.n	80057d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d106      	bne.n	8005768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7fd f9ba 	bl	8002adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2224      	movs	r2, #36	@ 0x24
 800576c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800577e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 f82b 	bl	80057dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	691a      	ldr	r2, [r3, #16]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005794:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695a      	ldr	r2, [r3, #20]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68da      	ldr	r2, [r3, #12]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2220      	movs	r2, #32
 80057c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057e0:	b0c0      	sub	sp, #256	@ 0x100
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f8:	68d9      	ldr	r1, [r3, #12]
 80057fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	ea40 0301 	orr.w	r3, r0, r1
 8005804:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	431a      	orrs	r2, r3
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	431a      	orrs	r2, r3
 800581c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	4313      	orrs	r3, r2
 8005824:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005834:	f021 010c 	bic.w	r1, r1, #12
 8005838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005842:	430b      	orrs	r3, r1
 8005844:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005856:	6999      	ldr	r1, [r3, #24]
 8005858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	ea40 0301 	orr.w	r3, r0, r1
 8005862:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8005864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	4b95      	ldr	r3, [pc, #596]	@ (8005ac0 <UART_SetConfig+0x2e4>)
 800586c:	429a      	cmp	r2, r3
 800586e:	d011      	beq.n	8005894 <UART_SetConfig+0xb8>
 8005870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	4b93      	ldr	r3, [pc, #588]	@ (8005ac4 <UART_SetConfig+0x2e8>)
 8005878:	429a      	cmp	r2, r3
 800587a:	d00b      	beq.n	8005894 <UART_SetConfig+0xb8>
 800587c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	4b91      	ldr	r3, [pc, #580]	@ (8005ac8 <UART_SetConfig+0x2ec>)
 8005884:	429a      	cmp	r2, r3
 8005886:	d005      	beq.n	8005894 <UART_SetConfig+0xb8>
 8005888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4b8f      	ldr	r3, [pc, #572]	@ (8005acc <UART_SetConfig+0x2f0>)
 8005890:	429a      	cmp	r2, r3
 8005892:	d104      	bne.n	800589e <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005894:	f7fe f8a2 	bl	80039dc <HAL_RCC_GetPCLK2Freq>
 8005898:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800589c:	e003      	b.n	80058a6 <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800589e:	f7fe f889 	bl	80039b4 <HAL_RCC_GetPCLK1Freq>
 80058a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058b0:	f040 8110 	bne.w	8005ad4 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058b8:	2200      	movs	r2, #0
 80058ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80058c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80058c6:	4622      	mov	r2, r4
 80058c8:	462b      	mov	r3, r5
 80058ca:	1891      	adds	r1, r2, r2
 80058cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80058ce:	415b      	adcs	r3, r3
 80058d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80058d6:	4621      	mov	r1, r4
 80058d8:	eb12 0801 	adds.w	r8, r2, r1
 80058dc:	4629      	mov	r1, r5
 80058de:	eb43 0901 	adc.w	r9, r3, r1
 80058e2:	f04f 0200 	mov.w	r2, #0
 80058e6:	f04f 0300 	mov.w	r3, #0
 80058ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058f6:	4690      	mov	r8, r2
 80058f8:	4699      	mov	r9, r3
 80058fa:	4623      	mov	r3, r4
 80058fc:	eb18 0303 	adds.w	r3, r8, r3
 8005900:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005904:	462b      	mov	r3, r5
 8005906:	eb49 0303 	adc.w	r3, r9, r3
 800590a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800590e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800591a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800591e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005922:	460b      	mov	r3, r1
 8005924:	18db      	adds	r3, r3, r3
 8005926:	653b      	str	r3, [r7, #80]	@ 0x50
 8005928:	4613      	mov	r3, r2
 800592a:	eb42 0303 	adc.w	r3, r2, r3
 800592e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005930:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005934:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005938:	f7fb f9ce 	bl	8000cd8 <__aeabi_uldivmod>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4b63      	ldr	r3, [pc, #396]	@ (8005ad0 <UART_SetConfig+0x2f4>)
 8005942:	fba3 2302 	umull	r2, r3, r3, r2
 8005946:	095b      	lsrs	r3, r3, #5
 8005948:	011c      	lsls	r4, r3, #4
 800594a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800594e:	2200      	movs	r2, #0
 8005950:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005954:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005958:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800595c:	4642      	mov	r2, r8
 800595e:	464b      	mov	r3, r9
 8005960:	1891      	adds	r1, r2, r2
 8005962:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005964:	415b      	adcs	r3, r3
 8005966:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005968:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800596c:	4641      	mov	r1, r8
 800596e:	eb12 0a01 	adds.w	sl, r2, r1
 8005972:	4649      	mov	r1, r9
 8005974:	eb43 0b01 	adc.w	fp, r3, r1
 8005978:	f04f 0200 	mov.w	r2, #0
 800597c:	f04f 0300 	mov.w	r3, #0
 8005980:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005984:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005988:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800598c:	4692      	mov	sl, r2
 800598e:	469b      	mov	fp, r3
 8005990:	4643      	mov	r3, r8
 8005992:	eb1a 0303 	adds.w	r3, sl, r3
 8005996:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800599a:	464b      	mov	r3, r9
 800599c:	eb4b 0303 	adc.w	r3, fp, r3
 80059a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80059a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80059b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80059b8:	460b      	mov	r3, r1
 80059ba:	18db      	adds	r3, r3, r3
 80059bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80059be:	4613      	mov	r3, r2
 80059c0:	eb42 0303 	adc.w	r3, r2, r3
 80059c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80059c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80059ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80059ce:	f7fb f983 	bl	8000cd8 <__aeabi_uldivmod>
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	4611      	mov	r1, r2
 80059d8:	4b3d      	ldr	r3, [pc, #244]	@ (8005ad0 <UART_SetConfig+0x2f4>)
 80059da:	fba3 2301 	umull	r2, r3, r3, r1
 80059de:	095b      	lsrs	r3, r3, #5
 80059e0:	2264      	movs	r2, #100	@ 0x64
 80059e2:	fb02 f303 	mul.w	r3, r2, r3
 80059e6:	1acb      	subs	r3, r1, r3
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80059ee:	4b38      	ldr	r3, [pc, #224]	@ (8005ad0 <UART_SetConfig+0x2f4>)
 80059f0:	fba3 2302 	umull	r2, r3, r3, r2
 80059f4:	095b      	lsrs	r3, r3, #5
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80059fc:	441c      	add	r4, r3
 80059fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a02:	2200      	movs	r2, #0
 8005a04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a10:	4642      	mov	r2, r8
 8005a12:	464b      	mov	r3, r9
 8005a14:	1891      	adds	r1, r2, r2
 8005a16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a18:	415b      	adcs	r3, r3
 8005a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005a20:	4641      	mov	r1, r8
 8005a22:	1851      	adds	r1, r2, r1
 8005a24:	6339      	str	r1, [r7, #48]	@ 0x30
 8005a26:	4649      	mov	r1, r9
 8005a28:	414b      	adcs	r3, r1
 8005a2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a2c:	f04f 0200 	mov.w	r2, #0
 8005a30:	f04f 0300 	mov.w	r3, #0
 8005a34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005a38:	4659      	mov	r1, fp
 8005a3a:	00cb      	lsls	r3, r1, #3
 8005a3c:	4651      	mov	r1, sl
 8005a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a42:	4651      	mov	r1, sl
 8005a44:	00ca      	lsls	r2, r1, #3
 8005a46:	4610      	mov	r0, r2
 8005a48:	4619      	mov	r1, r3
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	4642      	mov	r2, r8
 8005a4e:	189b      	adds	r3, r3, r2
 8005a50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a54:	464b      	mov	r3, r9
 8005a56:	460a      	mov	r2, r1
 8005a58:	eb42 0303 	adc.w	r3, r2, r3
 8005a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005a6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005a70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a74:	460b      	mov	r3, r1
 8005a76:	18db      	adds	r3, r3, r3
 8005a78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	eb42 0303 	adc.w	r3, r2, r3
 8005a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005a8a:	f7fb f925 	bl	8000cd8 <__aeabi_uldivmod>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	4b0f      	ldr	r3, [pc, #60]	@ (8005ad0 <UART_SetConfig+0x2f4>)
 8005a94:	fba3 1302 	umull	r1, r3, r3, r2
 8005a98:	095b      	lsrs	r3, r3, #5
 8005a9a:	2164      	movs	r1, #100	@ 0x64
 8005a9c:	fb01 f303 	mul.w	r3, r1, r3
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	3332      	adds	r3, #50	@ 0x32
 8005aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8005ad0 <UART_SetConfig+0x2f4>)
 8005aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aac:	095b      	lsrs	r3, r3, #5
 8005aae:	f003 0207 	and.w	r2, r3, #7
 8005ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4422      	add	r2, r4
 8005aba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005abc:	e10a      	b.n	8005cd4 <UART_SetConfig+0x4f8>
 8005abe:	bf00      	nop
 8005ac0:	40011000 	.word	0x40011000
 8005ac4:	40011400 	.word	0x40011400
 8005ac8:	40011800 	.word	0x40011800
 8005acc:	40011c00 	.word	0x40011c00
 8005ad0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ade:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005ae2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005ae6:	4642      	mov	r2, r8
 8005ae8:	464b      	mov	r3, r9
 8005aea:	1891      	adds	r1, r2, r2
 8005aec:	6239      	str	r1, [r7, #32]
 8005aee:	415b      	adcs	r3, r3
 8005af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005af2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005af6:	4641      	mov	r1, r8
 8005af8:	1854      	adds	r4, r2, r1
 8005afa:	4649      	mov	r1, r9
 8005afc:	eb43 0501 	adc.w	r5, r3, r1
 8005b00:	f04f 0200 	mov.w	r2, #0
 8005b04:	f04f 0300 	mov.w	r3, #0
 8005b08:	00eb      	lsls	r3, r5, #3
 8005b0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b0e:	00e2      	lsls	r2, r4, #3
 8005b10:	4614      	mov	r4, r2
 8005b12:	461d      	mov	r5, r3
 8005b14:	4643      	mov	r3, r8
 8005b16:	18e3      	adds	r3, r4, r3
 8005b18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b1c:	464b      	mov	r3, r9
 8005b1e:	eb45 0303 	adc.w	r3, r5, r3
 8005b22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b36:	f04f 0200 	mov.w	r2, #0
 8005b3a:	f04f 0300 	mov.w	r3, #0
 8005b3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b42:	4629      	mov	r1, r5
 8005b44:	008b      	lsls	r3, r1, #2
 8005b46:	4621      	mov	r1, r4
 8005b48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b4c:	4621      	mov	r1, r4
 8005b4e:	008a      	lsls	r2, r1, #2
 8005b50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005b54:	f7fb f8c0 	bl	8000cd8 <__aeabi_uldivmod>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4b60      	ldr	r3, [pc, #384]	@ (8005ce0 <UART_SetConfig+0x504>)
 8005b5e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b62:	095b      	lsrs	r3, r3, #5
 8005b64:	011c      	lsls	r4, r3, #4
 8005b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005b74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005b78:	4642      	mov	r2, r8
 8005b7a:	464b      	mov	r3, r9
 8005b7c:	1891      	adds	r1, r2, r2
 8005b7e:	61b9      	str	r1, [r7, #24]
 8005b80:	415b      	adcs	r3, r3
 8005b82:	61fb      	str	r3, [r7, #28]
 8005b84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b88:	4641      	mov	r1, r8
 8005b8a:	1851      	adds	r1, r2, r1
 8005b8c:	6139      	str	r1, [r7, #16]
 8005b8e:	4649      	mov	r1, r9
 8005b90:	414b      	adcs	r3, r1
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	f04f 0200 	mov.w	r2, #0
 8005b98:	f04f 0300 	mov.w	r3, #0
 8005b9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ba0:	4659      	mov	r1, fp
 8005ba2:	00cb      	lsls	r3, r1, #3
 8005ba4:	4651      	mov	r1, sl
 8005ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005baa:	4651      	mov	r1, sl
 8005bac:	00ca      	lsls	r2, r1, #3
 8005bae:	4610      	mov	r0, r2
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	4642      	mov	r2, r8
 8005bb6:	189b      	adds	r3, r3, r2
 8005bb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005bbc:	464b      	mov	r3, r9
 8005bbe:	460a      	mov	r2, r1
 8005bc0:	eb42 0303 	adc.w	r3, r2, r3
 8005bc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005bd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	f04f 0300 	mov.w	r3, #0
 8005bdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005be0:	4649      	mov	r1, r9
 8005be2:	008b      	lsls	r3, r1, #2
 8005be4:	4641      	mov	r1, r8
 8005be6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bea:	4641      	mov	r1, r8
 8005bec:	008a      	lsls	r2, r1, #2
 8005bee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005bf2:	f7fb f871 	bl	8000cd8 <__aeabi_uldivmod>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	4611      	mov	r1, r2
 8005bfc:	4b38      	ldr	r3, [pc, #224]	@ (8005ce0 <UART_SetConfig+0x504>)
 8005bfe:	fba3 2301 	umull	r2, r3, r3, r1
 8005c02:	095b      	lsrs	r3, r3, #5
 8005c04:	2264      	movs	r2, #100	@ 0x64
 8005c06:	fb02 f303 	mul.w	r3, r2, r3
 8005c0a:	1acb      	subs	r3, r1, r3
 8005c0c:	011b      	lsls	r3, r3, #4
 8005c0e:	3332      	adds	r3, #50	@ 0x32
 8005c10:	4a33      	ldr	r2, [pc, #204]	@ (8005ce0 <UART_SetConfig+0x504>)
 8005c12:	fba2 2303 	umull	r2, r3, r2, r3
 8005c16:	095b      	lsrs	r3, r3, #5
 8005c18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c1c:	441c      	add	r4, r3
 8005c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c22:	2200      	movs	r2, #0
 8005c24:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c26:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005c2c:	4642      	mov	r2, r8
 8005c2e:	464b      	mov	r3, r9
 8005c30:	1891      	adds	r1, r2, r2
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	415b      	adcs	r3, r3
 8005c36:	60fb      	str	r3, [r7, #12]
 8005c38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c3c:	4641      	mov	r1, r8
 8005c3e:	1851      	adds	r1, r2, r1
 8005c40:	6039      	str	r1, [r7, #0]
 8005c42:	4649      	mov	r1, r9
 8005c44:	414b      	adcs	r3, r1
 8005c46:	607b      	str	r3, [r7, #4]
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	f04f 0300 	mov.w	r3, #0
 8005c50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c54:	4659      	mov	r1, fp
 8005c56:	00cb      	lsls	r3, r1, #3
 8005c58:	4651      	mov	r1, sl
 8005c5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c5e:	4651      	mov	r1, sl
 8005c60:	00ca      	lsls	r2, r1, #3
 8005c62:	4610      	mov	r0, r2
 8005c64:	4619      	mov	r1, r3
 8005c66:	4603      	mov	r3, r0
 8005c68:	4642      	mov	r2, r8
 8005c6a:	189b      	adds	r3, r3, r2
 8005c6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c6e:	464b      	mov	r3, r9
 8005c70:	460a      	mov	r2, r1
 8005c72:	eb42 0303 	adc.w	r3, r2, r3
 8005c76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c82:	667a      	str	r2, [r7, #100]	@ 0x64
 8005c84:	f04f 0200 	mov.w	r2, #0
 8005c88:	f04f 0300 	mov.w	r3, #0
 8005c8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005c90:	4649      	mov	r1, r9
 8005c92:	008b      	lsls	r3, r1, #2
 8005c94:	4641      	mov	r1, r8
 8005c96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c9a:	4641      	mov	r1, r8
 8005c9c:	008a      	lsls	r2, r1, #2
 8005c9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005ca2:	f7fb f819 	bl	8000cd8 <__aeabi_uldivmod>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	460b      	mov	r3, r1
 8005caa:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce0 <UART_SetConfig+0x504>)
 8005cac:	fba3 1302 	umull	r1, r3, r3, r2
 8005cb0:	095b      	lsrs	r3, r3, #5
 8005cb2:	2164      	movs	r1, #100	@ 0x64
 8005cb4:	fb01 f303 	mul.w	r3, r1, r3
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	011b      	lsls	r3, r3, #4
 8005cbc:	3332      	adds	r3, #50	@ 0x32
 8005cbe:	4a08      	ldr	r2, [pc, #32]	@ (8005ce0 <UART_SetConfig+0x504>)
 8005cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc4:	095b      	lsrs	r3, r3, #5
 8005cc6:	f003 020f 	and.w	r2, r3, #15
 8005cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4422      	add	r2, r4
 8005cd2:	609a      	str	r2, [r3, #8]
}
 8005cd4:	bf00      	nop
 8005cd6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ce0:	51eb851f 	.word	0x51eb851f

08005ce4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ce4:	b084      	sub	sp, #16
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	f107 001c 	add.w	r0, r7, #28
 8005cf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cf6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d123      	bne.n	8005d46 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d02:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005d12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d105      	bne.n	8005d3a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fa9a 	bl	8006274 <USB_CoreReset>
 8005d40:	4603      	mov	r3, r0
 8005d42:	73fb      	strb	r3, [r7, #15]
 8005d44:	e01b      	b.n	8005d7e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fa8e 	bl	8006274 <USB_CoreReset>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d5c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d106      	bne.n	8005d72 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d68:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005d70:	e005      	b.n	8005d7e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d76:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d7e:	7fbb      	ldrb	r3, [r7, #30]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d10b      	bne.n	8005d9c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f043 0206 	orr.w	r2, r3, #6
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f043 0220 	orr.w	r2, r3, #32
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005da8:	b004      	add	sp, #16
 8005daa:	4770      	bx	lr

08005dac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f023 0201 	bic.w	r2, r3, #1
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005dea:	78fb      	ldrb	r3, [r7, #3]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d115      	bne.n	8005e1c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005dfc:	200a      	movs	r0, #10
 8005dfe:	f7fc ffef 	bl	8002de0 <HAL_Delay>
      ms += 10U;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	330a      	adds	r3, #10
 8005e06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 fa25 	bl	8006258 <USB_GetMode>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d01e      	beq.n	8005e52 <USB_SetCurrentMode+0x84>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2bc7      	cmp	r3, #199	@ 0xc7
 8005e18:	d9f0      	bls.n	8005dfc <USB_SetCurrentMode+0x2e>
 8005e1a:	e01a      	b.n	8005e52 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e1c:	78fb      	ldrb	r3, [r7, #3]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d115      	bne.n	8005e4e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005e2e:	200a      	movs	r0, #10
 8005e30:	f7fc ffd6 	bl	8002de0 <HAL_Delay>
      ms += 10U;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	330a      	adds	r3, #10
 8005e38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fa0c 	bl	8006258 <USB_GetMode>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d005      	beq.n	8005e52 <USB_SetCurrentMode+0x84>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2bc7      	cmp	r3, #199	@ 0xc7
 8005e4a:	d9f0      	bls.n	8005e2e <USB_SetCurrentMode+0x60>
 8005e4c:	e001      	b.n	8005e52 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e005      	b.n	8005e5e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2bc8      	cmp	r3, #200	@ 0xc8
 8005e56:	d101      	bne.n	8005e5c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e000      	b.n	8005e5e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e68:	b084      	sub	sp, #16
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b086      	sub	sp, #24
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005e76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e82:	2300      	movs	r3, #0
 8005e84:	613b      	str	r3, [r7, #16]
 8005e86:	e009      	b.n	8005e9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	3340      	adds	r3, #64	@ 0x40
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	2200      	movs	r2, #0
 8005e94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	613b      	str	r3, [r7, #16]
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	2b0e      	cmp	r3, #14
 8005ea0:	d9f2      	bls.n	8005e88 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ea2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d11c      	bne.n	8005ee4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005eb8:	f043 0302 	orr.w	r3, r3, #2
 8005ebc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	e005      	b.n	8005ef0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	2300      	movs	r3, #0
 8005efa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005efc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d10d      	bne.n	8005f20 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d104      	bne.n	8005f16 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f968 	bl	80061e4 <USB_SetDevSpeed>
 8005f14:	e008      	b.n	8005f28 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f16:	2101      	movs	r1, #1
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f963 	bl	80061e4 <USB_SetDevSpeed>
 8005f1e:	e003      	b.n	8005f28 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f20:	2103      	movs	r1, #3
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f95e 	bl	80061e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f28:	2110      	movs	r1, #16
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f8fa 	bl	8006124 <USB_FlushTxFifo>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f924 	bl	8006188 <USB_FlushRxFifo>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f50:	461a      	mov	r2, r3
 8005f52:	2300      	movs	r3, #0
 8005f54:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	2300      	movs	r3, #0
 8005f60:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f68:	461a      	mov	r2, r3
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f6e:	2300      	movs	r3, #0
 8005f70:	613b      	str	r3, [r7, #16]
 8005f72:	e043      	b.n	8005ffc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f8a:	d118      	bne.n	8005fbe <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10a      	bne.n	8005fa8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	e013      	b.n	8005fd0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	e008      	b.n	8005fd0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fca:	461a      	mov	r2, r3
 8005fcc:	2300      	movs	r3, #0
 8005fce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fdc:	461a      	mov	r2, r3
 8005fde:	2300      	movs	r3, #0
 8005fe0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005ff4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	613b      	str	r3, [r7, #16]
 8005ffc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006000:	461a      	mov	r2, r3
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	4293      	cmp	r3, r2
 8006006:	d3b5      	bcc.n	8005f74 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006008:	2300      	movs	r3, #0
 800600a:	613b      	str	r3, [r7, #16]
 800600c:	e043      	b.n	8006096 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	015a      	lsls	r2, r3, #5
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	4413      	add	r3, r2
 8006016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006020:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006024:	d118      	bne.n	8006058 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10a      	bne.n	8006042 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006038:	461a      	mov	r2, r3
 800603a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	e013      	b.n	800606a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4413      	add	r3, r2
 800604a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800604e:	461a      	mov	r2, r3
 8006050:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	e008      	b.n	800606a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006064:	461a      	mov	r2, r3
 8006066:	2300      	movs	r3, #0
 8006068:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006076:	461a      	mov	r2, r3
 8006078:	2300      	movs	r3, #0
 800607a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006088:	461a      	mov	r2, r3
 800608a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800608e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	3301      	adds	r3, #1
 8006094:	613b      	str	r3, [r7, #16]
 8006096:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800609a:	461a      	mov	r2, r3
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	4293      	cmp	r3, r2
 80060a0:	d3b5      	bcc.n	800600e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060b4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80060c2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80060c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d105      	bne.n	80060d8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	f043 0210 	orr.w	r2, r3, #16
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	699a      	ldr	r2, [r3, #24]
 80060dc:	4b10      	ldr	r3, [pc, #64]	@ (8006120 <USB_DevInit+0x2b8>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80060e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d005      	beq.n	80060f8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	f043 0208 	orr.w	r2, r3, #8
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80060f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d107      	bne.n	8006110 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006108:	f043 0304 	orr.w	r3, r3, #4
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006110:	7dfb      	ldrb	r3, [r7, #23]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800611c:	b004      	add	sp, #16
 800611e:	4770      	bx	lr
 8006120:	803c3800 	.word	0x803c3800

08006124 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	3301      	adds	r3, #1
 8006136:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800613e:	d901      	bls.n	8006144 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e01b      	b.n	800617c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	2b00      	cmp	r3, #0
 800614a:	daf2      	bge.n	8006132 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	019b      	lsls	r3, r3, #6
 8006154:	f043 0220 	orr.w	r2, r3, #32
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	3301      	adds	r3, #1
 8006160:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006168:	d901      	bls.n	800616e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e006      	b.n	800617c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	f003 0320 	and.w	r3, r3, #32
 8006176:	2b20      	cmp	r3, #32
 8006178:	d0f0      	beq.n	800615c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	3301      	adds	r3, #1
 8006198:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061a0:	d901      	bls.n	80061a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e018      	b.n	80061d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	daf2      	bge.n	8006194 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2210      	movs	r2, #16
 80061b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	3301      	adds	r3, #1
 80061bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061c4:	d901      	bls.n	80061ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e006      	b.n	80061d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	f003 0310 	and.w	r3, r3, #16
 80061d2:	2b10      	cmp	r3, #16
 80061d4:	d0f0      	beq.n	80061b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	460b      	mov	r3, r1
 80061ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	78fb      	ldrb	r3, [r7, #3]
 80061fe:	68f9      	ldr	r1, [r7, #12]
 8006200:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006204:	4313      	orrs	r3, r2
 8006206:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006216:	b480      	push	{r7}
 8006218:	b085      	sub	sp, #20
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006230:	f023 0303 	bic.w	r3, r3, #3
 8006234:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006244:	f043 0302 	orr.w	r3, r3, #2
 8006248:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	f003 0301 	and.w	r3, r3, #1
}
 8006268:	4618      	mov	r0, r3
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	3301      	adds	r3, #1
 8006284:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800628c:	d901      	bls.n	8006292 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e01b      	b.n	80062ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	daf2      	bge.n	8006280 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	f043 0201 	orr.w	r2, r3, #1
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3301      	adds	r3, #1
 80062ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062b6:	d901      	bls.n	80062bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e006      	b.n	80062ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d0f0      	beq.n	80062aa <USB_CoreReset+0x36>

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
	...

080062d8 <malloc>:
 80062d8:	4b02      	ldr	r3, [pc, #8]	@ (80062e4 <malloc+0xc>)
 80062da:	4601      	mov	r1, r0
 80062dc:	6818      	ldr	r0, [r3, #0]
 80062de:	f000 b825 	b.w	800632c <_malloc_r>
 80062e2:	bf00      	nop
 80062e4:	20000020 	.word	0x20000020

080062e8 <sbrk_aligned>:
 80062e8:	b570      	push	{r4, r5, r6, lr}
 80062ea:	4e0f      	ldr	r6, [pc, #60]	@ (8006328 <sbrk_aligned+0x40>)
 80062ec:	460c      	mov	r4, r1
 80062ee:	6831      	ldr	r1, [r6, #0]
 80062f0:	4605      	mov	r5, r0
 80062f2:	b911      	cbnz	r1, 80062fa <sbrk_aligned+0x12>
 80062f4:	f001 f97c 	bl	80075f0 <_sbrk_r>
 80062f8:	6030      	str	r0, [r6, #0]
 80062fa:	4621      	mov	r1, r4
 80062fc:	4628      	mov	r0, r5
 80062fe:	f001 f977 	bl	80075f0 <_sbrk_r>
 8006302:	1c43      	adds	r3, r0, #1
 8006304:	d103      	bne.n	800630e <sbrk_aligned+0x26>
 8006306:	f04f 34ff 	mov.w	r4, #4294967295
 800630a:	4620      	mov	r0, r4
 800630c:	bd70      	pop	{r4, r5, r6, pc}
 800630e:	1cc4      	adds	r4, r0, #3
 8006310:	f024 0403 	bic.w	r4, r4, #3
 8006314:	42a0      	cmp	r0, r4
 8006316:	d0f8      	beq.n	800630a <sbrk_aligned+0x22>
 8006318:	1a21      	subs	r1, r4, r0
 800631a:	4628      	mov	r0, r5
 800631c:	f001 f968 	bl	80075f0 <_sbrk_r>
 8006320:	3001      	adds	r0, #1
 8006322:	d1f2      	bne.n	800630a <sbrk_aligned+0x22>
 8006324:	e7ef      	b.n	8006306 <sbrk_aligned+0x1e>
 8006326:	bf00      	nop
 8006328:	200007f4 	.word	0x200007f4

0800632c <_malloc_r>:
 800632c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006330:	1ccd      	adds	r5, r1, #3
 8006332:	f025 0503 	bic.w	r5, r5, #3
 8006336:	3508      	adds	r5, #8
 8006338:	2d0c      	cmp	r5, #12
 800633a:	bf38      	it	cc
 800633c:	250c      	movcc	r5, #12
 800633e:	2d00      	cmp	r5, #0
 8006340:	4606      	mov	r6, r0
 8006342:	db01      	blt.n	8006348 <_malloc_r+0x1c>
 8006344:	42a9      	cmp	r1, r5
 8006346:	d904      	bls.n	8006352 <_malloc_r+0x26>
 8006348:	230c      	movs	r3, #12
 800634a:	6033      	str	r3, [r6, #0]
 800634c:	2000      	movs	r0, #0
 800634e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006352:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006428 <_malloc_r+0xfc>
 8006356:	f000 f869 	bl	800642c <__malloc_lock>
 800635a:	f8d8 3000 	ldr.w	r3, [r8]
 800635e:	461c      	mov	r4, r3
 8006360:	bb44      	cbnz	r4, 80063b4 <_malloc_r+0x88>
 8006362:	4629      	mov	r1, r5
 8006364:	4630      	mov	r0, r6
 8006366:	f7ff ffbf 	bl	80062e8 <sbrk_aligned>
 800636a:	1c43      	adds	r3, r0, #1
 800636c:	4604      	mov	r4, r0
 800636e:	d158      	bne.n	8006422 <_malloc_r+0xf6>
 8006370:	f8d8 4000 	ldr.w	r4, [r8]
 8006374:	4627      	mov	r7, r4
 8006376:	2f00      	cmp	r7, #0
 8006378:	d143      	bne.n	8006402 <_malloc_r+0xd6>
 800637a:	2c00      	cmp	r4, #0
 800637c:	d04b      	beq.n	8006416 <_malloc_r+0xea>
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	4639      	mov	r1, r7
 8006382:	4630      	mov	r0, r6
 8006384:	eb04 0903 	add.w	r9, r4, r3
 8006388:	f001 f932 	bl	80075f0 <_sbrk_r>
 800638c:	4581      	cmp	r9, r0
 800638e:	d142      	bne.n	8006416 <_malloc_r+0xea>
 8006390:	6821      	ldr	r1, [r4, #0]
 8006392:	1a6d      	subs	r5, r5, r1
 8006394:	4629      	mov	r1, r5
 8006396:	4630      	mov	r0, r6
 8006398:	f7ff ffa6 	bl	80062e8 <sbrk_aligned>
 800639c:	3001      	adds	r0, #1
 800639e:	d03a      	beq.n	8006416 <_malloc_r+0xea>
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	442b      	add	r3, r5
 80063a4:	6023      	str	r3, [r4, #0]
 80063a6:	f8d8 3000 	ldr.w	r3, [r8]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	bb62      	cbnz	r2, 8006408 <_malloc_r+0xdc>
 80063ae:	f8c8 7000 	str.w	r7, [r8]
 80063b2:	e00f      	b.n	80063d4 <_malloc_r+0xa8>
 80063b4:	6822      	ldr	r2, [r4, #0]
 80063b6:	1b52      	subs	r2, r2, r5
 80063b8:	d420      	bmi.n	80063fc <_malloc_r+0xd0>
 80063ba:	2a0b      	cmp	r2, #11
 80063bc:	d917      	bls.n	80063ee <_malloc_r+0xc2>
 80063be:	1961      	adds	r1, r4, r5
 80063c0:	42a3      	cmp	r3, r4
 80063c2:	6025      	str	r5, [r4, #0]
 80063c4:	bf18      	it	ne
 80063c6:	6059      	strne	r1, [r3, #4]
 80063c8:	6863      	ldr	r3, [r4, #4]
 80063ca:	bf08      	it	eq
 80063cc:	f8c8 1000 	streq.w	r1, [r8]
 80063d0:	5162      	str	r2, [r4, r5]
 80063d2:	604b      	str	r3, [r1, #4]
 80063d4:	4630      	mov	r0, r6
 80063d6:	f000 f82f 	bl	8006438 <__malloc_unlock>
 80063da:	f104 000b 	add.w	r0, r4, #11
 80063de:	1d23      	adds	r3, r4, #4
 80063e0:	f020 0007 	bic.w	r0, r0, #7
 80063e4:	1ac2      	subs	r2, r0, r3
 80063e6:	bf1c      	itt	ne
 80063e8:	1a1b      	subne	r3, r3, r0
 80063ea:	50a3      	strne	r3, [r4, r2]
 80063ec:	e7af      	b.n	800634e <_malloc_r+0x22>
 80063ee:	6862      	ldr	r2, [r4, #4]
 80063f0:	42a3      	cmp	r3, r4
 80063f2:	bf0c      	ite	eq
 80063f4:	f8c8 2000 	streq.w	r2, [r8]
 80063f8:	605a      	strne	r2, [r3, #4]
 80063fa:	e7eb      	b.n	80063d4 <_malloc_r+0xa8>
 80063fc:	4623      	mov	r3, r4
 80063fe:	6864      	ldr	r4, [r4, #4]
 8006400:	e7ae      	b.n	8006360 <_malloc_r+0x34>
 8006402:	463c      	mov	r4, r7
 8006404:	687f      	ldr	r7, [r7, #4]
 8006406:	e7b6      	b.n	8006376 <_malloc_r+0x4a>
 8006408:	461a      	mov	r2, r3
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	42a3      	cmp	r3, r4
 800640e:	d1fb      	bne.n	8006408 <_malloc_r+0xdc>
 8006410:	2300      	movs	r3, #0
 8006412:	6053      	str	r3, [r2, #4]
 8006414:	e7de      	b.n	80063d4 <_malloc_r+0xa8>
 8006416:	230c      	movs	r3, #12
 8006418:	6033      	str	r3, [r6, #0]
 800641a:	4630      	mov	r0, r6
 800641c:	f000 f80c 	bl	8006438 <__malloc_unlock>
 8006420:	e794      	b.n	800634c <_malloc_r+0x20>
 8006422:	6005      	str	r5, [r0, #0]
 8006424:	e7d6      	b.n	80063d4 <_malloc_r+0xa8>
 8006426:	bf00      	nop
 8006428:	200007f8 	.word	0x200007f8

0800642c <__malloc_lock>:
 800642c:	4801      	ldr	r0, [pc, #4]	@ (8006434 <__malloc_lock+0x8>)
 800642e:	f001 b92c 	b.w	800768a <__retarget_lock_acquire_recursive>
 8006432:	bf00      	nop
 8006434:	2000093c 	.word	0x2000093c

08006438 <__malloc_unlock>:
 8006438:	4801      	ldr	r0, [pc, #4]	@ (8006440 <__malloc_unlock+0x8>)
 800643a:	f001 b927 	b.w	800768c <__retarget_lock_release_recursive>
 800643e:	bf00      	nop
 8006440:	2000093c 	.word	0x2000093c

08006444 <__cvt>:
 8006444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006448:	ec57 6b10 	vmov	r6, r7, d0
 800644c:	2f00      	cmp	r7, #0
 800644e:	460c      	mov	r4, r1
 8006450:	4619      	mov	r1, r3
 8006452:	463b      	mov	r3, r7
 8006454:	bfbb      	ittet	lt
 8006456:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800645a:	461f      	movlt	r7, r3
 800645c:	2300      	movge	r3, #0
 800645e:	232d      	movlt	r3, #45	@ 0x2d
 8006460:	700b      	strb	r3, [r1, #0]
 8006462:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006464:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006468:	4691      	mov	r9, r2
 800646a:	f023 0820 	bic.w	r8, r3, #32
 800646e:	bfbc      	itt	lt
 8006470:	4632      	movlt	r2, r6
 8006472:	4616      	movlt	r6, r2
 8006474:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006478:	d005      	beq.n	8006486 <__cvt+0x42>
 800647a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800647e:	d100      	bne.n	8006482 <__cvt+0x3e>
 8006480:	3401      	adds	r4, #1
 8006482:	2102      	movs	r1, #2
 8006484:	e000      	b.n	8006488 <__cvt+0x44>
 8006486:	2103      	movs	r1, #3
 8006488:	ab03      	add	r3, sp, #12
 800648a:	9301      	str	r3, [sp, #4]
 800648c:	ab02      	add	r3, sp, #8
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	ec47 6b10 	vmov	d0, r6, r7
 8006494:	4653      	mov	r3, sl
 8006496:	4622      	mov	r2, r4
 8006498:	f001 f996 	bl	80077c8 <_dtoa_r>
 800649c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80064a0:	4605      	mov	r5, r0
 80064a2:	d119      	bne.n	80064d8 <__cvt+0x94>
 80064a4:	f019 0f01 	tst.w	r9, #1
 80064a8:	d00e      	beq.n	80064c8 <__cvt+0x84>
 80064aa:	eb00 0904 	add.w	r9, r0, r4
 80064ae:	2200      	movs	r2, #0
 80064b0:	2300      	movs	r3, #0
 80064b2:	4630      	mov	r0, r6
 80064b4:	4639      	mov	r1, r7
 80064b6:	f7fa fb2f 	bl	8000b18 <__aeabi_dcmpeq>
 80064ba:	b108      	cbz	r0, 80064c0 <__cvt+0x7c>
 80064bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80064c0:	2230      	movs	r2, #48	@ 0x30
 80064c2:	9b03      	ldr	r3, [sp, #12]
 80064c4:	454b      	cmp	r3, r9
 80064c6:	d31e      	bcc.n	8006506 <__cvt+0xc2>
 80064c8:	9b03      	ldr	r3, [sp, #12]
 80064ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80064cc:	1b5b      	subs	r3, r3, r5
 80064ce:	4628      	mov	r0, r5
 80064d0:	6013      	str	r3, [r2, #0]
 80064d2:	b004      	add	sp, #16
 80064d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80064dc:	eb00 0904 	add.w	r9, r0, r4
 80064e0:	d1e5      	bne.n	80064ae <__cvt+0x6a>
 80064e2:	7803      	ldrb	r3, [r0, #0]
 80064e4:	2b30      	cmp	r3, #48	@ 0x30
 80064e6:	d10a      	bne.n	80064fe <__cvt+0xba>
 80064e8:	2200      	movs	r2, #0
 80064ea:	2300      	movs	r3, #0
 80064ec:	4630      	mov	r0, r6
 80064ee:	4639      	mov	r1, r7
 80064f0:	f7fa fb12 	bl	8000b18 <__aeabi_dcmpeq>
 80064f4:	b918      	cbnz	r0, 80064fe <__cvt+0xba>
 80064f6:	f1c4 0401 	rsb	r4, r4, #1
 80064fa:	f8ca 4000 	str.w	r4, [sl]
 80064fe:	f8da 3000 	ldr.w	r3, [sl]
 8006502:	4499      	add	r9, r3
 8006504:	e7d3      	b.n	80064ae <__cvt+0x6a>
 8006506:	1c59      	adds	r1, r3, #1
 8006508:	9103      	str	r1, [sp, #12]
 800650a:	701a      	strb	r2, [r3, #0]
 800650c:	e7d9      	b.n	80064c2 <__cvt+0x7e>

0800650e <__exponent>:
 800650e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006510:	2900      	cmp	r1, #0
 8006512:	bfba      	itte	lt
 8006514:	4249      	neglt	r1, r1
 8006516:	232d      	movlt	r3, #45	@ 0x2d
 8006518:	232b      	movge	r3, #43	@ 0x2b
 800651a:	2909      	cmp	r1, #9
 800651c:	7002      	strb	r2, [r0, #0]
 800651e:	7043      	strb	r3, [r0, #1]
 8006520:	dd29      	ble.n	8006576 <__exponent+0x68>
 8006522:	f10d 0307 	add.w	r3, sp, #7
 8006526:	461d      	mov	r5, r3
 8006528:	270a      	movs	r7, #10
 800652a:	461a      	mov	r2, r3
 800652c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006530:	fb07 1416 	mls	r4, r7, r6, r1
 8006534:	3430      	adds	r4, #48	@ 0x30
 8006536:	f802 4c01 	strb.w	r4, [r2, #-1]
 800653a:	460c      	mov	r4, r1
 800653c:	2c63      	cmp	r4, #99	@ 0x63
 800653e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006542:	4631      	mov	r1, r6
 8006544:	dcf1      	bgt.n	800652a <__exponent+0x1c>
 8006546:	3130      	adds	r1, #48	@ 0x30
 8006548:	1e94      	subs	r4, r2, #2
 800654a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800654e:	1c41      	adds	r1, r0, #1
 8006550:	4623      	mov	r3, r4
 8006552:	42ab      	cmp	r3, r5
 8006554:	d30a      	bcc.n	800656c <__exponent+0x5e>
 8006556:	f10d 0309 	add.w	r3, sp, #9
 800655a:	1a9b      	subs	r3, r3, r2
 800655c:	42ac      	cmp	r4, r5
 800655e:	bf88      	it	hi
 8006560:	2300      	movhi	r3, #0
 8006562:	3302      	adds	r3, #2
 8006564:	4403      	add	r3, r0
 8006566:	1a18      	subs	r0, r3, r0
 8006568:	b003      	add	sp, #12
 800656a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800656c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006570:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006574:	e7ed      	b.n	8006552 <__exponent+0x44>
 8006576:	2330      	movs	r3, #48	@ 0x30
 8006578:	3130      	adds	r1, #48	@ 0x30
 800657a:	7083      	strb	r3, [r0, #2]
 800657c:	70c1      	strb	r1, [r0, #3]
 800657e:	1d03      	adds	r3, r0, #4
 8006580:	e7f1      	b.n	8006566 <__exponent+0x58>
	...

08006584 <_printf_float>:
 8006584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006588:	b08d      	sub	sp, #52	@ 0x34
 800658a:	460c      	mov	r4, r1
 800658c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006590:	4616      	mov	r6, r2
 8006592:	461f      	mov	r7, r3
 8006594:	4605      	mov	r5, r0
 8006596:	f000 fff3 	bl	8007580 <_localeconv_r>
 800659a:	6803      	ldr	r3, [r0, #0]
 800659c:	9304      	str	r3, [sp, #16]
 800659e:	4618      	mov	r0, r3
 80065a0:	f7f9 fe8e 	bl	80002c0 <strlen>
 80065a4:	2300      	movs	r3, #0
 80065a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80065a8:	f8d8 3000 	ldr.w	r3, [r8]
 80065ac:	9005      	str	r0, [sp, #20]
 80065ae:	3307      	adds	r3, #7
 80065b0:	f023 0307 	bic.w	r3, r3, #7
 80065b4:	f103 0208 	add.w	r2, r3, #8
 80065b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80065bc:	f8d4 b000 	ldr.w	fp, [r4]
 80065c0:	f8c8 2000 	str.w	r2, [r8]
 80065c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80065cc:	9307      	str	r3, [sp, #28]
 80065ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80065d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80065d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065da:	4b9c      	ldr	r3, [pc, #624]	@ (800684c <_printf_float+0x2c8>)
 80065dc:	f04f 32ff 	mov.w	r2, #4294967295
 80065e0:	f7fa facc 	bl	8000b7c <__aeabi_dcmpun>
 80065e4:	bb70      	cbnz	r0, 8006644 <_printf_float+0xc0>
 80065e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065ea:	4b98      	ldr	r3, [pc, #608]	@ (800684c <_printf_float+0x2c8>)
 80065ec:	f04f 32ff 	mov.w	r2, #4294967295
 80065f0:	f7fa faa6 	bl	8000b40 <__aeabi_dcmple>
 80065f4:	bb30      	cbnz	r0, 8006644 <_printf_float+0xc0>
 80065f6:	2200      	movs	r2, #0
 80065f8:	2300      	movs	r3, #0
 80065fa:	4640      	mov	r0, r8
 80065fc:	4649      	mov	r1, r9
 80065fe:	f7fa fa95 	bl	8000b2c <__aeabi_dcmplt>
 8006602:	b110      	cbz	r0, 800660a <_printf_float+0x86>
 8006604:	232d      	movs	r3, #45	@ 0x2d
 8006606:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800660a:	4a91      	ldr	r2, [pc, #580]	@ (8006850 <_printf_float+0x2cc>)
 800660c:	4b91      	ldr	r3, [pc, #580]	@ (8006854 <_printf_float+0x2d0>)
 800660e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006612:	bf94      	ite	ls
 8006614:	4690      	movls	r8, r2
 8006616:	4698      	movhi	r8, r3
 8006618:	2303      	movs	r3, #3
 800661a:	6123      	str	r3, [r4, #16]
 800661c:	f02b 0304 	bic.w	r3, fp, #4
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	f04f 0900 	mov.w	r9, #0
 8006626:	9700      	str	r7, [sp, #0]
 8006628:	4633      	mov	r3, r6
 800662a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800662c:	4621      	mov	r1, r4
 800662e:	4628      	mov	r0, r5
 8006630:	f000 f9d2 	bl	80069d8 <_printf_common>
 8006634:	3001      	adds	r0, #1
 8006636:	f040 808d 	bne.w	8006754 <_printf_float+0x1d0>
 800663a:	f04f 30ff 	mov.w	r0, #4294967295
 800663e:	b00d      	add	sp, #52	@ 0x34
 8006640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006644:	4642      	mov	r2, r8
 8006646:	464b      	mov	r3, r9
 8006648:	4640      	mov	r0, r8
 800664a:	4649      	mov	r1, r9
 800664c:	f7fa fa96 	bl	8000b7c <__aeabi_dcmpun>
 8006650:	b140      	cbz	r0, 8006664 <_printf_float+0xe0>
 8006652:	464b      	mov	r3, r9
 8006654:	2b00      	cmp	r3, #0
 8006656:	bfbc      	itt	lt
 8006658:	232d      	movlt	r3, #45	@ 0x2d
 800665a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800665e:	4a7e      	ldr	r2, [pc, #504]	@ (8006858 <_printf_float+0x2d4>)
 8006660:	4b7e      	ldr	r3, [pc, #504]	@ (800685c <_printf_float+0x2d8>)
 8006662:	e7d4      	b.n	800660e <_printf_float+0x8a>
 8006664:	6863      	ldr	r3, [r4, #4]
 8006666:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800666a:	9206      	str	r2, [sp, #24]
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	d13b      	bne.n	80066e8 <_printf_float+0x164>
 8006670:	2306      	movs	r3, #6
 8006672:	6063      	str	r3, [r4, #4]
 8006674:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006678:	2300      	movs	r3, #0
 800667a:	6022      	str	r2, [r4, #0]
 800667c:	9303      	str	r3, [sp, #12]
 800667e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006680:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006684:	ab09      	add	r3, sp, #36	@ 0x24
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	6861      	ldr	r1, [r4, #4]
 800668a:	ec49 8b10 	vmov	d0, r8, r9
 800668e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006692:	4628      	mov	r0, r5
 8006694:	f7ff fed6 	bl	8006444 <__cvt>
 8006698:	9b06      	ldr	r3, [sp, #24]
 800669a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800669c:	2b47      	cmp	r3, #71	@ 0x47
 800669e:	4680      	mov	r8, r0
 80066a0:	d129      	bne.n	80066f6 <_printf_float+0x172>
 80066a2:	1cc8      	adds	r0, r1, #3
 80066a4:	db02      	blt.n	80066ac <_printf_float+0x128>
 80066a6:	6863      	ldr	r3, [r4, #4]
 80066a8:	4299      	cmp	r1, r3
 80066aa:	dd41      	ble.n	8006730 <_printf_float+0x1ac>
 80066ac:	f1aa 0a02 	sub.w	sl, sl, #2
 80066b0:	fa5f fa8a 	uxtb.w	sl, sl
 80066b4:	3901      	subs	r1, #1
 80066b6:	4652      	mov	r2, sl
 80066b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80066bc:	9109      	str	r1, [sp, #36]	@ 0x24
 80066be:	f7ff ff26 	bl	800650e <__exponent>
 80066c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066c4:	1813      	adds	r3, r2, r0
 80066c6:	2a01      	cmp	r2, #1
 80066c8:	4681      	mov	r9, r0
 80066ca:	6123      	str	r3, [r4, #16]
 80066cc:	dc02      	bgt.n	80066d4 <_printf_float+0x150>
 80066ce:	6822      	ldr	r2, [r4, #0]
 80066d0:	07d2      	lsls	r2, r2, #31
 80066d2:	d501      	bpl.n	80066d8 <_printf_float+0x154>
 80066d4:	3301      	adds	r3, #1
 80066d6:	6123      	str	r3, [r4, #16]
 80066d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d0a2      	beq.n	8006626 <_printf_float+0xa2>
 80066e0:	232d      	movs	r3, #45	@ 0x2d
 80066e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066e6:	e79e      	b.n	8006626 <_printf_float+0xa2>
 80066e8:	9a06      	ldr	r2, [sp, #24]
 80066ea:	2a47      	cmp	r2, #71	@ 0x47
 80066ec:	d1c2      	bne.n	8006674 <_printf_float+0xf0>
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1c0      	bne.n	8006674 <_printf_float+0xf0>
 80066f2:	2301      	movs	r3, #1
 80066f4:	e7bd      	b.n	8006672 <_printf_float+0xee>
 80066f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80066fa:	d9db      	bls.n	80066b4 <_printf_float+0x130>
 80066fc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006700:	d118      	bne.n	8006734 <_printf_float+0x1b0>
 8006702:	2900      	cmp	r1, #0
 8006704:	6863      	ldr	r3, [r4, #4]
 8006706:	dd0b      	ble.n	8006720 <_printf_float+0x19c>
 8006708:	6121      	str	r1, [r4, #16]
 800670a:	b913      	cbnz	r3, 8006712 <_printf_float+0x18e>
 800670c:	6822      	ldr	r2, [r4, #0]
 800670e:	07d0      	lsls	r0, r2, #31
 8006710:	d502      	bpl.n	8006718 <_printf_float+0x194>
 8006712:	3301      	adds	r3, #1
 8006714:	440b      	add	r3, r1
 8006716:	6123      	str	r3, [r4, #16]
 8006718:	65a1      	str	r1, [r4, #88]	@ 0x58
 800671a:	f04f 0900 	mov.w	r9, #0
 800671e:	e7db      	b.n	80066d8 <_printf_float+0x154>
 8006720:	b913      	cbnz	r3, 8006728 <_printf_float+0x1a4>
 8006722:	6822      	ldr	r2, [r4, #0]
 8006724:	07d2      	lsls	r2, r2, #31
 8006726:	d501      	bpl.n	800672c <_printf_float+0x1a8>
 8006728:	3302      	adds	r3, #2
 800672a:	e7f4      	b.n	8006716 <_printf_float+0x192>
 800672c:	2301      	movs	r3, #1
 800672e:	e7f2      	b.n	8006716 <_printf_float+0x192>
 8006730:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006734:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006736:	4299      	cmp	r1, r3
 8006738:	db05      	blt.n	8006746 <_printf_float+0x1c2>
 800673a:	6823      	ldr	r3, [r4, #0]
 800673c:	6121      	str	r1, [r4, #16]
 800673e:	07d8      	lsls	r0, r3, #31
 8006740:	d5ea      	bpl.n	8006718 <_printf_float+0x194>
 8006742:	1c4b      	adds	r3, r1, #1
 8006744:	e7e7      	b.n	8006716 <_printf_float+0x192>
 8006746:	2900      	cmp	r1, #0
 8006748:	bfd4      	ite	le
 800674a:	f1c1 0202 	rsble	r2, r1, #2
 800674e:	2201      	movgt	r2, #1
 8006750:	4413      	add	r3, r2
 8006752:	e7e0      	b.n	8006716 <_printf_float+0x192>
 8006754:	6823      	ldr	r3, [r4, #0]
 8006756:	055a      	lsls	r2, r3, #21
 8006758:	d407      	bmi.n	800676a <_printf_float+0x1e6>
 800675a:	6923      	ldr	r3, [r4, #16]
 800675c:	4642      	mov	r2, r8
 800675e:	4631      	mov	r1, r6
 8006760:	4628      	mov	r0, r5
 8006762:	47b8      	blx	r7
 8006764:	3001      	adds	r0, #1
 8006766:	d12b      	bne.n	80067c0 <_printf_float+0x23c>
 8006768:	e767      	b.n	800663a <_printf_float+0xb6>
 800676a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800676e:	f240 80dd 	bls.w	800692c <_printf_float+0x3a8>
 8006772:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006776:	2200      	movs	r2, #0
 8006778:	2300      	movs	r3, #0
 800677a:	f7fa f9cd 	bl	8000b18 <__aeabi_dcmpeq>
 800677e:	2800      	cmp	r0, #0
 8006780:	d033      	beq.n	80067ea <_printf_float+0x266>
 8006782:	4a37      	ldr	r2, [pc, #220]	@ (8006860 <_printf_float+0x2dc>)
 8006784:	2301      	movs	r3, #1
 8006786:	4631      	mov	r1, r6
 8006788:	4628      	mov	r0, r5
 800678a:	47b8      	blx	r7
 800678c:	3001      	adds	r0, #1
 800678e:	f43f af54 	beq.w	800663a <_printf_float+0xb6>
 8006792:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006796:	4543      	cmp	r3, r8
 8006798:	db02      	blt.n	80067a0 <_printf_float+0x21c>
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	07d8      	lsls	r0, r3, #31
 800679e:	d50f      	bpl.n	80067c0 <_printf_float+0x23c>
 80067a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067a4:	4631      	mov	r1, r6
 80067a6:	4628      	mov	r0, r5
 80067a8:	47b8      	blx	r7
 80067aa:	3001      	adds	r0, #1
 80067ac:	f43f af45 	beq.w	800663a <_printf_float+0xb6>
 80067b0:	f04f 0900 	mov.w	r9, #0
 80067b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80067b8:	f104 0a1a 	add.w	sl, r4, #26
 80067bc:	45c8      	cmp	r8, r9
 80067be:	dc09      	bgt.n	80067d4 <_printf_float+0x250>
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	079b      	lsls	r3, r3, #30
 80067c4:	f100 8103 	bmi.w	80069ce <_printf_float+0x44a>
 80067c8:	68e0      	ldr	r0, [r4, #12]
 80067ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067cc:	4298      	cmp	r0, r3
 80067ce:	bfb8      	it	lt
 80067d0:	4618      	movlt	r0, r3
 80067d2:	e734      	b.n	800663e <_printf_float+0xba>
 80067d4:	2301      	movs	r3, #1
 80067d6:	4652      	mov	r2, sl
 80067d8:	4631      	mov	r1, r6
 80067da:	4628      	mov	r0, r5
 80067dc:	47b8      	blx	r7
 80067de:	3001      	adds	r0, #1
 80067e0:	f43f af2b 	beq.w	800663a <_printf_float+0xb6>
 80067e4:	f109 0901 	add.w	r9, r9, #1
 80067e8:	e7e8      	b.n	80067bc <_printf_float+0x238>
 80067ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	dc39      	bgt.n	8006864 <_printf_float+0x2e0>
 80067f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006860 <_printf_float+0x2dc>)
 80067f2:	2301      	movs	r3, #1
 80067f4:	4631      	mov	r1, r6
 80067f6:	4628      	mov	r0, r5
 80067f8:	47b8      	blx	r7
 80067fa:	3001      	adds	r0, #1
 80067fc:	f43f af1d 	beq.w	800663a <_printf_float+0xb6>
 8006800:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006804:	ea59 0303 	orrs.w	r3, r9, r3
 8006808:	d102      	bne.n	8006810 <_printf_float+0x28c>
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	07d9      	lsls	r1, r3, #31
 800680e:	d5d7      	bpl.n	80067c0 <_printf_float+0x23c>
 8006810:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006814:	4631      	mov	r1, r6
 8006816:	4628      	mov	r0, r5
 8006818:	47b8      	blx	r7
 800681a:	3001      	adds	r0, #1
 800681c:	f43f af0d 	beq.w	800663a <_printf_float+0xb6>
 8006820:	f04f 0a00 	mov.w	sl, #0
 8006824:	f104 0b1a 	add.w	fp, r4, #26
 8006828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800682a:	425b      	negs	r3, r3
 800682c:	4553      	cmp	r3, sl
 800682e:	dc01      	bgt.n	8006834 <_printf_float+0x2b0>
 8006830:	464b      	mov	r3, r9
 8006832:	e793      	b.n	800675c <_printf_float+0x1d8>
 8006834:	2301      	movs	r3, #1
 8006836:	465a      	mov	r2, fp
 8006838:	4631      	mov	r1, r6
 800683a:	4628      	mov	r0, r5
 800683c:	47b8      	blx	r7
 800683e:	3001      	adds	r0, #1
 8006840:	f43f aefb 	beq.w	800663a <_printf_float+0xb6>
 8006844:	f10a 0a01 	add.w	sl, sl, #1
 8006848:	e7ee      	b.n	8006828 <_printf_float+0x2a4>
 800684a:	bf00      	nop
 800684c:	7fefffff 	.word	0x7fefffff
 8006850:	0800e07c 	.word	0x0800e07c
 8006854:	0800e080 	.word	0x0800e080
 8006858:	0800e084 	.word	0x0800e084
 800685c:	0800e088 	.word	0x0800e088
 8006860:	0800e08c 	.word	0x0800e08c
 8006864:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006866:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800686a:	4553      	cmp	r3, sl
 800686c:	bfa8      	it	ge
 800686e:	4653      	movge	r3, sl
 8006870:	2b00      	cmp	r3, #0
 8006872:	4699      	mov	r9, r3
 8006874:	dc36      	bgt.n	80068e4 <_printf_float+0x360>
 8006876:	f04f 0b00 	mov.w	fp, #0
 800687a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800687e:	f104 021a 	add.w	r2, r4, #26
 8006882:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006884:	9306      	str	r3, [sp, #24]
 8006886:	eba3 0309 	sub.w	r3, r3, r9
 800688a:	455b      	cmp	r3, fp
 800688c:	dc31      	bgt.n	80068f2 <_printf_float+0x36e>
 800688e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006890:	459a      	cmp	sl, r3
 8006892:	dc3a      	bgt.n	800690a <_printf_float+0x386>
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	07da      	lsls	r2, r3, #31
 8006898:	d437      	bmi.n	800690a <_printf_float+0x386>
 800689a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800689c:	ebaa 0903 	sub.w	r9, sl, r3
 80068a0:	9b06      	ldr	r3, [sp, #24]
 80068a2:	ebaa 0303 	sub.w	r3, sl, r3
 80068a6:	4599      	cmp	r9, r3
 80068a8:	bfa8      	it	ge
 80068aa:	4699      	movge	r9, r3
 80068ac:	f1b9 0f00 	cmp.w	r9, #0
 80068b0:	dc33      	bgt.n	800691a <_printf_float+0x396>
 80068b2:	f04f 0800 	mov.w	r8, #0
 80068b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068ba:	f104 0b1a 	add.w	fp, r4, #26
 80068be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068c0:	ebaa 0303 	sub.w	r3, sl, r3
 80068c4:	eba3 0309 	sub.w	r3, r3, r9
 80068c8:	4543      	cmp	r3, r8
 80068ca:	f77f af79 	ble.w	80067c0 <_printf_float+0x23c>
 80068ce:	2301      	movs	r3, #1
 80068d0:	465a      	mov	r2, fp
 80068d2:	4631      	mov	r1, r6
 80068d4:	4628      	mov	r0, r5
 80068d6:	47b8      	blx	r7
 80068d8:	3001      	adds	r0, #1
 80068da:	f43f aeae 	beq.w	800663a <_printf_float+0xb6>
 80068de:	f108 0801 	add.w	r8, r8, #1
 80068e2:	e7ec      	b.n	80068be <_printf_float+0x33a>
 80068e4:	4642      	mov	r2, r8
 80068e6:	4631      	mov	r1, r6
 80068e8:	4628      	mov	r0, r5
 80068ea:	47b8      	blx	r7
 80068ec:	3001      	adds	r0, #1
 80068ee:	d1c2      	bne.n	8006876 <_printf_float+0x2f2>
 80068f0:	e6a3      	b.n	800663a <_printf_float+0xb6>
 80068f2:	2301      	movs	r3, #1
 80068f4:	4631      	mov	r1, r6
 80068f6:	4628      	mov	r0, r5
 80068f8:	9206      	str	r2, [sp, #24]
 80068fa:	47b8      	blx	r7
 80068fc:	3001      	adds	r0, #1
 80068fe:	f43f ae9c 	beq.w	800663a <_printf_float+0xb6>
 8006902:	9a06      	ldr	r2, [sp, #24]
 8006904:	f10b 0b01 	add.w	fp, fp, #1
 8006908:	e7bb      	b.n	8006882 <_printf_float+0x2fe>
 800690a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800690e:	4631      	mov	r1, r6
 8006910:	4628      	mov	r0, r5
 8006912:	47b8      	blx	r7
 8006914:	3001      	adds	r0, #1
 8006916:	d1c0      	bne.n	800689a <_printf_float+0x316>
 8006918:	e68f      	b.n	800663a <_printf_float+0xb6>
 800691a:	9a06      	ldr	r2, [sp, #24]
 800691c:	464b      	mov	r3, r9
 800691e:	4442      	add	r2, r8
 8006920:	4631      	mov	r1, r6
 8006922:	4628      	mov	r0, r5
 8006924:	47b8      	blx	r7
 8006926:	3001      	adds	r0, #1
 8006928:	d1c3      	bne.n	80068b2 <_printf_float+0x32e>
 800692a:	e686      	b.n	800663a <_printf_float+0xb6>
 800692c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006930:	f1ba 0f01 	cmp.w	sl, #1
 8006934:	dc01      	bgt.n	800693a <_printf_float+0x3b6>
 8006936:	07db      	lsls	r3, r3, #31
 8006938:	d536      	bpl.n	80069a8 <_printf_float+0x424>
 800693a:	2301      	movs	r3, #1
 800693c:	4642      	mov	r2, r8
 800693e:	4631      	mov	r1, r6
 8006940:	4628      	mov	r0, r5
 8006942:	47b8      	blx	r7
 8006944:	3001      	adds	r0, #1
 8006946:	f43f ae78 	beq.w	800663a <_printf_float+0xb6>
 800694a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800694e:	4631      	mov	r1, r6
 8006950:	4628      	mov	r0, r5
 8006952:	47b8      	blx	r7
 8006954:	3001      	adds	r0, #1
 8006956:	f43f ae70 	beq.w	800663a <_printf_float+0xb6>
 800695a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800695e:	2200      	movs	r2, #0
 8006960:	2300      	movs	r3, #0
 8006962:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006966:	f7fa f8d7 	bl	8000b18 <__aeabi_dcmpeq>
 800696a:	b9c0      	cbnz	r0, 800699e <_printf_float+0x41a>
 800696c:	4653      	mov	r3, sl
 800696e:	f108 0201 	add.w	r2, r8, #1
 8006972:	4631      	mov	r1, r6
 8006974:	4628      	mov	r0, r5
 8006976:	47b8      	blx	r7
 8006978:	3001      	adds	r0, #1
 800697a:	d10c      	bne.n	8006996 <_printf_float+0x412>
 800697c:	e65d      	b.n	800663a <_printf_float+0xb6>
 800697e:	2301      	movs	r3, #1
 8006980:	465a      	mov	r2, fp
 8006982:	4631      	mov	r1, r6
 8006984:	4628      	mov	r0, r5
 8006986:	47b8      	blx	r7
 8006988:	3001      	adds	r0, #1
 800698a:	f43f ae56 	beq.w	800663a <_printf_float+0xb6>
 800698e:	f108 0801 	add.w	r8, r8, #1
 8006992:	45d0      	cmp	r8, sl
 8006994:	dbf3      	blt.n	800697e <_printf_float+0x3fa>
 8006996:	464b      	mov	r3, r9
 8006998:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800699c:	e6df      	b.n	800675e <_printf_float+0x1da>
 800699e:	f04f 0800 	mov.w	r8, #0
 80069a2:	f104 0b1a 	add.w	fp, r4, #26
 80069a6:	e7f4      	b.n	8006992 <_printf_float+0x40e>
 80069a8:	2301      	movs	r3, #1
 80069aa:	4642      	mov	r2, r8
 80069ac:	e7e1      	b.n	8006972 <_printf_float+0x3ee>
 80069ae:	2301      	movs	r3, #1
 80069b0:	464a      	mov	r2, r9
 80069b2:	4631      	mov	r1, r6
 80069b4:	4628      	mov	r0, r5
 80069b6:	47b8      	blx	r7
 80069b8:	3001      	adds	r0, #1
 80069ba:	f43f ae3e 	beq.w	800663a <_printf_float+0xb6>
 80069be:	f108 0801 	add.w	r8, r8, #1
 80069c2:	68e3      	ldr	r3, [r4, #12]
 80069c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80069c6:	1a5b      	subs	r3, r3, r1
 80069c8:	4543      	cmp	r3, r8
 80069ca:	dcf0      	bgt.n	80069ae <_printf_float+0x42a>
 80069cc:	e6fc      	b.n	80067c8 <_printf_float+0x244>
 80069ce:	f04f 0800 	mov.w	r8, #0
 80069d2:	f104 0919 	add.w	r9, r4, #25
 80069d6:	e7f4      	b.n	80069c2 <_printf_float+0x43e>

080069d8 <_printf_common>:
 80069d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069dc:	4616      	mov	r6, r2
 80069de:	4698      	mov	r8, r3
 80069e0:	688a      	ldr	r2, [r1, #8]
 80069e2:	690b      	ldr	r3, [r1, #16]
 80069e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069e8:	4293      	cmp	r3, r2
 80069ea:	bfb8      	it	lt
 80069ec:	4613      	movlt	r3, r2
 80069ee:	6033      	str	r3, [r6, #0]
 80069f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80069f4:	4607      	mov	r7, r0
 80069f6:	460c      	mov	r4, r1
 80069f8:	b10a      	cbz	r2, 80069fe <_printf_common+0x26>
 80069fa:	3301      	adds	r3, #1
 80069fc:	6033      	str	r3, [r6, #0]
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	0699      	lsls	r1, r3, #26
 8006a02:	bf42      	ittt	mi
 8006a04:	6833      	ldrmi	r3, [r6, #0]
 8006a06:	3302      	addmi	r3, #2
 8006a08:	6033      	strmi	r3, [r6, #0]
 8006a0a:	6825      	ldr	r5, [r4, #0]
 8006a0c:	f015 0506 	ands.w	r5, r5, #6
 8006a10:	d106      	bne.n	8006a20 <_printf_common+0x48>
 8006a12:	f104 0a19 	add.w	sl, r4, #25
 8006a16:	68e3      	ldr	r3, [r4, #12]
 8006a18:	6832      	ldr	r2, [r6, #0]
 8006a1a:	1a9b      	subs	r3, r3, r2
 8006a1c:	42ab      	cmp	r3, r5
 8006a1e:	dc26      	bgt.n	8006a6e <_printf_common+0x96>
 8006a20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a24:	6822      	ldr	r2, [r4, #0]
 8006a26:	3b00      	subs	r3, #0
 8006a28:	bf18      	it	ne
 8006a2a:	2301      	movne	r3, #1
 8006a2c:	0692      	lsls	r2, r2, #26
 8006a2e:	d42b      	bmi.n	8006a88 <_printf_common+0xb0>
 8006a30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a34:	4641      	mov	r1, r8
 8006a36:	4638      	mov	r0, r7
 8006a38:	47c8      	blx	r9
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	d01e      	beq.n	8006a7c <_printf_common+0xa4>
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	6922      	ldr	r2, [r4, #16]
 8006a42:	f003 0306 	and.w	r3, r3, #6
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	bf02      	ittt	eq
 8006a4a:	68e5      	ldreq	r5, [r4, #12]
 8006a4c:	6833      	ldreq	r3, [r6, #0]
 8006a4e:	1aed      	subeq	r5, r5, r3
 8006a50:	68a3      	ldr	r3, [r4, #8]
 8006a52:	bf0c      	ite	eq
 8006a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a58:	2500      	movne	r5, #0
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	bfc4      	itt	gt
 8006a5e:	1a9b      	subgt	r3, r3, r2
 8006a60:	18ed      	addgt	r5, r5, r3
 8006a62:	2600      	movs	r6, #0
 8006a64:	341a      	adds	r4, #26
 8006a66:	42b5      	cmp	r5, r6
 8006a68:	d11a      	bne.n	8006aa0 <_printf_common+0xc8>
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	e008      	b.n	8006a80 <_printf_common+0xa8>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	4652      	mov	r2, sl
 8006a72:	4641      	mov	r1, r8
 8006a74:	4638      	mov	r0, r7
 8006a76:	47c8      	blx	r9
 8006a78:	3001      	adds	r0, #1
 8006a7a:	d103      	bne.n	8006a84 <_printf_common+0xac>
 8006a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a84:	3501      	adds	r5, #1
 8006a86:	e7c6      	b.n	8006a16 <_printf_common+0x3e>
 8006a88:	18e1      	adds	r1, r4, r3
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	2030      	movs	r0, #48	@ 0x30
 8006a8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a92:	4422      	add	r2, r4
 8006a94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a9c:	3302      	adds	r3, #2
 8006a9e:	e7c7      	b.n	8006a30 <_printf_common+0x58>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	4622      	mov	r2, r4
 8006aa4:	4641      	mov	r1, r8
 8006aa6:	4638      	mov	r0, r7
 8006aa8:	47c8      	blx	r9
 8006aaa:	3001      	adds	r0, #1
 8006aac:	d0e6      	beq.n	8006a7c <_printf_common+0xa4>
 8006aae:	3601      	adds	r6, #1
 8006ab0:	e7d9      	b.n	8006a66 <_printf_common+0x8e>
	...

08006ab4 <_printf_i>:
 8006ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab8:	7e0f      	ldrb	r7, [r1, #24]
 8006aba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006abc:	2f78      	cmp	r7, #120	@ 0x78
 8006abe:	4691      	mov	r9, r2
 8006ac0:	4680      	mov	r8, r0
 8006ac2:	460c      	mov	r4, r1
 8006ac4:	469a      	mov	sl, r3
 8006ac6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006aca:	d807      	bhi.n	8006adc <_printf_i+0x28>
 8006acc:	2f62      	cmp	r7, #98	@ 0x62
 8006ace:	d80a      	bhi.n	8006ae6 <_printf_i+0x32>
 8006ad0:	2f00      	cmp	r7, #0
 8006ad2:	f000 80d2 	beq.w	8006c7a <_printf_i+0x1c6>
 8006ad6:	2f58      	cmp	r7, #88	@ 0x58
 8006ad8:	f000 80b9 	beq.w	8006c4e <_printf_i+0x19a>
 8006adc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ae0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ae4:	e03a      	b.n	8006b5c <_printf_i+0xa8>
 8006ae6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006aea:	2b15      	cmp	r3, #21
 8006aec:	d8f6      	bhi.n	8006adc <_printf_i+0x28>
 8006aee:	a101      	add	r1, pc, #4	@ (adr r1, 8006af4 <_printf_i+0x40>)
 8006af0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006af4:	08006b4d 	.word	0x08006b4d
 8006af8:	08006b61 	.word	0x08006b61
 8006afc:	08006add 	.word	0x08006add
 8006b00:	08006add 	.word	0x08006add
 8006b04:	08006add 	.word	0x08006add
 8006b08:	08006add 	.word	0x08006add
 8006b0c:	08006b61 	.word	0x08006b61
 8006b10:	08006add 	.word	0x08006add
 8006b14:	08006add 	.word	0x08006add
 8006b18:	08006add 	.word	0x08006add
 8006b1c:	08006add 	.word	0x08006add
 8006b20:	08006c61 	.word	0x08006c61
 8006b24:	08006b8b 	.word	0x08006b8b
 8006b28:	08006c1b 	.word	0x08006c1b
 8006b2c:	08006add 	.word	0x08006add
 8006b30:	08006add 	.word	0x08006add
 8006b34:	08006c83 	.word	0x08006c83
 8006b38:	08006add 	.word	0x08006add
 8006b3c:	08006b8b 	.word	0x08006b8b
 8006b40:	08006add 	.word	0x08006add
 8006b44:	08006add 	.word	0x08006add
 8006b48:	08006c23 	.word	0x08006c23
 8006b4c:	6833      	ldr	r3, [r6, #0]
 8006b4e:	1d1a      	adds	r2, r3, #4
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6032      	str	r2, [r6, #0]
 8006b54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e09d      	b.n	8006c9c <_printf_i+0x1e8>
 8006b60:	6833      	ldr	r3, [r6, #0]
 8006b62:	6820      	ldr	r0, [r4, #0]
 8006b64:	1d19      	adds	r1, r3, #4
 8006b66:	6031      	str	r1, [r6, #0]
 8006b68:	0606      	lsls	r6, r0, #24
 8006b6a:	d501      	bpl.n	8006b70 <_printf_i+0xbc>
 8006b6c:	681d      	ldr	r5, [r3, #0]
 8006b6e:	e003      	b.n	8006b78 <_printf_i+0xc4>
 8006b70:	0645      	lsls	r5, r0, #25
 8006b72:	d5fb      	bpl.n	8006b6c <_printf_i+0xb8>
 8006b74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b78:	2d00      	cmp	r5, #0
 8006b7a:	da03      	bge.n	8006b84 <_printf_i+0xd0>
 8006b7c:	232d      	movs	r3, #45	@ 0x2d
 8006b7e:	426d      	negs	r5, r5
 8006b80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b84:	4859      	ldr	r0, [pc, #356]	@ (8006cec <_printf_i+0x238>)
 8006b86:	230a      	movs	r3, #10
 8006b88:	e011      	b.n	8006bae <_printf_i+0xfa>
 8006b8a:	6821      	ldr	r1, [r4, #0]
 8006b8c:	6833      	ldr	r3, [r6, #0]
 8006b8e:	0608      	lsls	r0, r1, #24
 8006b90:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b94:	d402      	bmi.n	8006b9c <_printf_i+0xe8>
 8006b96:	0649      	lsls	r1, r1, #25
 8006b98:	bf48      	it	mi
 8006b9a:	b2ad      	uxthmi	r5, r5
 8006b9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b9e:	4853      	ldr	r0, [pc, #332]	@ (8006cec <_printf_i+0x238>)
 8006ba0:	6033      	str	r3, [r6, #0]
 8006ba2:	bf14      	ite	ne
 8006ba4:	230a      	movne	r3, #10
 8006ba6:	2308      	moveq	r3, #8
 8006ba8:	2100      	movs	r1, #0
 8006baa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006bae:	6866      	ldr	r6, [r4, #4]
 8006bb0:	60a6      	str	r6, [r4, #8]
 8006bb2:	2e00      	cmp	r6, #0
 8006bb4:	bfa2      	ittt	ge
 8006bb6:	6821      	ldrge	r1, [r4, #0]
 8006bb8:	f021 0104 	bicge.w	r1, r1, #4
 8006bbc:	6021      	strge	r1, [r4, #0]
 8006bbe:	b90d      	cbnz	r5, 8006bc4 <_printf_i+0x110>
 8006bc0:	2e00      	cmp	r6, #0
 8006bc2:	d04b      	beq.n	8006c5c <_printf_i+0x1a8>
 8006bc4:	4616      	mov	r6, r2
 8006bc6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006bca:	fb03 5711 	mls	r7, r3, r1, r5
 8006bce:	5dc7      	ldrb	r7, [r0, r7]
 8006bd0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bd4:	462f      	mov	r7, r5
 8006bd6:	42bb      	cmp	r3, r7
 8006bd8:	460d      	mov	r5, r1
 8006bda:	d9f4      	bls.n	8006bc6 <_printf_i+0x112>
 8006bdc:	2b08      	cmp	r3, #8
 8006bde:	d10b      	bne.n	8006bf8 <_printf_i+0x144>
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	07df      	lsls	r7, r3, #31
 8006be4:	d508      	bpl.n	8006bf8 <_printf_i+0x144>
 8006be6:	6923      	ldr	r3, [r4, #16]
 8006be8:	6861      	ldr	r1, [r4, #4]
 8006bea:	4299      	cmp	r1, r3
 8006bec:	bfde      	ittt	le
 8006bee:	2330      	movle	r3, #48	@ 0x30
 8006bf0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006bf4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006bf8:	1b92      	subs	r2, r2, r6
 8006bfa:	6122      	str	r2, [r4, #16]
 8006bfc:	f8cd a000 	str.w	sl, [sp]
 8006c00:	464b      	mov	r3, r9
 8006c02:	aa03      	add	r2, sp, #12
 8006c04:	4621      	mov	r1, r4
 8006c06:	4640      	mov	r0, r8
 8006c08:	f7ff fee6 	bl	80069d8 <_printf_common>
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	d14a      	bne.n	8006ca6 <_printf_i+0x1f2>
 8006c10:	f04f 30ff 	mov.w	r0, #4294967295
 8006c14:	b004      	add	sp, #16
 8006c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c1a:	6823      	ldr	r3, [r4, #0]
 8006c1c:	f043 0320 	orr.w	r3, r3, #32
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	4833      	ldr	r0, [pc, #204]	@ (8006cf0 <_printf_i+0x23c>)
 8006c24:	2778      	movs	r7, #120	@ 0x78
 8006c26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	6831      	ldr	r1, [r6, #0]
 8006c2e:	061f      	lsls	r7, r3, #24
 8006c30:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c34:	d402      	bmi.n	8006c3c <_printf_i+0x188>
 8006c36:	065f      	lsls	r7, r3, #25
 8006c38:	bf48      	it	mi
 8006c3a:	b2ad      	uxthmi	r5, r5
 8006c3c:	6031      	str	r1, [r6, #0]
 8006c3e:	07d9      	lsls	r1, r3, #31
 8006c40:	bf44      	itt	mi
 8006c42:	f043 0320 	orrmi.w	r3, r3, #32
 8006c46:	6023      	strmi	r3, [r4, #0]
 8006c48:	b11d      	cbz	r5, 8006c52 <_printf_i+0x19e>
 8006c4a:	2310      	movs	r3, #16
 8006c4c:	e7ac      	b.n	8006ba8 <_printf_i+0xf4>
 8006c4e:	4827      	ldr	r0, [pc, #156]	@ (8006cec <_printf_i+0x238>)
 8006c50:	e7e9      	b.n	8006c26 <_printf_i+0x172>
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	f023 0320 	bic.w	r3, r3, #32
 8006c58:	6023      	str	r3, [r4, #0]
 8006c5a:	e7f6      	b.n	8006c4a <_printf_i+0x196>
 8006c5c:	4616      	mov	r6, r2
 8006c5e:	e7bd      	b.n	8006bdc <_printf_i+0x128>
 8006c60:	6833      	ldr	r3, [r6, #0]
 8006c62:	6825      	ldr	r5, [r4, #0]
 8006c64:	6961      	ldr	r1, [r4, #20]
 8006c66:	1d18      	adds	r0, r3, #4
 8006c68:	6030      	str	r0, [r6, #0]
 8006c6a:	062e      	lsls	r6, r5, #24
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	d501      	bpl.n	8006c74 <_printf_i+0x1c0>
 8006c70:	6019      	str	r1, [r3, #0]
 8006c72:	e002      	b.n	8006c7a <_printf_i+0x1c6>
 8006c74:	0668      	lsls	r0, r5, #25
 8006c76:	d5fb      	bpl.n	8006c70 <_printf_i+0x1bc>
 8006c78:	8019      	strh	r1, [r3, #0]
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	6123      	str	r3, [r4, #16]
 8006c7e:	4616      	mov	r6, r2
 8006c80:	e7bc      	b.n	8006bfc <_printf_i+0x148>
 8006c82:	6833      	ldr	r3, [r6, #0]
 8006c84:	1d1a      	adds	r2, r3, #4
 8006c86:	6032      	str	r2, [r6, #0]
 8006c88:	681e      	ldr	r6, [r3, #0]
 8006c8a:	6862      	ldr	r2, [r4, #4]
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	4630      	mov	r0, r6
 8006c90:	f7f9 fac6 	bl	8000220 <memchr>
 8006c94:	b108      	cbz	r0, 8006c9a <_printf_i+0x1e6>
 8006c96:	1b80      	subs	r0, r0, r6
 8006c98:	6060      	str	r0, [r4, #4]
 8006c9a:	6863      	ldr	r3, [r4, #4]
 8006c9c:	6123      	str	r3, [r4, #16]
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ca4:	e7aa      	b.n	8006bfc <_printf_i+0x148>
 8006ca6:	6923      	ldr	r3, [r4, #16]
 8006ca8:	4632      	mov	r2, r6
 8006caa:	4649      	mov	r1, r9
 8006cac:	4640      	mov	r0, r8
 8006cae:	47d0      	blx	sl
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	d0ad      	beq.n	8006c10 <_printf_i+0x15c>
 8006cb4:	6823      	ldr	r3, [r4, #0]
 8006cb6:	079b      	lsls	r3, r3, #30
 8006cb8:	d413      	bmi.n	8006ce2 <_printf_i+0x22e>
 8006cba:	68e0      	ldr	r0, [r4, #12]
 8006cbc:	9b03      	ldr	r3, [sp, #12]
 8006cbe:	4298      	cmp	r0, r3
 8006cc0:	bfb8      	it	lt
 8006cc2:	4618      	movlt	r0, r3
 8006cc4:	e7a6      	b.n	8006c14 <_printf_i+0x160>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	4632      	mov	r2, r6
 8006cca:	4649      	mov	r1, r9
 8006ccc:	4640      	mov	r0, r8
 8006cce:	47d0      	blx	sl
 8006cd0:	3001      	adds	r0, #1
 8006cd2:	d09d      	beq.n	8006c10 <_printf_i+0x15c>
 8006cd4:	3501      	adds	r5, #1
 8006cd6:	68e3      	ldr	r3, [r4, #12]
 8006cd8:	9903      	ldr	r1, [sp, #12]
 8006cda:	1a5b      	subs	r3, r3, r1
 8006cdc:	42ab      	cmp	r3, r5
 8006cde:	dcf2      	bgt.n	8006cc6 <_printf_i+0x212>
 8006ce0:	e7eb      	b.n	8006cba <_printf_i+0x206>
 8006ce2:	2500      	movs	r5, #0
 8006ce4:	f104 0619 	add.w	r6, r4, #25
 8006ce8:	e7f5      	b.n	8006cd6 <_printf_i+0x222>
 8006cea:	bf00      	nop
 8006cec:	0800e08e 	.word	0x0800e08e
 8006cf0:	0800e09f 	.word	0x0800e09f

08006cf4 <_scanf_float>:
 8006cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf8:	b087      	sub	sp, #28
 8006cfa:	4617      	mov	r7, r2
 8006cfc:	9303      	str	r3, [sp, #12]
 8006cfe:	688b      	ldr	r3, [r1, #8]
 8006d00:	1e5a      	subs	r2, r3, #1
 8006d02:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006d06:	bf81      	itttt	hi
 8006d08:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006d0c:	eb03 0b05 	addhi.w	fp, r3, r5
 8006d10:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006d14:	608b      	strhi	r3, [r1, #8]
 8006d16:	680b      	ldr	r3, [r1, #0]
 8006d18:	460a      	mov	r2, r1
 8006d1a:	f04f 0500 	mov.w	r5, #0
 8006d1e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006d22:	f842 3b1c 	str.w	r3, [r2], #28
 8006d26:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006d2a:	4680      	mov	r8, r0
 8006d2c:	460c      	mov	r4, r1
 8006d2e:	bf98      	it	ls
 8006d30:	f04f 0b00 	movls.w	fp, #0
 8006d34:	9201      	str	r2, [sp, #4]
 8006d36:	4616      	mov	r6, r2
 8006d38:	46aa      	mov	sl, r5
 8006d3a:	46a9      	mov	r9, r5
 8006d3c:	9502      	str	r5, [sp, #8]
 8006d3e:	68a2      	ldr	r2, [r4, #8]
 8006d40:	b152      	cbz	r2, 8006d58 <_scanf_float+0x64>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	2b4e      	cmp	r3, #78	@ 0x4e
 8006d48:	d864      	bhi.n	8006e14 <_scanf_float+0x120>
 8006d4a:	2b40      	cmp	r3, #64	@ 0x40
 8006d4c:	d83c      	bhi.n	8006dc8 <_scanf_float+0xd4>
 8006d4e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006d52:	b2c8      	uxtb	r0, r1
 8006d54:	280e      	cmp	r0, #14
 8006d56:	d93a      	bls.n	8006dce <_scanf_float+0xda>
 8006d58:	f1b9 0f00 	cmp.w	r9, #0
 8006d5c:	d003      	beq.n	8006d66 <_scanf_float+0x72>
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d64:	6023      	str	r3, [r4, #0]
 8006d66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d6a:	f1ba 0f01 	cmp.w	sl, #1
 8006d6e:	f200 8117 	bhi.w	8006fa0 <_scanf_float+0x2ac>
 8006d72:	9b01      	ldr	r3, [sp, #4]
 8006d74:	429e      	cmp	r6, r3
 8006d76:	f200 8108 	bhi.w	8006f8a <_scanf_float+0x296>
 8006d7a:	2001      	movs	r0, #1
 8006d7c:	b007      	add	sp, #28
 8006d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d82:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006d86:	2a0d      	cmp	r2, #13
 8006d88:	d8e6      	bhi.n	8006d58 <_scanf_float+0x64>
 8006d8a:	a101      	add	r1, pc, #4	@ (adr r1, 8006d90 <_scanf_float+0x9c>)
 8006d8c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006d90:	08006ed7 	.word	0x08006ed7
 8006d94:	08006d59 	.word	0x08006d59
 8006d98:	08006d59 	.word	0x08006d59
 8006d9c:	08006d59 	.word	0x08006d59
 8006da0:	08006f37 	.word	0x08006f37
 8006da4:	08006f0f 	.word	0x08006f0f
 8006da8:	08006d59 	.word	0x08006d59
 8006dac:	08006d59 	.word	0x08006d59
 8006db0:	08006ee5 	.word	0x08006ee5
 8006db4:	08006d59 	.word	0x08006d59
 8006db8:	08006d59 	.word	0x08006d59
 8006dbc:	08006d59 	.word	0x08006d59
 8006dc0:	08006d59 	.word	0x08006d59
 8006dc4:	08006e9d 	.word	0x08006e9d
 8006dc8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006dcc:	e7db      	b.n	8006d86 <_scanf_float+0x92>
 8006dce:	290e      	cmp	r1, #14
 8006dd0:	d8c2      	bhi.n	8006d58 <_scanf_float+0x64>
 8006dd2:	a001      	add	r0, pc, #4	@ (adr r0, 8006dd8 <_scanf_float+0xe4>)
 8006dd4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006dd8:	08006e8d 	.word	0x08006e8d
 8006ddc:	08006d59 	.word	0x08006d59
 8006de0:	08006e8d 	.word	0x08006e8d
 8006de4:	08006f23 	.word	0x08006f23
 8006de8:	08006d59 	.word	0x08006d59
 8006dec:	08006e35 	.word	0x08006e35
 8006df0:	08006e73 	.word	0x08006e73
 8006df4:	08006e73 	.word	0x08006e73
 8006df8:	08006e73 	.word	0x08006e73
 8006dfc:	08006e73 	.word	0x08006e73
 8006e00:	08006e73 	.word	0x08006e73
 8006e04:	08006e73 	.word	0x08006e73
 8006e08:	08006e73 	.word	0x08006e73
 8006e0c:	08006e73 	.word	0x08006e73
 8006e10:	08006e73 	.word	0x08006e73
 8006e14:	2b6e      	cmp	r3, #110	@ 0x6e
 8006e16:	d809      	bhi.n	8006e2c <_scanf_float+0x138>
 8006e18:	2b60      	cmp	r3, #96	@ 0x60
 8006e1a:	d8b2      	bhi.n	8006d82 <_scanf_float+0x8e>
 8006e1c:	2b54      	cmp	r3, #84	@ 0x54
 8006e1e:	d07b      	beq.n	8006f18 <_scanf_float+0x224>
 8006e20:	2b59      	cmp	r3, #89	@ 0x59
 8006e22:	d199      	bne.n	8006d58 <_scanf_float+0x64>
 8006e24:	2d07      	cmp	r5, #7
 8006e26:	d197      	bne.n	8006d58 <_scanf_float+0x64>
 8006e28:	2508      	movs	r5, #8
 8006e2a:	e02c      	b.n	8006e86 <_scanf_float+0x192>
 8006e2c:	2b74      	cmp	r3, #116	@ 0x74
 8006e2e:	d073      	beq.n	8006f18 <_scanf_float+0x224>
 8006e30:	2b79      	cmp	r3, #121	@ 0x79
 8006e32:	e7f6      	b.n	8006e22 <_scanf_float+0x12e>
 8006e34:	6821      	ldr	r1, [r4, #0]
 8006e36:	05c8      	lsls	r0, r1, #23
 8006e38:	d51b      	bpl.n	8006e72 <_scanf_float+0x17e>
 8006e3a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006e3e:	6021      	str	r1, [r4, #0]
 8006e40:	f109 0901 	add.w	r9, r9, #1
 8006e44:	f1bb 0f00 	cmp.w	fp, #0
 8006e48:	d003      	beq.n	8006e52 <_scanf_float+0x15e>
 8006e4a:	3201      	adds	r2, #1
 8006e4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e50:	60a2      	str	r2, [r4, #8]
 8006e52:	68a3      	ldr	r3, [r4, #8]
 8006e54:	3b01      	subs	r3, #1
 8006e56:	60a3      	str	r3, [r4, #8]
 8006e58:	6923      	ldr	r3, [r4, #16]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	6123      	str	r3, [r4, #16]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	3b01      	subs	r3, #1
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	607b      	str	r3, [r7, #4]
 8006e66:	f340 8087 	ble.w	8006f78 <_scanf_float+0x284>
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	603b      	str	r3, [r7, #0]
 8006e70:	e765      	b.n	8006d3e <_scanf_float+0x4a>
 8006e72:	eb1a 0105 	adds.w	r1, sl, r5
 8006e76:	f47f af6f 	bne.w	8006d58 <_scanf_float+0x64>
 8006e7a:	6822      	ldr	r2, [r4, #0]
 8006e7c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006e80:	6022      	str	r2, [r4, #0]
 8006e82:	460d      	mov	r5, r1
 8006e84:	468a      	mov	sl, r1
 8006e86:	f806 3b01 	strb.w	r3, [r6], #1
 8006e8a:	e7e2      	b.n	8006e52 <_scanf_float+0x15e>
 8006e8c:	6822      	ldr	r2, [r4, #0]
 8006e8e:	0610      	lsls	r0, r2, #24
 8006e90:	f57f af62 	bpl.w	8006d58 <_scanf_float+0x64>
 8006e94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e98:	6022      	str	r2, [r4, #0]
 8006e9a:	e7f4      	b.n	8006e86 <_scanf_float+0x192>
 8006e9c:	f1ba 0f00 	cmp.w	sl, #0
 8006ea0:	d10e      	bne.n	8006ec0 <_scanf_float+0x1cc>
 8006ea2:	f1b9 0f00 	cmp.w	r9, #0
 8006ea6:	d10e      	bne.n	8006ec6 <_scanf_float+0x1d2>
 8006ea8:	6822      	ldr	r2, [r4, #0]
 8006eaa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006eae:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006eb2:	d108      	bne.n	8006ec6 <_scanf_float+0x1d2>
 8006eb4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006eb8:	6022      	str	r2, [r4, #0]
 8006eba:	f04f 0a01 	mov.w	sl, #1
 8006ebe:	e7e2      	b.n	8006e86 <_scanf_float+0x192>
 8006ec0:	f1ba 0f02 	cmp.w	sl, #2
 8006ec4:	d055      	beq.n	8006f72 <_scanf_float+0x27e>
 8006ec6:	2d01      	cmp	r5, #1
 8006ec8:	d002      	beq.n	8006ed0 <_scanf_float+0x1dc>
 8006eca:	2d04      	cmp	r5, #4
 8006ecc:	f47f af44 	bne.w	8006d58 <_scanf_float+0x64>
 8006ed0:	3501      	adds	r5, #1
 8006ed2:	b2ed      	uxtb	r5, r5
 8006ed4:	e7d7      	b.n	8006e86 <_scanf_float+0x192>
 8006ed6:	f1ba 0f01 	cmp.w	sl, #1
 8006eda:	f47f af3d 	bne.w	8006d58 <_scanf_float+0x64>
 8006ede:	f04f 0a02 	mov.w	sl, #2
 8006ee2:	e7d0      	b.n	8006e86 <_scanf_float+0x192>
 8006ee4:	b97d      	cbnz	r5, 8006f06 <_scanf_float+0x212>
 8006ee6:	f1b9 0f00 	cmp.w	r9, #0
 8006eea:	f47f af38 	bne.w	8006d5e <_scanf_float+0x6a>
 8006eee:	6822      	ldr	r2, [r4, #0]
 8006ef0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006ef4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006ef8:	f040 8108 	bne.w	800710c <_scanf_float+0x418>
 8006efc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006f00:	6022      	str	r2, [r4, #0]
 8006f02:	2501      	movs	r5, #1
 8006f04:	e7bf      	b.n	8006e86 <_scanf_float+0x192>
 8006f06:	2d03      	cmp	r5, #3
 8006f08:	d0e2      	beq.n	8006ed0 <_scanf_float+0x1dc>
 8006f0a:	2d05      	cmp	r5, #5
 8006f0c:	e7de      	b.n	8006ecc <_scanf_float+0x1d8>
 8006f0e:	2d02      	cmp	r5, #2
 8006f10:	f47f af22 	bne.w	8006d58 <_scanf_float+0x64>
 8006f14:	2503      	movs	r5, #3
 8006f16:	e7b6      	b.n	8006e86 <_scanf_float+0x192>
 8006f18:	2d06      	cmp	r5, #6
 8006f1a:	f47f af1d 	bne.w	8006d58 <_scanf_float+0x64>
 8006f1e:	2507      	movs	r5, #7
 8006f20:	e7b1      	b.n	8006e86 <_scanf_float+0x192>
 8006f22:	6822      	ldr	r2, [r4, #0]
 8006f24:	0591      	lsls	r1, r2, #22
 8006f26:	f57f af17 	bpl.w	8006d58 <_scanf_float+0x64>
 8006f2a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006f2e:	6022      	str	r2, [r4, #0]
 8006f30:	f8cd 9008 	str.w	r9, [sp, #8]
 8006f34:	e7a7      	b.n	8006e86 <_scanf_float+0x192>
 8006f36:	6822      	ldr	r2, [r4, #0]
 8006f38:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006f3c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006f40:	d006      	beq.n	8006f50 <_scanf_float+0x25c>
 8006f42:	0550      	lsls	r0, r2, #21
 8006f44:	f57f af08 	bpl.w	8006d58 <_scanf_float+0x64>
 8006f48:	f1b9 0f00 	cmp.w	r9, #0
 8006f4c:	f000 80de 	beq.w	800710c <_scanf_float+0x418>
 8006f50:	0591      	lsls	r1, r2, #22
 8006f52:	bf58      	it	pl
 8006f54:	9902      	ldrpl	r1, [sp, #8]
 8006f56:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006f5a:	bf58      	it	pl
 8006f5c:	eba9 0101 	subpl.w	r1, r9, r1
 8006f60:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006f64:	bf58      	it	pl
 8006f66:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006f6a:	6022      	str	r2, [r4, #0]
 8006f6c:	f04f 0900 	mov.w	r9, #0
 8006f70:	e789      	b.n	8006e86 <_scanf_float+0x192>
 8006f72:	f04f 0a03 	mov.w	sl, #3
 8006f76:	e786      	b.n	8006e86 <_scanf_float+0x192>
 8006f78:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006f7c:	4639      	mov	r1, r7
 8006f7e:	4640      	mov	r0, r8
 8006f80:	4798      	blx	r3
 8006f82:	2800      	cmp	r0, #0
 8006f84:	f43f aedb 	beq.w	8006d3e <_scanf_float+0x4a>
 8006f88:	e6e6      	b.n	8006d58 <_scanf_float+0x64>
 8006f8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f92:	463a      	mov	r2, r7
 8006f94:	4640      	mov	r0, r8
 8006f96:	4798      	blx	r3
 8006f98:	6923      	ldr	r3, [r4, #16]
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	6123      	str	r3, [r4, #16]
 8006f9e:	e6e8      	b.n	8006d72 <_scanf_float+0x7e>
 8006fa0:	1e6b      	subs	r3, r5, #1
 8006fa2:	2b06      	cmp	r3, #6
 8006fa4:	d824      	bhi.n	8006ff0 <_scanf_float+0x2fc>
 8006fa6:	2d02      	cmp	r5, #2
 8006fa8:	d836      	bhi.n	8007018 <_scanf_float+0x324>
 8006faa:	9b01      	ldr	r3, [sp, #4]
 8006fac:	429e      	cmp	r6, r3
 8006fae:	f67f aee4 	bls.w	8006d7a <_scanf_float+0x86>
 8006fb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006fba:	463a      	mov	r2, r7
 8006fbc:	4640      	mov	r0, r8
 8006fbe:	4798      	blx	r3
 8006fc0:	6923      	ldr	r3, [r4, #16]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	6123      	str	r3, [r4, #16]
 8006fc6:	e7f0      	b.n	8006faa <_scanf_float+0x2b6>
 8006fc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fcc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006fd0:	463a      	mov	r2, r7
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	4798      	blx	r3
 8006fd6:	6923      	ldr	r3, [r4, #16]
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	6123      	str	r3, [r4, #16]
 8006fdc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fe0:	fa5f fa8a 	uxtb.w	sl, sl
 8006fe4:	f1ba 0f02 	cmp.w	sl, #2
 8006fe8:	d1ee      	bne.n	8006fc8 <_scanf_float+0x2d4>
 8006fea:	3d03      	subs	r5, #3
 8006fec:	b2ed      	uxtb	r5, r5
 8006fee:	1b76      	subs	r6, r6, r5
 8006ff0:	6823      	ldr	r3, [r4, #0]
 8006ff2:	05da      	lsls	r2, r3, #23
 8006ff4:	d530      	bpl.n	8007058 <_scanf_float+0x364>
 8006ff6:	055b      	lsls	r3, r3, #21
 8006ff8:	d511      	bpl.n	800701e <_scanf_float+0x32a>
 8006ffa:	9b01      	ldr	r3, [sp, #4]
 8006ffc:	429e      	cmp	r6, r3
 8006ffe:	f67f aebc 	bls.w	8006d7a <_scanf_float+0x86>
 8007002:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007006:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800700a:	463a      	mov	r2, r7
 800700c:	4640      	mov	r0, r8
 800700e:	4798      	blx	r3
 8007010:	6923      	ldr	r3, [r4, #16]
 8007012:	3b01      	subs	r3, #1
 8007014:	6123      	str	r3, [r4, #16]
 8007016:	e7f0      	b.n	8006ffa <_scanf_float+0x306>
 8007018:	46aa      	mov	sl, r5
 800701a:	46b3      	mov	fp, r6
 800701c:	e7de      	b.n	8006fdc <_scanf_float+0x2e8>
 800701e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007022:	6923      	ldr	r3, [r4, #16]
 8007024:	2965      	cmp	r1, #101	@ 0x65
 8007026:	f103 33ff 	add.w	r3, r3, #4294967295
 800702a:	f106 35ff 	add.w	r5, r6, #4294967295
 800702e:	6123      	str	r3, [r4, #16]
 8007030:	d00c      	beq.n	800704c <_scanf_float+0x358>
 8007032:	2945      	cmp	r1, #69	@ 0x45
 8007034:	d00a      	beq.n	800704c <_scanf_float+0x358>
 8007036:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800703a:	463a      	mov	r2, r7
 800703c:	4640      	mov	r0, r8
 800703e:	4798      	blx	r3
 8007040:	6923      	ldr	r3, [r4, #16]
 8007042:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007046:	3b01      	subs	r3, #1
 8007048:	1eb5      	subs	r5, r6, #2
 800704a:	6123      	str	r3, [r4, #16]
 800704c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007050:	463a      	mov	r2, r7
 8007052:	4640      	mov	r0, r8
 8007054:	4798      	blx	r3
 8007056:	462e      	mov	r6, r5
 8007058:	6822      	ldr	r2, [r4, #0]
 800705a:	f012 0210 	ands.w	r2, r2, #16
 800705e:	d001      	beq.n	8007064 <_scanf_float+0x370>
 8007060:	2000      	movs	r0, #0
 8007062:	e68b      	b.n	8006d7c <_scanf_float+0x88>
 8007064:	7032      	strb	r2, [r6, #0]
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800706c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007070:	d11c      	bne.n	80070ac <_scanf_float+0x3b8>
 8007072:	9b02      	ldr	r3, [sp, #8]
 8007074:	454b      	cmp	r3, r9
 8007076:	eba3 0209 	sub.w	r2, r3, r9
 800707a:	d123      	bne.n	80070c4 <_scanf_float+0x3d0>
 800707c:	9901      	ldr	r1, [sp, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	4640      	mov	r0, r8
 8007082:	f002 fc65 	bl	8009950 <_strtod_r>
 8007086:	9b03      	ldr	r3, [sp, #12]
 8007088:	6821      	ldr	r1, [r4, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f011 0f02 	tst.w	r1, #2
 8007090:	ec57 6b10 	vmov	r6, r7, d0
 8007094:	f103 0204 	add.w	r2, r3, #4
 8007098:	d01f      	beq.n	80070da <_scanf_float+0x3e6>
 800709a:	9903      	ldr	r1, [sp, #12]
 800709c:	600a      	str	r2, [r1, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	e9c3 6700 	strd	r6, r7, [r3]
 80070a4:	68e3      	ldr	r3, [r4, #12]
 80070a6:	3301      	adds	r3, #1
 80070a8:	60e3      	str	r3, [r4, #12]
 80070aa:	e7d9      	b.n	8007060 <_scanf_float+0x36c>
 80070ac:	9b04      	ldr	r3, [sp, #16]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d0e4      	beq.n	800707c <_scanf_float+0x388>
 80070b2:	9905      	ldr	r1, [sp, #20]
 80070b4:	230a      	movs	r3, #10
 80070b6:	3101      	adds	r1, #1
 80070b8:	4640      	mov	r0, r8
 80070ba:	f002 fcc9 	bl	8009a50 <_strtol_r>
 80070be:	9b04      	ldr	r3, [sp, #16]
 80070c0:	9e05      	ldr	r6, [sp, #20]
 80070c2:	1ac2      	subs	r2, r0, r3
 80070c4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80070c8:	429e      	cmp	r6, r3
 80070ca:	bf28      	it	cs
 80070cc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80070d0:	4910      	ldr	r1, [pc, #64]	@ (8007114 <_scanf_float+0x420>)
 80070d2:	4630      	mov	r0, r6
 80070d4:	f000 f954 	bl	8007380 <siprintf>
 80070d8:	e7d0      	b.n	800707c <_scanf_float+0x388>
 80070da:	f011 0f04 	tst.w	r1, #4
 80070de:	9903      	ldr	r1, [sp, #12]
 80070e0:	600a      	str	r2, [r1, #0]
 80070e2:	d1dc      	bne.n	800709e <_scanf_float+0x3aa>
 80070e4:	681d      	ldr	r5, [r3, #0]
 80070e6:	4632      	mov	r2, r6
 80070e8:	463b      	mov	r3, r7
 80070ea:	4630      	mov	r0, r6
 80070ec:	4639      	mov	r1, r7
 80070ee:	f7f9 fd45 	bl	8000b7c <__aeabi_dcmpun>
 80070f2:	b128      	cbz	r0, 8007100 <_scanf_float+0x40c>
 80070f4:	4808      	ldr	r0, [pc, #32]	@ (8007118 <_scanf_float+0x424>)
 80070f6:	f000 fad9 	bl	80076ac <nanf>
 80070fa:	ed85 0a00 	vstr	s0, [r5]
 80070fe:	e7d1      	b.n	80070a4 <_scanf_float+0x3b0>
 8007100:	4630      	mov	r0, r6
 8007102:	4639      	mov	r1, r7
 8007104:	f7f9 fd98 	bl	8000c38 <__aeabi_d2f>
 8007108:	6028      	str	r0, [r5, #0]
 800710a:	e7cb      	b.n	80070a4 <_scanf_float+0x3b0>
 800710c:	f04f 0900 	mov.w	r9, #0
 8007110:	e629      	b.n	8006d66 <_scanf_float+0x72>
 8007112:	bf00      	nop
 8007114:	0800e0b0 	.word	0x0800e0b0
 8007118:	0800e445 	.word	0x0800e445

0800711c <std>:
 800711c:	2300      	movs	r3, #0
 800711e:	b510      	push	{r4, lr}
 8007120:	4604      	mov	r4, r0
 8007122:	e9c0 3300 	strd	r3, r3, [r0]
 8007126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800712a:	6083      	str	r3, [r0, #8]
 800712c:	8181      	strh	r1, [r0, #12]
 800712e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007130:	81c2      	strh	r2, [r0, #14]
 8007132:	6183      	str	r3, [r0, #24]
 8007134:	4619      	mov	r1, r3
 8007136:	2208      	movs	r2, #8
 8007138:	305c      	adds	r0, #92	@ 0x5c
 800713a:	f000 fa19 	bl	8007570 <memset>
 800713e:	4b0d      	ldr	r3, [pc, #52]	@ (8007174 <std+0x58>)
 8007140:	6263      	str	r3, [r4, #36]	@ 0x24
 8007142:	4b0d      	ldr	r3, [pc, #52]	@ (8007178 <std+0x5c>)
 8007144:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007146:	4b0d      	ldr	r3, [pc, #52]	@ (800717c <std+0x60>)
 8007148:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800714a:	4b0d      	ldr	r3, [pc, #52]	@ (8007180 <std+0x64>)
 800714c:	6323      	str	r3, [r4, #48]	@ 0x30
 800714e:	4b0d      	ldr	r3, [pc, #52]	@ (8007184 <std+0x68>)
 8007150:	6224      	str	r4, [r4, #32]
 8007152:	429c      	cmp	r4, r3
 8007154:	d006      	beq.n	8007164 <std+0x48>
 8007156:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800715a:	4294      	cmp	r4, r2
 800715c:	d002      	beq.n	8007164 <std+0x48>
 800715e:	33d0      	adds	r3, #208	@ 0xd0
 8007160:	429c      	cmp	r4, r3
 8007162:	d105      	bne.n	8007170 <std+0x54>
 8007164:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800716c:	f000 ba8c 	b.w	8007688 <__retarget_lock_init_recursive>
 8007170:	bd10      	pop	{r4, pc}
 8007172:	bf00      	nop
 8007174:	080073c1 	.word	0x080073c1
 8007178:	080073e3 	.word	0x080073e3
 800717c:	0800741b 	.word	0x0800741b
 8007180:	0800743f 	.word	0x0800743f
 8007184:	200007fc 	.word	0x200007fc

08007188 <stdio_exit_handler>:
 8007188:	4a02      	ldr	r2, [pc, #8]	@ (8007194 <stdio_exit_handler+0xc>)
 800718a:	4903      	ldr	r1, [pc, #12]	@ (8007198 <stdio_exit_handler+0x10>)
 800718c:	4803      	ldr	r0, [pc, #12]	@ (800719c <stdio_exit_handler+0x14>)
 800718e:	f000 b869 	b.w	8007264 <_fwalk_sglue>
 8007192:	bf00      	nop
 8007194:	20000014 	.word	0x20000014
 8007198:	0800a091 	.word	0x0800a091
 800719c:	20000024 	.word	0x20000024

080071a0 <cleanup_stdio>:
 80071a0:	6841      	ldr	r1, [r0, #4]
 80071a2:	4b0c      	ldr	r3, [pc, #48]	@ (80071d4 <cleanup_stdio+0x34>)
 80071a4:	4299      	cmp	r1, r3
 80071a6:	b510      	push	{r4, lr}
 80071a8:	4604      	mov	r4, r0
 80071aa:	d001      	beq.n	80071b0 <cleanup_stdio+0x10>
 80071ac:	f002 ff70 	bl	800a090 <_fflush_r>
 80071b0:	68a1      	ldr	r1, [r4, #8]
 80071b2:	4b09      	ldr	r3, [pc, #36]	@ (80071d8 <cleanup_stdio+0x38>)
 80071b4:	4299      	cmp	r1, r3
 80071b6:	d002      	beq.n	80071be <cleanup_stdio+0x1e>
 80071b8:	4620      	mov	r0, r4
 80071ba:	f002 ff69 	bl	800a090 <_fflush_r>
 80071be:	68e1      	ldr	r1, [r4, #12]
 80071c0:	4b06      	ldr	r3, [pc, #24]	@ (80071dc <cleanup_stdio+0x3c>)
 80071c2:	4299      	cmp	r1, r3
 80071c4:	d004      	beq.n	80071d0 <cleanup_stdio+0x30>
 80071c6:	4620      	mov	r0, r4
 80071c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071cc:	f002 bf60 	b.w	800a090 <_fflush_r>
 80071d0:	bd10      	pop	{r4, pc}
 80071d2:	bf00      	nop
 80071d4:	200007fc 	.word	0x200007fc
 80071d8:	20000864 	.word	0x20000864
 80071dc:	200008cc 	.word	0x200008cc

080071e0 <global_stdio_init.part.0>:
 80071e0:	b510      	push	{r4, lr}
 80071e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007210 <global_stdio_init.part.0+0x30>)
 80071e4:	4c0b      	ldr	r4, [pc, #44]	@ (8007214 <global_stdio_init.part.0+0x34>)
 80071e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007218 <global_stdio_init.part.0+0x38>)
 80071e8:	601a      	str	r2, [r3, #0]
 80071ea:	4620      	mov	r0, r4
 80071ec:	2200      	movs	r2, #0
 80071ee:	2104      	movs	r1, #4
 80071f0:	f7ff ff94 	bl	800711c <std>
 80071f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80071f8:	2201      	movs	r2, #1
 80071fa:	2109      	movs	r1, #9
 80071fc:	f7ff ff8e 	bl	800711c <std>
 8007200:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007204:	2202      	movs	r2, #2
 8007206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800720a:	2112      	movs	r1, #18
 800720c:	f7ff bf86 	b.w	800711c <std>
 8007210:	20000934 	.word	0x20000934
 8007214:	200007fc 	.word	0x200007fc
 8007218:	08007189 	.word	0x08007189

0800721c <__sfp_lock_acquire>:
 800721c:	4801      	ldr	r0, [pc, #4]	@ (8007224 <__sfp_lock_acquire+0x8>)
 800721e:	f000 ba34 	b.w	800768a <__retarget_lock_acquire_recursive>
 8007222:	bf00      	nop
 8007224:	2000093d 	.word	0x2000093d

08007228 <__sfp_lock_release>:
 8007228:	4801      	ldr	r0, [pc, #4]	@ (8007230 <__sfp_lock_release+0x8>)
 800722a:	f000 ba2f 	b.w	800768c <__retarget_lock_release_recursive>
 800722e:	bf00      	nop
 8007230:	2000093d 	.word	0x2000093d

08007234 <__sinit>:
 8007234:	b510      	push	{r4, lr}
 8007236:	4604      	mov	r4, r0
 8007238:	f7ff fff0 	bl	800721c <__sfp_lock_acquire>
 800723c:	6a23      	ldr	r3, [r4, #32]
 800723e:	b11b      	cbz	r3, 8007248 <__sinit+0x14>
 8007240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007244:	f7ff bff0 	b.w	8007228 <__sfp_lock_release>
 8007248:	4b04      	ldr	r3, [pc, #16]	@ (800725c <__sinit+0x28>)
 800724a:	6223      	str	r3, [r4, #32]
 800724c:	4b04      	ldr	r3, [pc, #16]	@ (8007260 <__sinit+0x2c>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1f5      	bne.n	8007240 <__sinit+0xc>
 8007254:	f7ff ffc4 	bl	80071e0 <global_stdio_init.part.0>
 8007258:	e7f2      	b.n	8007240 <__sinit+0xc>
 800725a:	bf00      	nop
 800725c:	080071a1 	.word	0x080071a1
 8007260:	20000934 	.word	0x20000934

08007264 <_fwalk_sglue>:
 8007264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007268:	4607      	mov	r7, r0
 800726a:	4688      	mov	r8, r1
 800726c:	4614      	mov	r4, r2
 800726e:	2600      	movs	r6, #0
 8007270:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007274:	f1b9 0901 	subs.w	r9, r9, #1
 8007278:	d505      	bpl.n	8007286 <_fwalk_sglue+0x22>
 800727a:	6824      	ldr	r4, [r4, #0]
 800727c:	2c00      	cmp	r4, #0
 800727e:	d1f7      	bne.n	8007270 <_fwalk_sglue+0xc>
 8007280:	4630      	mov	r0, r6
 8007282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007286:	89ab      	ldrh	r3, [r5, #12]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d907      	bls.n	800729c <_fwalk_sglue+0x38>
 800728c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007290:	3301      	adds	r3, #1
 8007292:	d003      	beq.n	800729c <_fwalk_sglue+0x38>
 8007294:	4629      	mov	r1, r5
 8007296:	4638      	mov	r0, r7
 8007298:	47c0      	blx	r8
 800729a:	4306      	orrs	r6, r0
 800729c:	3568      	adds	r5, #104	@ 0x68
 800729e:	e7e9      	b.n	8007274 <_fwalk_sglue+0x10>

080072a0 <iprintf>:
 80072a0:	b40f      	push	{r0, r1, r2, r3}
 80072a2:	b507      	push	{r0, r1, r2, lr}
 80072a4:	4906      	ldr	r1, [pc, #24]	@ (80072c0 <iprintf+0x20>)
 80072a6:	ab04      	add	r3, sp, #16
 80072a8:	6808      	ldr	r0, [r1, #0]
 80072aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80072ae:	6881      	ldr	r1, [r0, #8]
 80072b0:	9301      	str	r3, [sp, #4]
 80072b2:	f002 fd51 	bl	8009d58 <_vfiprintf_r>
 80072b6:	b003      	add	sp, #12
 80072b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80072bc:	b004      	add	sp, #16
 80072be:	4770      	bx	lr
 80072c0:	20000020 	.word	0x20000020

080072c4 <_puts_r>:
 80072c4:	6a03      	ldr	r3, [r0, #32]
 80072c6:	b570      	push	{r4, r5, r6, lr}
 80072c8:	6884      	ldr	r4, [r0, #8]
 80072ca:	4605      	mov	r5, r0
 80072cc:	460e      	mov	r6, r1
 80072ce:	b90b      	cbnz	r3, 80072d4 <_puts_r+0x10>
 80072d0:	f7ff ffb0 	bl	8007234 <__sinit>
 80072d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072d6:	07db      	lsls	r3, r3, #31
 80072d8:	d405      	bmi.n	80072e6 <_puts_r+0x22>
 80072da:	89a3      	ldrh	r3, [r4, #12]
 80072dc:	0598      	lsls	r0, r3, #22
 80072de:	d402      	bmi.n	80072e6 <_puts_r+0x22>
 80072e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072e2:	f000 f9d2 	bl	800768a <__retarget_lock_acquire_recursive>
 80072e6:	89a3      	ldrh	r3, [r4, #12]
 80072e8:	0719      	lsls	r1, r3, #28
 80072ea:	d502      	bpl.n	80072f2 <_puts_r+0x2e>
 80072ec:	6923      	ldr	r3, [r4, #16]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d135      	bne.n	800735e <_puts_r+0x9a>
 80072f2:	4621      	mov	r1, r4
 80072f4:	4628      	mov	r0, r5
 80072f6:	f000 f8e5 	bl	80074c4 <__swsetup_r>
 80072fa:	b380      	cbz	r0, 800735e <_puts_r+0x9a>
 80072fc:	f04f 35ff 	mov.w	r5, #4294967295
 8007300:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007302:	07da      	lsls	r2, r3, #31
 8007304:	d405      	bmi.n	8007312 <_puts_r+0x4e>
 8007306:	89a3      	ldrh	r3, [r4, #12]
 8007308:	059b      	lsls	r3, r3, #22
 800730a:	d402      	bmi.n	8007312 <_puts_r+0x4e>
 800730c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800730e:	f000 f9bd 	bl	800768c <__retarget_lock_release_recursive>
 8007312:	4628      	mov	r0, r5
 8007314:	bd70      	pop	{r4, r5, r6, pc}
 8007316:	2b00      	cmp	r3, #0
 8007318:	da04      	bge.n	8007324 <_puts_r+0x60>
 800731a:	69a2      	ldr	r2, [r4, #24]
 800731c:	429a      	cmp	r2, r3
 800731e:	dc17      	bgt.n	8007350 <_puts_r+0x8c>
 8007320:	290a      	cmp	r1, #10
 8007322:	d015      	beq.n	8007350 <_puts_r+0x8c>
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	1c5a      	adds	r2, r3, #1
 8007328:	6022      	str	r2, [r4, #0]
 800732a:	7019      	strb	r1, [r3, #0]
 800732c:	68a3      	ldr	r3, [r4, #8]
 800732e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007332:	3b01      	subs	r3, #1
 8007334:	60a3      	str	r3, [r4, #8]
 8007336:	2900      	cmp	r1, #0
 8007338:	d1ed      	bne.n	8007316 <_puts_r+0x52>
 800733a:	2b00      	cmp	r3, #0
 800733c:	da11      	bge.n	8007362 <_puts_r+0x9e>
 800733e:	4622      	mov	r2, r4
 8007340:	210a      	movs	r1, #10
 8007342:	4628      	mov	r0, r5
 8007344:	f000 f87f 	bl	8007446 <__swbuf_r>
 8007348:	3001      	adds	r0, #1
 800734a:	d0d7      	beq.n	80072fc <_puts_r+0x38>
 800734c:	250a      	movs	r5, #10
 800734e:	e7d7      	b.n	8007300 <_puts_r+0x3c>
 8007350:	4622      	mov	r2, r4
 8007352:	4628      	mov	r0, r5
 8007354:	f000 f877 	bl	8007446 <__swbuf_r>
 8007358:	3001      	adds	r0, #1
 800735a:	d1e7      	bne.n	800732c <_puts_r+0x68>
 800735c:	e7ce      	b.n	80072fc <_puts_r+0x38>
 800735e:	3e01      	subs	r6, #1
 8007360:	e7e4      	b.n	800732c <_puts_r+0x68>
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	1c5a      	adds	r2, r3, #1
 8007366:	6022      	str	r2, [r4, #0]
 8007368:	220a      	movs	r2, #10
 800736a:	701a      	strb	r2, [r3, #0]
 800736c:	e7ee      	b.n	800734c <_puts_r+0x88>
	...

08007370 <puts>:
 8007370:	4b02      	ldr	r3, [pc, #8]	@ (800737c <puts+0xc>)
 8007372:	4601      	mov	r1, r0
 8007374:	6818      	ldr	r0, [r3, #0]
 8007376:	f7ff bfa5 	b.w	80072c4 <_puts_r>
 800737a:	bf00      	nop
 800737c:	20000020 	.word	0x20000020

08007380 <siprintf>:
 8007380:	b40e      	push	{r1, r2, r3}
 8007382:	b500      	push	{lr}
 8007384:	b09c      	sub	sp, #112	@ 0x70
 8007386:	ab1d      	add	r3, sp, #116	@ 0x74
 8007388:	9002      	str	r0, [sp, #8]
 800738a:	9006      	str	r0, [sp, #24]
 800738c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007390:	4809      	ldr	r0, [pc, #36]	@ (80073b8 <siprintf+0x38>)
 8007392:	9107      	str	r1, [sp, #28]
 8007394:	9104      	str	r1, [sp, #16]
 8007396:	4909      	ldr	r1, [pc, #36]	@ (80073bc <siprintf+0x3c>)
 8007398:	f853 2b04 	ldr.w	r2, [r3], #4
 800739c:	9105      	str	r1, [sp, #20]
 800739e:	6800      	ldr	r0, [r0, #0]
 80073a0:	9301      	str	r3, [sp, #4]
 80073a2:	a902      	add	r1, sp, #8
 80073a4:	f002 fbb2 	bl	8009b0c <_svfiprintf_r>
 80073a8:	9b02      	ldr	r3, [sp, #8]
 80073aa:	2200      	movs	r2, #0
 80073ac:	701a      	strb	r2, [r3, #0]
 80073ae:	b01c      	add	sp, #112	@ 0x70
 80073b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073b4:	b003      	add	sp, #12
 80073b6:	4770      	bx	lr
 80073b8:	20000020 	.word	0x20000020
 80073bc:	ffff0208 	.word	0xffff0208

080073c0 <__sread>:
 80073c0:	b510      	push	{r4, lr}
 80073c2:	460c      	mov	r4, r1
 80073c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073c8:	f000 f900 	bl	80075cc <_read_r>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	bfab      	itete	ge
 80073d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80073d2:	89a3      	ldrhlt	r3, [r4, #12]
 80073d4:	181b      	addge	r3, r3, r0
 80073d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80073da:	bfac      	ite	ge
 80073dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80073de:	81a3      	strhlt	r3, [r4, #12]
 80073e0:	bd10      	pop	{r4, pc}

080073e2 <__swrite>:
 80073e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e6:	461f      	mov	r7, r3
 80073e8:	898b      	ldrh	r3, [r1, #12]
 80073ea:	05db      	lsls	r3, r3, #23
 80073ec:	4605      	mov	r5, r0
 80073ee:	460c      	mov	r4, r1
 80073f0:	4616      	mov	r6, r2
 80073f2:	d505      	bpl.n	8007400 <__swrite+0x1e>
 80073f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f8:	2302      	movs	r3, #2
 80073fa:	2200      	movs	r2, #0
 80073fc:	f000 f8d4 	bl	80075a8 <_lseek_r>
 8007400:	89a3      	ldrh	r3, [r4, #12]
 8007402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007406:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800740a:	81a3      	strh	r3, [r4, #12]
 800740c:	4632      	mov	r2, r6
 800740e:	463b      	mov	r3, r7
 8007410:	4628      	mov	r0, r5
 8007412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007416:	f000 b8fb 	b.w	8007610 <_write_r>

0800741a <__sseek>:
 800741a:	b510      	push	{r4, lr}
 800741c:	460c      	mov	r4, r1
 800741e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007422:	f000 f8c1 	bl	80075a8 <_lseek_r>
 8007426:	1c43      	adds	r3, r0, #1
 8007428:	89a3      	ldrh	r3, [r4, #12]
 800742a:	bf15      	itete	ne
 800742c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800742e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007432:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007436:	81a3      	strheq	r3, [r4, #12]
 8007438:	bf18      	it	ne
 800743a:	81a3      	strhne	r3, [r4, #12]
 800743c:	bd10      	pop	{r4, pc}

0800743e <__sclose>:
 800743e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007442:	f000 b8a1 	b.w	8007588 <_close_r>

08007446 <__swbuf_r>:
 8007446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007448:	460e      	mov	r6, r1
 800744a:	4614      	mov	r4, r2
 800744c:	4605      	mov	r5, r0
 800744e:	b118      	cbz	r0, 8007458 <__swbuf_r+0x12>
 8007450:	6a03      	ldr	r3, [r0, #32]
 8007452:	b90b      	cbnz	r3, 8007458 <__swbuf_r+0x12>
 8007454:	f7ff feee 	bl	8007234 <__sinit>
 8007458:	69a3      	ldr	r3, [r4, #24]
 800745a:	60a3      	str	r3, [r4, #8]
 800745c:	89a3      	ldrh	r3, [r4, #12]
 800745e:	071a      	lsls	r2, r3, #28
 8007460:	d501      	bpl.n	8007466 <__swbuf_r+0x20>
 8007462:	6923      	ldr	r3, [r4, #16]
 8007464:	b943      	cbnz	r3, 8007478 <__swbuf_r+0x32>
 8007466:	4621      	mov	r1, r4
 8007468:	4628      	mov	r0, r5
 800746a:	f000 f82b 	bl	80074c4 <__swsetup_r>
 800746e:	b118      	cbz	r0, 8007478 <__swbuf_r+0x32>
 8007470:	f04f 37ff 	mov.w	r7, #4294967295
 8007474:	4638      	mov	r0, r7
 8007476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007478:	6823      	ldr	r3, [r4, #0]
 800747a:	6922      	ldr	r2, [r4, #16]
 800747c:	1a98      	subs	r0, r3, r2
 800747e:	6963      	ldr	r3, [r4, #20]
 8007480:	b2f6      	uxtb	r6, r6
 8007482:	4283      	cmp	r3, r0
 8007484:	4637      	mov	r7, r6
 8007486:	dc05      	bgt.n	8007494 <__swbuf_r+0x4e>
 8007488:	4621      	mov	r1, r4
 800748a:	4628      	mov	r0, r5
 800748c:	f002 fe00 	bl	800a090 <_fflush_r>
 8007490:	2800      	cmp	r0, #0
 8007492:	d1ed      	bne.n	8007470 <__swbuf_r+0x2a>
 8007494:	68a3      	ldr	r3, [r4, #8]
 8007496:	3b01      	subs	r3, #1
 8007498:	60a3      	str	r3, [r4, #8]
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	6022      	str	r2, [r4, #0]
 80074a0:	701e      	strb	r6, [r3, #0]
 80074a2:	6962      	ldr	r2, [r4, #20]
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d004      	beq.n	80074b4 <__swbuf_r+0x6e>
 80074aa:	89a3      	ldrh	r3, [r4, #12]
 80074ac:	07db      	lsls	r3, r3, #31
 80074ae:	d5e1      	bpl.n	8007474 <__swbuf_r+0x2e>
 80074b0:	2e0a      	cmp	r6, #10
 80074b2:	d1df      	bne.n	8007474 <__swbuf_r+0x2e>
 80074b4:	4621      	mov	r1, r4
 80074b6:	4628      	mov	r0, r5
 80074b8:	f002 fdea 	bl	800a090 <_fflush_r>
 80074bc:	2800      	cmp	r0, #0
 80074be:	d0d9      	beq.n	8007474 <__swbuf_r+0x2e>
 80074c0:	e7d6      	b.n	8007470 <__swbuf_r+0x2a>
	...

080074c4 <__swsetup_r>:
 80074c4:	b538      	push	{r3, r4, r5, lr}
 80074c6:	4b29      	ldr	r3, [pc, #164]	@ (800756c <__swsetup_r+0xa8>)
 80074c8:	4605      	mov	r5, r0
 80074ca:	6818      	ldr	r0, [r3, #0]
 80074cc:	460c      	mov	r4, r1
 80074ce:	b118      	cbz	r0, 80074d8 <__swsetup_r+0x14>
 80074d0:	6a03      	ldr	r3, [r0, #32]
 80074d2:	b90b      	cbnz	r3, 80074d8 <__swsetup_r+0x14>
 80074d4:	f7ff feae 	bl	8007234 <__sinit>
 80074d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074dc:	0719      	lsls	r1, r3, #28
 80074de:	d422      	bmi.n	8007526 <__swsetup_r+0x62>
 80074e0:	06da      	lsls	r2, r3, #27
 80074e2:	d407      	bmi.n	80074f4 <__swsetup_r+0x30>
 80074e4:	2209      	movs	r2, #9
 80074e6:	602a      	str	r2, [r5, #0]
 80074e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074ec:	81a3      	strh	r3, [r4, #12]
 80074ee:	f04f 30ff 	mov.w	r0, #4294967295
 80074f2:	e033      	b.n	800755c <__swsetup_r+0x98>
 80074f4:	0758      	lsls	r0, r3, #29
 80074f6:	d512      	bpl.n	800751e <__swsetup_r+0x5a>
 80074f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074fa:	b141      	cbz	r1, 800750e <__swsetup_r+0x4a>
 80074fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007500:	4299      	cmp	r1, r3
 8007502:	d002      	beq.n	800750a <__swsetup_r+0x46>
 8007504:	4628      	mov	r0, r5
 8007506:	f000 ff23 	bl	8008350 <_free_r>
 800750a:	2300      	movs	r3, #0
 800750c:	6363      	str	r3, [r4, #52]	@ 0x34
 800750e:	89a3      	ldrh	r3, [r4, #12]
 8007510:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007514:	81a3      	strh	r3, [r4, #12]
 8007516:	2300      	movs	r3, #0
 8007518:	6063      	str	r3, [r4, #4]
 800751a:	6923      	ldr	r3, [r4, #16]
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	89a3      	ldrh	r3, [r4, #12]
 8007520:	f043 0308 	orr.w	r3, r3, #8
 8007524:	81a3      	strh	r3, [r4, #12]
 8007526:	6923      	ldr	r3, [r4, #16]
 8007528:	b94b      	cbnz	r3, 800753e <__swsetup_r+0x7a>
 800752a:	89a3      	ldrh	r3, [r4, #12]
 800752c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007534:	d003      	beq.n	800753e <__swsetup_r+0x7a>
 8007536:	4621      	mov	r1, r4
 8007538:	4628      	mov	r0, r5
 800753a:	f002 fdf7 	bl	800a12c <__smakebuf_r>
 800753e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007542:	f013 0201 	ands.w	r2, r3, #1
 8007546:	d00a      	beq.n	800755e <__swsetup_r+0x9a>
 8007548:	2200      	movs	r2, #0
 800754a:	60a2      	str	r2, [r4, #8]
 800754c:	6962      	ldr	r2, [r4, #20]
 800754e:	4252      	negs	r2, r2
 8007550:	61a2      	str	r2, [r4, #24]
 8007552:	6922      	ldr	r2, [r4, #16]
 8007554:	b942      	cbnz	r2, 8007568 <__swsetup_r+0xa4>
 8007556:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800755a:	d1c5      	bne.n	80074e8 <__swsetup_r+0x24>
 800755c:	bd38      	pop	{r3, r4, r5, pc}
 800755e:	0799      	lsls	r1, r3, #30
 8007560:	bf58      	it	pl
 8007562:	6962      	ldrpl	r2, [r4, #20]
 8007564:	60a2      	str	r2, [r4, #8]
 8007566:	e7f4      	b.n	8007552 <__swsetup_r+0x8e>
 8007568:	2000      	movs	r0, #0
 800756a:	e7f7      	b.n	800755c <__swsetup_r+0x98>
 800756c:	20000020 	.word	0x20000020

08007570 <memset>:
 8007570:	4402      	add	r2, r0
 8007572:	4603      	mov	r3, r0
 8007574:	4293      	cmp	r3, r2
 8007576:	d100      	bne.n	800757a <memset+0xa>
 8007578:	4770      	bx	lr
 800757a:	f803 1b01 	strb.w	r1, [r3], #1
 800757e:	e7f9      	b.n	8007574 <memset+0x4>

08007580 <_localeconv_r>:
 8007580:	4800      	ldr	r0, [pc, #0]	@ (8007584 <_localeconv_r+0x4>)
 8007582:	4770      	bx	lr
 8007584:	20000160 	.word	0x20000160

08007588 <_close_r>:
 8007588:	b538      	push	{r3, r4, r5, lr}
 800758a:	4d06      	ldr	r5, [pc, #24]	@ (80075a4 <_close_r+0x1c>)
 800758c:	2300      	movs	r3, #0
 800758e:	4604      	mov	r4, r0
 8007590:	4608      	mov	r0, r1
 8007592:	602b      	str	r3, [r5, #0]
 8007594:	f7fb f8fd 	bl	8002792 <_close>
 8007598:	1c43      	adds	r3, r0, #1
 800759a:	d102      	bne.n	80075a2 <_close_r+0x1a>
 800759c:	682b      	ldr	r3, [r5, #0]
 800759e:	b103      	cbz	r3, 80075a2 <_close_r+0x1a>
 80075a0:	6023      	str	r3, [r4, #0]
 80075a2:	bd38      	pop	{r3, r4, r5, pc}
 80075a4:	20000938 	.word	0x20000938

080075a8 <_lseek_r>:
 80075a8:	b538      	push	{r3, r4, r5, lr}
 80075aa:	4d07      	ldr	r5, [pc, #28]	@ (80075c8 <_lseek_r+0x20>)
 80075ac:	4604      	mov	r4, r0
 80075ae:	4608      	mov	r0, r1
 80075b0:	4611      	mov	r1, r2
 80075b2:	2200      	movs	r2, #0
 80075b4:	602a      	str	r2, [r5, #0]
 80075b6:	461a      	mov	r2, r3
 80075b8:	f7fb f912 	bl	80027e0 <_lseek>
 80075bc:	1c43      	adds	r3, r0, #1
 80075be:	d102      	bne.n	80075c6 <_lseek_r+0x1e>
 80075c0:	682b      	ldr	r3, [r5, #0]
 80075c2:	b103      	cbz	r3, 80075c6 <_lseek_r+0x1e>
 80075c4:	6023      	str	r3, [r4, #0]
 80075c6:	bd38      	pop	{r3, r4, r5, pc}
 80075c8:	20000938 	.word	0x20000938

080075cc <_read_r>:
 80075cc:	b538      	push	{r3, r4, r5, lr}
 80075ce:	4d07      	ldr	r5, [pc, #28]	@ (80075ec <_read_r+0x20>)
 80075d0:	4604      	mov	r4, r0
 80075d2:	4608      	mov	r0, r1
 80075d4:	4611      	mov	r1, r2
 80075d6:	2200      	movs	r2, #0
 80075d8:	602a      	str	r2, [r5, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	f7fb f8a0 	bl	8002720 <_read>
 80075e0:	1c43      	adds	r3, r0, #1
 80075e2:	d102      	bne.n	80075ea <_read_r+0x1e>
 80075e4:	682b      	ldr	r3, [r5, #0]
 80075e6:	b103      	cbz	r3, 80075ea <_read_r+0x1e>
 80075e8:	6023      	str	r3, [r4, #0]
 80075ea:	bd38      	pop	{r3, r4, r5, pc}
 80075ec:	20000938 	.word	0x20000938

080075f0 <_sbrk_r>:
 80075f0:	b538      	push	{r3, r4, r5, lr}
 80075f2:	4d06      	ldr	r5, [pc, #24]	@ (800760c <_sbrk_r+0x1c>)
 80075f4:	2300      	movs	r3, #0
 80075f6:	4604      	mov	r4, r0
 80075f8:	4608      	mov	r0, r1
 80075fa:	602b      	str	r3, [r5, #0]
 80075fc:	f7fb f8fe 	bl	80027fc <_sbrk>
 8007600:	1c43      	adds	r3, r0, #1
 8007602:	d102      	bne.n	800760a <_sbrk_r+0x1a>
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	b103      	cbz	r3, 800760a <_sbrk_r+0x1a>
 8007608:	6023      	str	r3, [r4, #0]
 800760a:	bd38      	pop	{r3, r4, r5, pc}
 800760c:	20000938 	.word	0x20000938

08007610 <_write_r>:
 8007610:	b538      	push	{r3, r4, r5, lr}
 8007612:	4d07      	ldr	r5, [pc, #28]	@ (8007630 <_write_r+0x20>)
 8007614:	4604      	mov	r4, r0
 8007616:	4608      	mov	r0, r1
 8007618:	4611      	mov	r1, r2
 800761a:	2200      	movs	r2, #0
 800761c:	602a      	str	r2, [r5, #0]
 800761e:	461a      	mov	r2, r3
 8007620:	f7fb f89b 	bl	800275a <_write>
 8007624:	1c43      	adds	r3, r0, #1
 8007626:	d102      	bne.n	800762e <_write_r+0x1e>
 8007628:	682b      	ldr	r3, [r5, #0]
 800762a:	b103      	cbz	r3, 800762e <_write_r+0x1e>
 800762c:	6023      	str	r3, [r4, #0]
 800762e:	bd38      	pop	{r3, r4, r5, pc}
 8007630:	20000938 	.word	0x20000938

08007634 <__errno>:
 8007634:	4b01      	ldr	r3, [pc, #4]	@ (800763c <__errno+0x8>)
 8007636:	6818      	ldr	r0, [r3, #0]
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	20000020 	.word	0x20000020

08007640 <__libc_init_array>:
 8007640:	b570      	push	{r4, r5, r6, lr}
 8007642:	4d0d      	ldr	r5, [pc, #52]	@ (8007678 <__libc_init_array+0x38>)
 8007644:	4c0d      	ldr	r4, [pc, #52]	@ (800767c <__libc_init_array+0x3c>)
 8007646:	1b64      	subs	r4, r4, r5
 8007648:	10a4      	asrs	r4, r4, #2
 800764a:	2600      	movs	r6, #0
 800764c:	42a6      	cmp	r6, r4
 800764e:	d109      	bne.n	8007664 <__libc_init_array+0x24>
 8007650:	4d0b      	ldr	r5, [pc, #44]	@ (8007680 <__libc_init_array+0x40>)
 8007652:	4c0c      	ldr	r4, [pc, #48]	@ (8007684 <__libc_init_array+0x44>)
 8007654:	f003 fa1a 	bl	800aa8c <_init>
 8007658:	1b64      	subs	r4, r4, r5
 800765a:	10a4      	asrs	r4, r4, #2
 800765c:	2600      	movs	r6, #0
 800765e:	42a6      	cmp	r6, r4
 8007660:	d105      	bne.n	800766e <__libc_init_array+0x2e>
 8007662:	bd70      	pop	{r4, r5, r6, pc}
 8007664:	f855 3b04 	ldr.w	r3, [r5], #4
 8007668:	4798      	blx	r3
 800766a:	3601      	adds	r6, #1
 800766c:	e7ee      	b.n	800764c <__libc_init_array+0xc>
 800766e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007672:	4798      	blx	r3
 8007674:	3601      	adds	r6, #1
 8007676:	e7f2      	b.n	800765e <__libc_init_array+0x1e>
 8007678:	0800e4b0 	.word	0x0800e4b0
 800767c:	0800e4b0 	.word	0x0800e4b0
 8007680:	0800e4b0 	.word	0x0800e4b0
 8007684:	0800e4b4 	.word	0x0800e4b4

08007688 <__retarget_lock_init_recursive>:
 8007688:	4770      	bx	lr

0800768a <__retarget_lock_acquire_recursive>:
 800768a:	4770      	bx	lr

0800768c <__retarget_lock_release_recursive>:
 800768c:	4770      	bx	lr

0800768e <memcpy>:
 800768e:	440a      	add	r2, r1
 8007690:	4291      	cmp	r1, r2
 8007692:	f100 33ff 	add.w	r3, r0, #4294967295
 8007696:	d100      	bne.n	800769a <memcpy+0xc>
 8007698:	4770      	bx	lr
 800769a:	b510      	push	{r4, lr}
 800769c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076a4:	4291      	cmp	r1, r2
 80076a6:	d1f9      	bne.n	800769c <memcpy+0xe>
 80076a8:	bd10      	pop	{r4, pc}
	...

080076ac <nanf>:
 80076ac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80076b4 <nanf+0x8>
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	7fc00000 	.word	0x7fc00000

080076b8 <quorem>:
 80076b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076bc:	6903      	ldr	r3, [r0, #16]
 80076be:	690c      	ldr	r4, [r1, #16]
 80076c0:	42a3      	cmp	r3, r4
 80076c2:	4607      	mov	r7, r0
 80076c4:	db7e      	blt.n	80077c4 <quorem+0x10c>
 80076c6:	3c01      	subs	r4, #1
 80076c8:	f101 0814 	add.w	r8, r1, #20
 80076cc:	00a3      	lsls	r3, r4, #2
 80076ce:	f100 0514 	add.w	r5, r0, #20
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076d8:	9301      	str	r3, [sp, #4]
 80076da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80076de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076e2:	3301      	adds	r3, #1
 80076e4:	429a      	cmp	r2, r3
 80076e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80076ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80076ee:	d32e      	bcc.n	800774e <quorem+0x96>
 80076f0:	f04f 0a00 	mov.w	sl, #0
 80076f4:	46c4      	mov	ip, r8
 80076f6:	46ae      	mov	lr, r5
 80076f8:	46d3      	mov	fp, sl
 80076fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 80076fe:	b298      	uxth	r0, r3
 8007700:	fb06 a000 	mla	r0, r6, r0, sl
 8007704:	0c02      	lsrs	r2, r0, #16
 8007706:	0c1b      	lsrs	r3, r3, #16
 8007708:	fb06 2303 	mla	r3, r6, r3, r2
 800770c:	f8de 2000 	ldr.w	r2, [lr]
 8007710:	b280      	uxth	r0, r0
 8007712:	b292      	uxth	r2, r2
 8007714:	1a12      	subs	r2, r2, r0
 8007716:	445a      	add	r2, fp
 8007718:	f8de 0000 	ldr.w	r0, [lr]
 800771c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007720:	b29b      	uxth	r3, r3
 8007722:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007726:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800772a:	b292      	uxth	r2, r2
 800772c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007730:	45e1      	cmp	r9, ip
 8007732:	f84e 2b04 	str.w	r2, [lr], #4
 8007736:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800773a:	d2de      	bcs.n	80076fa <quorem+0x42>
 800773c:	9b00      	ldr	r3, [sp, #0]
 800773e:	58eb      	ldr	r3, [r5, r3]
 8007740:	b92b      	cbnz	r3, 800774e <quorem+0x96>
 8007742:	9b01      	ldr	r3, [sp, #4]
 8007744:	3b04      	subs	r3, #4
 8007746:	429d      	cmp	r5, r3
 8007748:	461a      	mov	r2, r3
 800774a:	d32f      	bcc.n	80077ac <quorem+0xf4>
 800774c:	613c      	str	r4, [r7, #16]
 800774e:	4638      	mov	r0, r7
 8007750:	f001 f90c 	bl	800896c <__mcmp>
 8007754:	2800      	cmp	r0, #0
 8007756:	db25      	blt.n	80077a4 <quorem+0xec>
 8007758:	4629      	mov	r1, r5
 800775a:	2000      	movs	r0, #0
 800775c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007760:	f8d1 c000 	ldr.w	ip, [r1]
 8007764:	fa1f fe82 	uxth.w	lr, r2
 8007768:	fa1f f38c 	uxth.w	r3, ip
 800776c:	eba3 030e 	sub.w	r3, r3, lr
 8007770:	4403      	add	r3, r0
 8007772:	0c12      	lsrs	r2, r2, #16
 8007774:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007778:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800777c:	b29b      	uxth	r3, r3
 800777e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007782:	45c1      	cmp	r9, r8
 8007784:	f841 3b04 	str.w	r3, [r1], #4
 8007788:	ea4f 4022 	mov.w	r0, r2, asr #16
 800778c:	d2e6      	bcs.n	800775c <quorem+0xa4>
 800778e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007792:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007796:	b922      	cbnz	r2, 80077a2 <quorem+0xea>
 8007798:	3b04      	subs	r3, #4
 800779a:	429d      	cmp	r5, r3
 800779c:	461a      	mov	r2, r3
 800779e:	d30b      	bcc.n	80077b8 <quorem+0x100>
 80077a0:	613c      	str	r4, [r7, #16]
 80077a2:	3601      	adds	r6, #1
 80077a4:	4630      	mov	r0, r6
 80077a6:	b003      	add	sp, #12
 80077a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ac:	6812      	ldr	r2, [r2, #0]
 80077ae:	3b04      	subs	r3, #4
 80077b0:	2a00      	cmp	r2, #0
 80077b2:	d1cb      	bne.n	800774c <quorem+0x94>
 80077b4:	3c01      	subs	r4, #1
 80077b6:	e7c6      	b.n	8007746 <quorem+0x8e>
 80077b8:	6812      	ldr	r2, [r2, #0]
 80077ba:	3b04      	subs	r3, #4
 80077bc:	2a00      	cmp	r2, #0
 80077be:	d1ef      	bne.n	80077a0 <quorem+0xe8>
 80077c0:	3c01      	subs	r4, #1
 80077c2:	e7ea      	b.n	800779a <quorem+0xe2>
 80077c4:	2000      	movs	r0, #0
 80077c6:	e7ee      	b.n	80077a6 <quorem+0xee>

080077c8 <_dtoa_r>:
 80077c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077cc:	69c7      	ldr	r7, [r0, #28]
 80077ce:	b099      	sub	sp, #100	@ 0x64
 80077d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80077d4:	ec55 4b10 	vmov	r4, r5, d0
 80077d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80077da:	9109      	str	r1, [sp, #36]	@ 0x24
 80077dc:	4683      	mov	fp, r0
 80077de:	920e      	str	r2, [sp, #56]	@ 0x38
 80077e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80077e2:	b97f      	cbnz	r7, 8007804 <_dtoa_r+0x3c>
 80077e4:	2010      	movs	r0, #16
 80077e6:	f7fe fd77 	bl	80062d8 <malloc>
 80077ea:	4602      	mov	r2, r0
 80077ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80077f0:	b920      	cbnz	r0, 80077fc <_dtoa_r+0x34>
 80077f2:	4ba7      	ldr	r3, [pc, #668]	@ (8007a90 <_dtoa_r+0x2c8>)
 80077f4:	21ef      	movs	r1, #239	@ 0xef
 80077f6:	48a7      	ldr	r0, [pc, #668]	@ (8007a94 <_dtoa_r+0x2cc>)
 80077f8:	f002 fd2a 	bl	800a250 <__assert_func>
 80077fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007800:	6007      	str	r7, [r0, #0]
 8007802:	60c7      	str	r7, [r0, #12]
 8007804:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007808:	6819      	ldr	r1, [r3, #0]
 800780a:	b159      	cbz	r1, 8007824 <_dtoa_r+0x5c>
 800780c:	685a      	ldr	r2, [r3, #4]
 800780e:	604a      	str	r2, [r1, #4]
 8007810:	2301      	movs	r3, #1
 8007812:	4093      	lsls	r3, r2
 8007814:	608b      	str	r3, [r1, #8]
 8007816:	4658      	mov	r0, fp
 8007818:	f000 fe24 	bl	8008464 <_Bfree>
 800781c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	1e2b      	subs	r3, r5, #0
 8007826:	bfb9      	ittee	lt
 8007828:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800782c:	9303      	strlt	r3, [sp, #12]
 800782e:	2300      	movge	r3, #0
 8007830:	6033      	strge	r3, [r6, #0]
 8007832:	9f03      	ldr	r7, [sp, #12]
 8007834:	4b98      	ldr	r3, [pc, #608]	@ (8007a98 <_dtoa_r+0x2d0>)
 8007836:	bfbc      	itt	lt
 8007838:	2201      	movlt	r2, #1
 800783a:	6032      	strlt	r2, [r6, #0]
 800783c:	43bb      	bics	r3, r7
 800783e:	d112      	bne.n	8007866 <_dtoa_r+0x9e>
 8007840:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007842:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007846:	6013      	str	r3, [r2, #0]
 8007848:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800784c:	4323      	orrs	r3, r4
 800784e:	f000 854d 	beq.w	80082ec <_dtoa_r+0xb24>
 8007852:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007854:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007aac <_dtoa_r+0x2e4>
 8007858:	2b00      	cmp	r3, #0
 800785a:	f000 854f 	beq.w	80082fc <_dtoa_r+0xb34>
 800785e:	f10a 0303 	add.w	r3, sl, #3
 8007862:	f000 bd49 	b.w	80082f8 <_dtoa_r+0xb30>
 8007866:	ed9d 7b02 	vldr	d7, [sp, #8]
 800786a:	2200      	movs	r2, #0
 800786c:	ec51 0b17 	vmov	r0, r1, d7
 8007870:	2300      	movs	r3, #0
 8007872:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007876:	f7f9 f94f 	bl	8000b18 <__aeabi_dcmpeq>
 800787a:	4680      	mov	r8, r0
 800787c:	b158      	cbz	r0, 8007896 <_dtoa_r+0xce>
 800787e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007880:	2301      	movs	r3, #1
 8007882:	6013      	str	r3, [r2, #0]
 8007884:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007886:	b113      	cbz	r3, 800788e <_dtoa_r+0xc6>
 8007888:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800788a:	4b84      	ldr	r3, [pc, #528]	@ (8007a9c <_dtoa_r+0x2d4>)
 800788c:	6013      	str	r3, [r2, #0]
 800788e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007ab0 <_dtoa_r+0x2e8>
 8007892:	f000 bd33 	b.w	80082fc <_dtoa_r+0xb34>
 8007896:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800789a:	aa16      	add	r2, sp, #88	@ 0x58
 800789c:	a917      	add	r1, sp, #92	@ 0x5c
 800789e:	4658      	mov	r0, fp
 80078a0:	f001 f984 	bl	8008bac <__d2b>
 80078a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80078a8:	4681      	mov	r9, r0
 80078aa:	2e00      	cmp	r6, #0
 80078ac:	d077      	beq.n	800799e <_dtoa_r+0x1d6>
 80078ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80078b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80078c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80078c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80078c8:	4619      	mov	r1, r3
 80078ca:	2200      	movs	r2, #0
 80078cc:	4b74      	ldr	r3, [pc, #464]	@ (8007aa0 <_dtoa_r+0x2d8>)
 80078ce:	f7f8 fd03 	bl	80002d8 <__aeabi_dsub>
 80078d2:	a369      	add	r3, pc, #420	@ (adr r3, 8007a78 <_dtoa_r+0x2b0>)
 80078d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d8:	f7f8 feb6 	bl	8000648 <__aeabi_dmul>
 80078dc:	a368      	add	r3, pc, #416	@ (adr r3, 8007a80 <_dtoa_r+0x2b8>)
 80078de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e2:	f7f8 fcfb 	bl	80002dc <__adddf3>
 80078e6:	4604      	mov	r4, r0
 80078e8:	4630      	mov	r0, r6
 80078ea:	460d      	mov	r5, r1
 80078ec:	f7f8 fe42 	bl	8000574 <__aeabi_i2d>
 80078f0:	a365      	add	r3, pc, #404	@ (adr r3, 8007a88 <_dtoa_r+0x2c0>)
 80078f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f6:	f7f8 fea7 	bl	8000648 <__aeabi_dmul>
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	4620      	mov	r0, r4
 8007900:	4629      	mov	r1, r5
 8007902:	f7f8 fceb 	bl	80002dc <__adddf3>
 8007906:	4604      	mov	r4, r0
 8007908:	460d      	mov	r5, r1
 800790a:	f7f9 f94d 	bl	8000ba8 <__aeabi_d2iz>
 800790e:	2200      	movs	r2, #0
 8007910:	4607      	mov	r7, r0
 8007912:	2300      	movs	r3, #0
 8007914:	4620      	mov	r0, r4
 8007916:	4629      	mov	r1, r5
 8007918:	f7f9 f908 	bl	8000b2c <__aeabi_dcmplt>
 800791c:	b140      	cbz	r0, 8007930 <_dtoa_r+0x168>
 800791e:	4638      	mov	r0, r7
 8007920:	f7f8 fe28 	bl	8000574 <__aeabi_i2d>
 8007924:	4622      	mov	r2, r4
 8007926:	462b      	mov	r3, r5
 8007928:	f7f9 f8f6 	bl	8000b18 <__aeabi_dcmpeq>
 800792c:	b900      	cbnz	r0, 8007930 <_dtoa_r+0x168>
 800792e:	3f01      	subs	r7, #1
 8007930:	2f16      	cmp	r7, #22
 8007932:	d851      	bhi.n	80079d8 <_dtoa_r+0x210>
 8007934:	4b5b      	ldr	r3, [pc, #364]	@ (8007aa4 <_dtoa_r+0x2dc>)
 8007936:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800793a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007942:	f7f9 f8f3 	bl	8000b2c <__aeabi_dcmplt>
 8007946:	2800      	cmp	r0, #0
 8007948:	d048      	beq.n	80079dc <_dtoa_r+0x214>
 800794a:	3f01      	subs	r7, #1
 800794c:	2300      	movs	r3, #0
 800794e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007950:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007952:	1b9b      	subs	r3, r3, r6
 8007954:	1e5a      	subs	r2, r3, #1
 8007956:	bf44      	itt	mi
 8007958:	f1c3 0801 	rsbmi	r8, r3, #1
 800795c:	2300      	movmi	r3, #0
 800795e:	9208      	str	r2, [sp, #32]
 8007960:	bf54      	ite	pl
 8007962:	f04f 0800 	movpl.w	r8, #0
 8007966:	9308      	strmi	r3, [sp, #32]
 8007968:	2f00      	cmp	r7, #0
 800796a:	db39      	blt.n	80079e0 <_dtoa_r+0x218>
 800796c:	9b08      	ldr	r3, [sp, #32]
 800796e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007970:	443b      	add	r3, r7
 8007972:	9308      	str	r3, [sp, #32]
 8007974:	2300      	movs	r3, #0
 8007976:	930a      	str	r3, [sp, #40]	@ 0x28
 8007978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800797a:	2b09      	cmp	r3, #9
 800797c:	d864      	bhi.n	8007a48 <_dtoa_r+0x280>
 800797e:	2b05      	cmp	r3, #5
 8007980:	bfc4      	itt	gt
 8007982:	3b04      	subgt	r3, #4
 8007984:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007988:	f1a3 0302 	sub.w	r3, r3, #2
 800798c:	bfcc      	ite	gt
 800798e:	2400      	movgt	r4, #0
 8007990:	2401      	movle	r4, #1
 8007992:	2b03      	cmp	r3, #3
 8007994:	d863      	bhi.n	8007a5e <_dtoa_r+0x296>
 8007996:	e8df f003 	tbb	[pc, r3]
 800799a:	372a      	.short	0x372a
 800799c:	5535      	.short	0x5535
 800799e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80079a2:	441e      	add	r6, r3
 80079a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80079a8:	2b20      	cmp	r3, #32
 80079aa:	bfc1      	itttt	gt
 80079ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80079b0:	409f      	lslgt	r7, r3
 80079b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80079b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80079ba:	bfd6      	itet	le
 80079bc:	f1c3 0320 	rsble	r3, r3, #32
 80079c0:	ea47 0003 	orrgt.w	r0, r7, r3
 80079c4:	fa04 f003 	lslle.w	r0, r4, r3
 80079c8:	f7f8 fdc4 	bl	8000554 <__aeabi_ui2d>
 80079cc:	2201      	movs	r2, #1
 80079ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80079d2:	3e01      	subs	r6, #1
 80079d4:	9214      	str	r2, [sp, #80]	@ 0x50
 80079d6:	e777      	b.n	80078c8 <_dtoa_r+0x100>
 80079d8:	2301      	movs	r3, #1
 80079da:	e7b8      	b.n	800794e <_dtoa_r+0x186>
 80079dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80079de:	e7b7      	b.n	8007950 <_dtoa_r+0x188>
 80079e0:	427b      	negs	r3, r7
 80079e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80079e4:	2300      	movs	r3, #0
 80079e6:	eba8 0807 	sub.w	r8, r8, r7
 80079ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80079ec:	e7c4      	b.n	8007978 <_dtoa_r+0x1b0>
 80079ee:	2300      	movs	r3, #0
 80079f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	dc35      	bgt.n	8007a64 <_dtoa_r+0x29c>
 80079f8:	2301      	movs	r3, #1
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	9307      	str	r3, [sp, #28]
 80079fe:	461a      	mov	r2, r3
 8007a00:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a02:	e00b      	b.n	8007a1c <_dtoa_r+0x254>
 8007a04:	2301      	movs	r3, #1
 8007a06:	e7f3      	b.n	80079f0 <_dtoa_r+0x228>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a0e:	18fb      	adds	r3, r7, r3
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	3301      	adds	r3, #1
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	9307      	str	r3, [sp, #28]
 8007a18:	bfb8      	it	lt
 8007a1a:	2301      	movlt	r3, #1
 8007a1c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007a20:	2100      	movs	r1, #0
 8007a22:	2204      	movs	r2, #4
 8007a24:	f102 0514 	add.w	r5, r2, #20
 8007a28:	429d      	cmp	r5, r3
 8007a2a:	d91f      	bls.n	8007a6c <_dtoa_r+0x2a4>
 8007a2c:	6041      	str	r1, [r0, #4]
 8007a2e:	4658      	mov	r0, fp
 8007a30:	f000 fcd8 	bl	80083e4 <_Balloc>
 8007a34:	4682      	mov	sl, r0
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d13c      	bne.n	8007ab4 <_dtoa_r+0x2ec>
 8007a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8007aa8 <_dtoa_r+0x2e0>)
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007a42:	e6d8      	b.n	80077f6 <_dtoa_r+0x2e>
 8007a44:	2301      	movs	r3, #1
 8007a46:	e7e0      	b.n	8007a0a <_dtoa_r+0x242>
 8007a48:	2401      	movs	r4, #1
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a4e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007a50:	f04f 33ff 	mov.w	r3, #4294967295
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	9307      	str	r3, [sp, #28]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	2312      	movs	r3, #18
 8007a5c:	e7d0      	b.n	8007a00 <_dtoa_r+0x238>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a62:	e7f5      	b.n	8007a50 <_dtoa_r+0x288>
 8007a64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	9307      	str	r3, [sp, #28]
 8007a6a:	e7d7      	b.n	8007a1c <_dtoa_r+0x254>
 8007a6c:	3101      	adds	r1, #1
 8007a6e:	0052      	lsls	r2, r2, #1
 8007a70:	e7d8      	b.n	8007a24 <_dtoa_r+0x25c>
 8007a72:	bf00      	nop
 8007a74:	f3af 8000 	nop.w
 8007a78:	636f4361 	.word	0x636f4361
 8007a7c:	3fd287a7 	.word	0x3fd287a7
 8007a80:	8b60c8b3 	.word	0x8b60c8b3
 8007a84:	3fc68a28 	.word	0x3fc68a28
 8007a88:	509f79fb 	.word	0x509f79fb
 8007a8c:	3fd34413 	.word	0x3fd34413
 8007a90:	0800e0c2 	.word	0x0800e0c2
 8007a94:	0800e0d9 	.word	0x0800e0d9
 8007a98:	7ff00000 	.word	0x7ff00000
 8007a9c:	0800e08d 	.word	0x0800e08d
 8007aa0:	3ff80000 	.word	0x3ff80000
 8007aa4:	0800e1d0 	.word	0x0800e1d0
 8007aa8:	0800e131 	.word	0x0800e131
 8007aac:	0800e0be 	.word	0x0800e0be
 8007ab0:	0800e08c 	.word	0x0800e08c
 8007ab4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ab8:	6018      	str	r0, [r3, #0]
 8007aba:	9b07      	ldr	r3, [sp, #28]
 8007abc:	2b0e      	cmp	r3, #14
 8007abe:	f200 80a4 	bhi.w	8007c0a <_dtoa_r+0x442>
 8007ac2:	2c00      	cmp	r4, #0
 8007ac4:	f000 80a1 	beq.w	8007c0a <_dtoa_r+0x442>
 8007ac8:	2f00      	cmp	r7, #0
 8007aca:	dd33      	ble.n	8007b34 <_dtoa_r+0x36c>
 8007acc:	4bad      	ldr	r3, [pc, #692]	@ (8007d84 <_dtoa_r+0x5bc>)
 8007ace:	f007 020f 	and.w	r2, r7, #15
 8007ad2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ad6:	ed93 7b00 	vldr	d7, [r3]
 8007ada:	05f8      	lsls	r0, r7, #23
 8007adc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007ae0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007ae4:	d516      	bpl.n	8007b14 <_dtoa_r+0x34c>
 8007ae6:	4ba8      	ldr	r3, [pc, #672]	@ (8007d88 <_dtoa_r+0x5c0>)
 8007ae8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007aec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007af0:	f7f8 fed4 	bl	800089c <__aeabi_ddiv>
 8007af4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007af8:	f004 040f 	and.w	r4, r4, #15
 8007afc:	2603      	movs	r6, #3
 8007afe:	4da2      	ldr	r5, [pc, #648]	@ (8007d88 <_dtoa_r+0x5c0>)
 8007b00:	b954      	cbnz	r4, 8007b18 <_dtoa_r+0x350>
 8007b02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b0a:	f7f8 fec7 	bl	800089c <__aeabi_ddiv>
 8007b0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b12:	e028      	b.n	8007b66 <_dtoa_r+0x39e>
 8007b14:	2602      	movs	r6, #2
 8007b16:	e7f2      	b.n	8007afe <_dtoa_r+0x336>
 8007b18:	07e1      	lsls	r1, r4, #31
 8007b1a:	d508      	bpl.n	8007b2e <_dtoa_r+0x366>
 8007b1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b24:	f7f8 fd90 	bl	8000648 <__aeabi_dmul>
 8007b28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b2c:	3601      	adds	r6, #1
 8007b2e:	1064      	asrs	r4, r4, #1
 8007b30:	3508      	adds	r5, #8
 8007b32:	e7e5      	b.n	8007b00 <_dtoa_r+0x338>
 8007b34:	f000 80d2 	beq.w	8007cdc <_dtoa_r+0x514>
 8007b38:	427c      	negs	r4, r7
 8007b3a:	4b92      	ldr	r3, [pc, #584]	@ (8007d84 <_dtoa_r+0x5bc>)
 8007b3c:	4d92      	ldr	r5, [pc, #584]	@ (8007d88 <_dtoa_r+0x5c0>)
 8007b3e:	f004 020f 	and.w	r2, r4, #15
 8007b42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b4e:	f7f8 fd7b 	bl	8000648 <__aeabi_dmul>
 8007b52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b56:	1124      	asrs	r4, r4, #4
 8007b58:	2300      	movs	r3, #0
 8007b5a:	2602      	movs	r6, #2
 8007b5c:	2c00      	cmp	r4, #0
 8007b5e:	f040 80b2 	bne.w	8007cc6 <_dtoa_r+0x4fe>
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1d3      	bne.n	8007b0e <_dtoa_r+0x346>
 8007b66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b68:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 80b7 	beq.w	8007ce0 <_dtoa_r+0x518>
 8007b72:	4b86      	ldr	r3, [pc, #536]	@ (8007d8c <_dtoa_r+0x5c4>)
 8007b74:	2200      	movs	r2, #0
 8007b76:	4620      	mov	r0, r4
 8007b78:	4629      	mov	r1, r5
 8007b7a:	f7f8 ffd7 	bl	8000b2c <__aeabi_dcmplt>
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	f000 80ae 	beq.w	8007ce0 <_dtoa_r+0x518>
 8007b84:	9b07      	ldr	r3, [sp, #28]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f000 80aa 	beq.w	8007ce0 <_dtoa_r+0x518>
 8007b8c:	9b00      	ldr	r3, [sp, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	dd37      	ble.n	8007c02 <_dtoa_r+0x43a>
 8007b92:	1e7b      	subs	r3, r7, #1
 8007b94:	9304      	str	r3, [sp, #16]
 8007b96:	4620      	mov	r0, r4
 8007b98:	4b7d      	ldr	r3, [pc, #500]	@ (8007d90 <_dtoa_r+0x5c8>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	f7f8 fd53 	bl	8000648 <__aeabi_dmul>
 8007ba2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ba6:	9c00      	ldr	r4, [sp, #0]
 8007ba8:	3601      	adds	r6, #1
 8007baa:	4630      	mov	r0, r6
 8007bac:	f7f8 fce2 	bl	8000574 <__aeabi_i2d>
 8007bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bb4:	f7f8 fd48 	bl	8000648 <__aeabi_dmul>
 8007bb8:	4b76      	ldr	r3, [pc, #472]	@ (8007d94 <_dtoa_r+0x5cc>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f7f8 fb8e 	bl	80002dc <__adddf3>
 8007bc0:	4605      	mov	r5, r0
 8007bc2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007bc6:	2c00      	cmp	r4, #0
 8007bc8:	f040 808d 	bne.w	8007ce6 <_dtoa_r+0x51e>
 8007bcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bd0:	4b71      	ldr	r3, [pc, #452]	@ (8007d98 <_dtoa_r+0x5d0>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f7f8 fb80 	bl	80002d8 <__aeabi_dsub>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	460b      	mov	r3, r1
 8007bdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007be0:	462a      	mov	r2, r5
 8007be2:	4633      	mov	r3, r6
 8007be4:	f7f8 ffc0 	bl	8000b68 <__aeabi_dcmpgt>
 8007be8:	2800      	cmp	r0, #0
 8007bea:	f040 828b 	bne.w	8008104 <_dtoa_r+0x93c>
 8007bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bf2:	462a      	mov	r2, r5
 8007bf4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007bf8:	f7f8 ff98 	bl	8000b2c <__aeabi_dcmplt>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	f040 8128 	bne.w	8007e52 <_dtoa_r+0x68a>
 8007c02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007c06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007c0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f2c0 815a 	blt.w	8007ec6 <_dtoa_r+0x6fe>
 8007c12:	2f0e      	cmp	r7, #14
 8007c14:	f300 8157 	bgt.w	8007ec6 <_dtoa_r+0x6fe>
 8007c18:	4b5a      	ldr	r3, [pc, #360]	@ (8007d84 <_dtoa_r+0x5bc>)
 8007c1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c1e:	ed93 7b00 	vldr	d7, [r3]
 8007c22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	ed8d 7b00 	vstr	d7, [sp]
 8007c2a:	da03      	bge.n	8007c34 <_dtoa_r+0x46c>
 8007c2c:	9b07      	ldr	r3, [sp, #28]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f340 8101 	ble.w	8007e36 <_dtoa_r+0x66e>
 8007c34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007c38:	4656      	mov	r6, sl
 8007c3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c3e:	4620      	mov	r0, r4
 8007c40:	4629      	mov	r1, r5
 8007c42:	f7f8 fe2b 	bl	800089c <__aeabi_ddiv>
 8007c46:	f7f8 ffaf 	bl	8000ba8 <__aeabi_d2iz>
 8007c4a:	4680      	mov	r8, r0
 8007c4c:	f7f8 fc92 	bl	8000574 <__aeabi_i2d>
 8007c50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c54:	f7f8 fcf8 	bl	8000648 <__aeabi_dmul>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	4629      	mov	r1, r5
 8007c60:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007c64:	f7f8 fb38 	bl	80002d8 <__aeabi_dsub>
 8007c68:	f806 4b01 	strb.w	r4, [r6], #1
 8007c6c:	9d07      	ldr	r5, [sp, #28]
 8007c6e:	eba6 040a 	sub.w	r4, r6, sl
 8007c72:	42a5      	cmp	r5, r4
 8007c74:	4602      	mov	r2, r0
 8007c76:	460b      	mov	r3, r1
 8007c78:	f040 8117 	bne.w	8007eaa <_dtoa_r+0x6e2>
 8007c7c:	f7f8 fb2e 	bl	80002dc <__adddf3>
 8007c80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c84:	4604      	mov	r4, r0
 8007c86:	460d      	mov	r5, r1
 8007c88:	f7f8 ff6e 	bl	8000b68 <__aeabi_dcmpgt>
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	f040 80f9 	bne.w	8007e84 <_dtoa_r+0x6bc>
 8007c92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c96:	4620      	mov	r0, r4
 8007c98:	4629      	mov	r1, r5
 8007c9a:	f7f8 ff3d 	bl	8000b18 <__aeabi_dcmpeq>
 8007c9e:	b118      	cbz	r0, 8007ca8 <_dtoa_r+0x4e0>
 8007ca0:	f018 0f01 	tst.w	r8, #1
 8007ca4:	f040 80ee 	bne.w	8007e84 <_dtoa_r+0x6bc>
 8007ca8:	4649      	mov	r1, r9
 8007caa:	4658      	mov	r0, fp
 8007cac:	f000 fbda 	bl	8008464 <_Bfree>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	7033      	strb	r3, [r6, #0]
 8007cb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007cb6:	3701      	adds	r7, #1
 8007cb8:	601f      	str	r7, [r3, #0]
 8007cba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 831d 	beq.w	80082fc <_dtoa_r+0xb34>
 8007cc2:	601e      	str	r6, [r3, #0]
 8007cc4:	e31a      	b.n	80082fc <_dtoa_r+0xb34>
 8007cc6:	07e2      	lsls	r2, r4, #31
 8007cc8:	d505      	bpl.n	8007cd6 <_dtoa_r+0x50e>
 8007cca:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007cce:	f7f8 fcbb 	bl	8000648 <__aeabi_dmul>
 8007cd2:	3601      	adds	r6, #1
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	1064      	asrs	r4, r4, #1
 8007cd8:	3508      	adds	r5, #8
 8007cda:	e73f      	b.n	8007b5c <_dtoa_r+0x394>
 8007cdc:	2602      	movs	r6, #2
 8007cde:	e742      	b.n	8007b66 <_dtoa_r+0x39e>
 8007ce0:	9c07      	ldr	r4, [sp, #28]
 8007ce2:	9704      	str	r7, [sp, #16]
 8007ce4:	e761      	b.n	8007baa <_dtoa_r+0x3e2>
 8007ce6:	4b27      	ldr	r3, [pc, #156]	@ (8007d84 <_dtoa_r+0x5bc>)
 8007ce8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007cea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007cee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007cf2:	4454      	add	r4, sl
 8007cf4:	2900      	cmp	r1, #0
 8007cf6:	d053      	beq.n	8007da0 <_dtoa_r+0x5d8>
 8007cf8:	4928      	ldr	r1, [pc, #160]	@ (8007d9c <_dtoa_r+0x5d4>)
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	f7f8 fdce 	bl	800089c <__aeabi_ddiv>
 8007d00:	4633      	mov	r3, r6
 8007d02:	462a      	mov	r2, r5
 8007d04:	f7f8 fae8 	bl	80002d8 <__aeabi_dsub>
 8007d08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d0c:	4656      	mov	r6, sl
 8007d0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d12:	f7f8 ff49 	bl	8000ba8 <__aeabi_d2iz>
 8007d16:	4605      	mov	r5, r0
 8007d18:	f7f8 fc2c 	bl	8000574 <__aeabi_i2d>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	460b      	mov	r3, r1
 8007d20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d24:	f7f8 fad8 	bl	80002d8 <__aeabi_dsub>
 8007d28:	3530      	adds	r5, #48	@ 0x30
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d32:	f806 5b01 	strb.w	r5, [r6], #1
 8007d36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d3a:	f7f8 fef7 	bl	8000b2c <__aeabi_dcmplt>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	d171      	bne.n	8007e26 <_dtoa_r+0x65e>
 8007d42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d46:	4911      	ldr	r1, [pc, #68]	@ (8007d8c <_dtoa_r+0x5c4>)
 8007d48:	2000      	movs	r0, #0
 8007d4a:	f7f8 fac5 	bl	80002d8 <__aeabi_dsub>
 8007d4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d52:	f7f8 feeb 	bl	8000b2c <__aeabi_dcmplt>
 8007d56:	2800      	cmp	r0, #0
 8007d58:	f040 8095 	bne.w	8007e86 <_dtoa_r+0x6be>
 8007d5c:	42a6      	cmp	r6, r4
 8007d5e:	f43f af50 	beq.w	8007c02 <_dtoa_r+0x43a>
 8007d62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d66:	4b0a      	ldr	r3, [pc, #40]	@ (8007d90 <_dtoa_r+0x5c8>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f7f8 fc6d 	bl	8000648 <__aeabi_dmul>
 8007d6e:	4b08      	ldr	r3, [pc, #32]	@ (8007d90 <_dtoa_r+0x5c8>)
 8007d70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d74:	2200      	movs	r2, #0
 8007d76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d7a:	f7f8 fc65 	bl	8000648 <__aeabi_dmul>
 8007d7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d82:	e7c4      	b.n	8007d0e <_dtoa_r+0x546>
 8007d84:	0800e1d0 	.word	0x0800e1d0
 8007d88:	0800e1a8 	.word	0x0800e1a8
 8007d8c:	3ff00000 	.word	0x3ff00000
 8007d90:	40240000 	.word	0x40240000
 8007d94:	401c0000 	.word	0x401c0000
 8007d98:	40140000 	.word	0x40140000
 8007d9c:	3fe00000 	.word	0x3fe00000
 8007da0:	4631      	mov	r1, r6
 8007da2:	4628      	mov	r0, r5
 8007da4:	f7f8 fc50 	bl	8000648 <__aeabi_dmul>
 8007da8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007dac:	9415      	str	r4, [sp, #84]	@ 0x54
 8007dae:	4656      	mov	r6, sl
 8007db0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007db4:	f7f8 fef8 	bl	8000ba8 <__aeabi_d2iz>
 8007db8:	4605      	mov	r5, r0
 8007dba:	f7f8 fbdb 	bl	8000574 <__aeabi_i2d>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dc6:	f7f8 fa87 	bl	80002d8 <__aeabi_dsub>
 8007dca:	3530      	adds	r5, #48	@ 0x30
 8007dcc:	f806 5b01 	strb.w	r5, [r6], #1
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	42a6      	cmp	r6, r4
 8007dd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007dda:	f04f 0200 	mov.w	r2, #0
 8007dde:	d124      	bne.n	8007e2a <_dtoa_r+0x662>
 8007de0:	4bac      	ldr	r3, [pc, #688]	@ (8008094 <_dtoa_r+0x8cc>)
 8007de2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007de6:	f7f8 fa79 	bl	80002dc <__adddf3>
 8007dea:	4602      	mov	r2, r0
 8007dec:	460b      	mov	r3, r1
 8007dee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007df2:	f7f8 feb9 	bl	8000b68 <__aeabi_dcmpgt>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	d145      	bne.n	8007e86 <_dtoa_r+0x6be>
 8007dfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007dfe:	49a5      	ldr	r1, [pc, #660]	@ (8008094 <_dtoa_r+0x8cc>)
 8007e00:	2000      	movs	r0, #0
 8007e02:	f7f8 fa69 	bl	80002d8 <__aeabi_dsub>
 8007e06:	4602      	mov	r2, r0
 8007e08:	460b      	mov	r3, r1
 8007e0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e0e:	f7f8 fe8d 	bl	8000b2c <__aeabi_dcmplt>
 8007e12:	2800      	cmp	r0, #0
 8007e14:	f43f aef5 	beq.w	8007c02 <_dtoa_r+0x43a>
 8007e18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007e1a:	1e73      	subs	r3, r6, #1
 8007e1c:	9315      	str	r3, [sp, #84]	@ 0x54
 8007e1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007e22:	2b30      	cmp	r3, #48	@ 0x30
 8007e24:	d0f8      	beq.n	8007e18 <_dtoa_r+0x650>
 8007e26:	9f04      	ldr	r7, [sp, #16]
 8007e28:	e73e      	b.n	8007ca8 <_dtoa_r+0x4e0>
 8007e2a:	4b9b      	ldr	r3, [pc, #620]	@ (8008098 <_dtoa_r+0x8d0>)
 8007e2c:	f7f8 fc0c 	bl	8000648 <__aeabi_dmul>
 8007e30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e34:	e7bc      	b.n	8007db0 <_dtoa_r+0x5e8>
 8007e36:	d10c      	bne.n	8007e52 <_dtoa_r+0x68a>
 8007e38:	4b98      	ldr	r3, [pc, #608]	@ (800809c <_dtoa_r+0x8d4>)
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e40:	f7f8 fc02 	bl	8000648 <__aeabi_dmul>
 8007e44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e48:	f7f8 fe84 	bl	8000b54 <__aeabi_dcmpge>
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	f000 8157 	beq.w	8008100 <_dtoa_r+0x938>
 8007e52:	2400      	movs	r4, #0
 8007e54:	4625      	mov	r5, r4
 8007e56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e58:	43db      	mvns	r3, r3
 8007e5a:	9304      	str	r3, [sp, #16]
 8007e5c:	4656      	mov	r6, sl
 8007e5e:	2700      	movs	r7, #0
 8007e60:	4621      	mov	r1, r4
 8007e62:	4658      	mov	r0, fp
 8007e64:	f000 fafe 	bl	8008464 <_Bfree>
 8007e68:	2d00      	cmp	r5, #0
 8007e6a:	d0dc      	beq.n	8007e26 <_dtoa_r+0x65e>
 8007e6c:	b12f      	cbz	r7, 8007e7a <_dtoa_r+0x6b2>
 8007e6e:	42af      	cmp	r7, r5
 8007e70:	d003      	beq.n	8007e7a <_dtoa_r+0x6b2>
 8007e72:	4639      	mov	r1, r7
 8007e74:	4658      	mov	r0, fp
 8007e76:	f000 faf5 	bl	8008464 <_Bfree>
 8007e7a:	4629      	mov	r1, r5
 8007e7c:	4658      	mov	r0, fp
 8007e7e:	f000 faf1 	bl	8008464 <_Bfree>
 8007e82:	e7d0      	b.n	8007e26 <_dtoa_r+0x65e>
 8007e84:	9704      	str	r7, [sp, #16]
 8007e86:	4633      	mov	r3, r6
 8007e88:	461e      	mov	r6, r3
 8007e8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e8e:	2a39      	cmp	r2, #57	@ 0x39
 8007e90:	d107      	bne.n	8007ea2 <_dtoa_r+0x6da>
 8007e92:	459a      	cmp	sl, r3
 8007e94:	d1f8      	bne.n	8007e88 <_dtoa_r+0x6c0>
 8007e96:	9a04      	ldr	r2, [sp, #16]
 8007e98:	3201      	adds	r2, #1
 8007e9a:	9204      	str	r2, [sp, #16]
 8007e9c:	2230      	movs	r2, #48	@ 0x30
 8007e9e:	f88a 2000 	strb.w	r2, [sl]
 8007ea2:	781a      	ldrb	r2, [r3, #0]
 8007ea4:	3201      	adds	r2, #1
 8007ea6:	701a      	strb	r2, [r3, #0]
 8007ea8:	e7bd      	b.n	8007e26 <_dtoa_r+0x65e>
 8007eaa:	4b7b      	ldr	r3, [pc, #492]	@ (8008098 <_dtoa_r+0x8d0>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	f7f8 fbcb 	bl	8000648 <__aeabi_dmul>
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	460d      	mov	r5, r1
 8007eba:	f7f8 fe2d 	bl	8000b18 <__aeabi_dcmpeq>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	f43f aebb 	beq.w	8007c3a <_dtoa_r+0x472>
 8007ec4:	e6f0      	b.n	8007ca8 <_dtoa_r+0x4e0>
 8007ec6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007ec8:	2a00      	cmp	r2, #0
 8007eca:	f000 80db 	beq.w	8008084 <_dtoa_r+0x8bc>
 8007ece:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ed0:	2a01      	cmp	r2, #1
 8007ed2:	f300 80bf 	bgt.w	8008054 <_dtoa_r+0x88c>
 8007ed6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007ed8:	2a00      	cmp	r2, #0
 8007eda:	f000 80b7 	beq.w	800804c <_dtoa_r+0x884>
 8007ede:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007ee2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007ee4:	4646      	mov	r6, r8
 8007ee6:	9a08      	ldr	r2, [sp, #32]
 8007ee8:	2101      	movs	r1, #1
 8007eea:	441a      	add	r2, r3
 8007eec:	4658      	mov	r0, fp
 8007eee:	4498      	add	r8, r3
 8007ef0:	9208      	str	r2, [sp, #32]
 8007ef2:	f000 fbb5 	bl	8008660 <__i2b>
 8007ef6:	4605      	mov	r5, r0
 8007ef8:	b15e      	cbz	r6, 8007f12 <_dtoa_r+0x74a>
 8007efa:	9b08      	ldr	r3, [sp, #32]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	dd08      	ble.n	8007f12 <_dtoa_r+0x74a>
 8007f00:	42b3      	cmp	r3, r6
 8007f02:	9a08      	ldr	r2, [sp, #32]
 8007f04:	bfa8      	it	ge
 8007f06:	4633      	movge	r3, r6
 8007f08:	eba8 0803 	sub.w	r8, r8, r3
 8007f0c:	1af6      	subs	r6, r6, r3
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	9308      	str	r3, [sp, #32]
 8007f12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f14:	b1f3      	cbz	r3, 8007f54 <_dtoa_r+0x78c>
 8007f16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f000 80b7 	beq.w	800808c <_dtoa_r+0x8c4>
 8007f1e:	b18c      	cbz	r4, 8007f44 <_dtoa_r+0x77c>
 8007f20:	4629      	mov	r1, r5
 8007f22:	4622      	mov	r2, r4
 8007f24:	4658      	mov	r0, fp
 8007f26:	f000 fc5b 	bl	80087e0 <__pow5mult>
 8007f2a:	464a      	mov	r2, r9
 8007f2c:	4601      	mov	r1, r0
 8007f2e:	4605      	mov	r5, r0
 8007f30:	4658      	mov	r0, fp
 8007f32:	f000 fbab 	bl	800868c <__multiply>
 8007f36:	4649      	mov	r1, r9
 8007f38:	9004      	str	r0, [sp, #16]
 8007f3a:	4658      	mov	r0, fp
 8007f3c:	f000 fa92 	bl	8008464 <_Bfree>
 8007f40:	9b04      	ldr	r3, [sp, #16]
 8007f42:	4699      	mov	r9, r3
 8007f44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f46:	1b1a      	subs	r2, r3, r4
 8007f48:	d004      	beq.n	8007f54 <_dtoa_r+0x78c>
 8007f4a:	4649      	mov	r1, r9
 8007f4c:	4658      	mov	r0, fp
 8007f4e:	f000 fc47 	bl	80087e0 <__pow5mult>
 8007f52:	4681      	mov	r9, r0
 8007f54:	2101      	movs	r1, #1
 8007f56:	4658      	mov	r0, fp
 8007f58:	f000 fb82 	bl	8008660 <__i2b>
 8007f5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f5e:	4604      	mov	r4, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f000 81cf 	beq.w	8008304 <_dtoa_r+0xb3c>
 8007f66:	461a      	mov	r2, r3
 8007f68:	4601      	mov	r1, r0
 8007f6a:	4658      	mov	r0, fp
 8007f6c:	f000 fc38 	bl	80087e0 <__pow5mult>
 8007f70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	4604      	mov	r4, r0
 8007f76:	f300 8095 	bgt.w	80080a4 <_dtoa_r+0x8dc>
 8007f7a:	9b02      	ldr	r3, [sp, #8]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f040 8087 	bne.w	8008090 <_dtoa_r+0x8c8>
 8007f82:	9b03      	ldr	r3, [sp, #12]
 8007f84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f040 8089 	bne.w	80080a0 <_dtoa_r+0x8d8>
 8007f8e:	9b03      	ldr	r3, [sp, #12]
 8007f90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f94:	0d1b      	lsrs	r3, r3, #20
 8007f96:	051b      	lsls	r3, r3, #20
 8007f98:	b12b      	cbz	r3, 8007fa6 <_dtoa_r+0x7de>
 8007f9a:	9b08      	ldr	r3, [sp, #32]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	9308      	str	r3, [sp, #32]
 8007fa0:	f108 0801 	add.w	r8, r8, #1
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 81b0 	beq.w	8008310 <_dtoa_r+0xb48>
 8007fb0:	6923      	ldr	r3, [r4, #16]
 8007fb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007fb6:	6918      	ldr	r0, [r3, #16]
 8007fb8:	f000 fb06 	bl	80085c8 <__hi0bits>
 8007fbc:	f1c0 0020 	rsb	r0, r0, #32
 8007fc0:	9b08      	ldr	r3, [sp, #32]
 8007fc2:	4418      	add	r0, r3
 8007fc4:	f010 001f 	ands.w	r0, r0, #31
 8007fc8:	d077      	beq.n	80080ba <_dtoa_r+0x8f2>
 8007fca:	f1c0 0320 	rsb	r3, r0, #32
 8007fce:	2b04      	cmp	r3, #4
 8007fd0:	dd6b      	ble.n	80080aa <_dtoa_r+0x8e2>
 8007fd2:	9b08      	ldr	r3, [sp, #32]
 8007fd4:	f1c0 001c 	rsb	r0, r0, #28
 8007fd8:	4403      	add	r3, r0
 8007fda:	4480      	add	r8, r0
 8007fdc:	4406      	add	r6, r0
 8007fde:	9308      	str	r3, [sp, #32]
 8007fe0:	f1b8 0f00 	cmp.w	r8, #0
 8007fe4:	dd05      	ble.n	8007ff2 <_dtoa_r+0x82a>
 8007fe6:	4649      	mov	r1, r9
 8007fe8:	4642      	mov	r2, r8
 8007fea:	4658      	mov	r0, fp
 8007fec:	f000 fc52 	bl	8008894 <__lshift>
 8007ff0:	4681      	mov	r9, r0
 8007ff2:	9b08      	ldr	r3, [sp, #32]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	dd05      	ble.n	8008004 <_dtoa_r+0x83c>
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	4658      	mov	r0, fp
 8007ffe:	f000 fc49 	bl	8008894 <__lshift>
 8008002:	4604      	mov	r4, r0
 8008004:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008006:	2b00      	cmp	r3, #0
 8008008:	d059      	beq.n	80080be <_dtoa_r+0x8f6>
 800800a:	4621      	mov	r1, r4
 800800c:	4648      	mov	r0, r9
 800800e:	f000 fcad 	bl	800896c <__mcmp>
 8008012:	2800      	cmp	r0, #0
 8008014:	da53      	bge.n	80080be <_dtoa_r+0x8f6>
 8008016:	1e7b      	subs	r3, r7, #1
 8008018:	9304      	str	r3, [sp, #16]
 800801a:	4649      	mov	r1, r9
 800801c:	2300      	movs	r3, #0
 800801e:	220a      	movs	r2, #10
 8008020:	4658      	mov	r0, fp
 8008022:	f000 fa41 	bl	80084a8 <__multadd>
 8008026:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008028:	4681      	mov	r9, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	f000 8172 	beq.w	8008314 <_dtoa_r+0xb4c>
 8008030:	2300      	movs	r3, #0
 8008032:	4629      	mov	r1, r5
 8008034:	220a      	movs	r2, #10
 8008036:	4658      	mov	r0, fp
 8008038:	f000 fa36 	bl	80084a8 <__multadd>
 800803c:	9b00      	ldr	r3, [sp, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	4605      	mov	r5, r0
 8008042:	dc67      	bgt.n	8008114 <_dtoa_r+0x94c>
 8008044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008046:	2b02      	cmp	r3, #2
 8008048:	dc41      	bgt.n	80080ce <_dtoa_r+0x906>
 800804a:	e063      	b.n	8008114 <_dtoa_r+0x94c>
 800804c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800804e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008052:	e746      	b.n	8007ee2 <_dtoa_r+0x71a>
 8008054:	9b07      	ldr	r3, [sp, #28]
 8008056:	1e5c      	subs	r4, r3, #1
 8008058:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800805a:	42a3      	cmp	r3, r4
 800805c:	bfbf      	itttt	lt
 800805e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008060:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008062:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008064:	1ae3      	sublt	r3, r4, r3
 8008066:	bfb4      	ite	lt
 8008068:	18d2      	addlt	r2, r2, r3
 800806a:	1b1c      	subge	r4, r3, r4
 800806c:	9b07      	ldr	r3, [sp, #28]
 800806e:	bfbc      	itt	lt
 8008070:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008072:	2400      	movlt	r4, #0
 8008074:	2b00      	cmp	r3, #0
 8008076:	bfb5      	itete	lt
 8008078:	eba8 0603 	sublt.w	r6, r8, r3
 800807c:	9b07      	ldrge	r3, [sp, #28]
 800807e:	2300      	movlt	r3, #0
 8008080:	4646      	movge	r6, r8
 8008082:	e730      	b.n	8007ee6 <_dtoa_r+0x71e>
 8008084:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008086:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008088:	4646      	mov	r6, r8
 800808a:	e735      	b.n	8007ef8 <_dtoa_r+0x730>
 800808c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800808e:	e75c      	b.n	8007f4a <_dtoa_r+0x782>
 8008090:	2300      	movs	r3, #0
 8008092:	e788      	b.n	8007fa6 <_dtoa_r+0x7de>
 8008094:	3fe00000 	.word	0x3fe00000
 8008098:	40240000 	.word	0x40240000
 800809c:	40140000 	.word	0x40140000
 80080a0:	9b02      	ldr	r3, [sp, #8]
 80080a2:	e780      	b.n	8007fa6 <_dtoa_r+0x7de>
 80080a4:	2300      	movs	r3, #0
 80080a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80080a8:	e782      	b.n	8007fb0 <_dtoa_r+0x7e8>
 80080aa:	d099      	beq.n	8007fe0 <_dtoa_r+0x818>
 80080ac:	9a08      	ldr	r2, [sp, #32]
 80080ae:	331c      	adds	r3, #28
 80080b0:	441a      	add	r2, r3
 80080b2:	4498      	add	r8, r3
 80080b4:	441e      	add	r6, r3
 80080b6:	9208      	str	r2, [sp, #32]
 80080b8:	e792      	b.n	8007fe0 <_dtoa_r+0x818>
 80080ba:	4603      	mov	r3, r0
 80080bc:	e7f6      	b.n	80080ac <_dtoa_r+0x8e4>
 80080be:	9b07      	ldr	r3, [sp, #28]
 80080c0:	9704      	str	r7, [sp, #16]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	dc20      	bgt.n	8008108 <_dtoa_r+0x940>
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	dd1e      	ble.n	800810c <_dtoa_r+0x944>
 80080ce:	9b00      	ldr	r3, [sp, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f47f aec0 	bne.w	8007e56 <_dtoa_r+0x68e>
 80080d6:	4621      	mov	r1, r4
 80080d8:	2205      	movs	r2, #5
 80080da:	4658      	mov	r0, fp
 80080dc:	f000 f9e4 	bl	80084a8 <__multadd>
 80080e0:	4601      	mov	r1, r0
 80080e2:	4604      	mov	r4, r0
 80080e4:	4648      	mov	r0, r9
 80080e6:	f000 fc41 	bl	800896c <__mcmp>
 80080ea:	2800      	cmp	r0, #0
 80080ec:	f77f aeb3 	ble.w	8007e56 <_dtoa_r+0x68e>
 80080f0:	4656      	mov	r6, sl
 80080f2:	2331      	movs	r3, #49	@ 0x31
 80080f4:	f806 3b01 	strb.w	r3, [r6], #1
 80080f8:	9b04      	ldr	r3, [sp, #16]
 80080fa:	3301      	adds	r3, #1
 80080fc:	9304      	str	r3, [sp, #16]
 80080fe:	e6ae      	b.n	8007e5e <_dtoa_r+0x696>
 8008100:	9c07      	ldr	r4, [sp, #28]
 8008102:	9704      	str	r7, [sp, #16]
 8008104:	4625      	mov	r5, r4
 8008106:	e7f3      	b.n	80080f0 <_dtoa_r+0x928>
 8008108:	9b07      	ldr	r3, [sp, #28]
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800810e:	2b00      	cmp	r3, #0
 8008110:	f000 8104 	beq.w	800831c <_dtoa_r+0xb54>
 8008114:	2e00      	cmp	r6, #0
 8008116:	dd05      	ble.n	8008124 <_dtoa_r+0x95c>
 8008118:	4629      	mov	r1, r5
 800811a:	4632      	mov	r2, r6
 800811c:	4658      	mov	r0, fp
 800811e:	f000 fbb9 	bl	8008894 <__lshift>
 8008122:	4605      	mov	r5, r0
 8008124:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008126:	2b00      	cmp	r3, #0
 8008128:	d05a      	beq.n	80081e0 <_dtoa_r+0xa18>
 800812a:	6869      	ldr	r1, [r5, #4]
 800812c:	4658      	mov	r0, fp
 800812e:	f000 f959 	bl	80083e4 <_Balloc>
 8008132:	4606      	mov	r6, r0
 8008134:	b928      	cbnz	r0, 8008142 <_dtoa_r+0x97a>
 8008136:	4b84      	ldr	r3, [pc, #528]	@ (8008348 <_dtoa_r+0xb80>)
 8008138:	4602      	mov	r2, r0
 800813a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800813e:	f7ff bb5a 	b.w	80077f6 <_dtoa_r+0x2e>
 8008142:	692a      	ldr	r2, [r5, #16]
 8008144:	3202      	adds	r2, #2
 8008146:	0092      	lsls	r2, r2, #2
 8008148:	f105 010c 	add.w	r1, r5, #12
 800814c:	300c      	adds	r0, #12
 800814e:	f7ff fa9e 	bl	800768e <memcpy>
 8008152:	2201      	movs	r2, #1
 8008154:	4631      	mov	r1, r6
 8008156:	4658      	mov	r0, fp
 8008158:	f000 fb9c 	bl	8008894 <__lshift>
 800815c:	f10a 0301 	add.w	r3, sl, #1
 8008160:	9307      	str	r3, [sp, #28]
 8008162:	9b00      	ldr	r3, [sp, #0]
 8008164:	4453      	add	r3, sl
 8008166:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008168:	9b02      	ldr	r3, [sp, #8]
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	462f      	mov	r7, r5
 8008170:	930a      	str	r3, [sp, #40]	@ 0x28
 8008172:	4605      	mov	r5, r0
 8008174:	9b07      	ldr	r3, [sp, #28]
 8008176:	4621      	mov	r1, r4
 8008178:	3b01      	subs	r3, #1
 800817a:	4648      	mov	r0, r9
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	f7ff fa9b 	bl	80076b8 <quorem>
 8008182:	4639      	mov	r1, r7
 8008184:	9002      	str	r0, [sp, #8]
 8008186:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800818a:	4648      	mov	r0, r9
 800818c:	f000 fbee 	bl	800896c <__mcmp>
 8008190:	462a      	mov	r2, r5
 8008192:	9008      	str	r0, [sp, #32]
 8008194:	4621      	mov	r1, r4
 8008196:	4658      	mov	r0, fp
 8008198:	f000 fc04 	bl	80089a4 <__mdiff>
 800819c:	68c2      	ldr	r2, [r0, #12]
 800819e:	4606      	mov	r6, r0
 80081a0:	bb02      	cbnz	r2, 80081e4 <_dtoa_r+0xa1c>
 80081a2:	4601      	mov	r1, r0
 80081a4:	4648      	mov	r0, r9
 80081a6:	f000 fbe1 	bl	800896c <__mcmp>
 80081aa:	4602      	mov	r2, r0
 80081ac:	4631      	mov	r1, r6
 80081ae:	4658      	mov	r0, fp
 80081b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80081b2:	f000 f957 	bl	8008464 <_Bfree>
 80081b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081ba:	9e07      	ldr	r6, [sp, #28]
 80081bc:	ea43 0102 	orr.w	r1, r3, r2
 80081c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081c2:	4319      	orrs	r1, r3
 80081c4:	d110      	bne.n	80081e8 <_dtoa_r+0xa20>
 80081c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081ca:	d029      	beq.n	8008220 <_dtoa_r+0xa58>
 80081cc:	9b08      	ldr	r3, [sp, #32]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	dd02      	ble.n	80081d8 <_dtoa_r+0xa10>
 80081d2:	9b02      	ldr	r3, [sp, #8]
 80081d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80081d8:	9b00      	ldr	r3, [sp, #0]
 80081da:	f883 8000 	strb.w	r8, [r3]
 80081de:	e63f      	b.n	8007e60 <_dtoa_r+0x698>
 80081e0:	4628      	mov	r0, r5
 80081e2:	e7bb      	b.n	800815c <_dtoa_r+0x994>
 80081e4:	2201      	movs	r2, #1
 80081e6:	e7e1      	b.n	80081ac <_dtoa_r+0x9e4>
 80081e8:	9b08      	ldr	r3, [sp, #32]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	db04      	blt.n	80081f8 <_dtoa_r+0xa30>
 80081ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80081f0:	430b      	orrs	r3, r1
 80081f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80081f4:	430b      	orrs	r3, r1
 80081f6:	d120      	bne.n	800823a <_dtoa_r+0xa72>
 80081f8:	2a00      	cmp	r2, #0
 80081fa:	dded      	ble.n	80081d8 <_dtoa_r+0xa10>
 80081fc:	4649      	mov	r1, r9
 80081fe:	2201      	movs	r2, #1
 8008200:	4658      	mov	r0, fp
 8008202:	f000 fb47 	bl	8008894 <__lshift>
 8008206:	4621      	mov	r1, r4
 8008208:	4681      	mov	r9, r0
 800820a:	f000 fbaf 	bl	800896c <__mcmp>
 800820e:	2800      	cmp	r0, #0
 8008210:	dc03      	bgt.n	800821a <_dtoa_r+0xa52>
 8008212:	d1e1      	bne.n	80081d8 <_dtoa_r+0xa10>
 8008214:	f018 0f01 	tst.w	r8, #1
 8008218:	d0de      	beq.n	80081d8 <_dtoa_r+0xa10>
 800821a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800821e:	d1d8      	bne.n	80081d2 <_dtoa_r+0xa0a>
 8008220:	9a00      	ldr	r2, [sp, #0]
 8008222:	2339      	movs	r3, #57	@ 0x39
 8008224:	7013      	strb	r3, [r2, #0]
 8008226:	4633      	mov	r3, r6
 8008228:	461e      	mov	r6, r3
 800822a:	3b01      	subs	r3, #1
 800822c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008230:	2a39      	cmp	r2, #57	@ 0x39
 8008232:	d052      	beq.n	80082da <_dtoa_r+0xb12>
 8008234:	3201      	adds	r2, #1
 8008236:	701a      	strb	r2, [r3, #0]
 8008238:	e612      	b.n	8007e60 <_dtoa_r+0x698>
 800823a:	2a00      	cmp	r2, #0
 800823c:	dd07      	ble.n	800824e <_dtoa_r+0xa86>
 800823e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008242:	d0ed      	beq.n	8008220 <_dtoa_r+0xa58>
 8008244:	9a00      	ldr	r2, [sp, #0]
 8008246:	f108 0301 	add.w	r3, r8, #1
 800824a:	7013      	strb	r3, [r2, #0]
 800824c:	e608      	b.n	8007e60 <_dtoa_r+0x698>
 800824e:	9b07      	ldr	r3, [sp, #28]
 8008250:	9a07      	ldr	r2, [sp, #28]
 8008252:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008256:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008258:	4293      	cmp	r3, r2
 800825a:	d028      	beq.n	80082ae <_dtoa_r+0xae6>
 800825c:	4649      	mov	r1, r9
 800825e:	2300      	movs	r3, #0
 8008260:	220a      	movs	r2, #10
 8008262:	4658      	mov	r0, fp
 8008264:	f000 f920 	bl	80084a8 <__multadd>
 8008268:	42af      	cmp	r7, r5
 800826a:	4681      	mov	r9, r0
 800826c:	f04f 0300 	mov.w	r3, #0
 8008270:	f04f 020a 	mov.w	r2, #10
 8008274:	4639      	mov	r1, r7
 8008276:	4658      	mov	r0, fp
 8008278:	d107      	bne.n	800828a <_dtoa_r+0xac2>
 800827a:	f000 f915 	bl	80084a8 <__multadd>
 800827e:	4607      	mov	r7, r0
 8008280:	4605      	mov	r5, r0
 8008282:	9b07      	ldr	r3, [sp, #28]
 8008284:	3301      	adds	r3, #1
 8008286:	9307      	str	r3, [sp, #28]
 8008288:	e774      	b.n	8008174 <_dtoa_r+0x9ac>
 800828a:	f000 f90d 	bl	80084a8 <__multadd>
 800828e:	4629      	mov	r1, r5
 8008290:	4607      	mov	r7, r0
 8008292:	2300      	movs	r3, #0
 8008294:	220a      	movs	r2, #10
 8008296:	4658      	mov	r0, fp
 8008298:	f000 f906 	bl	80084a8 <__multadd>
 800829c:	4605      	mov	r5, r0
 800829e:	e7f0      	b.n	8008282 <_dtoa_r+0xaba>
 80082a0:	9b00      	ldr	r3, [sp, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	bfcc      	ite	gt
 80082a6:	461e      	movgt	r6, r3
 80082a8:	2601      	movle	r6, #1
 80082aa:	4456      	add	r6, sl
 80082ac:	2700      	movs	r7, #0
 80082ae:	4649      	mov	r1, r9
 80082b0:	2201      	movs	r2, #1
 80082b2:	4658      	mov	r0, fp
 80082b4:	f000 faee 	bl	8008894 <__lshift>
 80082b8:	4621      	mov	r1, r4
 80082ba:	4681      	mov	r9, r0
 80082bc:	f000 fb56 	bl	800896c <__mcmp>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	dcb0      	bgt.n	8008226 <_dtoa_r+0xa5e>
 80082c4:	d102      	bne.n	80082cc <_dtoa_r+0xb04>
 80082c6:	f018 0f01 	tst.w	r8, #1
 80082ca:	d1ac      	bne.n	8008226 <_dtoa_r+0xa5e>
 80082cc:	4633      	mov	r3, r6
 80082ce:	461e      	mov	r6, r3
 80082d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082d4:	2a30      	cmp	r2, #48	@ 0x30
 80082d6:	d0fa      	beq.n	80082ce <_dtoa_r+0xb06>
 80082d8:	e5c2      	b.n	8007e60 <_dtoa_r+0x698>
 80082da:	459a      	cmp	sl, r3
 80082dc:	d1a4      	bne.n	8008228 <_dtoa_r+0xa60>
 80082de:	9b04      	ldr	r3, [sp, #16]
 80082e0:	3301      	adds	r3, #1
 80082e2:	9304      	str	r3, [sp, #16]
 80082e4:	2331      	movs	r3, #49	@ 0x31
 80082e6:	f88a 3000 	strb.w	r3, [sl]
 80082ea:	e5b9      	b.n	8007e60 <_dtoa_r+0x698>
 80082ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80082ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800834c <_dtoa_r+0xb84>
 80082f2:	b11b      	cbz	r3, 80082fc <_dtoa_r+0xb34>
 80082f4:	f10a 0308 	add.w	r3, sl, #8
 80082f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80082fa:	6013      	str	r3, [r2, #0]
 80082fc:	4650      	mov	r0, sl
 80082fe:	b019      	add	sp, #100	@ 0x64
 8008300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008306:	2b01      	cmp	r3, #1
 8008308:	f77f ae37 	ble.w	8007f7a <_dtoa_r+0x7b2>
 800830c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800830e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008310:	2001      	movs	r0, #1
 8008312:	e655      	b.n	8007fc0 <_dtoa_r+0x7f8>
 8008314:	9b00      	ldr	r3, [sp, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	f77f aed6 	ble.w	80080c8 <_dtoa_r+0x900>
 800831c:	4656      	mov	r6, sl
 800831e:	4621      	mov	r1, r4
 8008320:	4648      	mov	r0, r9
 8008322:	f7ff f9c9 	bl	80076b8 <quorem>
 8008326:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800832a:	f806 8b01 	strb.w	r8, [r6], #1
 800832e:	9b00      	ldr	r3, [sp, #0]
 8008330:	eba6 020a 	sub.w	r2, r6, sl
 8008334:	4293      	cmp	r3, r2
 8008336:	ddb3      	ble.n	80082a0 <_dtoa_r+0xad8>
 8008338:	4649      	mov	r1, r9
 800833a:	2300      	movs	r3, #0
 800833c:	220a      	movs	r2, #10
 800833e:	4658      	mov	r0, fp
 8008340:	f000 f8b2 	bl	80084a8 <__multadd>
 8008344:	4681      	mov	r9, r0
 8008346:	e7ea      	b.n	800831e <_dtoa_r+0xb56>
 8008348:	0800e131 	.word	0x0800e131
 800834c:	0800e0b5 	.word	0x0800e0b5

08008350 <_free_r>:
 8008350:	b538      	push	{r3, r4, r5, lr}
 8008352:	4605      	mov	r5, r0
 8008354:	2900      	cmp	r1, #0
 8008356:	d041      	beq.n	80083dc <_free_r+0x8c>
 8008358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800835c:	1f0c      	subs	r4, r1, #4
 800835e:	2b00      	cmp	r3, #0
 8008360:	bfb8      	it	lt
 8008362:	18e4      	addlt	r4, r4, r3
 8008364:	f7fe f862 	bl	800642c <__malloc_lock>
 8008368:	4a1d      	ldr	r2, [pc, #116]	@ (80083e0 <_free_r+0x90>)
 800836a:	6813      	ldr	r3, [r2, #0]
 800836c:	b933      	cbnz	r3, 800837c <_free_r+0x2c>
 800836e:	6063      	str	r3, [r4, #4]
 8008370:	6014      	str	r4, [r2, #0]
 8008372:	4628      	mov	r0, r5
 8008374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008378:	f7fe b85e 	b.w	8006438 <__malloc_unlock>
 800837c:	42a3      	cmp	r3, r4
 800837e:	d908      	bls.n	8008392 <_free_r+0x42>
 8008380:	6820      	ldr	r0, [r4, #0]
 8008382:	1821      	adds	r1, r4, r0
 8008384:	428b      	cmp	r3, r1
 8008386:	bf01      	itttt	eq
 8008388:	6819      	ldreq	r1, [r3, #0]
 800838a:	685b      	ldreq	r3, [r3, #4]
 800838c:	1809      	addeq	r1, r1, r0
 800838e:	6021      	streq	r1, [r4, #0]
 8008390:	e7ed      	b.n	800836e <_free_r+0x1e>
 8008392:	461a      	mov	r2, r3
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	b10b      	cbz	r3, 800839c <_free_r+0x4c>
 8008398:	42a3      	cmp	r3, r4
 800839a:	d9fa      	bls.n	8008392 <_free_r+0x42>
 800839c:	6811      	ldr	r1, [r2, #0]
 800839e:	1850      	adds	r0, r2, r1
 80083a0:	42a0      	cmp	r0, r4
 80083a2:	d10b      	bne.n	80083bc <_free_r+0x6c>
 80083a4:	6820      	ldr	r0, [r4, #0]
 80083a6:	4401      	add	r1, r0
 80083a8:	1850      	adds	r0, r2, r1
 80083aa:	4283      	cmp	r3, r0
 80083ac:	6011      	str	r1, [r2, #0]
 80083ae:	d1e0      	bne.n	8008372 <_free_r+0x22>
 80083b0:	6818      	ldr	r0, [r3, #0]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	6053      	str	r3, [r2, #4]
 80083b6:	4408      	add	r0, r1
 80083b8:	6010      	str	r0, [r2, #0]
 80083ba:	e7da      	b.n	8008372 <_free_r+0x22>
 80083bc:	d902      	bls.n	80083c4 <_free_r+0x74>
 80083be:	230c      	movs	r3, #12
 80083c0:	602b      	str	r3, [r5, #0]
 80083c2:	e7d6      	b.n	8008372 <_free_r+0x22>
 80083c4:	6820      	ldr	r0, [r4, #0]
 80083c6:	1821      	adds	r1, r4, r0
 80083c8:	428b      	cmp	r3, r1
 80083ca:	bf04      	itt	eq
 80083cc:	6819      	ldreq	r1, [r3, #0]
 80083ce:	685b      	ldreq	r3, [r3, #4]
 80083d0:	6063      	str	r3, [r4, #4]
 80083d2:	bf04      	itt	eq
 80083d4:	1809      	addeq	r1, r1, r0
 80083d6:	6021      	streq	r1, [r4, #0]
 80083d8:	6054      	str	r4, [r2, #4]
 80083da:	e7ca      	b.n	8008372 <_free_r+0x22>
 80083dc:	bd38      	pop	{r3, r4, r5, pc}
 80083de:	bf00      	nop
 80083e0:	200007f8 	.word	0x200007f8

080083e4 <_Balloc>:
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	69c6      	ldr	r6, [r0, #28]
 80083e8:	4604      	mov	r4, r0
 80083ea:	460d      	mov	r5, r1
 80083ec:	b976      	cbnz	r6, 800840c <_Balloc+0x28>
 80083ee:	2010      	movs	r0, #16
 80083f0:	f7fd ff72 	bl	80062d8 <malloc>
 80083f4:	4602      	mov	r2, r0
 80083f6:	61e0      	str	r0, [r4, #28]
 80083f8:	b920      	cbnz	r0, 8008404 <_Balloc+0x20>
 80083fa:	4b18      	ldr	r3, [pc, #96]	@ (800845c <_Balloc+0x78>)
 80083fc:	4818      	ldr	r0, [pc, #96]	@ (8008460 <_Balloc+0x7c>)
 80083fe:	216b      	movs	r1, #107	@ 0x6b
 8008400:	f001 ff26 	bl	800a250 <__assert_func>
 8008404:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008408:	6006      	str	r6, [r0, #0]
 800840a:	60c6      	str	r6, [r0, #12]
 800840c:	69e6      	ldr	r6, [r4, #28]
 800840e:	68f3      	ldr	r3, [r6, #12]
 8008410:	b183      	cbz	r3, 8008434 <_Balloc+0x50>
 8008412:	69e3      	ldr	r3, [r4, #28]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800841a:	b9b8      	cbnz	r0, 800844c <_Balloc+0x68>
 800841c:	2101      	movs	r1, #1
 800841e:	fa01 f605 	lsl.w	r6, r1, r5
 8008422:	1d72      	adds	r2, r6, #5
 8008424:	0092      	lsls	r2, r2, #2
 8008426:	4620      	mov	r0, r4
 8008428:	f001 ff30 	bl	800a28c <_calloc_r>
 800842c:	b160      	cbz	r0, 8008448 <_Balloc+0x64>
 800842e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008432:	e00e      	b.n	8008452 <_Balloc+0x6e>
 8008434:	2221      	movs	r2, #33	@ 0x21
 8008436:	2104      	movs	r1, #4
 8008438:	4620      	mov	r0, r4
 800843a:	f001 ff27 	bl	800a28c <_calloc_r>
 800843e:	69e3      	ldr	r3, [r4, #28]
 8008440:	60f0      	str	r0, [r6, #12]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d1e4      	bne.n	8008412 <_Balloc+0x2e>
 8008448:	2000      	movs	r0, #0
 800844a:	bd70      	pop	{r4, r5, r6, pc}
 800844c:	6802      	ldr	r2, [r0, #0]
 800844e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008452:	2300      	movs	r3, #0
 8008454:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008458:	e7f7      	b.n	800844a <_Balloc+0x66>
 800845a:	bf00      	nop
 800845c:	0800e0c2 	.word	0x0800e0c2
 8008460:	0800e142 	.word	0x0800e142

08008464 <_Bfree>:
 8008464:	b570      	push	{r4, r5, r6, lr}
 8008466:	69c6      	ldr	r6, [r0, #28]
 8008468:	4605      	mov	r5, r0
 800846a:	460c      	mov	r4, r1
 800846c:	b976      	cbnz	r6, 800848c <_Bfree+0x28>
 800846e:	2010      	movs	r0, #16
 8008470:	f7fd ff32 	bl	80062d8 <malloc>
 8008474:	4602      	mov	r2, r0
 8008476:	61e8      	str	r0, [r5, #28]
 8008478:	b920      	cbnz	r0, 8008484 <_Bfree+0x20>
 800847a:	4b09      	ldr	r3, [pc, #36]	@ (80084a0 <_Bfree+0x3c>)
 800847c:	4809      	ldr	r0, [pc, #36]	@ (80084a4 <_Bfree+0x40>)
 800847e:	218f      	movs	r1, #143	@ 0x8f
 8008480:	f001 fee6 	bl	800a250 <__assert_func>
 8008484:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008488:	6006      	str	r6, [r0, #0]
 800848a:	60c6      	str	r6, [r0, #12]
 800848c:	b13c      	cbz	r4, 800849e <_Bfree+0x3a>
 800848e:	69eb      	ldr	r3, [r5, #28]
 8008490:	6862      	ldr	r2, [r4, #4]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008498:	6021      	str	r1, [r4, #0]
 800849a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800849e:	bd70      	pop	{r4, r5, r6, pc}
 80084a0:	0800e0c2 	.word	0x0800e0c2
 80084a4:	0800e142 	.word	0x0800e142

080084a8 <__multadd>:
 80084a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084ac:	690d      	ldr	r5, [r1, #16]
 80084ae:	4607      	mov	r7, r0
 80084b0:	460c      	mov	r4, r1
 80084b2:	461e      	mov	r6, r3
 80084b4:	f101 0c14 	add.w	ip, r1, #20
 80084b8:	2000      	movs	r0, #0
 80084ba:	f8dc 3000 	ldr.w	r3, [ip]
 80084be:	b299      	uxth	r1, r3
 80084c0:	fb02 6101 	mla	r1, r2, r1, r6
 80084c4:	0c1e      	lsrs	r6, r3, #16
 80084c6:	0c0b      	lsrs	r3, r1, #16
 80084c8:	fb02 3306 	mla	r3, r2, r6, r3
 80084cc:	b289      	uxth	r1, r1
 80084ce:	3001      	adds	r0, #1
 80084d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80084d4:	4285      	cmp	r5, r0
 80084d6:	f84c 1b04 	str.w	r1, [ip], #4
 80084da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80084de:	dcec      	bgt.n	80084ba <__multadd+0x12>
 80084e0:	b30e      	cbz	r6, 8008526 <__multadd+0x7e>
 80084e2:	68a3      	ldr	r3, [r4, #8]
 80084e4:	42ab      	cmp	r3, r5
 80084e6:	dc19      	bgt.n	800851c <__multadd+0x74>
 80084e8:	6861      	ldr	r1, [r4, #4]
 80084ea:	4638      	mov	r0, r7
 80084ec:	3101      	adds	r1, #1
 80084ee:	f7ff ff79 	bl	80083e4 <_Balloc>
 80084f2:	4680      	mov	r8, r0
 80084f4:	b928      	cbnz	r0, 8008502 <__multadd+0x5a>
 80084f6:	4602      	mov	r2, r0
 80084f8:	4b0c      	ldr	r3, [pc, #48]	@ (800852c <__multadd+0x84>)
 80084fa:	480d      	ldr	r0, [pc, #52]	@ (8008530 <__multadd+0x88>)
 80084fc:	21ba      	movs	r1, #186	@ 0xba
 80084fe:	f001 fea7 	bl	800a250 <__assert_func>
 8008502:	6922      	ldr	r2, [r4, #16]
 8008504:	3202      	adds	r2, #2
 8008506:	f104 010c 	add.w	r1, r4, #12
 800850a:	0092      	lsls	r2, r2, #2
 800850c:	300c      	adds	r0, #12
 800850e:	f7ff f8be 	bl	800768e <memcpy>
 8008512:	4621      	mov	r1, r4
 8008514:	4638      	mov	r0, r7
 8008516:	f7ff ffa5 	bl	8008464 <_Bfree>
 800851a:	4644      	mov	r4, r8
 800851c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008520:	3501      	adds	r5, #1
 8008522:	615e      	str	r6, [r3, #20]
 8008524:	6125      	str	r5, [r4, #16]
 8008526:	4620      	mov	r0, r4
 8008528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800852c:	0800e131 	.word	0x0800e131
 8008530:	0800e142 	.word	0x0800e142

08008534 <__s2b>:
 8008534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008538:	460c      	mov	r4, r1
 800853a:	4615      	mov	r5, r2
 800853c:	461f      	mov	r7, r3
 800853e:	2209      	movs	r2, #9
 8008540:	3308      	adds	r3, #8
 8008542:	4606      	mov	r6, r0
 8008544:	fb93 f3f2 	sdiv	r3, r3, r2
 8008548:	2100      	movs	r1, #0
 800854a:	2201      	movs	r2, #1
 800854c:	429a      	cmp	r2, r3
 800854e:	db09      	blt.n	8008564 <__s2b+0x30>
 8008550:	4630      	mov	r0, r6
 8008552:	f7ff ff47 	bl	80083e4 <_Balloc>
 8008556:	b940      	cbnz	r0, 800856a <__s2b+0x36>
 8008558:	4602      	mov	r2, r0
 800855a:	4b19      	ldr	r3, [pc, #100]	@ (80085c0 <__s2b+0x8c>)
 800855c:	4819      	ldr	r0, [pc, #100]	@ (80085c4 <__s2b+0x90>)
 800855e:	21d3      	movs	r1, #211	@ 0xd3
 8008560:	f001 fe76 	bl	800a250 <__assert_func>
 8008564:	0052      	lsls	r2, r2, #1
 8008566:	3101      	adds	r1, #1
 8008568:	e7f0      	b.n	800854c <__s2b+0x18>
 800856a:	9b08      	ldr	r3, [sp, #32]
 800856c:	6143      	str	r3, [r0, #20]
 800856e:	2d09      	cmp	r5, #9
 8008570:	f04f 0301 	mov.w	r3, #1
 8008574:	6103      	str	r3, [r0, #16]
 8008576:	dd16      	ble.n	80085a6 <__s2b+0x72>
 8008578:	f104 0909 	add.w	r9, r4, #9
 800857c:	46c8      	mov	r8, r9
 800857e:	442c      	add	r4, r5
 8008580:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008584:	4601      	mov	r1, r0
 8008586:	3b30      	subs	r3, #48	@ 0x30
 8008588:	220a      	movs	r2, #10
 800858a:	4630      	mov	r0, r6
 800858c:	f7ff ff8c 	bl	80084a8 <__multadd>
 8008590:	45a0      	cmp	r8, r4
 8008592:	d1f5      	bne.n	8008580 <__s2b+0x4c>
 8008594:	f1a5 0408 	sub.w	r4, r5, #8
 8008598:	444c      	add	r4, r9
 800859a:	1b2d      	subs	r5, r5, r4
 800859c:	1963      	adds	r3, r4, r5
 800859e:	42bb      	cmp	r3, r7
 80085a0:	db04      	blt.n	80085ac <__s2b+0x78>
 80085a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085a6:	340a      	adds	r4, #10
 80085a8:	2509      	movs	r5, #9
 80085aa:	e7f6      	b.n	800859a <__s2b+0x66>
 80085ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80085b0:	4601      	mov	r1, r0
 80085b2:	3b30      	subs	r3, #48	@ 0x30
 80085b4:	220a      	movs	r2, #10
 80085b6:	4630      	mov	r0, r6
 80085b8:	f7ff ff76 	bl	80084a8 <__multadd>
 80085bc:	e7ee      	b.n	800859c <__s2b+0x68>
 80085be:	bf00      	nop
 80085c0:	0800e131 	.word	0x0800e131
 80085c4:	0800e142 	.word	0x0800e142

080085c8 <__hi0bits>:
 80085c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80085cc:	4603      	mov	r3, r0
 80085ce:	bf36      	itet	cc
 80085d0:	0403      	lslcc	r3, r0, #16
 80085d2:	2000      	movcs	r0, #0
 80085d4:	2010      	movcc	r0, #16
 80085d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085da:	bf3c      	itt	cc
 80085dc:	021b      	lslcc	r3, r3, #8
 80085de:	3008      	addcc	r0, #8
 80085e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085e4:	bf3c      	itt	cc
 80085e6:	011b      	lslcc	r3, r3, #4
 80085e8:	3004      	addcc	r0, #4
 80085ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085ee:	bf3c      	itt	cc
 80085f0:	009b      	lslcc	r3, r3, #2
 80085f2:	3002      	addcc	r0, #2
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	db05      	blt.n	8008604 <__hi0bits+0x3c>
 80085f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80085fc:	f100 0001 	add.w	r0, r0, #1
 8008600:	bf08      	it	eq
 8008602:	2020      	moveq	r0, #32
 8008604:	4770      	bx	lr

08008606 <__lo0bits>:
 8008606:	6803      	ldr	r3, [r0, #0]
 8008608:	4602      	mov	r2, r0
 800860a:	f013 0007 	ands.w	r0, r3, #7
 800860e:	d00b      	beq.n	8008628 <__lo0bits+0x22>
 8008610:	07d9      	lsls	r1, r3, #31
 8008612:	d421      	bmi.n	8008658 <__lo0bits+0x52>
 8008614:	0798      	lsls	r0, r3, #30
 8008616:	bf49      	itett	mi
 8008618:	085b      	lsrmi	r3, r3, #1
 800861a:	089b      	lsrpl	r3, r3, #2
 800861c:	2001      	movmi	r0, #1
 800861e:	6013      	strmi	r3, [r2, #0]
 8008620:	bf5c      	itt	pl
 8008622:	6013      	strpl	r3, [r2, #0]
 8008624:	2002      	movpl	r0, #2
 8008626:	4770      	bx	lr
 8008628:	b299      	uxth	r1, r3
 800862a:	b909      	cbnz	r1, 8008630 <__lo0bits+0x2a>
 800862c:	0c1b      	lsrs	r3, r3, #16
 800862e:	2010      	movs	r0, #16
 8008630:	b2d9      	uxtb	r1, r3
 8008632:	b909      	cbnz	r1, 8008638 <__lo0bits+0x32>
 8008634:	3008      	adds	r0, #8
 8008636:	0a1b      	lsrs	r3, r3, #8
 8008638:	0719      	lsls	r1, r3, #28
 800863a:	bf04      	itt	eq
 800863c:	091b      	lsreq	r3, r3, #4
 800863e:	3004      	addeq	r0, #4
 8008640:	0799      	lsls	r1, r3, #30
 8008642:	bf04      	itt	eq
 8008644:	089b      	lsreq	r3, r3, #2
 8008646:	3002      	addeq	r0, #2
 8008648:	07d9      	lsls	r1, r3, #31
 800864a:	d403      	bmi.n	8008654 <__lo0bits+0x4e>
 800864c:	085b      	lsrs	r3, r3, #1
 800864e:	f100 0001 	add.w	r0, r0, #1
 8008652:	d003      	beq.n	800865c <__lo0bits+0x56>
 8008654:	6013      	str	r3, [r2, #0]
 8008656:	4770      	bx	lr
 8008658:	2000      	movs	r0, #0
 800865a:	4770      	bx	lr
 800865c:	2020      	movs	r0, #32
 800865e:	4770      	bx	lr

08008660 <__i2b>:
 8008660:	b510      	push	{r4, lr}
 8008662:	460c      	mov	r4, r1
 8008664:	2101      	movs	r1, #1
 8008666:	f7ff febd 	bl	80083e4 <_Balloc>
 800866a:	4602      	mov	r2, r0
 800866c:	b928      	cbnz	r0, 800867a <__i2b+0x1a>
 800866e:	4b05      	ldr	r3, [pc, #20]	@ (8008684 <__i2b+0x24>)
 8008670:	4805      	ldr	r0, [pc, #20]	@ (8008688 <__i2b+0x28>)
 8008672:	f240 1145 	movw	r1, #325	@ 0x145
 8008676:	f001 fdeb 	bl	800a250 <__assert_func>
 800867a:	2301      	movs	r3, #1
 800867c:	6144      	str	r4, [r0, #20]
 800867e:	6103      	str	r3, [r0, #16]
 8008680:	bd10      	pop	{r4, pc}
 8008682:	bf00      	nop
 8008684:	0800e131 	.word	0x0800e131
 8008688:	0800e142 	.word	0x0800e142

0800868c <__multiply>:
 800868c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008690:	4614      	mov	r4, r2
 8008692:	690a      	ldr	r2, [r1, #16]
 8008694:	6923      	ldr	r3, [r4, #16]
 8008696:	429a      	cmp	r2, r3
 8008698:	bfa8      	it	ge
 800869a:	4623      	movge	r3, r4
 800869c:	460f      	mov	r7, r1
 800869e:	bfa4      	itt	ge
 80086a0:	460c      	movge	r4, r1
 80086a2:	461f      	movge	r7, r3
 80086a4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80086a8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80086ac:	68a3      	ldr	r3, [r4, #8]
 80086ae:	6861      	ldr	r1, [r4, #4]
 80086b0:	eb0a 0609 	add.w	r6, sl, r9
 80086b4:	42b3      	cmp	r3, r6
 80086b6:	b085      	sub	sp, #20
 80086b8:	bfb8      	it	lt
 80086ba:	3101      	addlt	r1, #1
 80086bc:	f7ff fe92 	bl	80083e4 <_Balloc>
 80086c0:	b930      	cbnz	r0, 80086d0 <__multiply+0x44>
 80086c2:	4602      	mov	r2, r0
 80086c4:	4b44      	ldr	r3, [pc, #272]	@ (80087d8 <__multiply+0x14c>)
 80086c6:	4845      	ldr	r0, [pc, #276]	@ (80087dc <__multiply+0x150>)
 80086c8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80086cc:	f001 fdc0 	bl	800a250 <__assert_func>
 80086d0:	f100 0514 	add.w	r5, r0, #20
 80086d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80086d8:	462b      	mov	r3, r5
 80086da:	2200      	movs	r2, #0
 80086dc:	4543      	cmp	r3, r8
 80086de:	d321      	bcc.n	8008724 <__multiply+0x98>
 80086e0:	f107 0114 	add.w	r1, r7, #20
 80086e4:	f104 0214 	add.w	r2, r4, #20
 80086e8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80086ec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80086f0:	9302      	str	r3, [sp, #8]
 80086f2:	1b13      	subs	r3, r2, r4
 80086f4:	3b15      	subs	r3, #21
 80086f6:	f023 0303 	bic.w	r3, r3, #3
 80086fa:	3304      	adds	r3, #4
 80086fc:	f104 0715 	add.w	r7, r4, #21
 8008700:	42ba      	cmp	r2, r7
 8008702:	bf38      	it	cc
 8008704:	2304      	movcc	r3, #4
 8008706:	9301      	str	r3, [sp, #4]
 8008708:	9b02      	ldr	r3, [sp, #8]
 800870a:	9103      	str	r1, [sp, #12]
 800870c:	428b      	cmp	r3, r1
 800870e:	d80c      	bhi.n	800872a <__multiply+0x9e>
 8008710:	2e00      	cmp	r6, #0
 8008712:	dd03      	ble.n	800871c <__multiply+0x90>
 8008714:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008718:	2b00      	cmp	r3, #0
 800871a:	d05b      	beq.n	80087d4 <__multiply+0x148>
 800871c:	6106      	str	r6, [r0, #16]
 800871e:	b005      	add	sp, #20
 8008720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008724:	f843 2b04 	str.w	r2, [r3], #4
 8008728:	e7d8      	b.n	80086dc <__multiply+0x50>
 800872a:	f8b1 a000 	ldrh.w	sl, [r1]
 800872e:	f1ba 0f00 	cmp.w	sl, #0
 8008732:	d024      	beq.n	800877e <__multiply+0xf2>
 8008734:	f104 0e14 	add.w	lr, r4, #20
 8008738:	46a9      	mov	r9, r5
 800873a:	f04f 0c00 	mov.w	ip, #0
 800873e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008742:	f8d9 3000 	ldr.w	r3, [r9]
 8008746:	fa1f fb87 	uxth.w	fp, r7
 800874a:	b29b      	uxth	r3, r3
 800874c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008750:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008754:	f8d9 7000 	ldr.w	r7, [r9]
 8008758:	4463      	add	r3, ip
 800875a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800875e:	fb0a c70b 	mla	r7, sl, fp, ip
 8008762:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008766:	b29b      	uxth	r3, r3
 8008768:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800876c:	4572      	cmp	r2, lr
 800876e:	f849 3b04 	str.w	r3, [r9], #4
 8008772:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008776:	d8e2      	bhi.n	800873e <__multiply+0xb2>
 8008778:	9b01      	ldr	r3, [sp, #4]
 800877a:	f845 c003 	str.w	ip, [r5, r3]
 800877e:	9b03      	ldr	r3, [sp, #12]
 8008780:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008784:	3104      	adds	r1, #4
 8008786:	f1b9 0f00 	cmp.w	r9, #0
 800878a:	d021      	beq.n	80087d0 <__multiply+0x144>
 800878c:	682b      	ldr	r3, [r5, #0]
 800878e:	f104 0c14 	add.w	ip, r4, #20
 8008792:	46ae      	mov	lr, r5
 8008794:	f04f 0a00 	mov.w	sl, #0
 8008798:	f8bc b000 	ldrh.w	fp, [ip]
 800879c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80087a0:	fb09 770b 	mla	r7, r9, fp, r7
 80087a4:	4457      	add	r7, sl
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80087ac:	f84e 3b04 	str.w	r3, [lr], #4
 80087b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80087b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80087b8:	f8be 3000 	ldrh.w	r3, [lr]
 80087bc:	fb09 330a 	mla	r3, r9, sl, r3
 80087c0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80087c4:	4562      	cmp	r2, ip
 80087c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80087ca:	d8e5      	bhi.n	8008798 <__multiply+0x10c>
 80087cc:	9f01      	ldr	r7, [sp, #4]
 80087ce:	51eb      	str	r3, [r5, r7]
 80087d0:	3504      	adds	r5, #4
 80087d2:	e799      	b.n	8008708 <__multiply+0x7c>
 80087d4:	3e01      	subs	r6, #1
 80087d6:	e79b      	b.n	8008710 <__multiply+0x84>
 80087d8:	0800e131 	.word	0x0800e131
 80087dc:	0800e142 	.word	0x0800e142

080087e0 <__pow5mult>:
 80087e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087e4:	4615      	mov	r5, r2
 80087e6:	f012 0203 	ands.w	r2, r2, #3
 80087ea:	4607      	mov	r7, r0
 80087ec:	460e      	mov	r6, r1
 80087ee:	d007      	beq.n	8008800 <__pow5mult+0x20>
 80087f0:	4c25      	ldr	r4, [pc, #148]	@ (8008888 <__pow5mult+0xa8>)
 80087f2:	3a01      	subs	r2, #1
 80087f4:	2300      	movs	r3, #0
 80087f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087fa:	f7ff fe55 	bl	80084a8 <__multadd>
 80087fe:	4606      	mov	r6, r0
 8008800:	10ad      	asrs	r5, r5, #2
 8008802:	d03d      	beq.n	8008880 <__pow5mult+0xa0>
 8008804:	69fc      	ldr	r4, [r7, #28]
 8008806:	b97c      	cbnz	r4, 8008828 <__pow5mult+0x48>
 8008808:	2010      	movs	r0, #16
 800880a:	f7fd fd65 	bl	80062d8 <malloc>
 800880e:	4602      	mov	r2, r0
 8008810:	61f8      	str	r0, [r7, #28]
 8008812:	b928      	cbnz	r0, 8008820 <__pow5mult+0x40>
 8008814:	4b1d      	ldr	r3, [pc, #116]	@ (800888c <__pow5mult+0xac>)
 8008816:	481e      	ldr	r0, [pc, #120]	@ (8008890 <__pow5mult+0xb0>)
 8008818:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800881c:	f001 fd18 	bl	800a250 <__assert_func>
 8008820:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008824:	6004      	str	r4, [r0, #0]
 8008826:	60c4      	str	r4, [r0, #12]
 8008828:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800882c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008830:	b94c      	cbnz	r4, 8008846 <__pow5mult+0x66>
 8008832:	f240 2171 	movw	r1, #625	@ 0x271
 8008836:	4638      	mov	r0, r7
 8008838:	f7ff ff12 	bl	8008660 <__i2b>
 800883c:	2300      	movs	r3, #0
 800883e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008842:	4604      	mov	r4, r0
 8008844:	6003      	str	r3, [r0, #0]
 8008846:	f04f 0900 	mov.w	r9, #0
 800884a:	07eb      	lsls	r3, r5, #31
 800884c:	d50a      	bpl.n	8008864 <__pow5mult+0x84>
 800884e:	4631      	mov	r1, r6
 8008850:	4622      	mov	r2, r4
 8008852:	4638      	mov	r0, r7
 8008854:	f7ff ff1a 	bl	800868c <__multiply>
 8008858:	4631      	mov	r1, r6
 800885a:	4680      	mov	r8, r0
 800885c:	4638      	mov	r0, r7
 800885e:	f7ff fe01 	bl	8008464 <_Bfree>
 8008862:	4646      	mov	r6, r8
 8008864:	106d      	asrs	r5, r5, #1
 8008866:	d00b      	beq.n	8008880 <__pow5mult+0xa0>
 8008868:	6820      	ldr	r0, [r4, #0]
 800886a:	b938      	cbnz	r0, 800887c <__pow5mult+0x9c>
 800886c:	4622      	mov	r2, r4
 800886e:	4621      	mov	r1, r4
 8008870:	4638      	mov	r0, r7
 8008872:	f7ff ff0b 	bl	800868c <__multiply>
 8008876:	6020      	str	r0, [r4, #0]
 8008878:	f8c0 9000 	str.w	r9, [r0]
 800887c:	4604      	mov	r4, r0
 800887e:	e7e4      	b.n	800884a <__pow5mult+0x6a>
 8008880:	4630      	mov	r0, r6
 8008882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008886:	bf00      	nop
 8008888:	0800e19c 	.word	0x0800e19c
 800888c:	0800e0c2 	.word	0x0800e0c2
 8008890:	0800e142 	.word	0x0800e142

08008894 <__lshift>:
 8008894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008898:	460c      	mov	r4, r1
 800889a:	6849      	ldr	r1, [r1, #4]
 800889c:	6923      	ldr	r3, [r4, #16]
 800889e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088a2:	68a3      	ldr	r3, [r4, #8]
 80088a4:	4607      	mov	r7, r0
 80088a6:	4691      	mov	r9, r2
 80088a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088ac:	f108 0601 	add.w	r6, r8, #1
 80088b0:	42b3      	cmp	r3, r6
 80088b2:	db0b      	blt.n	80088cc <__lshift+0x38>
 80088b4:	4638      	mov	r0, r7
 80088b6:	f7ff fd95 	bl	80083e4 <_Balloc>
 80088ba:	4605      	mov	r5, r0
 80088bc:	b948      	cbnz	r0, 80088d2 <__lshift+0x3e>
 80088be:	4602      	mov	r2, r0
 80088c0:	4b28      	ldr	r3, [pc, #160]	@ (8008964 <__lshift+0xd0>)
 80088c2:	4829      	ldr	r0, [pc, #164]	@ (8008968 <__lshift+0xd4>)
 80088c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80088c8:	f001 fcc2 	bl	800a250 <__assert_func>
 80088cc:	3101      	adds	r1, #1
 80088ce:	005b      	lsls	r3, r3, #1
 80088d0:	e7ee      	b.n	80088b0 <__lshift+0x1c>
 80088d2:	2300      	movs	r3, #0
 80088d4:	f100 0114 	add.w	r1, r0, #20
 80088d8:	f100 0210 	add.w	r2, r0, #16
 80088dc:	4618      	mov	r0, r3
 80088de:	4553      	cmp	r3, sl
 80088e0:	db33      	blt.n	800894a <__lshift+0xb6>
 80088e2:	6920      	ldr	r0, [r4, #16]
 80088e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088e8:	f104 0314 	add.w	r3, r4, #20
 80088ec:	f019 091f 	ands.w	r9, r9, #31
 80088f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80088f8:	d02b      	beq.n	8008952 <__lshift+0xbe>
 80088fa:	f1c9 0e20 	rsb	lr, r9, #32
 80088fe:	468a      	mov	sl, r1
 8008900:	2200      	movs	r2, #0
 8008902:	6818      	ldr	r0, [r3, #0]
 8008904:	fa00 f009 	lsl.w	r0, r0, r9
 8008908:	4310      	orrs	r0, r2
 800890a:	f84a 0b04 	str.w	r0, [sl], #4
 800890e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008912:	459c      	cmp	ip, r3
 8008914:	fa22 f20e 	lsr.w	r2, r2, lr
 8008918:	d8f3      	bhi.n	8008902 <__lshift+0x6e>
 800891a:	ebac 0304 	sub.w	r3, ip, r4
 800891e:	3b15      	subs	r3, #21
 8008920:	f023 0303 	bic.w	r3, r3, #3
 8008924:	3304      	adds	r3, #4
 8008926:	f104 0015 	add.w	r0, r4, #21
 800892a:	4584      	cmp	ip, r0
 800892c:	bf38      	it	cc
 800892e:	2304      	movcc	r3, #4
 8008930:	50ca      	str	r2, [r1, r3]
 8008932:	b10a      	cbz	r2, 8008938 <__lshift+0xa4>
 8008934:	f108 0602 	add.w	r6, r8, #2
 8008938:	3e01      	subs	r6, #1
 800893a:	4638      	mov	r0, r7
 800893c:	612e      	str	r6, [r5, #16]
 800893e:	4621      	mov	r1, r4
 8008940:	f7ff fd90 	bl	8008464 <_Bfree>
 8008944:	4628      	mov	r0, r5
 8008946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800894a:	f842 0f04 	str.w	r0, [r2, #4]!
 800894e:	3301      	adds	r3, #1
 8008950:	e7c5      	b.n	80088de <__lshift+0x4a>
 8008952:	3904      	subs	r1, #4
 8008954:	f853 2b04 	ldr.w	r2, [r3], #4
 8008958:	f841 2f04 	str.w	r2, [r1, #4]!
 800895c:	459c      	cmp	ip, r3
 800895e:	d8f9      	bhi.n	8008954 <__lshift+0xc0>
 8008960:	e7ea      	b.n	8008938 <__lshift+0xa4>
 8008962:	bf00      	nop
 8008964:	0800e131 	.word	0x0800e131
 8008968:	0800e142 	.word	0x0800e142

0800896c <__mcmp>:
 800896c:	690a      	ldr	r2, [r1, #16]
 800896e:	4603      	mov	r3, r0
 8008970:	6900      	ldr	r0, [r0, #16]
 8008972:	1a80      	subs	r0, r0, r2
 8008974:	b530      	push	{r4, r5, lr}
 8008976:	d10e      	bne.n	8008996 <__mcmp+0x2a>
 8008978:	3314      	adds	r3, #20
 800897a:	3114      	adds	r1, #20
 800897c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008980:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008984:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008988:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800898c:	4295      	cmp	r5, r2
 800898e:	d003      	beq.n	8008998 <__mcmp+0x2c>
 8008990:	d205      	bcs.n	800899e <__mcmp+0x32>
 8008992:	f04f 30ff 	mov.w	r0, #4294967295
 8008996:	bd30      	pop	{r4, r5, pc}
 8008998:	42a3      	cmp	r3, r4
 800899a:	d3f3      	bcc.n	8008984 <__mcmp+0x18>
 800899c:	e7fb      	b.n	8008996 <__mcmp+0x2a>
 800899e:	2001      	movs	r0, #1
 80089a0:	e7f9      	b.n	8008996 <__mcmp+0x2a>
	...

080089a4 <__mdiff>:
 80089a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a8:	4689      	mov	r9, r1
 80089aa:	4606      	mov	r6, r0
 80089ac:	4611      	mov	r1, r2
 80089ae:	4648      	mov	r0, r9
 80089b0:	4614      	mov	r4, r2
 80089b2:	f7ff ffdb 	bl	800896c <__mcmp>
 80089b6:	1e05      	subs	r5, r0, #0
 80089b8:	d112      	bne.n	80089e0 <__mdiff+0x3c>
 80089ba:	4629      	mov	r1, r5
 80089bc:	4630      	mov	r0, r6
 80089be:	f7ff fd11 	bl	80083e4 <_Balloc>
 80089c2:	4602      	mov	r2, r0
 80089c4:	b928      	cbnz	r0, 80089d2 <__mdiff+0x2e>
 80089c6:	4b3f      	ldr	r3, [pc, #252]	@ (8008ac4 <__mdiff+0x120>)
 80089c8:	f240 2137 	movw	r1, #567	@ 0x237
 80089cc:	483e      	ldr	r0, [pc, #248]	@ (8008ac8 <__mdiff+0x124>)
 80089ce:	f001 fc3f 	bl	800a250 <__assert_func>
 80089d2:	2301      	movs	r3, #1
 80089d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80089d8:	4610      	mov	r0, r2
 80089da:	b003      	add	sp, #12
 80089dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e0:	bfbc      	itt	lt
 80089e2:	464b      	movlt	r3, r9
 80089e4:	46a1      	movlt	r9, r4
 80089e6:	4630      	mov	r0, r6
 80089e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80089ec:	bfba      	itte	lt
 80089ee:	461c      	movlt	r4, r3
 80089f0:	2501      	movlt	r5, #1
 80089f2:	2500      	movge	r5, #0
 80089f4:	f7ff fcf6 	bl	80083e4 <_Balloc>
 80089f8:	4602      	mov	r2, r0
 80089fa:	b918      	cbnz	r0, 8008a04 <__mdiff+0x60>
 80089fc:	4b31      	ldr	r3, [pc, #196]	@ (8008ac4 <__mdiff+0x120>)
 80089fe:	f240 2145 	movw	r1, #581	@ 0x245
 8008a02:	e7e3      	b.n	80089cc <__mdiff+0x28>
 8008a04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008a08:	6926      	ldr	r6, [r4, #16]
 8008a0a:	60c5      	str	r5, [r0, #12]
 8008a0c:	f109 0310 	add.w	r3, r9, #16
 8008a10:	f109 0514 	add.w	r5, r9, #20
 8008a14:	f104 0e14 	add.w	lr, r4, #20
 8008a18:	f100 0b14 	add.w	fp, r0, #20
 8008a1c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008a20:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008a24:	9301      	str	r3, [sp, #4]
 8008a26:	46d9      	mov	r9, fp
 8008a28:	f04f 0c00 	mov.w	ip, #0
 8008a2c:	9b01      	ldr	r3, [sp, #4]
 8008a2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008a32:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008a36:	9301      	str	r3, [sp, #4]
 8008a38:	fa1f f38a 	uxth.w	r3, sl
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	b283      	uxth	r3, r0
 8008a40:	1acb      	subs	r3, r1, r3
 8008a42:	0c00      	lsrs	r0, r0, #16
 8008a44:	4463      	add	r3, ip
 8008a46:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008a4a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008a54:	4576      	cmp	r6, lr
 8008a56:	f849 3b04 	str.w	r3, [r9], #4
 8008a5a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a5e:	d8e5      	bhi.n	8008a2c <__mdiff+0x88>
 8008a60:	1b33      	subs	r3, r6, r4
 8008a62:	3b15      	subs	r3, #21
 8008a64:	f023 0303 	bic.w	r3, r3, #3
 8008a68:	3415      	adds	r4, #21
 8008a6a:	3304      	adds	r3, #4
 8008a6c:	42a6      	cmp	r6, r4
 8008a6e:	bf38      	it	cc
 8008a70:	2304      	movcc	r3, #4
 8008a72:	441d      	add	r5, r3
 8008a74:	445b      	add	r3, fp
 8008a76:	461e      	mov	r6, r3
 8008a78:	462c      	mov	r4, r5
 8008a7a:	4544      	cmp	r4, r8
 8008a7c:	d30e      	bcc.n	8008a9c <__mdiff+0xf8>
 8008a7e:	f108 0103 	add.w	r1, r8, #3
 8008a82:	1b49      	subs	r1, r1, r5
 8008a84:	f021 0103 	bic.w	r1, r1, #3
 8008a88:	3d03      	subs	r5, #3
 8008a8a:	45a8      	cmp	r8, r5
 8008a8c:	bf38      	it	cc
 8008a8e:	2100      	movcc	r1, #0
 8008a90:	440b      	add	r3, r1
 8008a92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a96:	b191      	cbz	r1, 8008abe <__mdiff+0x11a>
 8008a98:	6117      	str	r7, [r2, #16]
 8008a9a:	e79d      	b.n	80089d8 <__mdiff+0x34>
 8008a9c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008aa0:	46e6      	mov	lr, ip
 8008aa2:	0c08      	lsrs	r0, r1, #16
 8008aa4:	fa1c fc81 	uxtah	ip, ip, r1
 8008aa8:	4471      	add	r1, lr
 8008aaa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008aae:	b289      	uxth	r1, r1
 8008ab0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ab4:	f846 1b04 	str.w	r1, [r6], #4
 8008ab8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008abc:	e7dd      	b.n	8008a7a <__mdiff+0xd6>
 8008abe:	3f01      	subs	r7, #1
 8008ac0:	e7e7      	b.n	8008a92 <__mdiff+0xee>
 8008ac2:	bf00      	nop
 8008ac4:	0800e131 	.word	0x0800e131
 8008ac8:	0800e142 	.word	0x0800e142

08008acc <__ulp>:
 8008acc:	b082      	sub	sp, #8
 8008ace:	ed8d 0b00 	vstr	d0, [sp]
 8008ad2:	9a01      	ldr	r2, [sp, #4]
 8008ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8008b14 <__ulp+0x48>)
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	dc08      	bgt.n	8008af2 <__ulp+0x26>
 8008ae0:	425b      	negs	r3, r3
 8008ae2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008ae6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008aea:	da04      	bge.n	8008af6 <__ulp+0x2a>
 8008aec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008af0:	4113      	asrs	r3, r2
 8008af2:	2200      	movs	r2, #0
 8008af4:	e008      	b.n	8008b08 <__ulp+0x3c>
 8008af6:	f1a2 0314 	sub.w	r3, r2, #20
 8008afa:	2b1e      	cmp	r3, #30
 8008afc:	bfda      	itte	le
 8008afe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008b02:	40da      	lsrle	r2, r3
 8008b04:	2201      	movgt	r2, #1
 8008b06:	2300      	movs	r3, #0
 8008b08:	4619      	mov	r1, r3
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	ec41 0b10 	vmov	d0, r0, r1
 8008b10:	b002      	add	sp, #8
 8008b12:	4770      	bx	lr
 8008b14:	7ff00000 	.word	0x7ff00000

08008b18 <__b2d>:
 8008b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b1c:	6906      	ldr	r6, [r0, #16]
 8008b1e:	f100 0814 	add.w	r8, r0, #20
 8008b22:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008b26:	1f37      	subs	r7, r6, #4
 8008b28:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008b2c:	4610      	mov	r0, r2
 8008b2e:	f7ff fd4b 	bl	80085c8 <__hi0bits>
 8008b32:	f1c0 0320 	rsb	r3, r0, #32
 8008b36:	280a      	cmp	r0, #10
 8008b38:	600b      	str	r3, [r1, #0]
 8008b3a:	491b      	ldr	r1, [pc, #108]	@ (8008ba8 <__b2d+0x90>)
 8008b3c:	dc15      	bgt.n	8008b6a <__b2d+0x52>
 8008b3e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008b42:	fa22 f30c 	lsr.w	r3, r2, ip
 8008b46:	45b8      	cmp	r8, r7
 8008b48:	ea43 0501 	orr.w	r5, r3, r1
 8008b4c:	bf34      	ite	cc
 8008b4e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008b52:	2300      	movcs	r3, #0
 8008b54:	3015      	adds	r0, #21
 8008b56:	fa02 f000 	lsl.w	r0, r2, r0
 8008b5a:	fa23 f30c 	lsr.w	r3, r3, ip
 8008b5e:	4303      	orrs	r3, r0
 8008b60:	461c      	mov	r4, r3
 8008b62:	ec45 4b10 	vmov	d0, r4, r5
 8008b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b6a:	45b8      	cmp	r8, r7
 8008b6c:	bf3a      	itte	cc
 8008b6e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008b72:	f1a6 0708 	subcc.w	r7, r6, #8
 8008b76:	2300      	movcs	r3, #0
 8008b78:	380b      	subs	r0, #11
 8008b7a:	d012      	beq.n	8008ba2 <__b2d+0x8a>
 8008b7c:	f1c0 0120 	rsb	r1, r0, #32
 8008b80:	fa23 f401 	lsr.w	r4, r3, r1
 8008b84:	4082      	lsls	r2, r0
 8008b86:	4322      	orrs	r2, r4
 8008b88:	4547      	cmp	r7, r8
 8008b8a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008b8e:	bf8c      	ite	hi
 8008b90:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008b94:	2200      	movls	r2, #0
 8008b96:	4083      	lsls	r3, r0
 8008b98:	40ca      	lsrs	r2, r1
 8008b9a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	e7de      	b.n	8008b60 <__b2d+0x48>
 8008ba2:	ea42 0501 	orr.w	r5, r2, r1
 8008ba6:	e7db      	b.n	8008b60 <__b2d+0x48>
 8008ba8:	3ff00000 	.word	0x3ff00000

08008bac <__d2b>:
 8008bac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bb0:	460f      	mov	r7, r1
 8008bb2:	2101      	movs	r1, #1
 8008bb4:	ec59 8b10 	vmov	r8, r9, d0
 8008bb8:	4616      	mov	r6, r2
 8008bba:	f7ff fc13 	bl	80083e4 <_Balloc>
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	b930      	cbnz	r0, 8008bd0 <__d2b+0x24>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	4b23      	ldr	r3, [pc, #140]	@ (8008c54 <__d2b+0xa8>)
 8008bc6:	4824      	ldr	r0, [pc, #144]	@ (8008c58 <__d2b+0xac>)
 8008bc8:	f240 310f 	movw	r1, #783	@ 0x30f
 8008bcc:	f001 fb40 	bl	800a250 <__assert_func>
 8008bd0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008bd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bd8:	b10d      	cbz	r5, 8008bde <__d2b+0x32>
 8008bda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bde:	9301      	str	r3, [sp, #4]
 8008be0:	f1b8 0300 	subs.w	r3, r8, #0
 8008be4:	d023      	beq.n	8008c2e <__d2b+0x82>
 8008be6:	4668      	mov	r0, sp
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	f7ff fd0c 	bl	8008606 <__lo0bits>
 8008bee:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008bf2:	b1d0      	cbz	r0, 8008c2a <__d2b+0x7e>
 8008bf4:	f1c0 0320 	rsb	r3, r0, #32
 8008bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bfc:	430b      	orrs	r3, r1
 8008bfe:	40c2      	lsrs	r2, r0
 8008c00:	6163      	str	r3, [r4, #20]
 8008c02:	9201      	str	r2, [sp, #4]
 8008c04:	9b01      	ldr	r3, [sp, #4]
 8008c06:	61a3      	str	r3, [r4, #24]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	bf0c      	ite	eq
 8008c0c:	2201      	moveq	r2, #1
 8008c0e:	2202      	movne	r2, #2
 8008c10:	6122      	str	r2, [r4, #16]
 8008c12:	b1a5      	cbz	r5, 8008c3e <__d2b+0x92>
 8008c14:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008c18:	4405      	add	r5, r0
 8008c1a:	603d      	str	r5, [r7, #0]
 8008c1c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008c20:	6030      	str	r0, [r6, #0]
 8008c22:	4620      	mov	r0, r4
 8008c24:	b003      	add	sp, #12
 8008c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c2a:	6161      	str	r1, [r4, #20]
 8008c2c:	e7ea      	b.n	8008c04 <__d2b+0x58>
 8008c2e:	a801      	add	r0, sp, #4
 8008c30:	f7ff fce9 	bl	8008606 <__lo0bits>
 8008c34:	9b01      	ldr	r3, [sp, #4]
 8008c36:	6163      	str	r3, [r4, #20]
 8008c38:	3020      	adds	r0, #32
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	e7e8      	b.n	8008c10 <__d2b+0x64>
 8008c3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c42:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008c46:	6038      	str	r0, [r7, #0]
 8008c48:	6918      	ldr	r0, [r3, #16]
 8008c4a:	f7ff fcbd 	bl	80085c8 <__hi0bits>
 8008c4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c52:	e7e5      	b.n	8008c20 <__d2b+0x74>
 8008c54:	0800e131 	.word	0x0800e131
 8008c58:	0800e142 	.word	0x0800e142

08008c5c <__ratio>:
 8008c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c60:	b085      	sub	sp, #20
 8008c62:	e9cd 1000 	strd	r1, r0, [sp]
 8008c66:	a902      	add	r1, sp, #8
 8008c68:	f7ff ff56 	bl	8008b18 <__b2d>
 8008c6c:	9800      	ldr	r0, [sp, #0]
 8008c6e:	a903      	add	r1, sp, #12
 8008c70:	ec55 4b10 	vmov	r4, r5, d0
 8008c74:	f7ff ff50 	bl	8008b18 <__b2d>
 8008c78:	9b01      	ldr	r3, [sp, #4]
 8008c7a:	6919      	ldr	r1, [r3, #16]
 8008c7c:	9b00      	ldr	r3, [sp, #0]
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	1ac9      	subs	r1, r1, r3
 8008c82:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008c86:	1a9b      	subs	r3, r3, r2
 8008c88:	ec5b ab10 	vmov	sl, fp, d0
 8008c8c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	bfce      	itee	gt
 8008c94:	462a      	movgt	r2, r5
 8008c96:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008c9a:	465a      	movle	r2, fp
 8008c9c:	462f      	mov	r7, r5
 8008c9e:	46d9      	mov	r9, fp
 8008ca0:	bfcc      	ite	gt
 8008ca2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008ca6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008caa:	464b      	mov	r3, r9
 8008cac:	4652      	mov	r2, sl
 8008cae:	4620      	mov	r0, r4
 8008cb0:	4639      	mov	r1, r7
 8008cb2:	f7f7 fdf3 	bl	800089c <__aeabi_ddiv>
 8008cb6:	ec41 0b10 	vmov	d0, r0, r1
 8008cba:	b005      	add	sp, #20
 8008cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008cc0 <__copybits>:
 8008cc0:	3901      	subs	r1, #1
 8008cc2:	b570      	push	{r4, r5, r6, lr}
 8008cc4:	1149      	asrs	r1, r1, #5
 8008cc6:	6914      	ldr	r4, [r2, #16]
 8008cc8:	3101      	adds	r1, #1
 8008cca:	f102 0314 	add.w	r3, r2, #20
 8008cce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008cd2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008cd6:	1f05      	subs	r5, r0, #4
 8008cd8:	42a3      	cmp	r3, r4
 8008cda:	d30c      	bcc.n	8008cf6 <__copybits+0x36>
 8008cdc:	1aa3      	subs	r3, r4, r2
 8008cde:	3b11      	subs	r3, #17
 8008ce0:	f023 0303 	bic.w	r3, r3, #3
 8008ce4:	3211      	adds	r2, #17
 8008ce6:	42a2      	cmp	r2, r4
 8008ce8:	bf88      	it	hi
 8008cea:	2300      	movhi	r3, #0
 8008cec:	4418      	add	r0, r3
 8008cee:	2300      	movs	r3, #0
 8008cf0:	4288      	cmp	r0, r1
 8008cf2:	d305      	bcc.n	8008d00 <__copybits+0x40>
 8008cf4:	bd70      	pop	{r4, r5, r6, pc}
 8008cf6:	f853 6b04 	ldr.w	r6, [r3], #4
 8008cfa:	f845 6f04 	str.w	r6, [r5, #4]!
 8008cfe:	e7eb      	b.n	8008cd8 <__copybits+0x18>
 8008d00:	f840 3b04 	str.w	r3, [r0], #4
 8008d04:	e7f4      	b.n	8008cf0 <__copybits+0x30>

08008d06 <__any_on>:
 8008d06:	f100 0214 	add.w	r2, r0, #20
 8008d0a:	6900      	ldr	r0, [r0, #16]
 8008d0c:	114b      	asrs	r3, r1, #5
 8008d0e:	4298      	cmp	r0, r3
 8008d10:	b510      	push	{r4, lr}
 8008d12:	db11      	blt.n	8008d38 <__any_on+0x32>
 8008d14:	dd0a      	ble.n	8008d2c <__any_on+0x26>
 8008d16:	f011 011f 	ands.w	r1, r1, #31
 8008d1a:	d007      	beq.n	8008d2c <__any_on+0x26>
 8008d1c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008d20:	fa24 f001 	lsr.w	r0, r4, r1
 8008d24:	fa00 f101 	lsl.w	r1, r0, r1
 8008d28:	428c      	cmp	r4, r1
 8008d2a:	d10b      	bne.n	8008d44 <__any_on+0x3e>
 8008d2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d803      	bhi.n	8008d3c <__any_on+0x36>
 8008d34:	2000      	movs	r0, #0
 8008d36:	bd10      	pop	{r4, pc}
 8008d38:	4603      	mov	r3, r0
 8008d3a:	e7f7      	b.n	8008d2c <__any_on+0x26>
 8008d3c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d40:	2900      	cmp	r1, #0
 8008d42:	d0f5      	beq.n	8008d30 <__any_on+0x2a>
 8008d44:	2001      	movs	r0, #1
 8008d46:	e7f6      	b.n	8008d36 <__any_on+0x30>

08008d48 <sulp>:
 8008d48:	b570      	push	{r4, r5, r6, lr}
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	460d      	mov	r5, r1
 8008d4e:	ec45 4b10 	vmov	d0, r4, r5
 8008d52:	4616      	mov	r6, r2
 8008d54:	f7ff feba 	bl	8008acc <__ulp>
 8008d58:	ec51 0b10 	vmov	r0, r1, d0
 8008d5c:	b17e      	cbz	r6, 8008d7e <sulp+0x36>
 8008d5e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008d62:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	dd09      	ble.n	8008d7e <sulp+0x36>
 8008d6a:	051b      	lsls	r3, r3, #20
 8008d6c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008d70:	2400      	movs	r4, #0
 8008d72:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008d76:	4622      	mov	r2, r4
 8008d78:	462b      	mov	r3, r5
 8008d7a:	f7f7 fc65 	bl	8000648 <__aeabi_dmul>
 8008d7e:	ec41 0b10 	vmov	d0, r0, r1
 8008d82:	bd70      	pop	{r4, r5, r6, pc}
 8008d84:	0000      	movs	r0, r0
	...

08008d88 <_strtod_l>:
 8008d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d8c:	b09f      	sub	sp, #124	@ 0x7c
 8008d8e:	460c      	mov	r4, r1
 8008d90:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008d92:	2200      	movs	r2, #0
 8008d94:	921a      	str	r2, [sp, #104]	@ 0x68
 8008d96:	9005      	str	r0, [sp, #20]
 8008d98:	f04f 0a00 	mov.w	sl, #0
 8008d9c:	f04f 0b00 	mov.w	fp, #0
 8008da0:	460a      	mov	r2, r1
 8008da2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008da4:	7811      	ldrb	r1, [r2, #0]
 8008da6:	292b      	cmp	r1, #43	@ 0x2b
 8008da8:	d04a      	beq.n	8008e40 <_strtod_l+0xb8>
 8008daa:	d838      	bhi.n	8008e1e <_strtod_l+0x96>
 8008dac:	290d      	cmp	r1, #13
 8008dae:	d832      	bhi.n	8008e16 <_strtod_l+0x8e>
 8008db0:	2908      	cmp	r1, #8
 8008db2:	d832      	bhi.n	8008e1a <_strtod_l+0x92>
 8008db4:	2900      	cmp	r1, #0
 8008db6:	d03b      	beq.n	8008e30 <_strtod_l+0xa8>
 8008db8:	2200      	movs	r2, #0
 8008dba:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008dbc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008dbe:	782a      	ldrb	r2, [r5, #0]
 8008dc0:	2a30      	cmp	r2, #48	@ 0x30
 8008dc2:	f040 80b3 	bne.w	8008f2c <_strtod_l+0x1a4>
 8008dc6:	786a      	ldrb	r2, [r5, #1]
 8008dc8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008dcc:	2a58      	cmp	r2, #88	@ 0x58
 8008dce:	d16e      	bne.n	8008eae <_strtod_l+0x126>
 8008dd0:	9302      	str	r3, [sp, #8]
 8008dd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008dd4:	9301      	str	r3, [sp, #4]
 8008dd6:	ab1a      	add	r3, sp, #104	@ 0x68
 8008dd8:	9300      	str	r3, [sp, #0]
 8008dda:	4a8e      	ldr	r2, [pc, #568]	@ (8009014 <_strtod_l+0x28c>)
 8008ddc:	9805      	ldr	r0, [sp, #20]
 8008dde:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008de0:	a919      	add	r1, sp, #100	@ 0x64
 8008de2:	f001 facf 	bl	800a384 <__gethex>
 8008de6:	f010 060f 	ands.w	r6, r0, #15
 8008dea:	4604      	mov	r4, r0
 8008dec:	d005      	beq.n	8008dfa <_strtod_l+0x72>
 8008dee:	2e06      	cmp	r6, #6
 8008df0:	d128      	bne.n	8008e44 <_strtod_l+0xbc>
 8008df2:	3501      	adds	r5, #1
 8008df4:	2300      	movs	r3, #0
 8008df6:	9519      	str	r5, [sp, #100]	@ 0x64
 8008df8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008dfa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f040 858e 	bne.w	800991e <_strtod_l+0xb96>
 8008e02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e04:	b1cb      	cbz	r3, 8008e3a <_strtod_l+0xb2>
 8008e06:	4652      	mov	r2, sl
 8008e08:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008e0c:	ec43 2b10 	vmov	d0, r2, r3
 8008e10:	b01f      	add	sp, #124	@ 0x7c
 8008e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e16:	2920      	cmp	r1, #32
 8008e18:	d1ce      	bne.n	8008db8 <_strtod_l+0x30>
 8008e1a:	3201      	adds	r2, #1
 8008e1c:	e7c1      	b.n	8008da2 <_strtod_l+0x1a>
 8008e1e:	292d      	cmp	r1, #45	@ 0x2d
 8008e20:	d1ca      	bne.n	8008db8 <_strtod_l+0x30>
 8008e22:	2101      	movs	r1, #1
 8008e24:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008e26:	1c51      	adds	r1, r2, #1
 8008e28:	9119      	str	r1, [sp, #100]	@ 0x64
 8008e2a:	7852      	ldrb	r2, [r2, #1]
 8008e2c:	2a00      	cmp	r2, #0
 8008e2e:	d1c5      	bne.n	8008dbc <_strtod_l+0x34>
 8008e30:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008e32:	9419      	str	r4, [sp, #100]	@ 0x64
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f040 8570 	bne.w	800991a <_strtod_l+0xb92>
 8008e3a:	4652      	mov	r2, sl
 8008e3c:	465b      	mov	r3, fp
 8008e3e:	e7e5      	b.n	8008e0c <_strtod_l+0x84>
 8008e40:	2100      	movs	r1, #0
 8008e42:	e7ef      	b.n	8008e24 <_strtod_l+0x9c>
 8008e44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008e46:	b13a      	cbz	r2, 8008e58 <_strtod_l+0xd0>
 8008e48:	2135      	movs	r1, #53	@ 0x35
 8008e4a:	a81c      	add	r0, sp, #112	@ 0x70
 8008e4c:	f7ff ff38 	bl	8008cc0 <__copybits>
 8008e50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e52:	9805      	ldr	r0, [sp, #20]
 8008e54:	f7ff fb06 	bl	8008464 <_Bfree>
 8008e58:	3e01      	subs	r6, #1
 8008e5a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008e5c:	2e04      	cmp	r6, #4
 8008e5e:	d806      	bhi.n	8008e6e <_strtod_l+0xe6>
 8008e60:	e8df f006 	tbb	[pc, r6]
 8008e64:	201d0314 	.word	0x201d0314
 8008e68:	14          	.byte	0x14
 8008e69:	00          	.byte	0x00
 8008e6a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008e6e:	05e1      	lsls	r1, r4, #23
 8008e70:	bf48      	it	mi
 8008e72:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008e76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008e7a:	0d1b      	lsrs	r3, r3, #20
 8008e7c:	051b      	lsls	r3, r3, #20
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1bb      	bne.n	8008dfa <_strtod_l+0x72>
 8008e82:	f7fe fbd7 	bl	8007634 <__errno>
 8008e86:	2322      	movs	r3, #34	@ 0x22
 8008e88:	6003      	str	r3, [r0, #0]
 8008e8a:	e7b6      	b.n	8008dfa <_strtod_l+0x72>
 8008e8c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008e90:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008e94:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008e98:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008e9c:	e7e7      	b.n	8008e6e <_strtod_l+0xe6>
 8008e9e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800901c <_strtod_l+0x294>
 8008ea2:	e7e4      	b.n	8008e6e <_strtod_l+0xe6>
 8008ea4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008ea8:	f04f 3aff 	mov.w	sl, #4294967295
 8008eac:	e7df      	b.n	8008e6e <_strtod_l+0xe6>
 8008eae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008eb0:	1c5a      	adds	r2, r3, #1
 8008eb2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008eb4:	785b      	ldrb	r3, [r3, #1]
 8008eb6:	2b30      	cmp	r3, #48	@ 0x30
 8008eb8:	d0f9      	beq.n	8008eae <_strtod_l+0x126>
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d09d      	beq.n	8008dfa <_strtod_l+0x72>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ec2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ec4:	930c      	str	r3, [sp, #48]	@ 0x30
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	9308      	str	r3, [sp, #32]
 8008eca:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ecc:	461f      	mov	r7, r3
 8008ece:	220a      	movs	r2, #10
 8008ed0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008ed2:	7805      	ldrb	r5, [r0, #0]
 8008ed4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008ed8:	b2d9      	uxtb	r1, r3
 8008eda:	2909      	cmp	r1, #9
 8008edc:	d928      	bls.n	8008f30 <_strtod_l+0x1a8>
 8008ede:	494e      	ldr	r1, [pc, #312]	@ (8009018 <_strtod_l+0x290>)
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	f001 f979 	bl	800a1d8 <strncmp>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	d032      	beq.n	8008f50 <_strtod_l+0x1c8>
 8008eea:	2000      	movs	r0, #0
 8008eec:	462a      	mov	r2, r5
 8008eee:	4681      	mov	r9, r0
 8008ef0:	463d      	mov	r5, r7
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2a65      	cmp	r2, #101	@ 0x65
 8008ef6:	d001      	beq.n	8008efc <_strtod_l+0x174>
 8008ef8:	2a45      	cmp	r2, #69	@ 0x45
 8008efa:	d114      	bne.n	8008f26 <_strtod_l+0x19e>
 8008efc:	b91d      	cbnz	r5, 8008f06 <_strtod_l+0x17e>
 8008efe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f00:	4302      	orrs	r2, r0
 8008f02:	d095      	beq.n	8008e30 <_strtod_l+0xa8>
 8008f04:	2500      	movs	r5, #0
 8008f06:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008f08:	1c62      	adds	r2, r4, #1
 8008f0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f0c:	7862      	ldrb	r2, [r4, #1]
 8008f0e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008f10:	d077      	beq.n	8009002 <_strtod_l+0x27a>
 8008f12:	2a2d      	cmp	r2, #45	@ 0x2d
 8008f14:	d07b      	beq.n	800900e <_strtod_l+0x286>
 8008f16:	f04f 0c00 	mov.w	ip, #0
 8008f1a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008f1e:	2909      	cmp	r1, #9
 8008f20:	f240 8082 	bls.w	8009028 <_strtod_l+0x2a0>
 8008f24:	9419      	str	r4, [sp, #100]	@ 0x64
 8008f26:	f04f 0800 	mov.w	r8, #0
 8008f2a:	e0a2      	b.n	8009072 <_strtod_l+0x2ea>
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	e7c7      	b.n	8008ec0 <_strtod_l+0x138>
 8008f30:	2f08      	cmp	r7, #8
 8008f32:	bfd5      	itete	le
 8008f34:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008f36:	9908      	ldrgt	r1, [sp, #32]
 8008f38:	fb02 3301 	mlale	r3, r2, r1, r3
 8008f3c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008f40:	f100 0001 	add.w	r0, r0, #1
 8008f44:	bfd4      	ite	le
 8008f46:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008f48:	9308      	strgt	r3, [sp, #32]
 8008f4a:	3701      	adds	r7, #1
 8008f4c:	9019      	str	r0, [sp, #100]	@ 0x64
 8008f4e:	e7bf      	b.n	8008ed0 <_strtod_l+0x148>
 8008f50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f52:	1c5a      	adds	r2, r3, #1
 8008f54:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f56:	785a      	ldrb	r2, [r3, #1]
 8008f58:	b37f      	cbz	r7, 8008fba <_strtod_l+0x232>
 8008f5a:	4681      	mov	r9, r0
 8008f5c:	463d      	mov	r5, r7
 8008f5e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008f62:	2b09      	cmp	r3, #9
 8008f64:	d912      	bls.n	8008f8c <_strtod_l+0x204>
 8008f66:	2301      	movs	r3, #1
 8008f68:	e7c4      	b.n	8008ef4 <_strtod_l+0x16c>
 8008f6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f6c:	1c5a      	adds	r2, r3, #1
 8008f6e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f70:	785a      	ldrb	r2, [r3, #1]
 8008f72:	3001      	adds	r0, #1
 8008f74:	2a30      	cmp	r2, #48	@ 0x30
 8008f76:	d0f8      	beq.n	8008f6a <_strtod_l+0x1e2>
 8008f78:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008f7c:	2b08      	cmp	r3, #8
 8008f7e:	f200 84d3 	bhi.w	8009928 <_strtod_l+0xba0>
 8008f82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f84:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f86:	4681      	mov	r9, r0
 8008f88:	2000      	movs	r0, #0
 8008f8a:	4605      	mov	r5, r0
 8008f8c:	3a30      	subs	r2, #48	@ 0x30
 8008f8e:	f100 0301 	add.w	r3, r0, #1
 8008f92:	d02a      	beq.n	8008fea <_strtod_l+0x262>
 8008f94:	4499      	add	r9, r3
 8008f96:	eb00 0c05 	add.w	ip, r0, r5
 8008f9a:	462b      	mov	r3, r5
 8008f9c:	210a      	movs	r1, #10
 8008f9e:	4563      	cmp	r3, ip
 8008fa0:	d10d      	bne.n	8008fbe <_strtod_l+0x236>
 8008fa2:	1c69      	adds	r1, r5, #1
 8008fa4:	4401      	add	r1, r0
 8008fa6:	4428      	add	r0, r5
 8008fa8:	2808      	cmp	r0, #8
 8008faa:	dc16      	bgt.n	8008fda <_strtod_l+0x252>
 8008fac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008fae:	230a      	movs	r3, #10
 8008fb0:	fb03 2300 	mla	r3, r3, r0, r2
 8008fb4:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	e018      	b.n	8008fec <_strtod_l+0x264>
 8008fba:	4638      	mov	r0, r7
 8008fbc:	e7da      	b.n	8008f74 <_strtod_l+0x1ec>
 8008fbe:	2b08      	cmp	r3, #8
 8008fc0:	f103 0301 	add.w	r3, r3, #1
 8008fc4:	dc03      	bgt.n	8008fce <_strtod_l+0x246>
 8008fc6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008fc8:	434e      	muls	r6, r1
 8008fca:	960a      	str	r6, [sp, #40]	@ 0x28
 8008fcc:	e7e7      	b.n	8008f9e <_strtod_l+0x216>
 8008fce:	2b10      	cmp	r3, #16
 8008fd0:	bfde      	ittt	le
 8008fd2:	9e08      	ldrle	r6, [sp, #32]
 8008fd4:	434e      	mulle	r6, r1
 8008fd6:	9608      	strle	r6, [sp, #32]
 8008fd8:	e7e1      	b.n	8008f9e <_strtod_l+0x216>
 8008fda:	280f      	cmp	r0, #15
 8008fdc:	dceb      	bgt.n	8008fb6 <_strtod_l+0x22e>
 8008fde:	9808      	ldr	r0, [sp, #32]
 8008fe0:	230a      	movs	r3, #10
 8008fe2:	fb03 2300 	mla	r3, r3, r0, r2
 8008fe6:	9308      	str	r3, [sp, #32]
 8008fe8:	e7e5      	b.n	8008fb6 <_strtod_l+0x22e>
 8008fea:	4629      	mov	r1, r5
 8008fec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008fee:	1c50      	adds	r0, r2, #1
 8008ff0:	9019      	str	r0, [sp, #100]	@ 0x64
 8008ff2:	7852      	ldrb	r2, [r2, #1]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	460d      	mov	r5, r1
 8008ff8:	e7b1      	b.n	8008f5e <_strtod_l+0x1d6>
 8008ffa:	f04f 0900 	mov.w	r9, #0
 8008ffe:	2301      	movs	r3, #1
 8009000:	e77d      	b.n	8008efe <_strtod_l+0x176>
 8009002:	f04f 0c00 	mov.w	ip, #0
 8009006:	1ca2      	adds	r2, r4, #2
 8009008:	9219      	str	r2, [sp, #100]	@ 0x64
 800900a:	78a2      	ldrb	r2, [r4, #2]
 800900c:	e785      	b.n	8008f1a <_strtod_l+0x192>
 800900e:	f04f 0c01 	mov.w	ip, #1
 8009012:	e7f8      	b.n	8009006 <_strtod_l+0x27e>
 8009014:	0800e2b0 	.word	0x0800e2b0
 8009018:	0800e298 	.word	0x0800e298
 800901c:	7ff00000 	.word	0x7ff00000
 8009020:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009022:	1c51      	adds	r1, r2, #1
 8009024:	9119      	str	r1, [sp, #100]	@ 0x64
 8009026:	7852      	ldrb	r2, [r2, #1]
 8009028:	2a30      	cmp	r2, #48	@ 0x30
 800902a:	d0f9      	beq.n	8009020 <_strtod_l+0x298>
 800902c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009030:	2908      	cmp	r1, #8
 8009032:	f63f af78 	bhi.w	8008f26 <_strtod_l+0x19e>
 8009036:	3a30      	subs	r2, #48	@ 0x30
 8009038:	920e      	str	r2, [sp, #56]	@ 0x38
 800903a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800903c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800903e:	f04f 080a 	mov.w	r8, #10
 8009042:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009044:	1c56      	adds	r6, r2, #1
 8009046:	9619      	str	r6, [sp, #100]	@ 0x64
 8009048:	7852      	ldrb	r2, [r2, #1]
 800904a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800904e:	f1be 0f09 	cmp.w	lr, #9
 8009052:	d939      	bls.n	80090c8 <_strtod_l+0x340>
 8009054:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009056:	1a76      	subs	r6, r6, r1
 8009058:	2e08      	cmp	r6, #8
 800905a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800905e:	dc03      	bgt.n	8009068 <_strtod_l+0x2e0>
 8009060:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009062:	4588      	cmp	r8, r1
 8009064:	bfa8      	it	ge
 8009066:	4688      	movge	r8, r1
 8009068:	f1bc 0f00 	cmp.w	ip, #0
 800906c:	d001      	beq.n	8009072 <_strtod_l+0x2ea>
 800906e:	f1c8 0800 	rsb	r8, r8, #0
 8009072:	2d00      	cmp	r5, #0
 8009074:	d14e      	bne.n	8009114 <_strtod_l+0x38c>
 8009076:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009078:	4308      	orrs	r0, r1
 800907a:	f47f aebe 	bne.w	8008dfa <_strtod_l+0x72>
 800907e:	2b00      	cmp	r3, #0
 8009080:	f47f aed6 	bne.w	8008e30 <_strtod_l+0xa8>
 8009084:	2a69      	cmp	r2, #105	@ 0x69
 8009086:	d028      	beq.n	80090da <_strtod_l+0x352>
 8009088:	dc25      	bgt.n	80090d6 <_strtod_l+0x34e>
 800908a:	2a49      	cmp	r2, #73	@ 0x49
 800908c:	d025      	beq.n	80090da <_strtod_l+0x352>
 800908e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009090:	f47f aece 	bne.w	8008e30 <_strtod_l+0xa8>
 8009094:	499b      	ldr	r1, [pc, #620]	@ (8009304 <_strtod_l+0x57c>)
 8009096:	a819      	add	r0, sp, #100	@ 0x64
 8009098:	f001 fb96 	bl	800a7c8 <__match>
 800909c:	2800      	cmp	r0, #0
 800909e:	f43f aec7 	beq.w	8008e30 <_strtod_l+0xa8>
 80090a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	2b28      	cmp	r3, #40	@ 0x28
 80090a8:	d12e      	bne.n	8009108 <_strtod_l+0x380>
 80090aa:	4997      	ldr	r1, [pc, #604]	@ (8009308 <_strtod_l+0x580>)
 80090ac:	aa1c      	add	r2, sp, #112	@ 0x70
 80090ae:	a819      	add	r0, sp, #100	@ 0x64
 80090b0:	f001 fb9e 	bl	800a7f0 <__hexnan>
 80090b4:	2805      	cmp	r0, #5
 80090b6:	d127      	bne.n	8009108 <_strtod_l+0x380>
 80090b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80090ba:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80090be:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80090c2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80090c6:	e698      	b.n	8008dfa <_strtod_l+0x72>
 80090c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80090ca:	fb08 2101 	mla	r1, r8, r1, r2
 80090ce:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80090d2:	920e      	str	r2, [sp, #56]	@ 0x38
 80090d4:	e7b5      	b.n	8009042 <_strtod_l+0x2ba>
 80090d6:	2a6e      	cmp	r2, #110	@ 0x6e
 80090d8:	e7da      	b.n	8009090 <_strtod_l+0x308>
 80090da:	498c      	ldr	r1, [pc, #560]	@ (800930c <_strtod_l+0x584>)
 80090dc:	a819      	add	r0, sp, #100	@ 0x64
 80090de:	f001 fb73 	bl	800a7c8 <__match>
 80090e2:	2800      	cmp	r0, #0
 80090e4:	f43f aea4 	beq.w	8008e30 <_strtod_l+0xa8>
 80090e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090ea:	4989      	ldr	r1, [pc, #548]	@ (8009310 <_strtod_l+0x588>)
 80090ec:	3b01      	subs	r3, #1
 80090ee:	a819      	add	r0, sp, #100	@ 0x64
 80090f0:	9319      	str	r3, [sp, #100]	@ 0x64
 80090f2:	f001 fb69 	bl	800a7c8 <__match>
 80090f6:	b910      	cbnz	r0, 80090fe <_strtod_l+0x376>
 80090f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090fa:	3301      	adds	r3, #1
 80090fc:	9319      	str	r3, [sp, #100]	@ 0x64
 80090fe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009320 <_strtod_l+0x598>
 8009102:	f04f 0a00 	mov.w	sl, #0
 8009106:	e678      	b.n	8008dfa <_strtod_l+0x72>
 8009108:	4882      	ldr	r0, [pc, #520]	@ (8009314 <_strtod_l+0x58c>)
 800910a:	f001 f899 	bl	800a240 <nan>
 800910e:	ec5b ab10 	vmov	sl, fp, d0
 8009112:	e672      	b.n	8008dfa <_strtod_l+0x72>
 8009114:	eba8 0309 	sub.w	r3, r8, r9
 8009118:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800911a:	9309      	str	r3, [sp, #36]	@ 0x24
 800911c:	2f00      	cmp	r7, #0
 800911e:	bf08      	it	eq
 8009120:	462f      	moveq	r7, r5
 8009122:	2d10      	cmp	r5, #16
 8009124:	462c      	mov	r4, r5
 8009126:	bfa8      	it	ge
 8009128:	2410      	movge	r4, #16
 800912a:	f7f7 fa13 	bl	8000554 <__aeabi_ui2d>
 800912e:	2d09      	cmp	r5, #9
 8009130:	4682      	mov	sl, r0
 8009132:	468b      	mov	fp, r1
 8009134:	dc13      	bgt.n	800915e <_strtod_l+0x3d6>
 8009136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009138:	2b00      	cmp	r3, #0
 800913a:	f43f ae5e 	beq.w	8008dfa <_strtod_l+0x72>
 800913e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009140:	dd78      	ble.n	8009234 <_strtod_l+0x4ac>
 8009142:	2b16      	cmp	r3, #22
 8009144:	dc5f      	bgt.n	8009206 <_strtod_l+0x47e>
 8009146:	4974      	ldr	r1, [pc, #464]	@ (8009318 <_strtod_l+0x590>)
 8009148:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800914c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009150:	4652      	mov	r2, sl
 8009152:	465b      	mov	r3, fp
 8009154:	f7f7 fa78 	bl	8000648 <__aeabi_dmul>
 8009158:	4682      	mov	sl, r0
 800915a:	468b      	mov	fp, r1
 800915c:	e64d      	b.n	8008dfa <_strtod_l+0x72>
 800915e:	4b6e      	ldr	r3, [pc, #440]	@ (8009318 <_strtod_l+0x590>)
 8009160:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009164:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009168:	f7f7 fa6e 	bl	8000648 <__aeabi_dmul>
 800916c:	4682      	mov	sl, r0
 800916e:	9808      	ldr	r0, [sp, #32]
 8009170:	468b      	mov	fp, r1
 8009172:	f7f7 f9ef 	bl	8000554 <__aeabi_ui2d>
 8009176:	4602      	mov	r2, r0
 8009178:	460b      	mov	r3, r1
 800917a:	4650      	mov	r0, sl
 800917c:	4659      	mov	r1, fp
 800917e:	f7f7 f8ad 	bl	80002dc <__adddf3>
 8009182:	2d0f      	cmp	r5, #15
 8009184:	4682      	mov	sl, r0
 8009186:	468b      	mov	fp, r1
 8009188:	ddd5      	ble.n	8009136 <_strtod_l+0x3ae>
 800918a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800918c:	1b2c      	subs	r4, r5, r4
 800918e:	441c      	add	r4, r3
 8009190:	2c00      	cmp	r4, #0
 8009192:	f340 8096 	ble.w	80092c2 <_strtod_l+0x53a>
 8009196:	f014 030f 	ands.w	r3, r4, #15
 800919a:	d00a      	beq.n	80091b2 <_strtod_l+0x42a>
 800919c:	495e      	ldr	r1, [pc, #376]	@ (8009318 <_strtod_l+0x590>)
 800919e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80091a2:	4652      	mov	r2, sl
 80091a4:	465b      	mov	r3, fp
 80091a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091aa:	f7f7 fa4d 	bl	8000648 <__aeabi_dmul>
 80091ae:	4682      	mov	sl, r0
 80091b0:	468b      	mov	fp, r1
 80091b2:	f034 040f 	bics.w	r4, r4, #15
 80091b6:	d073      	beq.n	80092a0 <_strtod_l+0x518>
 80091b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80091bc:	dd48      	ble.n	8009250 <_strtod_l+0x4c8>
 80091be:	2400      	movs	r4, #0
 80091c0:	46a0      	mov	r8, r4
 80091c2:	940a      	str	r4, [sp, #40]	@ 0x28
 80091c4:	46a1      	mov	r9, r4
 80091c6:	9a05      	ldr	r2, [sp, #20]
 80091c8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009320 <_strtod_l+0x598>
 80091cc:	2322      	movs	r3, #34	@ 0x22
 80091ce:	6013      	str	r3, [r2, #0]
 80091d0:	f04f 0a00 	mov.w	sl, #0
 80091d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	f43f ae0f 	beq.w	8008dfa <_strtod_l+0x72>
 80091dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091de:	9805      	ldr	r0, [sp, #20]
 80091e0:	f7ff f940 	bl	8008464 <_Bfree>
 80091e4:	9805      	ldr	r0, [sp, #20]
 80091e6:	4649      	mov	r1, r9
 80091e8:	f7ff f93c 	bl	8008464 <_Bfree>
 80091ec:	9805      	ldr	r0, [sp, #20]
 80091ee:	4641      	mov	r1, r8
 80091f0:	f7ff f938 	bl	8008464 <_Bfree>
 80091f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80091f6:	9805      	ldr	r0, [sp, #20]
 80091f8:	f7ff f934 	bl	8008464 <_Bfree>
 80091fc:	9805      	ldr	r0, [sp, #20]
 80091fe:	4621      	mov	r1, r4
 8009200:	f7ff f930 	bl	8008464 <_Bfree>
 8009204:	e5f9      	b.n	8008dfa <_strtod_l+0x72>
 8009206:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009208:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800920c:	4293      	cmp	r3, r2
 800920e:	dbbc      	blt.n	800918a <_strtod_l+0x402>
 8009210:	4c41      	ldr	r4, [pc, #260]	@ (8009318 <_strtod_l+0x590>)
 8009212:	f1c5 050f 	rsb	r5, r5, #15
 8009216:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800921a:	4652      	mov	r2, sl
 800921c:	465b      	mov	r3, fp
 800921e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009222:	f7f7 fa11 	bl	8000648 <__aeabi_dmul>
 8009226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009228:	1b5d      	subs	r5, r3, r5
 800922a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800922e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009232:	e78f      	b.n	8009154 <_strtod_l+0x3cc>
 8009234:	3316      	adds	r3, #22
 8009236:	dba8      	blt.n	800918a <_strtod_l+0x402>
 8009238:	4b37      	ldr	r3, [pc, #220]	@ (8009318 <_strtod_l+0x590>)
 800923a:	eba9 0808 	sub.w	r8, r9, r8
 800923e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009242:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009246:	4650      	mov	r0, sl
 8009248:	4659      	mov	r1, fp
 800924a:	f7f7 fb27 	bl	800089c <__aeabi_ddiv>
 800924e:	e783      	b.n	8009158 <_strtod_l+0x3d0>
 8009250:	4b32      	ldr	r3, [pc, #200]	@ (800931c <_strtod_l+0x594>)
 8009252:	9308      	str	r3, [sp, #32]
 8009254:	2300      	movs	r3, #0
 8009256:	1124      	asrs	r4, r4, #4
 8009258:	4650      	mov	r0, sl
 800925a:	4659      	mov	r1, fp
 800925c:	461e      	mov	r6, r3
 800925e:	2c01      	cmp	r4, #1
 8009260:	dc21      	bgt.n	80092a6 <_strtod_l+0x51e>
 8009262:	b10b      	cbz	r3, 8009268 <_strtod_l+0x4e0>
 8009264:	4682      	mov	sl, r0
 8009266:	468b      	mov	fp, r1
 8009268:	492c      	ldr	r1, [pc, #176]	@ (800931c <_strtod_l+0x594>)
 800926a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800926e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009272:	4652      	mov	r2, sl
 8009274:	465b      	mov	r3, fp
 8009276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800927a:	f7f7 f9e5 	bl	8000648 <__aeabi_dmul>
 800927e:	4b28      	ldr	r3, [pc, #160]	@ (8009320 <_strtod_l+0x598>)
 8009280:	460a      	mov	r2, r1
 8009282:	400b      	ands	r3, r1
 8009284:	4927      	ldr	r1, [pc, #156]	@ (8009324 <_strtod_l+0x59c>)
 8009286:	428b      	cmp	r3, r1
 8009288:	4682      	mov	sl, r0
 800928a:	d898      	bhi.n	80091be <_strtod_l+0x436>
 800928c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009290:	428b      	cmp	r3, r1
 8009292:	bf86      	itte	hi
 8009294:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009328 <_strtod_l+0x5a0>
 8009298:	f04f 3aff 	movhi.w	sl, #4294967295
 800929c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80092a0:	2300      	movs	r3, #0
 80092a2:	9308      	str	r3, [sp, #32]
 80092a4:	e07a      	b.n	800939c <_strtod_l+0x614>
 80092a6:	07e2      	lsls	r2, r4, #31
 80092a8:	d505      	bpl.n	80092b6 <_strtod_l+0x52e>
 80092aa:	9b08      	ldr	r3, [sp, #32]
 80092ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b0:	f7f7 f9ca 	bl	8000648 <__aeabi_dmul>
 80092b4:	2301      	movs	r3, #1
 80092b6:	9a08      	ldr	r2, [sp, #32]
 80092b8:	3208      	adds	r2, #8
 80092ba:	3601      	adds	r6, #1
 80092bc:	1064      	asrs	r4, r4, #1
 80092be:	9208      	str	r2, [sp, #32]
 80092c0:	e7cd      	b.n	800925e <_strtod_l+0x4d6>
 80092c2:	d0ed      	beq.n	80092a0 <_strtod_l+0x518>
 80092c4:	4264      	negs	r4, r4
 80092c6:	f014 020f 	ands.w	r2, r4, #15
 80092ca:	d00a      	beq.n	80092e2 <_strtod_l+0x55a>
 80092cc:	4b12      	ldr	r3, [pc, #72]	@ (8009318 <_strtod_l+0x590>)
 80092ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092d2:	4650      	mov	r0, sl
 80092d4:	4659      	mov	r1, fp
 80092d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092da:	f7f7 fadf 	bl	800089c <__aeabi_ddiv>
 80092de:	4682      	mov	sl, r0
 80092e0:	468b      	mov	fp, r1
 80092e2:	1124      	asrs	r4, r4, #4
 80092e4:	d0dc      	beq.n	80092a0 <_strtod_l+0x518>
 80092e6:	2c1f      	cmp	r4, #31
 80092e8:	dd20      	ble.n	800932c <_strtod_l+0x5a4>
 80092ea:	2400      	movs	r4, #0
 80092ec:	46a0      	mov	r8, r4
 80092ee:	940a      	str	r4, [sp, #40]	@ 0x28
 80092f0:	46a1      	mov	r9, r4
 80092f2:	9a05      	ldr	r2, [sp, #20]
 80092f4:	2322      	movs	r3, #34	@ 0x22
 80092f6:	f04f 0a00 	mov.w	sl, #0
 80092fa:	f04f 0b00 	mov.w	fp, #0
 80092fe:	6013      	str	r3, [r2, #0]
 8009300:	e768      	b.n	80091d4 <_strtod_l+0x44c>
 8009302:	bf00      	nop
 8009304:	0800e089 	.word	0x0800e089
 8009308:	0800e29c 	.word	0x0800e29c
 800930c:	0800e081 	.word	0x0800e081
 8009310:	0800e0b8 	.word	0x0800e0b8
 8009314:	0800e445 	.word	0x0800e445
 8009318:	0800e1d0 	.word	0x0800e1d0
 800931c:	0800e1a8 	.word	0x0800e1a8
 8009320:	7ff00000 	.word	0x7ff00000
 8009324:	7ca00000 	.word	0x7ca00000
 8009328:	7fefffff 	.word	0x7fefffff
 800932c:	f014 0310 	ands.w	r3, r4, #16
 8009330:	bf18      	it	ne
 8009332:	236a      	movne	r3, #106	@ 0x6a
 8009334:	4ea9      	ldr	r6, [pc, #676]	@ (80095dc <_strtod_l+0x854>)
 8009336:	9308      	str	r3, [sp, #32]
 8009338:	4650      	mov	r0, sl
 800933a:	4659      	mov	r1, fp
 800933c:	2300      	movs	r3, #0
 800933e:	07e2      	lsls	r2, r4, #31
 8009340:	d504      	bpl.n	800934c <_strtod_l+0x5c4>
 8009342:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009346:	f7f7 f97f 	bl	8000648 <__aeabi_dmul>
 800934a:	2301      	movs	r3, #1
 800934c:	1064      	asrs	r4, r4, #1
 800934e:	f106 0608 	add.w	r6, r6, #8
 8009352:	d1f4      	bne.n	800933e <_strtod_l+0x5b6>
 8009354:	b10b      	cbz	r3, 800935a <_strtod_l+0x5d2>
 8009356:	4682      	mov	sl, r0
 8009358:	468b      	mov	fp, r1
 800935a:	9b08      	ldr	r3, [sp, #32]
 800935c:	b1b3      	cbz	r3, 800938c <_strtod_l+0x604>
 800935e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009362:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009366:	2b00      	cmp	r3, #0
 8009368:	4659      	mov	r1, fp
 800936a:	dd0f      	ble.n	800938c <_strtod_l+0x604>
 800936c:	2b1f      	cmp	r3, #31
 800936e:	dd55      	ble.n	800941c <_strtod_l+0x694>
 8009370:	2b34      	cmp	r3, #52	@ 0x34
 8009372:	bfde      	ittt	le
 8009374:	f04f 33ff 	movle.w	r3, #4294967295
 8009378:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800937c:	4093      	lslle	r3, r2
 800937e:	f04f 0a00 	mov.w	sl, #0
 8009382:	bfcc      	ite	gt
 8009384:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009388:	ea03 0b01 	andle.w	fp, r3, r1
 800938c:	2200      	movs	r2, #0
 800938e:	2300      	movs	r3, #0
 8009390:	4650      	mov	r0, sl
 8009392:	4659      	mov	r1, fp
 8009394:	f7f7 fbc0 	bl	8000b18 <__aeabi_dcmpeq>
 8009398:	2800      	cmp	r0, #0
 800939a:	d1a6      	bne.n	80092ea <_strtod_l+0x562>
 800939c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800939e:	9300      	str	r3, [sp, #0]
 80093a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80093a2:	9805      	ldr	r0, [sp, #20]
 80093a4:	462b      	mov	r3, r5
 80093a6:	463a      	mov	r2, r7
 80093a8:	f7ff f8c4 	bl	8008534 <__s2b>
 80093ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80093ae:	2800      	cmp	r0, #0
 80093b0:	f43f af05 	beq.w	80091be <_strtod_l+0x436>
 80093b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093b6:	2a00      	cmp	r2, #0
 80093b8:	eba9 0308 	sub.w	r3, r9, r8
 80093bc:	bfa8      	it	ge
 80093be:	2300      	movge	r3, #0
 80093c0:	9312      	str	r3, [sp, #72]	@ 0x48
 80093c2:	2400      	movs	r4, #0
 80093c4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80093c8:	9316      	str	r3, [sp, #88]	@ 0x58
 80093ca:	46a0      	mov	r8, r4
 80093cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093ce:	9805      	ldr	r0, [sp, #20]
 80093d0:	6859      	ldr	r1, [r3, #4]
 80093d2:	f7ff f807 	bl	80083e4 <_Balloc>
 80093d6:	4681      	mov	r9, r0
 80093d8:	2800      	cmp	r0, #0
 80093da:	f43f aef4 	beq.w	80091c6 <_strtod_l+0x43e>
 80093de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093e0:	691a      	ldr	r2, [r3, #16]
 80093e2:	3202      	adds	r2, #2
 80093e4:	f103 010c 	add.w	r1, r3, #12
 80093e8:	0092      	lsls	r2, r2, #2
 80093ea:	300c      	adds	r0, #12
 80093ec:	f7fe f94f 	bl	800768e <memcpy>
 80093f0:	ec4b ab10 	vmov	d0, sl, fp
 80093f4:	9805      	ldr	r0, [sp, #20]
 80093f6:	aa1c      	add	r2, sp, #112	@ 0x70
 80093f8:	a91b      	add	r1, sp, #108	@ 0x6c
 80093fa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80093fe:	f7ff fbd5 	bl	8008bac <__d2b>
 8009402:	901a      	str	r0, [sp, #104]	@ 0x68
 8009404:	2800      	cmp	r0, #0
 8009406:	f43f aede 	beq.w	80091c6 <_strtod_l+0x43e>
 800940a:	9805      	ldr	r0, [sp, #20]
 800940c:	2101      	movs	r1, #1
 800940e:	f7ff f927 	bl	8008660 <__i2b>
 8009412:	4680      	mov	r8, r0
 8009414:	b948      	cbnz	r0, 800942a <_strtod_l+0x6a2>
 8009416:	f04f 0800 	mov.w	r8, #0
 800941a:	e6d4      	b.n	80091c6 <_strtod_l+0x43e>
 800941c:	f04f 32ff 	mov.w	r2, #4294967295
 8009420:	fa02 f303 	lsl.w	r3, r2, r3
 8009424:	ea03 0a0a 	and.w	sl, r3, sl
 8009428:	e7b0      	b.n	800938c <_strtod_l+0x604>
 800942a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800942c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800942e:	2d00      	cmp	r5, #0
 8009430:	bfab      	itete	ge
 8009432:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009434:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009436:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009438:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800943a:	bfac      	ite	ge
 800943c:	18ef      	addge	r7, r5, r3
 800943e:	1b5e      	sublt	r6, r3, r5
 8009440:	9b08      	ldr	r3, [sp, #32]
 8009442:	1aed      	subs	r5, r5, r3
 8009444:	4415      	add	r5, r2
 8009446:	4b66      	ldr	r3, [pc, #408]	@ (80095e0 <_strtod_l+0x858>)
 8009448:	3d01      	subs	r5, #1
 800944a:	429d      	cmp	r5, r3
 800944c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009450:	da50      	bge.n	80094f4 <_strtod_l+0x76c>
 8009452:	1b5b      	subs	r3, r3, r5
 8009454:	2b1f      	cmp	r3, #31
 8009456:	eba2 0203 	sub.w	r2, r2, r3
 800945a:	f04f 0101 	mov.w	r1, #1
 800945e:	dc3d      	bgt.n	80094dc <_strtod_l+0x754>
 8009460:	fa01 f303 	lsl.w	r3, r1, r3
 8009464:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009466:	2300      	movs	r3, #0
 8009468:	9310      	str	r3, [sp, #64]	@ 0x40
 800946a:	18bd      	adds	r5, r7, r2
 800946c:	9b08      	ldr	r3, [sp, #32]
 800946e:	42af      	cmp	r7, r5
 8009470:	4416      	add	r6, r2
 8009472:	441e      	add	r6, r3
 8009474:	463b      	mov	r3, r7
 8009476:	bfa8      	it	ge
 8009478:	462b      	movge	r3, r5
 800947a:	42b3      	cmp	r3, r6
 800947c:	bfa8      	it	ge
 800947e:	4633      	movge	r3, r6
 8009480:	2b00      	cmp	r3, #0
 8009482:	bfc2      	ittt	gt
 8009484:	1aed      	subgt	r5, r5, r3
 8009486:	1af6      	subgt	r6, r6, r3
 8009488:	1aff      	subgt	r7, r7, r3
 800948a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800948c:	2b00      	cmp	r3, #0
 800948e:	dd16      	ble.n	80094be <_strtod_l+0x736>
 8009490:	4641      	mov	r1, r8
 8009492:	9805      	ldr	r0, [sp, #20]
 8009494:	461a      	mov	r2, r3
 8009496:	f7ff f9a3 	bl	80087e0 <__pow5mult>
 800949a:	4680      	mov	r8, r0
 800949c:	2800      	cmp	r0, #0
 800949e:	d0ba      	beq.n	8009416 <_strtod_l+0x68e>
 80094a0:	4601      	mov	r1, r0
 80094a2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80094a4:	9805      	ldr	r0, [sp, #20]
 80094a6:	f7ff f8f1 	bl	800868c <__multiply>
 80094aa:	900e      	str	r0, [sp, #56]	@ 0x38
 80094ac:	2800      	cmp	r0, #0
 80094ae:	f43f ae8a 	beq.w	80091c6 <_strtod_l+0x43e>
 80094b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094b4:	9805      	ldr	r0, [sp, #20]
 80094b6:	f7fe ffd5 	bl	8008464 <_Bfree>
 80094ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80094be:	2d00      	cmp	r5, #0
 80094c0:	dc1d      	bgt.n	80094fe <_strtod_l+0x776>
 80094c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	dd23      	ble.n	8009510 <_strtod_l+0x788>
 80094c8:	4649      	mov	r1, r9
 80094ca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80094cc:	9805      	ldr	r0, [sp, #20]
 80094ce:	f7ff f987 	bl	80087e0 <__pow5mult>
 80094d2:	4681      	mov	r9, r0
 80094d4:	b9e0      	cbnz	r0, 8009510 <_strtod_l+0x788>
 80094d6:	f04f 0900 	mov.w	r9, #0
 80094da:	e674      	b.n	80091c6 <_strtod_l+0x43e>
 80094dc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80094e0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80094e4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80094e8:	35e2      	adds	r5, #226	@ 0xe2
 80094ea:	fa01 f305 	lsl.w	r3, r1, r5
 80094ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80094f0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80094f2:	e7ba      	b.n	800946a <_strtod_l+0x6e2>
 80094f4:	2300      	movs	r3, #0
 80094f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80094f8:	2301      	movs	r3, #1
 80094fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80094fc:	e7b5      	b.n	800946a <_strtod_l+0x6e2>
 80094fe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009500:	9805      	ldr	r0, [sp, #20]
 8009502:	462a      	mov	r2, r5
 8009504:	f7ff f9c6 	bl	8008894 <__lshift>
 8009508:	901a      	str	r0, [sp, #104]	@ 0x68
 800950a:	2800      	cmp	r0, #0
 800950c:	d1d9      	bne.n	80094c2 <_strtod_l+0x73a>
 800950e:	e65a      	b.n	80091c6 <_strtod_l+0x43e>
 8009510:	2e00      	cmp	r6, #0
 8009512:	dd07      	ble.n	8009524 <_strtod_l+0x79c>
 8009514:	4649      	mov	r1, r9
 8009516:	9805      	ldr	r0, [sp, #20]
 8009518:	4632      	mov	r2, r6
 800951a:	f7ff f9bb 	bl	8008894 <__lshift>
 800951e:	4681      	mov	r9, r0
 8009520:	2800      	cmp	r0, #0
 8009522:	d0d8      	beq.n	80094d6 <_strtod_l+0x74e>
 8009524:	2f00      	cmp	r7, #0
 8009526:	dd08      	ble.n	800953a <_strtod_l+0x7b2>
 8009528:	4641      	mov	r1, r8
 800952a:	9805      	ldr	r0, [sp, #20]
 800952c:	463a      	mov	r2, r7
 800952e:	f7ff f9b1 	bl	8008894 <__lshift>
 8009532:	4680      	mov	r8, r0
 8009534:	2800      	cmp	r0, #0
 8009536:	f43f ae46 	beq.w	80091c6 <_strtod_l+0x43e>
 800953a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800953c:	9805      	ldr	r0, [sp, #20]
 800953e:	464a      	mov	r2, r9
 8009540:	f7ff fa30 	bl	80089a4 <__mdiff>
 8009544:	4604      	mov	r4, r0
 8009546:	2800      	cmp	r0, #0
 8009548:	f43f ae3d 	beq.w	80091c6 <_strtod_l+0x43e>
 800954c:	68c3      	ldr	r3, [r0, #12]
 800954e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009550:	2300      	movs	r3, #0
 8009552:	60c3      	str	r3, [r0, #12]
 8009554:	4641      	mov	r1, r8
 8009556:	f7ff fa09 	bl	800896c <__mcmp>
 800955a:	2800      	cmp	r0, #0
 800955c:	da46      	bge.n	80095ec <_strtod_l+0x864>
 800955e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009560:	ea53 030a 	orrs.w	r3, r3, sl
 8009564:	d16c      	bne.n	8009640 <_strtod_l+0x8b8>
 8009566:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800956a:	2b00      	cmp	r3, #0
 800956c:	d168      	bne.n	8009640 <_strtod_l+0x8b8>
 800956e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009572:	0d1b      	lsrs	r3, r3, #20
 8009574:	051b      	lsls	r3, r3, #20
 8009576:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800957a:	d961      	bls.n	8009640 <_strtod_l+0x8b8>
 800957c:	6963      	ldr	r3, [r4, #20]
 800957e:	b913      	cbnz	r3, 8009586 <_strtod_l+0x7fe>
 8009580:	6923      	ldr	r3, [r4, #16]
 8009582:	2b01      	cmp	r3, #1
 8009584:	dd5c      	ble.n	8009640 <_strtod_l+0x8b8>
 8009586:	4621      	mov	r1, r4
 8009588:	2201      	movs	r2, #1
 800958a:	9805      	ldr	r0, [sp, #20]
 800958c:	f7ff f982 	bl	8008894 <__lshift>
 8009590:	4641      	mov	r1, r8
 8009592:	4604      	mov	r4, r0
 8009594:	f7ff f9ea 	bl	800896c <__mcmp>
 8009598:	2800      	cmp	r0, #0
 800959a:	dd51      	ble.n	8009640 <_strtod_l+0x8b8>
 800959c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80095a0:	9a08      	ldr	r2, [sp, #32]
 80095a2:	0d1b      	lsrs	r3, r3, #20
 80095a4:	051b      	lsls	r3, r3, #20
 80095a6:	2a00      	cmp	r2, #0
 80095a8:	d06b      	beq.n	8009682 <_strtod_l+0x8fa>
 80095aa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80095ae:	d868      	bhi.n	8009682 <_strtod_l+0x8fa>
 80095b0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80095b4:	f67f ae9d 	bls.w	80092f2 <_strtod_l+0x56a>
 80095b8:	4b0a      	ldr	r3, [pc, #40]	@ (80095e4 <_strtod_l+0x85c>)
 80095ba:	4650      	mov	r0, sl
 80095bc:	4659      	mov	r1, fp
 80095be:	2200      	movs	r2, #0
 80095c0:	f7f7 f842 	bl	8000648 <__aeabi_dmul>
 80095c4:	4b08      	ldr	r3, [pc, #32]	@ (80095e8 <_strtod_l+0x860>)
 80095c6:	400b      	ands	r3, r1
 80095c8:	4682      	mov	sl, r0
 80095ca:	468b      	mov	fp, r1
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f47f ae05 	bne.w	80091dc <_strtod_l+0x454>
 80095d2:	9a05      	ldr	r2, [sp, #20]
 80095d4:	2322      	movs	r3, #34	@ 0x22
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	e600      	b.n	80091dc <_strtod_l+0x454>
 80095da:	bf00      	nop
 80095dc:	0800e2c8 	.word	0x0800e2c8
 80095e0:	fffffc02 	.word	0xfffffc02
 80095e4:	39500000 	.word	0x39500000
 80095e8:	7ff00000 	.word	0x7ff00000
 80095ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80095f0:	d165      	bne.n	80096be <_strtod_l+0x936>
 80095f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80095f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095f8:	b35a      	cbz	r2, 8009652 <_strtod_l+0x8ca>
 80095fa:	4a9f      	ldr	r2, [pc, #636]	@ (8009878 <_strtod_l+0xaf0>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d12b      	bne.n	8009658 <_strtod_l+0x8d0>
 8009600:	9b08      	ldr	r3, [sp, #32]
 8009602:	4651      	mov	r1, sl
 8009604:	b303      	cbz	r3, 8009648 <_strtod_l+0x8c0>
 8009606:	4b9d      	ldr	r3, [pc, #628]	@ (800987c <_strtod_l+0xaf4>)
 8009608:	465a      	mov	r2, fp
 800960a:	4013      	ands	r3, r2
 800960c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009610:	f04f 32ff 	mov.w	r2, #4294967295
 8009614:	d81b      	bhi.n	800964e <_strtod_l+0x8c6>
 8009616:	0d1b      	lsrs	r3, r3, #20
 8009618:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800961c:	fa02 f303 	lsl.w	r3, r2, r3
 8009620:	4299      	cmp	r1, r3
 8009622:	d119      	bne.n	8009658 <_strtod_l+0x8d0>
 8009624:	4b96      	ldr	r3, [pc, #600]	@ (8009880 <_strtod_l+0xaf8>)
 8009626:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009628:	429a      	cmp	r2, r3
 800962a:	d102      	bne.n	8009632 <_strtod_l+0x8aa>
 800962c:	3101      	adds	r1, #1
 800962e:	f43f adca 	beq.w	80091c6 <_strtod_l+0x43e>
 8009632:	4b92      	ldr	r3, [pc, #584]	@ (800987c <_strtod_l+0xaf4>)
 8009634:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009636:	401a      	ands	r2, r3
 8009638:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800963c:	f04f 0a00 	mov.w	sl, #0
 8009640:	9b08      	ldr	r3, [sp, #32]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1b8      	bne.n	80095b8 <_strtod_l+0x830>
 8009646:	e5c9      	b.n	80091dc <_strtod_l+0x454>
 8009648:	f04f 33ff 	mov.w	r3, #4294967295
 800964c:	e7e8      	b.n	8009620 <_strtod_l+0x898>
 800964e:	4613      	mov	r3, r2
 8009650:	e7e6      	b.n	8009620 <_strtod_l+0x898>
 8009652:	ea53 030a 	orrs.w	r3, r3, sl
 8009656:	d0a1      	beq.n	800959c <_strtod_l+0x814>
 8009658:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800965a:	b1db      	cbz	r3, 8009694 <_strtod_l+0x90c>
 800965c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800965e:	4213      	tst	r3, r2
 8009660:	d0ee      	beq.n	8009640 <_strtod_l+0x8b8>
 8009662:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009664:	9a08      	ldr	r2, [sp, #32]
 8009666:	4650      	mov	r0, sl
 8009668:	4659      	mov	r1, fp
 800966a:	b1bb      	cbz	r3, 800969c <_strtod_l+0x914>
 800966c:	f7ff fb6c 	bl	8008d48 <sulp>
 8009670:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009674:	ec53 2b10 	vmov	r2, r3, d0
 8009678:	f7f6 fe30 	bl	80002dc <__adddf3>
 800967c:	4682      	mov	sl, r0
 800967e:	468b      	mov	fp, r1
 8009680:	e7de      	b.n	8009640 <_strtod_l+0x8b8>
 8009682:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009686:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800968a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800968e:	f04f 3aff 	mov.w	sl, #4294967295
 8009692:	e7d5      	b.n	8009640 <_strtod_l+0x8b8>
 8009694:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009696:	ea13 0f0a 	tst.w	r3, sl
 800969a:	e7e1      	b.n	8009660 <_strtod_l+0x8d8>
 800969c:	f7ff fb54 	bl	8008d48 <sulp>
 80096a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096a4:	ec53 2b10 	vmov	r2, r3, d0
 80096a8:	f7f6 fe16 	bl	80002d8 <__aeabi_dsub>
 80096ac:	2200      	movs	r2, #0
 80096ae:	2300      	movs	r3, #0
 80096b0:	4682      	mov	sl, r0
 80096b2:	468b      	mov	fp, r1
 80096b4:	f7f7 fa30 	bl	8000b18 <__aeabi_dcmpeq>
 80096b8:	2800      	cmp	r0, #0
 80096ba:	d0c1      	beq.n	8009640 <_strtod_l+0x8b8>
 80096bc:	e619      	b.n	80092f2 <_strtod_l+0x56a>
 80096be:	4641      	mov	r1, r8
 80096c0:	4620      	mov	r0, r4
 80096c2:	f7ff facb 	bl	8008c5c <__ratio>
 80096c6:	ec57 6b10 	vmov	r6, r7, d0
 80096ca:	2200      	movs	r2, #0
 80096cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80096d0:	4630      	mov	r0, r6
 80096d2:	4639      	mov	r1, r7
 80096d4:	f7f7 fa34 	bl	8000b40 <__aeabi_dcmple>
 80096d8:	2800      	cmp	r0, #0
 80096da:	d06f      	beq.n	80097bc <_strtod_l+0xa34>
 80096dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d17a      	bne.n	80097d8 <_strtod_l+0xa50>
 80096e2:	f1ba 0f00 	cmp.w	sl, #0
 80096e6:	d158      	bne.n	800979a <_strtod_l+0xa12>
 80096e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d15a      	bne.n	80097a8 <_strtod_l+0xa20>
 80096f2:	4b64      	ldr	r3, [pc, #400]	@ (8009884 <_strtod_l+0xafc>)
 80096f4:	2200      	movs	r2, #0
 80096f6:	4630      	mov	r0, r6
 80096f8:	4639      	mov	r1, r7
 80096fa:	f7f7 fa17 	bl	8000b2c <__aeabi_dcmplt>
 80096fe:	2800      	cmp	r0, #0
 8009700:	d159      	bne.n	80097b6 <_strtod_l+0xa2e>
 8009702:	4630      	mov	r0, r6
 8009704:	4639      	mov	r1, r7
 8009706:	4b60      	ldr	r3, [pc, #384]	@ (8009888 <_strtod_l+0xb00>)
 8009708:	2200      	movs	r2, #0
 800970a:	f7f6 ff9d 	bl	8000648 <__aeabi_dmul>
 800970e:	4606      	mov	r6, r0
 8009710:	460f      	mov	r7, r1
 8009712:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009716:	9606      	str	r6, [sp, #24]
 8009718:	9307      	str	r3, [sp, #28]
 800971a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800971e:	4d57      	ldr	r5, [pc, #348]	@ (800987c <_strtod_l+0xaf4>)
 8009720:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009724:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009726:	401d      	ands	r5, r3
 8009728:	4b58      	ldr	r3, [pc, #352]	@ (800988c <_strtod_l+0xb04>)
 800972a:	429d      	cmp	r5, r3
 800972c:	f040 80b2 	bne.w	8009894 <_strtod_l+0xb0c>
 8009730:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009732:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009736:	ec4b ab10 	vmov	d0, sl, fp
 800973a:	f7ff f9c7 	bl	8008acc <__ulp>
 800973e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009742:	ec51 0b10 	vmov	r0, r1, d0
 8009746:	f7f6 ff7f 	bl	8000648 <__aeabi_dmul>
 800974a:	4652      	mov	r2, sl
 800974c:	465b      	mov	r3, fp
 800974e:	f7f6 fdc5 	bl	80002dc <__adddf3>
 8009752:	460b      	mov	r3, r1
 8009754:	4949      	ldr	r1, [pc, #292]	@ (800987c <_strtod_l+0xaf4>)
 8009756:	4a4e      	ldr	r2, [pc, #312]	@ (8009890 <_strtod_l+0xb08>)
 8009758:	4019      	ands	r1, r3
 800975a:	4291      	cmp	r1, r2
 800975c:	4682      	mov	sl, r0
 800975e:	d942      	bls.n	80097e6 <_strtod_l+0xa5e>
 8009760:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009762:	4b47      	ldr	r3, [pc, #284]	@ (8009880 <_strtod_l+0xaf8>)
 8009764:	429a      	cmp	r2, r3
 8009766:	d103      	bne.n	8009770 <_strtod_l+0x9e8>
 8009768:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800976a:	3301      	adds	r3, #1
 800976c:	f43f ad2b 	beq.w	80091c6 <_strtod_l+0x43e>
 8009770:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009880 <_strtod_l+0xaf8>
 8009774:	f04f 3aff 	mov.w	sl, #4294967295
 8009778:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800977a:	9805      	ldr	r0, [sp, #20]
 800977c:	f7fe fe72 	bl	8008464 <_Bfree>
 8009780:	9805      	ldr	r0, [sp, #20]
 8009782:	4649      	mov	r1, r9
 8009784:	f7fe fe6e 	bl	8008464 <_Bfree>
 8009788:	9805      	ldr	r0, [sp, #20]
 800978a:	4641      	mov	r1, r8
 800978c:	f7fe fe6a 	bl	8008464 <_Bfree>
 8009790:	9805      	ldr	r0, [sp, #20]
 8009792:	4621      	mov	r1, r4
 8009794:	f7fe fe66 	bl	8008464 <_Bfree>
 8009798:	e618      	b.n	80093cc <_strtod_l+0x644>
 800979a:	f1ba 0f01 	cmp.w	sl, #1
 800979e:	d103      	bne.n	80097a8 <_strtod_l+0xa20>
 80097a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f43f ada5 	beq.w	80092f2 <_strtod_l+0x56a>
 80097a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009858 <_strtod_l+0xad0>
 80097ac:	4f35      	ldr	r7, [pc, #212]	@ (8009884 <_strtod_l+0xafc>)
 80097ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80097b2:	2600      	movs	r6, #0
 80097b4:	e7b1      	b.n	800971a <_strtod_l+0x992>
 80097b6:	4f34      	ldr	r7, [pc, #208]	@ (8009888 <_strtod_l+0xb00>)
 80097b8:	2600      	movs	r6, #0
 80097ba:	e7aa      	b.n	8009712 <_strtod_l+0x98a>
 80097bc:	4b32      	ldr	r3, [pc, #200]	@ (8009888 <_strtod_l+0xb00>)
 80097be:	4630      	mov	r0, r6
 80097c0:	4639      	mov	r1, r7
 80097c2:	2200      	movs	r2, #0
 80097c4:	f7f6 ff40 	bl	8000648 <__aeabi_dmul>
 80097c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097ca:	4606      	mov	r6, r0
 80097cc:	460f      	mov	r7, r1
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d09f      	beq.n	8009712 <_strtod_l+0x98a>
 80097d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80097d6:	e7a0      	b.n	800971a <_strtod_l+0x992>
 80097d8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009860 <_strtod_l+0xad8>
 80097dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80097e0:	ec57 6b17 	vmov	r6, r7, d7
 80097e4:	e799      	b.n	800971a <_strtod_l+0x992>
 80097e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80097ea:	9b08      	ldr	r3, [sp, #32]
 80097ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1c1      	bne.n	8009778 <_strtod_l+0x9f0>
 80097f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80097f8:	0d1b      	lsrs	r3, r3, #20
 80097fa:	051b      	lsls	r3, r3, #20
 80097fc:	429d      	cmp	r5, r3
 80097fe:	d1bb      	bne.n	8009778 <_strtod_l+0x9f0>
 8009800:	4630      	mov	r0, r6
 8009802:	4639      	mov	r1, r7
 8009804:	f7f7 fa80 	bl	8000d08 <__aeabi_d2lz>
 8009808:	f7f6 fef0 	bl	80005ec <__aeabi_l2d>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	4630      	mov	r0, r6
 8009812:	4639      	mov	r1, r7
 8009814:	f7f6 fd60 	bl	80002d8 <__aeabi_dsub>
 8009818:	460b      	mov	r3, r1
 800981a:	4602      	mov	r2, r0
 800981c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009820:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009826:	ea46 060a 	orr.w	r6, r6, sl
 800982a:	431e      	orrs	r6, r3
 800982c:	d06f      	beq.n	800990e <_strtod_l+0xb86>
 800982e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009868 <_strtod_l+0xae0>)
 8009830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009834:	f7f7 f97a 	bl	8000b2c <__aeabi_dcmplt>
 8009838:	2800      	cmp	r0, #0
 800983a:	f47f accf 	bne.w	80091dc <_strtod_l+0x454>
 800983e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009870 <_strtod_l+0xae8>)
 8009840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009844:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009848:	f7f7 f98e 	bl	8000b68 <__aeabi_dcmpgt>
 800984c:	2800      	cmp	r0, #0
 800984e:	d093      	beq.n	8009778 <_strtod_l+0x9f0>
 8009850:	e4c4      	b.n	80091dc <_strtod_l+0x454>
 8009852:	bf00      	nop
 8009854:	f3af 8000 	nop.w
 8009858:	00000000 	.word	0x00000000
 800985c:	bff00000 	.word	0xbff00000
 8009860:	00000000 	.word	0x00000000
 8009864:	3ff00000 	.word	0x3ff00000
 8009868:	94a03595 	.word	0x94a03595
 800986c:	3fdfffff 	.word	0x3fdfffff
 8009870:	35afe535 	.word	0x35afe535
 8009874:	3fe00000 	.word	0x3fe00000
 8009878:	000fffff 	.word	0x000fffff
 800987c:	7ff00000 	.word	0x7ff00000
 8009880:	7fefffff 	.word	0x7fefffff
 8009884:	3ff00000 	.word	0x3ff00000
 8009888:	3fe00000 	.word	0x3fe00000
 800988c:	7fe00000 	.word	0x7fe00000
 8009890:	7c9fffff 	.word	0x7c9fffff
 8009894:	9b08      	ldr	r3, [sp, #32]
 8009896:	b323      	cbz	r3, 80098e2 <_strtod_l+0xb5a>
 8009898:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800989c:	d821      	bhi.n	80098e2 <_strtod_l+0xb5a>
 800989e:	a328      	add	r3, pc, #160	@ (adr r3, 8009940 <_strtod_l+0xbb8>)
 80098a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a4:	4630      	mov	r0, r6
 80098a6:	4639      	mov	r1, r7
 80098a8:	f7f7 f94a 	bl	8000b40 <__aeabi_dcmple>
 80098ac:	b1a0      	cbz	r0, 80098d8 <_strtod_l+0xb50>
 80098ae:	4639      	mov	r1, r7
 80098b0:	4630      	mov	r0, r6
 80098b2:	f7f7 f9a1 	bl	8000bf8 <__aeabi_d2uiz>
 80098b6:	2801      	cmp	r0, #1
 80098b8:	bf38      	it	cc
 80098ba:	2001      	movcc	r0, #1
 80098bc:	f7f6 fe4a 	bl	8000554 <__aeabi_ui2d>
 80098c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098c2:	4606      	mov	r6, r0
 80098c4:	460f      	mov	r7, r1
 80098c6:	b9fb      	cbnz	r3, 8009908 <_strtod_l+0xb80>
 80098c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80098cc:	9014      	str	r0, [sp, #80]	@ 0x50
 80098ce:	9315      	str	r3, [sp, #84]	@ 0x54
 80098d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80098d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80098d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80098da:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80098de:	1b5b      	subs	r3, r3, r5
 80098e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80098e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80098e6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80098ea:	f7ff f8ef 	bl	8008acc <__ulp>
 80098ee:	4650      	mov	r0, sl
 80098f0:	ec53 2b10 	vmov	r2, r3, d0
 80098f4:	4659      	mov	r1, fp
 80098f6:	f7f6 fea7 	bl	8000648 <__aeabi_dmul>
 80098fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80098fe:	f7f6 fced 	bl	80002dc <__adddf3>
 8009902:	4682      	mov	sl, r0
 8009904:	468b      	mov	fp, r1
 8009906:	e770      	b.n	80097ea <_strtod_l+0xa62>
 8009908:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800990c:	e7e0      	b.n	80098d0 <_strtod_l+0xb48>
 800990e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009948 <_strtod_l+0xbc0>)
 8009910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009914:	f7f7 f90a 	bl	8000b2c <__aeabi_dcmplt>
 8009918:	e798      	b.n	800984c <_strtod_l+0xac4>
 800991a:	2300      	movs	r3, #0
 800991c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800991e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009920:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009922:	6013      	str	r3, [r2, #0]
 8009924:	f7ff ba6d 	b.w	8008e02 <_strtod_l+0x7a>
 8009928:	2a65      	cmp	r2, #101	@ 0x65
 800992a:	f43f ab66 	beq.w	8008ffa <_strtod_l+0x272>
 800992e:	2a45      	cmp	r2, #69	@ 0x45
 8009930:	f43f ab63 	beq.w	8008ffa <_strtod_l+0x272>
 8009934:	2301      	movs	r3, #1
 8009936:	f7ff bb9e 	b.w	8009076 <_strtod_l+0x2ee>
 800993a:	bf00      	nop
 800993c:	f3af 8000 	nop.w
 8009940:	ffc00000 	.word	0xffc00000
 8009944:	41dfffff 	.word	0x41dfffff
 8009948:	94a03595 	.word	0x94a03595
 800994c:	3fcfffff 	.word	0x3fcfffff

08009950 <_strtod_r>:
 8009950:	4b01      	ldr	r3, [pc, #4]	@ (8009958 <_strtod_r+0x8>)
 8009952:	f7ff ba19 	b.w	8008d88 <_strtod_l>
 8009956:	bf00      	nop
 8009958:	20000070 	.word	0x20000070

0800995c <_strtol_l.constprop.0>:
 800995c:	2b24      	cmp	r3, #36	@ 0x24
 800995e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009962:	4686      	mov	lr, r0
 8009964:	4690      	mov	r8, r2
 8009966:	d801      	bhi.n	800996c <_strtol_l.constprop.0+0x10>
 8009968:	2b01      	cmp	r3, #1
 800996a:	d106      	bne.n	800997a <_strtol_l.constprop.0+0x1e>
 800996c:	f7fd fe62 	bl	8007634 <__errno>
 8009970:	2316      	movs	r3, #22
 8009972:	6003      	str	r3, [r0, #0]
 8009974:	2000      	movs	r0, #0
 8009976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800997a:	4834      	ldr	r0, [pc, #208]	@ (8009a4c <_strtol_l.constprop.0+0xf0>)
 800997c:	460d      	mov	r5, r1
 800997e:	462a      	mov	r2, r5
 8009980:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009984:	5d06      	ldrb	r6, [r0, r4]
 8009986:	f016 0608 	ands.w	r6, r6, #8
 800998a:	d1f8      	bne.n	800997e <_strtol_l.constprop.0+0x22>
 800998c:	2c2d      	cmp	r4, #45	@ 0x2d
 800998e:	d12d      	bne.n	80099ec <_strtol_l.constprop.0+0x90>
 8009990:	782c      	ldrb	r4, [r5, #0]
 8009992:	2601      	movs	r6, #1
 8009994:	1c95      	adds	r5, r2, #2
 8009996:	f033 0210 	bics.w	r2, r3, #16
 800999a:	d109      	bne.n	80099b0 <_strtol_l.constprop.0+0x54>
 800999c:	2c30      	cmp	r4, #48	@ 0x30
 800999e:	d12a      	bne.n	80099f6 <_strtol_l.constprop.0+0x9a>
 80099a0:	782a      	ldrb	r2, [r5, #0]
 80099a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80099a6:	2a58      	cmp	r2, #88	@ 0x58
 80099a8:	d125      	bne.n	80099f6 <_strtol_l.constprop.0+0x9a>
 80099aa:	786c      	ldrb	r4, [r5, #1]
 80099ac:	2310      	movs	r3, #16
 80099ae:	3502      	adds	r5, #2
 80099b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80099b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80099b8:	2200      	movs	r2, #0
 80099ba:	fbbc f9f3 	udiv	r9, ip, r3
 80099be:	4610      	mov	r0, r2
 80099c0:	fb03 ca19 	mls	sl, r3, r9, ip
 80099c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80099c8:	2f09      	cmp	r7, #9
 80099ca:	d81b      	bhi.n	8009a04 <_strtol_l.constprop.0+0xa8>
 80099cc:	463c      	mov	r4, r7
 80099ce:	42a3      	cmp	r3, r4
 80099d0:	dd27      	ble.n	8009a22 <_strtol_l.constprop.0+0xc6>
 80099d2:	1c57      	adds	r7, r2, #1
 80099d4:	d007      	beq.n	80099e6 <_strtol_l.constprop.0+0x8a>
 80099d6:	4581      	cmp	r9, r0
 80099d8:	d320      	bcc.n	8009a1c <_strtol_l.constprop.0+0xc0>
 80099da:	d101      	bne.n	80099e0 <_strtol_l.constprop.0+0x84>
 80099dc:	45a2      	cmp	sl, r4
 80099de:	db1d      	blt.n	8009a1c <_strtol_l.constprop.0+0xc0>
 80099e0:	fb00 4003 	mla	r0, r0, r3, r4
 80099e4:	2201      	movs	r2, #1
 80099e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099ea:	e7eb      	b.n	80099c4 <_strtol_l.constprop.0+0x68>
 80099ec:	2c2b      	cmp	r4, #43	@ 0x2b
 80099ee:	bf04      	itt	eq
 80099f0:	782c      	ldrbeq	r4, [r5, #0]
 80099f2:	1c95      	addeq	r5, r2, #2
 80099f4:	e7cf      	b.n	8009996 <_strtol_l.constprop.0+0x3a>
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1da      	bne.n	80099b0 <_strtol_l.constprop.0+0x54>
 80099fa:	2c30      	cmp	r4, #48	@ 0x30
 80099fc:	bf0c      	ite	eq
 80099fe:	2308      	moveq	r3, #8
 8009a00:	230a      	movne	r3, #10
 8009a02:	e7d5      	b.n	80099b0 <_strtol_l.constprop.0+0x54>
 8009a04:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009a08:	2f19      	cmp	r7, #25
 8009a0a:	d801      	bhi.n	8009a10 <_strtol_l.constprop.0+0xb4>
 8009a0c:	3c37      	subs	r4, #55	@ 0x37
 8009a0e:	e7de      	b.n	80099ce <_strtol_l.constprop.0+0x72>
 8009a10:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009a14:	2f19      	cmp	r7, #25
 8009a16:	d804      	bhi.n	8009a22 <_strtol_l.constprop.0+0xc6>
 8009a18:	3c57      	subs	r4, #87	@ 0x57
 8009a1a:	e7d8      	b.n	80099ce <_strtol_l.constprop.0+0x72>
 8009a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a20:	e7e1      	b.n	80099e6 <_strtol_l.constprop.0+0x8a>
 8009a22:	1c53      	adds	r3, r2, #1
 8009a24:	d108      	bne.n	8009a38 <_strtol_l.constprop.0+0xdc>
 8009a26:	2322      	movs	r3, #34	@ 0x22
 8009a28:	f8ce 3000 	str.w	r3, [lr]
 8009a2c:	4660      	mov	r0, ip
 8009a2e:	f1b8 0f00 	cmp.w	r8, #0
 8009a32:	d0a0      	beq.n	8009976 <_strtol_l.constprop.0+0x1a>
 8009a34:	1e69      	subs	r1, r5, #1
 8009a36:	e006      	b.n	8009a46 <_strtol_l.constprop.0+0xea>
 8009a38:	b106      	cbz	r6, 8009a3c <_strtol_l.constprop.0+0xe0>
 8009a3a:	4240      	negs	r0, r0
 8009a3c:	f1b8 0f00 	cmp.w	r8, #0
 8009a40:	d099      	beq.n	8009976 <_strtol_l.constprop.0+0x1a>
 8009a42:	2a00      	cmp	r2, #0
 8009a44:	d1f6      	bne.n	8009a34 <_strtol_l.constprop.0+0xd8>
 8009a46:	f8c8 1000 	str.w	r1, [r8]
 8009a4a:	e794      	b.n	8009976 <_strtol_l.constprop.0+0x1a>
 8009a4c:	0800e2f1 	.word	0x0800e2f1

08009a50 <_strtol_r>:
 8009a50:	f7ff bf84 	b.w	800995c <_strtol_l.constprop.0>

08009a54 <__ssputs_r>:
 8009a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a58:	688e      	ldr	r6, [r1, #8]
 8009a5a:	461f      	mov	r7, r3
 8009a5c:	42be      	cmp	r6, r7
 8009a5e:	680b      	ldr	r3, [r1, #0]
 8009a60:	4682      	mov	sl, r0
 8009a62:	460c      	mov	r4, r1
 8009a64:	4690      	mov	r8, r2
 8009a66:	d82d      	bhi.n	8009ac4 <__ssputs_r+0x70>
 8009a68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009a70:	d026      	beq.n	8009ac0 <__ssputs_r+0x6c>
 8009a72:	6965      	ldr	r5, [r4, #20]
 8009a74:	6909      	ldr	r1, [r1, #16]
 8009a76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a7a:	eba3 0901 	sub.w	r9, r3, r1
 8009a7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a82:	1c7b      	adds	r3, r7, #1
 8009a84:	444b      	add	r3, r9
 8009a86:	106d      	asrs	r5, r5, #1
 8009a88:	429d      	cmp	r5, r3
 8009a8a:	bf38      	it	cc
 8009a8c:	461d      	movcc	r5, r3
 8009a8e:	0553      	lsls	r3, r2, #21
 8009a90:	d527      	bpl.n	8009ae2 <__ssputs_r+0x8e>
 8009a92:	4629      	mov	r1, r5
 8009a94:	f7fc fc4a 	bl	800632c <_malloc_r>
 8009a98:	4606      	mov	r6, r0
 8009a9a:	b360      	cbz	r0, 8009af6 <__ssputs_r+0xa2>
 8009a9c:	6921      	ldr	r1, [r4, #16]
 8009a9e:	464a      	mov	r2, r9
 8009aa0:	f7fd fdf5 	bl	800768e <memcpy>
 8009aa4:	89a3      	ldrh	r3, [r4, #12]
 8009aa6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009aae:	81a3      	strh	r3, [r4, #12]
 8009ab0:	6126      	str	r6, [r4, #16]
 8009ab2:	6165      	str	r5, [r4, #20]
 8009ab4:	444e      	add	r6, r9
 8009ab6:	eba5 0509 	sub.w	r5, r5, r9
 8009aba:	6026      	str	r6, [r4, #0]
 8009abc:	60a5      	str	r5, [r4, #8]
 8009abe:	463e      	mov	r6, r7
 8009ac0:	42be      	cmp	r6, r7
 8009ac2:	d900      	bls.n	8009ac6 <__ssputs_r+0x72>
 8009ac4:	463e      	mov	r6, r7
 8009ac6:	6820      	ldr	r0, [r4, #0]
 8009ac8:	4632      	mov	r2, r6
 8009aca:	4641      	mov	r1, r8
 8009acc:	f000 fb6a 	bl	800a1a4 <memmove>
 8009ad0:	68a3      	ldr	r3, [r4, #8]
 8009ad2:	1b9b      	subs	r3, r3, r6
 8009ad4:	60a3      	str	r3, [r4, #8]
 8009ad6:	6823      	ldr	r3, [r4, #0]
 8009ad8:	4433      	add	r3, r6
 8009ada:	6023      	str	r3, [r4, #0]
 8009adc:	2000      	movs	r0, #0
 8009ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae2:	462a      	mov	r2, r5
 8009ae4:	f000 ff31 	bl	800a94a <_realloc_r>
 8009ae8:	4606      	mov	r6, r0
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d1e0      	bne.n	8009ab0 <__ssputs_r+0x5c>
 8009aee:	6921      	ldr	r1, [r4, #16]
 8009af0:	4650      	mov	r0, sl
 8009af2:	f7fe fc2d 	bl	8008350 <_free_r>
 8009af6:	230c      	movs	r3, #12
 8009af8:	f8ca 3000 	str.w	r3, [sl]
 8009afc:	89a3      	ldrh	r3, [r4, #12]
 8009afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b02:	81a3      	strh	r3, [r4, #12]
 8009b04:	f04f 30ff 	mov.w	r0, #4294967295
 8009b08:	e7e9      	b.n	8009ade <__ssputs_r+0x8a>
	...

08009b0c <_svfiprintf_r>:
 8009b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b10:	4698      	mov	r8, r3
 8009b12:	898b      	ldrh	r3, [r1, #12]
 8009b14:	061b      	lsls	r3, r3, #24
 8009b16:	b09d      	sub	sp, #116	@ 0x74
 8009b18:	4607      	mov	r7, r0
 8009b1a:	460d      	mov	r5, r1
 8009b1c:	4614      	mov	r4, r2
 8009b1e:	d510      	bpl.n	8009b42 <_svfiprintf_r+0x36>
 8009b20:	690b      	ldr	r3, [r1, #16]
 8009b22:	b973      	cbnz	r3, 8009b42 <_svfiprintf_r+0x36>
 8009b24:	2140      	movs	r1, #64	@ 0x40
 8009b26:	f7fc fc01 	bl	800632c <_malloc_r>
 8009b2a:	6028      	str	r0, [r5, #0]
 8009b2c:	6128      	str	r0, [r5, #16]
 8009b2e:	b930      	cbnz	r0, 8009b3e <_svfiprintf_r+0x32>
 8009b30:	230c      	movs	r3, #12
 8009b32:	603b      	str	r3, [r7, #0]
 8009b34:	f04f 30ff 	mov.w	r0, #4294967295
 8009b38:	b01d      	add	sp, #116	@ 0x74
 8009b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b3e:	2340      	movs	r3, #64	@ 0x40
 8009b40:	616b      	str	r3, [r5, #20]
 8009b42:	2300      	movs	r3, #0
 8009b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b46:	2320      	movs	r3, #32
 8009b48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b50:	2330      	movs	r3, #48	@ 0x30
 8009b52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009cf0 <_svfiprintf_r+0x1e4>
 8009b56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b5a:	f04f 0901 	mov.w	r9, #1
 8009b5e:	4623      	mov	r3, r4
 8009b60:	469a      	mov	sl, r3
 8009b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b66:	b10a      	cbz	r2, 8009b6c <_svfiprintf_r+0x60>
 8009b68:	2a25      	cmp	r2, #37	@ 0x25
 8009b6a:	d1f9      	bne.n	8009b60 <_svfiprintf_r+0x54>
 8009b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8009b70:	d00b      	beq.n	8009b8a <_svfiprintf_r+0x7e>
 8009b72:	465b      	mov	r3, fp
 8009b74:	4622      	mov	r2, r4
 8009b76:	4629      	mov	r1, r5
 8009b78:	4638      	mov	r0, r7
 8009b7a:	f7ff ff6b 	bl	8009a54 <__ssputs_r>
 8009b7e:	3001      	adds	r0, #1
 8009b80:	f000 80a7 	beq.w	8009cd2 <_svfiprintf_r+0x1c6>
 8009b84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b86:	445a      	add	r2, fp
 8009b88:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	f000 809f 	beq.w	8009cd2 <_svfiprintf_r+0x1c6>
 8009b94:	2300      	movs	r3, #0
 8009b96:	f04f 32ff 	mov.w	r2, #4294967295
 8009b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b9e:	f10a 0a01 	add.w	sl, sl, #1
 8009ba2:	9304      	str	r3, [sp, #16]
 8009ba4:	9307      	str	r3, [sp, #28]
 8009ba6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009baa:	931a      	str	r3, [sp, #104]	@ 0x68
 8009bac:	4654      	mov	r4, sl
 8009bae:	2205      	movs	r2, #5
 8009bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bb4:	484e      	ldr	r0, [pc, #312]	@ (8009cf0 <_svfiprintf_r+0x1e4>)
 8009bb6:	f7f6 fb33 	bl	8000220 <memchr>
 8009bba:	9a04      	ldr	r2, [sp, #16]
 8009bbc:	b9d8      	cbnz	r0, 8009bf6 <_svfiprintf_r+0xea>
 8009bbe:	06d0      	lsls	r0, r2, #27
 8009bc0:	bf44      	itt	mi
 8009bc2:	2320      	movmi	r3, #32
 8009bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bc8:	0711      	lsls	r1, r2, #28
 8009bca:	bf44      	itt	mi
 8009bcc:	232b      	movmi	r3, #43	@ 0x2b
 8009bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8009bd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bd8:	d015      	beq.n	8009c06 <_svfiprintf_r+0xfa>
 8009bda:	9a07      	ldr	r2, [sp, #28]
 8009bdc:	4654      	mov	r4, sl
 8009bde:	2000      	movs	r0, #0
 8009be0:	f04f 0c0a 	mov.w	ip, #10
 8009be4:	4621      	mov	r1, r4
 8009be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bea:	3b30      	subs	r3, #48	@ 0x30
 8009bec:	2b09      	cmp	r3, #9
 8009bee:	d94b      	bls.n	8009c88 <_svfiprintf_r+0x17c>
 8009bf0:	b1b0      	cbz	r0, 8009c20 <_svfiprintf_r+0x114>
 8009bf2:	9207      	str	r2, [sp, #28]
 8009bf4:	e014      	b.n	8009c20 <_svfiprintf_r+0x114>
 8009bf6:	eba0 0308 	sub.w	r3, r0, r8
 8009bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	9304      	str	r3, [sp, #16]
 8009c02:	46a2      	mov	sl, r4
 8009c04:	e7d2      	b.n	8009bac <_svfiprintf_r+0xa0>
 8009c06:	9b03      	ldr	r3, [sp, #12]
 8009c08:	1d19      	adds	r1, r3, #4
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	9103      	str	r1, [sp, #12]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	bfbb      	ittet	lt
 8009c12:	425b      	neglt	r3, r3
 8009c14:	f042 0202 	orrlt.w	r2, r2, #2
 8009c18:	9307      	strge	r3, [sp, #28]
 8009c1a:	9307      	strlt	r3, [sp, #28]
 8009c1c:	bfb8      	it	lt
 8009c1e:	9204      	strlt	r2, [sp, #16]
 8009c20:	7823      	ldrb	r3, [r4, #0]
 8009c22:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c24:	d10a      	bne.n	8009c3c <_svfiprintf_r+0x130>
 8009c26:	7863      	ldrb	r3, [r4, #1]
 8009c28:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c2a:	d132      	bne.n	8009c92 <_svfiprintf_r+0x186>
 8009c2c:	9b03      	ldr	r3, [sp, #12]
 8009c2e:	1d1a      	adds	r2, r3, #4
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	9203      	str	r2, [sp, #12]
 8009c34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c38:	3402      	adds	r4, #2
 8009c3a:	9305      	str	r3, [sp, #20]
 8009c3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009d00 <_svfiprintf_r+0x1f4>
 8009c40:	7821      	ldrb	r1, [r4, #0]
 8009c42:	2203      	movs	r2, #3
 8009c44:	4650      	mov	r0, sl
 8009c46:	f7f6 faeb 	bl	8000220 <memchr>
 8009c4a:	b138      	cbz	r0, 8009c5c <_svfiprintf_r+0x150>
 8009c4c:	9b04      	ldr	r3, [sp, #16]
 8009c4e:	eba0 000a 	sub.w	r0, r0, sl
 8009c52:	2240      	movs	r2, #64	@ 0x40
 8009c54:	4082      	lsls	r2, r0
 8009c56:	4313      	orrs	r3, r2
 8009c58:	3401      	adds	r4, #1
 8009c5a:	9304      	str	r3, [sp, #16]
 8009c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c60:	4824      	ldr	r0, [pc, #144]	@ (8009cf4 <_svfiprintf_r+0x1e8>)
 8009c62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c66:	2206      	movs	r2, #6
 8009c68:	f7f6 fada 	bl	8000220 <memchr>
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	d036      	beq.n	8009cde <_svfiprintf_r+0x1d2>
 8009c70:	4b21      	ldr	r3, [pc, #132]	@ (8009cf8 <_svfiprintf_r+0x1ec>)
 8009c72:	bb1b      	cbnz	r3, 8009cbc <_svfiprintf_r+0x1b0>
 8009c74:	9b03      	ldr	r3, [sp, #12]
 8009c76:	3307      	adds	r3, #7
 8009c78:	f023 0307 	bic.w	r3, r3, #7
 8009c7c:	3308      	adds	r3, #8
 8009c7e:	9303      	str	r3, [sp, #12]
 8009c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c82:	4433      	add	r3, r6
 8009c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c86:	e76a      	b.n	8009b5e <_svfiprintf_r+0x52>
 8009c88:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c8c:	460c      	mov	r4, r1
 8009c8e:	2001      	movs	r0, #1
 8009c90:	e7a8      	b.n	8009be4 <_svfiprintf_r+0xd8>
 8009c92:	2300      	movs	r3, #0
 8009c94:	3401      	adds	r4, #1
 8009c96:	9305      	str	r3, [sp, #20]
 8009c98:	4619      	mov	r1, r3
 8009c9a:	f04f 0c0a 	mov.w	ip, #10
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ca4:	3a30      	subs	r2, #48	@ 0x30
 8009ca6:	2a09      	cmp	r2, #9
 8009ca8:	d903      	bls.n	8009cb2 <_svfiprintf_r+0x1a6>
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d0c6      	beq.n	8009c3c <_svfiprintf_r+0x130>
 8009cae:	9105      	str	r1, [sp, #20]
 8009cb0:	e7c4      	b.n	8009c3c <_svfiprintf_r+0x130>
 8009cb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cb6:	4604      	mov	r4, r0
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e7f0      	b.n	8009c9e <_svfiprintf_r+0x192>
 8009cbc:	ab03      	add	r3, sp, #12
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	462a      	mov	r2, r5
 8009cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8009cfc <_svfiprintf_r+0x1f0>)
 8009cc4:	a904      	add	r1, sp, #16
 8009cc6:	4638      	mov	r0, r7
 8009cc8:	f7fc fc5c 	bl	8006584 <_printf_float>
 8009ccc:	1c42      	adds	r2, r0, #1
 8009cce:	4606      	mov	r6, r0
 8009cd0:	d1d6      	bne.n	8009c80 <_svfiprintf_r+0x174>
 8009cd2:	89ab      	ldrh	r3, [r5, #12]
 8009cd4:	065b      	lsls	r3, r3, #25
 8009cd6:	f53f af2d 	bmi.w	8009b34 <_svfiprintf_r+0x28>
 8009cda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009cdc:	e72c      	b.n	8009b38 <_svfiprintf_r+0x2c>
 8009cde:	ab03      	add	r3, sp, #12
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	462a      	mov	r2, r5
 8009ce4:	4b05      	ldr	r3, [pc, #20]	@ (8009cfc <_svfiprintf_r+0x1f0>)
 8009ce6:	a904      	add	r1, sp, #16
 8009ce8:	4638      	mov	r0, r7
 8009cea:	f7fc fee3 	bl	8006ab4 <_printf_i>
 8009cee:	e7ed      	b.n	8009ccc <_svfiprintf_r+0x1c0>
 8009cf0:	0800e3f1 	.word	0x0800e3f1
 8009cf4:	0800e3fb 	.word	0x0800e3fb
 8009cf8:	08006585 	.word	0x08006585
 8009cfc:	08009a55 	.word	0x08009a55
 8009d00:	0800e3f7 	.word	0x0800e3f7

08009d04 <__sfputc_r>:
 8009d04:	6893      	ldr	r3, [r2, #8]
 8009d06:	3b01      	subs	r3, #1
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	b410      	push	{r4}
 8009d0c:	6093      	str	r3, [r2, #8]
 8009d0e:	da08      	bge.n	8009d22 <__sfputc_r+0x1e>
 8009d10:	6994      	ldr	r4, [r2, #24]
 8009d12:	42a3      	cmp	r3, r4
 8009d14:	db01      	blt.n	8009d1a <__sfputc_r+0x16>
 8009d16:	290a      	cmp	r1, #10
 8009d18:	d103      	bne.n	8009d22 <__sfputc_r+0x1e>
 8009d1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d1e:	f7fd bb92 	b.w	8007446 <__swbuf_r>
 8009d22:	6813      	ldr	r3, [r2, #0]
 8009d24:	1c58      	adds	r0, r3, #1
 8009d26:	6010      	str	r0, [r2, #0]
 8009d28:	7019      	strb	r1, [r3, #0]
 8009d2a:	4608      	mov	r0, r1
 8009d2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d30:	4770      	bx	lr

08009d32 <__sfputs_r>:
 8009d32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d34:	4606      	mov	r6, r0
 8009d36:	460f      	mov	r7, r1
 8009d38:	4614      	mov	r4, r2
 8009d3a:	18d5      	adds	r5, r2, r3
 8009d3c:	42ac      	cmp	r4, r5
 8009d3e:	d101      	bne.n	8009d44 <__sfputs_r+0x12>
 8009d40:	2000      	movs	r0, #0
 8009d42:	e007      	b.n	8009d54 <__sfputs_r+0x22>
 8009d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d48:	463a      	mov	r2, r7
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	f7ff ffda 	bl	8009d04 <__sfputc_r>
 8009d50:	1c43      	adds	r3, r0, #1
 8009d52:	d1f3      	bne.n	8009d3c <__sfputs_r+0xa>
 8009d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d58 <_vfiprintf_r>:
 8009d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5c:	460d      	mov	r5, r1
 8009d5e:	b09d      	sub	sp, #116	@ 0x74
 8009d60:	4614      	mov	r4, r2
 8009d62:	4698      	mov	r8, r3
 8009d64:	4606      	mov	r6, r0
 8009d66:	b118      	cbz	r0, 8009d70 <_vfiprintf_r+0x18>
 8009d68:	6a03      	ldr	r3, [r0, #32]
 8009d6a:	b90b      	cbnz	r3, 8009d70 <_vfiprintf_r+0x18>
 8009d6c:	f7fd fa62 	bl	8007234 <__sinit>
 8009d70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d72:	07d9      	lsls	r1, r3, #31
 8009d74:	d405      	bmi.n	8009d82 <_vfiprintf_r+0x2a>
 8009d76:	89ab      	ldrh	r3, [r5, #12]
 8009d78:	059a      	lsls	r2, r3, #22
 8009d7a:	d402      	bmi.n	8009d82 <_vfiprintf_r+0x2a>
 8009d7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d7e:	f7fd fc84 	bl	800768a <__retarget_lock_acquire_recursive>
 8009d82:	89ab      	ldrh	r3, [r5, #12]
 8009d84:	071b      	lsls	r3, r3, #28
 8009d86:	d501      	bpl.n	8009d8c <_vfiprintf_r+0x34>
 8009d88:	692b      	ldr	r3, [r5, #16]
 8009d8a:	b99b      	cbnz	r3, 8009db4 <_vfiprintf_r+0x5c>
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	4630      	mov	r0, r6
 8009d90:	f7fd fb98 	bl	80074c4 <__swsetup_r>
 8009d94:	b170      	cbz	r0, 8009db4 <_vfiprintf_r+0x5c>
 8009d96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d98:	07dc      	lsls	r4, r3, #31
 8009d9a:	d504      	bpl.n	8009da6 <_vfiprintf_r+0x4e>
 8009d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009da0:	b01d      	add	sp, #116	@ 0x74
 8009da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da6:	89ab      	ldrh	r3, [r5, #12]
 8009da8:	0598      	lsls	r0, r3, #22
 8009daa:	d4f7      	bmi.n	8009d9c <_vfiprintf_r+0x44>
 8009dac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009dae:	f7fd fc6d 	bl	800768c <__retarget_lock_release_recursive>
 8009db2:	e7f3      	b.n	8009d9c <_vfiprintf_r+0x44>
 8009db4:	2300      	movs	r3, #0
 8009db6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009db8:	2320      	movs	r3, #32
 8009dba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009dbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dc2:	2330      	movs	r3, #48	@ 0x30
 8009dc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009f74 <_vfiprintf_r+0x21c>
 8009dc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009dcc:	f04f 0901 	mov.w	r9, #1
 8009dd0:	4623      	mov	r3, r4
 8009dd2:	469a      	mov	sl, r3
 8009dd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dd8:	b10a      	cbz	r2, 8009dde <_vfiprintf_r+0x86>
 8009dda:	2a25      	cmp	r2, #37	@ 0x25
 8009ddc:	d1f9      	bne.n	8009dd2 <_vfiprintf_r+0x7a>
 8009dde:	ebba 0b04 	subs.w	fp, sl, r4
 8009de2:	d00b      	beq.n	8009dfc <_vfiprintf_r+0xa4>
 8009de4:	465b      	mov	r3, fp
 8009de6:	4622      	mov	r2, r4
 8009de8:	4629      	mov	r1, r5
 8009dea:	4630      	mov	r0, r6
 8009dec:	f7ff ffa1 	bl	8009d32 <__sfputs_r>
 8009df0:	3001      	adds	r0, #1
 8009df2:	f000 80a7 	beq.w	8009f44 <_vfiprintf_r+0x1ec>
 8009df6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009df8:	445a      	add	r2, fp
 8009dfa:	9209      	str	r2, [sp, #36]	@ 0x24
 8009dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f000 809f 	beq.w	8009f44 <_vfiprintf_r+0x1ec>
 8009e06:	2300      	movs	r3, #0
 8009e08:	f04f 32ff 	mov.w	r2, #4294967295
 8009e0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e10:	f10a 0a01 	add.w	sl, sl, #1
 8009e14:	9304      	str	r3, [sp, #16]
 8009e16:	9307      	str	r3, [sp, #28]
 8009e18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e1e:	4654      	mov	r4, sl
 8009e20:	2205      	movs	r2, #5
 8009e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e26:	4853      	ldr	r0, [pc, #332]	@ (8009f74 <_vfiprintf_r+0x21c>)
 8009e28:	f7f6 f9fa 	bl	8000220 <memchr>
 8009e2c:	9a04      	ldr	r2, [sp, #16]
 8009e2e:	b9d8      	cbnz	r0, 8009e68 <_vfiprintf_r+0x110>
 8009e30:	06d1      	lsls	r1, r2, #27
 8009e32:	bf44      	itt	mi
 8009e34:	2320      	movmi	r3, #32
 8009e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e3a:	0713      	lsls	r3, r2, #28
 8009e3c:	bf44      	itt	mi
 8009e3e:	232b      	movmi	r3, #43	@ 0x2b
 8009e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e44:	f89a 3000 	ldrb.w	r3, [sl]
 8009e48:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e4a:	d015      	beq.n	8009e78 <_vfiprintf_r+0x120>
 8009e4c:	9a07      	ldr	r2, [sp, #28]
 8009e4e:	4654      	mov	r4, sl
 8009e50:	2000      	movs	r0, #0
 8009e52:	f04f 0c0a 	mov.w	ip, #10
 8009e56:	4621      	mov	r1, r4
 8009e58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e5c:	3b30      	subs	r3, #48	@ 0x30
 8009e5e:	2b09      	cmp	r3, #9
 8009e60:	d94b      	bls.n	8009efa <_vfiprintf_r+0x1a2>
 8009e62:	b1b0      	cbz	r0, 8009e92 <_vfiprintf_r+0x13a>
 8009e64:	9207      	str	r2, [sp, #28]
 8009e66:	e014      	b.n	8009e92 <_vfiprintf_r+0x13a>
 8009e68:	eba0 0308 	sub.w	r3, r0, r8
 8009e6c:	fa09 f303 	lsl.w	r3, r9, r3
 8009e70:	4313      	orrs	r3, r2
 8009e72:	9304      	str	r3, [sp, #16]
 8009e74:	46a2      	mov	sl, r4
 8009e76:	e7d2      	b.n	8009e1e <_vfiprintf_r+0xc6>
 8009e78:	9b03      	ldr	r3, [sp, #12]
 8009e7a:	1d19      	adds	r1, r3, #4
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	9103      	str	r1, [sp, #12]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	bfbb      	ittet	lt
 8009e84:	425b      	neglt	r3, r3
 8009e86:	f042 0202 	orrlt.w	r2, r2, #2
 8009e8a:	9307      	strge	r3, [sp, #28]
 8009e8c:	9307      	strlt	r3, [sp, #28]
 8009e8e:	bfb8      	it	lt
 8009e90:	9204      	strlt	r2, [sp, #16]
 8009e92:	7823      	ldrb	r3, [r4, #0]
 8009e94:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e96:	d10a      	bne.n	8009eae <_vfiprintf_r+0x156>
 8009e98:	7863      	ldrb	r3, [r4, #1]
 8009e9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e9c:	d132      	bne.n	8009f04 <_vfiprintf_r+0x1ac>
 8009e9e:	9b03      	ldr	r3, [sp, #12]
 8009ea0:	1d1a      	adds	r2, r3, #4
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	9203      	str	r2, [sp, #12]
 8009ea6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009eaa:	3402      	adds	r4, #2
 8009eac:	9305      	str	r3, [sp, #20]
 8009eae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009f84 <_vfiprintf_r+0x22c>
 8009eb2:	7821      	ldrb	r1, [r4, #0]
 8009eb4:	2203      	movs	r2, #3
 8009eb6:	4650      	mov	r0, sl
 8009eb8:	f7f6 f9b2 	bl	8000220 <memchr>
 8009ebc:	b138      	cbz	r0, 8009ece <_vfiprintf_r+0x176>
 8009ebe:	9b04      	ldr	r3, [sp, #16]
 8009ec0:	eba0 000a 	sub.w	r0, r0, sl
 8009ec4:	2240      	movs	r2, #64	@ 0x40
 8009ec6:	4082      	lsls	r2, r0
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	3401      	adds	r4, #1
 8009ecc:	9304      	str	r3, [sp, #16]
 8009ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ed2:	4829      	ldr	r0, [pc, #164]	@ (8009f78 <_vfiprintf_r+0x220>)
 8009ed4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ed8:	2206      	movs	r2, #6
 8009eda:	f7f6 f9a1 	bl	8000220 <memchr>
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	d03f      	beq.n	8009f62 <_vfiprintf_r+0x20a>
 8009ee2:	4b26      	ldr	r3, [pc, #152]	@ (8009f7c <_vfiprintf_r+0x224>)
 8009ee4:	bb1b      	cbnz	r3, 8009f2e <_vfiprintf_r+0x1d6>
 8009ee6:	9b03      	ldr	r3, [sp, #12]
 8009ee8:	3307      	adds	r3, #7
 8009eea:	f023 0307 	bic.w	r3, r3, #7
 8009eee:	3308      	adds	r3, #8
 8009ef0:	9303      	str	r3, [sp, #12]
 8009ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ef4:	443b      	add	r3, r7
 8009ef6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ef8:	e76a      	b.n	8009dd0 <_vfiprintf_r+0x78>
 8009efa:	fb0c 3202 	mla	r2, ip, r2, r3
 8009efe:	460c      	mov	r4, r1
 8009f00:	2001      	movs	r0, #1
 8009f02:	e7a8      	b.n	8009e56 <_vfiprintf_r+0xfe>
 8009f04:	2300      	movs	r3, #0
 8009f06:	3401      	adds	r4, #1
 8009f08:	9305      	str	r3, [sp, #20]
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	f04f 0c0a 	mov.w	ip, #10
 8009f10:	4620      	mov	r0, r4
 8009f12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f16:	3a30      	subs	r2, #48	@ 0x30
 8009f18:	2a09      	cmp	r2, #9
 8009f1a:	d903      	bls.n	8009f24 <_vfiprintf_r+0x1cc>
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d0c6      	beq.n	8009eae <_vfiprintf_r+0x156>
 8009f20:	9105      	str	r1, [sp, #20]
 8009f22:	e7c4      	b.n	8009eae <_vfiprintf_r+0x156>
 8009f24:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f28:	4604      	mov	r4, r0
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e7f0      	b.n	8009f10 <_vfiprintf_r+0x1b8>
 8009f2e:	ab03      	add	r3, sp, #12
 8009f30:	9300      	str	r3, [sp, #0]
 8009f32:	462a      	mov	r2, r5
 8009f34:	4b12      	ldr	r3, [pc, #72]	@ (8009f80 <_vfiprintf_r+0x228>)
 8009f36:	a904      	add	r1, sp, #16
 8009f38:	4630      	mov	r0, r6
 8009f3a:	f7fc fb23 	bl	8006584 <_printf_float>
 8009f3e:	4607      	mov	r7, r0
 8009f40:	1c78      	adds	r0, r7, #1
 8009f42:	d1d6      	bne.n	8009ef2 <_vfiprintf_r+0x19a>
 8009f44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f46:	07d9      	lsls	r1, r3, #31
 8009f48:	d405      	bmi.n	8009f56 <_vfiprintf_r+0x1fe>
 8009f4a:	89ab      	ldrh	r3, [r5, #12]
 8009f4c:	059a      	lsls	r2, r3, #22
 8009f4e:	d402      	bmi.n	8009f56 <_vfiprintf_r+0x1fe>
 8009f50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f52:	f7fd fb9b 	bl	800768c <__retarget_lock_release_recursive>
 8009f56:	89ab      	ldrh	r3, [r5, #12]
 8009f58:	065b      	lsls	r3, r3, #25
 8009f5a:	f53f af1f 	bmi.w	8009d9c <_vfiprintf_r+0x44>
 8009f5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f60:	e71e      	b.n	8009da0 <_vfiprintf_r+0x48>
 8009f62:	ab03      	add	r3, sp, #12
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	462a      	mov	r2, r5
 8009f68:	4b05      	ldr	r3, [pc, #20]	@ (8009f80 <_vfiprintf_r+0x228>)
 8009f6a:	a904      	add	r1, sp, #16
 8009f6c:	4630      	mov	r0, r6
 8009f6e:	f7fc fda1 	bl	8006ab4 <_printf_i>
 8009f72:	e7e4      	b.n	8009f3e <_vfiprintf_r+0x1e6>
 8009f74:	0800e3f1 	.word	0x0800e3f1
 8009f78:	0800e3fb 	.word	0x0800e3fb
 8009f7c:	08006585 	.word	0x08006585
 8009f80:	08009d33 	.word	0x08009d33
 8009f84:	0800e3f7 	.word	0x0800e3f7

08009f88 <__sflush_r>:
 8009f88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f90:	0716      	lsls	r6, r2, #28
 8009f92:	4605      	mov	r5, r0
 8009f94:	460c      	mov	r4, r1
 8009f96:	d454      	bmi.n	800a042 <__sflush_r+0xba>
 8009f98:	684b      	ldr	r3, [r1, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	dc02      	bgt.n	8009fa4 <__sflush_r+0x1c>
 8009f9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	dd48      	ble.n	800a036 <__sflush_r+0xae>
 8009fa4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009fa6:	2e00      	cmp	r6, #0
 8009fa8:	d045      	beq.n	800a036 <__sflush_r+0xae>
 8009faa:	2300      	movs	r3, #0
 8009fac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009fb0:	682f      	ldr	r7, [r5, #0]
 8009fb2:	6a21      	ldr	r1, [r4, #32]
 8009fb4:	602b      	str	r3, [r5, #0]
 8009fb6:	d030      	beq.n	800a01a <__sflush_r+0x92>
 8009fb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009fba:	89a3      	ldrh	r3, [r4, #12]
 8009fbc:	0759      	lsls	r1, r3, #29
 8009fbe:	d505      	bpl.n	8009fcc <__sflush_r+0x44>
 8009fc0:	6863      	ldr	r3, [r4, #4]
 8009fc2:	1ad2      	subs	r2, r2, r3
 8009fc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009fc6:	b10b      	cbz	r3, 8009fcc <__sflush_r+0x44>
 8009fc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009fca:	1ad2      	subs	r2, r2, r3
 8009fcc:	2300      	movs	r3, #0
 8009fce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009fd0:	6a21      	ldr	r1, [r4, #32]
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	47b0      	blx	r6
 8009fd6:	1c43      	adds	r3, r0, #1
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	d106      	bne.n	8009fea <__sflush_r+0x62>
 8009fdc:	6829      	ldr	r1, [r5, #0]
 8009fde:	291d      	cmp	r1, #29
 8009fe0:	d82b      	bhi.n	800a03a <__sflush_r+0xb2>
 8009fe2:	4a2a      	ldr	r2, [pc, #168]	@ (800a08c <__sflush_r+0x104>)
 8009fe4:	410a      	asrs	r2, r1
 8009fe6:	07d6      	lsls	r6, r2, #31
 8009fe8:	d427      	bmi.n	800a03a <__sflush_r+0xb2>
 8009fea:	2200      	movs	r2, #0
 8009fec:	6062      	str	r2, [r4, #4]
 8009fee:	04d9      	lsls	r1, r3, #19
 8009ff0:	6922      	ldr	r2, [r4, #16]
 8009ff2:	6022      	str	r2, [r4, #0]
 8009ff4:	d504      	bpl.n	800a000 <__sflush_r+0x78>
 8009ff6:	1c42      	adds	r2, r0, #1
 8009ff8:	d101      	bne.n	8009ffe <__sflush_r+0x76>
 8009ffa:	682b      	ldr	r3, [r5, #0]
 8009ffc:	b903      	cbnz	r3, 800a000 <__sflush_r+0x78>
 8009ffe:	6560      	str	r0, [r4, #84]	@ 0x54
 800a000:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a002:	602f      	str	r7, [r5, #0]
 800a004:	b1b9      	cbz	r1, 800a036 <__sflush_r+0xae>
 800a006:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a00a:	4299      	cmp	r1, r3
 800a00c:	d002      	beq.n	800a014 <__sflush_r+0x8c>
 800a00e:	4628      	mov	r0, r5
 800a010:	f7fe f99e 	bl	8008350 <_free_r>
 800a014:	2300      	movs	r3, #0
 800a016:	6363      	str	r3, [r4, #52]	@ 0x34
 800a018:	e00d      	b.n	800a036 <__sflush_r+0xae>
 800a01a:	2301      	movs	r3, #1
 800a01c:	4628      	mov	r0, r5
 800a01e:	47b0      	blx	r6
 800a020:	4602      	mov	r2, r0
 800a022:	1c50      	adds	r0, r2, #1
 800a024:	d1c9      	bne.n	8009fba <__sflush_r+0x32>
 800a026:	682b      	ldr	r3, [r5, #0]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d0c6      	beq.n	8009fba <__sflush_r+0x32>
 800a02c:	2b1d      	cmp	r3, #29
 800a02e:	d001      	beq.n	800a034 <__sflush_r+0xac>
 800a030:	2b16      	cmp	r3, #22
 800a032:	d11e      	bne.n	800a072 <__sflush_r+0xea>
 800a034:	602f      	str	r7, [r5, #0]
 800a036:	2000      	movs	r0, #0
 800a038:	e022      	b.n	800a080 <__sflush_r+0xf8>
 800a03a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a03e:	b21b      	sxth	r3, r3
 800a040:	e01b      	b.n	800a07a <__sflush_r+0xf2>
 800a042:	690f      	ldr	r7, [r1, #16]
 800a044:	2f00      	cmp	r7, #0
 800a046:	d0f6      	beq.n	800a036 <__sflush_r+0xae>
 800a048:	0793      	lsls	r3, r2, #30
 800a04a:	680e      	ldr	r6, [r1, #0]
 800a04c:	bf08      	it	eq
 800a04e:	694b      	ldreq	r3, [r1, #20]
 800a050:	600f      	str	r7, [r1, #0]
 800a052:	bf18      	it	ne
 800a054:	2300      	movne	r3, #0
 800a056:	eba6 0807 	sub.w	r8, r6, r7
 800a05a:	608b      	str	r3, [r1, #8]
 800a05c:	f1b8 0f00 	cmp.w	r8, #0
 800a060:	dde9      	ble.n	800a036 <__sflush_r+0xae>
 800a062:	6a21      	ldr	r1, [r4, #32]
 800a064:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a066:	4643      	mov	r3, r8
 800a068:	463a      	mov	r2, r7
 800a06a:	4628      	mov	r0, r5
 800a06c:	47b0      	blx	r6
 800a06e:	2800      	cmp	r0, #0
 800a070:	dc08      	bgt.n	800a084 <__sflush_r+0xfc>
 800a072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a07a:	81a3      	strh	r3, [r4, #12]
 800a07c:	f04f 30ff 	mov.w	r0, #4294967295
 800a080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a084:	4407      	add	r7, r0
 800a086:	eba8 0800 	sub.w	r8, r8, r0
 800a08a:	e7e7      	b.n	800a05c <__sflush_r+0xd4>
 800a08c:	dfbffffe 	.word	0xdfbffffe

0800a090 <_fflush_r>:
 800a090:	b538      	push	{r3, r4, r5, lr}
 800a092:	690b      	ldr	r3, [r1, #16]
 800a094:	4605      	mov	r5, r0
 800a096:	460c      	mov	r4, r1
 800a098:	b913      	cbnz	r3, 800a0a0 <_fflush_r+0x10>
 800a09a:	2500      	movs	r5, #0
 800a09c:	4628      	mov	r0, r5
 800a09e:	bd38      	pop	{r3, r4, r5, pc}
 800a0a0:	b118      	cbz	r0, 800a0aa <_fflush_r+0x1a>
 800a0a2:	6a03      	ldr	r3, [r0, #32]
 800a0a4:	b90b      	cbnz	r3, 800a0aa <_fflush_r+0x1a>
 800a0a6:	f7fd f8c5 	bl	8007234 <__sinit>
 800a0aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d0f3      	beq.n	800a09a <_fflush_r+0xa>
 800a0b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a0b4:	07d0      	lsls	r0, r2, #31
 800a0b6:	d404      	bmi.n	800a0c2 <_fflush_r+0x32>
 800a0b8:	0599      	lsls	r1, r3, #22
 800a0ba:	d402      	bmi.n	800a0c2 <_fflush_r+0x32>
 800a0bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0be:	f7fd fae4 	bl	800768a <__retarget_lock_acquire_recursive>
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	f7ff ff5f 	bl	8009f88 <__sflush_r>
 800a0ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a0cc:	07da      	lsls	r2, r3, #31
 800a0ce:	4605      	mov	r5, r0
 800a0d0:	d4e4      	bmi.n	800a09c <_fflush_r+0xc>
 800a0d2:	89a3      	ldrh	r3, [r4, #12]
 800a0d4:	059b      	lsls	r3, r3, #22
 800a0d6:	d4e1      	bmi.n	800a09c <_fflush_r+0xc>
 800a0d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0da:	f7fd fad7 	bl	800768c <__retarget_lock_release_recursive>
 800a0de:	e7dd      	b.n	800a09c <_fflush_r+0xc>

0800a0e0 <__swhatbuf_r>:
 800a0e0:	b570      	push	{r4, r5, r6, lr}
 800a0e2:	460c      	mov	r4, r1
 800a0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0e8:	2900      	cmp	r1, #0
 800a0ea:	b096      	sub	sp, #88	@ 0x58
 800a0ec:	4615      	mov	r5, r2
 800a0ee:	461e      	mov	r6, r3
 800a0f0:	da0d      	bge.n	800a10e <__swhatbuf_r+0x2e>
 800a0f2:	89a3      	ldrh	r3, [r4, #12]
 800a0f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a0f8:	f04f 0100 	mov.w	r1, #0
 800a0fc:	bf14      	ite	ne
 800a0fe:	2340      	movne	r3, #64	@ 0x40
 800a100:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a104:	2000      	movs	r0, #0
 800a106:	6031      	str	r1, [r6, #0]
 800a108:	602b      	str	r3, [r5, #0]
 800a10a:	b016      	add	sp, #88	@ 0x58
 800a10c:	bd70      	pop	{r4, r5, r6, pc}
 800a10e:	466a      	mov	r2, sp
 800a110:	f000 f874 	bl	800a1fc <_fstat_r>
 800a114:	2800      	cmp	r0, #0
 800a116:	dbec      	blt.n	800a0f2 <__swhatbuf_r+0x12>
 800a118:	9901      	ldr	r1, [sp, #4]
 800a11a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a11e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a122:	4259      	negs	r1, r3
 800a124:	4159      	adcs	r1, r3
 800a126:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a12a:	e7eb      	b.n	800a104 <__swhatbuf_r+0x24>

0800a12c <__smakebuf_r>:
 800a12c:	898b      	ldrh	r3, [r1, #12]
 800a12e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a130:	079d      	lsls	r5, r3, #30
 800a132:	4606      	mov	r6, r0
 800a134:	460c      	mov	r4, r1
 800a136:	d507      	bpl.n	800a148 <__smakebuf_r+0x1c>
 800a138:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a13c:	6023      	str	r3, [r4, #0]
 800a13e:	6123      	str	r3, [r4, #16]
 800a140:	2301      	movs	r3, #1
 800a142:	6163      	str	r3, [r4, #20]
 800a144:	b003      	add	sp, #12
 800a146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a148:	ab01      	add	r3, sp, #4
 800a14a:	466a      	mov	r2, sp
 800a14c:	f7ff ffc8 	bl	800a0e0 <__swhatbuf_r>
 800a150:	9f00      	ldr	r7, [sp, #0]
 800a152:	4605      	mov	r5, r0
 800a154:	4639      	mov	r1, r7
 800a156:	4630      	mov	r0, r6
 800a158:	f7fc f8e8 	bl	800632c <_malloc_r>
 800a15c:	b948      	cbnz	r0, 800a172 <__smakebuf_r+0x46>
 800a15e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a162:	059a      	lsls	r2, r3, #22
 800a164:	d4ee      	bmi.n	800a144 <__smakebuf_r+0x18>
 800a166:	f023 0303 	bic.w	r3, r3, #3
 800a16a:	f043 0302 	orr.w	r3, r3, #2
 800a16e:	81a3      	strh	r3, [r4, #12]
 800a170:	e7e2      	b.n	800a138 <__smakebuf_r+0xc>
 800a172:	89a3      	ldrh	r3, [r4, #12]
 800a174:	6020      	str	r0, [r4, #0]
 800a176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a17a:	81a3      	strh	r3, [r4, #12]
 800a17c:	9b01      	ldr	r3, [sp, #4]
 800a17e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a182:	b15b      	cbz	r3, 800a19c <__smakebuf_r+0x70>
 800a184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a188:	4630      	mov	r0, r6
 800a18a:	f000 f849 	bl	800a220 <_isatty_r>
 800a18e:	b128      	cbz	r0, 800a19c <__smakebuf_r+0x70>
 800a190:	89a3      	ldrh	r3, [r4, #12]
 800a192:	f023 0303 	bic.w	r3, r3, #3
 800a196:	f043 0301 	orr.w	r3, r3, #1
 800a19a:	81a3      	strh	r3, [r4, #12]
 800a19c:	89a3      	ldrh	r3, [r4, #12]
 800a19e:	431d      	orrs	r5, r3
 800a1a0:	81a5      	strh	r5, [r4, #12]
 800a1a2:	e7cf      	b.n	800a144 <__smakebuf_r+0x18>

0800a1a4 <memmove>:
 800a1a4:	4288      	cmp	r0, r1
 800a1a6:	b510      	push	{r4, lr}
 800a1a8:	eb01 0402 	add.w	r4, r1, r2
 800a1ac:	d902      	bls.n	800a1b4 <memmove+0x10>
 800a1ae:	4284      	cmp	r4, r0
 800a1b0:	4623      	mov	r3, r4
 800a1b2:	d807      	bhi.n	800a1c4 <memmove+0x20>
 800a1b4:	1e43      	subs	r3, r0, #1
 800a1b6:	42a1      	cmp	r1, r4
 800a1b8:	d008      	beq.n	800a1cc <memmove+0x28>
 800a1ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1c2:	e7f8      	b.n	800a1b6 <memmove+0x12>
 800a1c4:	4402      	add	r2, r0
 800a1c6:	4601      	mov	r1, r0
 800a1c8:	428a      	cmp	r2, r1
 800a1ca:	d100      	bne.n	800a1ce <memmove+0x2a>
 800a1cc:	bd10      	pop	{r4, pc}
 800a1ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1d6:	e7f7      	b.n	800a1c8 <memmove+0x24>

0800a1d8 <strncmp>:
 800a1d8:	b510      	push	{r4, lr}
 800a1da:	b16a      	cbz	r2, 800a1f8 <strncmp+0x20>
 800a1dc:	3901      	subs	r1, #1
 800a1de:	1884      	adds	r4, r0, r2
 800a1e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1e4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d103      	bne.n	800a1f4 <strncmp+0x1c>
 800a1ec:	42a0      	cmp	r0, r4
 800a1ee:	d001      	beq.n	800a1f4 <strncmp+0x1c>
 800a1f0:	2a00      	cmp	r2, #0
 800a1f2:	d1f5      	bne.n	800a1e0 <strncmp+0x8>
 800a1f4:	1ad0      	subs	r0, r2, r3
 800a1f6:	bd10      	pop	{r4, pc}
 800a1f8:	4610      	mov	r0, r2
 800a1fa:	e7fc      	b.n	800a1f6 <strncmp+0x1e>

0800a1fc <_fstat_r>:
 800a1fc:	b538      	push	{r3, r4, r5, lr}
 800a1fe:	4d07      	ldr	r5, [pc, #28]	@ (800a21c <_fstat_r+0x20>)
 800a200:	2300      	movs	r3, #0
 800a202:	4604      	mov	r4, r0
 800a204:	4608      	mov	r0, r1
 800a206:	4611      	mov	r1, r2
 800a208:	602b      	str	r3, [r5, #0]
 800a20a:	f7f8 face 	bl	80027aa <_fstat>
 800a20e:	1c43      	adds	r3, r0, #1
 800a210:	d102      	bne.n	800a218 <_fstat_r+0x1c>
 800a212:	682b      	ldr	r3, [r5, #0]
 800a214:	b103      	cbz	r3, 800a218 <_fstat_r+0x1c>
 800a216:	6023      	str	r3, [r4, #0]
 800a218:	bd38      	pop	{r3, r4, r5, pc}
 800a21a:	bf00      	nop
 800a21c:	20000938 	.word	0x20000938

0800a220 <_isatty_r>:
 800a220:	b538      	push	{r3, r4, r5, lr}
 800a222:	4d06      	ldr	r5, [pc, #24]	@ (800a23c <_isatty_r+0x1c>)
 800a224:	2300      	movs	r3, #0
 800a226:	4604      	mov	r4, r0
 800a228:	4608      	mov	r0, r1
 800a22a:	602b      	str	r3, [r5, #0]
 800a22c:	f7f8 facd 	bl	80027ca <_isatty>
 800a230:	1c43      	adds	r3, r0, #1
 800a232:	d102      	bne.n	800a23a <_isatty_r+0x1a>
 800a234:	682b      	ldr	r3, [r5, #0]
 800a236:	b103      	cbz	r3, 800a23a <_isatty_r+0x1a>
 800a238:	6023      	str	r3, [r4, #0]
 800a23a:	bd38      	pop	{r3, r4, r5, pc}
 800a23c:	20000938 	.word	0x20000938

0800a240 <nan>:
 800a240:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a248 <nan+0x8>
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	00000000 	.word	0x00000000
 800a24c:	7ff80000 	.word	0x7ff80000

0800a250 <__assert_func>:
 800a250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a252:	4614      	mov	r4, r2
 800a254:	461a      	mov	r2, r3
 800a256:	4b09      	ldr	r3, [pc, #36]	@ (800a27c <__assert_func+0x2c>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4605      	mov	r5, r0
 800a25c:	68d8      	ldr	r0, [r3, #12]
 800a25e:	b954      	cbnz	r4, 800a276 <__assert_func+0x26>
 800a260:	4b07      	ldr	r3, [pc, #28]	@ (800a280 <__assert_func+0x30>)
 800a262:	461c      	mov	r4, r3
 800a264:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a268:	9100      	str	r1, [sp, #0]
 800a26a:	462b      	mov	r3, r5
 800a26c:	4905      	ldr	r1, [pc, #20]	@ (800a284 <__assert_func+0x34>)
 800a26e:	f000 fba7 	bl	800a9c0 <fiprintf>
 800a272:	f000 fbb7 	bl	800a9e4 <abort>
 800a276:	4b04      	ldr	r3, [pc, #16]	@ (800a288 <__assert_func+0x38>)
 800a278:	e7f4      	b.n	800a264 <__assert_func+0x14>
 800a27a:	bf00      	nop
 800a27c:	20000020 	.word	0x20000020
 800a280:	0800e445 	.word	0x0800e445
 800a284:	0800e417 	.word	0x0800e417
 800a288:	0800e40a 	.word	0x0800e40a

0800a28c <_calloc_r>:
 800a28c:	b570      	push	{r4, r5, r6, lr}
 800a28e:	fba1 5402 	umull	r5, r4, r1, r2
 800a292:	b93c      	cbnz	r4, 800a2a4 <_calloc_r+0x18>
 800a294:	4629      	mov	r1, r5
 800a296:	f7fc f849 	bl	800632c <_malloc_r>
 800a29a:	4606      	mov	r6, r0
 800a29c:	b928      	cbnz	r0, 800a2aa <_calloc_r+0x1e>
 800a29e:	2600      	movs	r6, #0
 800a2a0:	4630      	mov	r0, r6
 800a2a2:	bd70      	pop	{r4, r5, r6, pc}
 800a2a4:	220c      	movs	r2, #12
 800a2a6:	6002      	str	r2, [r0, #0]
 800a2a8:	e7f9      	b.n	800a29e <_calloc_r+0x12>
 800a2aa:	462a      	mov	r2, r5
 800a2ac:	4621      	mov	r1, r4
 800a2ae:	f7fd f95f 	bl	8007570 <memset>
 800a2b2:	e7f5      	b.n	800a2a0 <_calloc_r+0x14>

0800a2b4 <rshift>:
 800a2b4:	6903      	ldr	r3, [r0, #16]
 800a2b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a2ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2be:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a2c2:	f100 0414 	add.w	r4, r0, #20
 800a2c6:	dd45      	ble.n	800a354 <rshift+0xa0>
 800a2c8:	f011 011f 	ands.w	r1, r1, #31
 800a2cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a2d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a2d4:	d10c      	bne.n	800a2f0 <rshift+0x3c>
 800a2d6:	f100 0710 	add.w	r7, r0, #16
 800a2da:	4629      	mov	r1, r5
 800a2dc:	42b1      	cmp	r1, r6
 800a2de:	d334      	bcc.n	800a34a <rshift+0x96>
 800a2e0:	1a9b      	subs	r3, r3, r2
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	1eea      	subs	r2, r5, #3
 800a2e6:	4296      	cmp	r6, r2
 800a2e8:	bf38      	it	cc
 800a2ea:	2300      	movcc	r3, #0
 800a2ec:	4423      	add	r3, r4
 800a2ee:	e015      	b.n	800a31c <rshift+0x68>
 800a2f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a2f4:	f1c1 0820 	rsb	r8, r1, #32
 800a2f8:	40cf      	lsrs	r7, r1
 800a2fa:	f105 0e04 	add.w	lr, r5, #4
 800a2fe:	46a1      	mov	r9, r4
 800a300:	4576      	cmp	r6, lr
 800a302:	46f4      	mov	ip, lr
 800a304:	d815      	bhi.n	800a332 <rshift+0x7e>
 800a306:	1a9a      	subs	r2, r3, r2
 800a308:	0092      	lsls	r2, r2, #2
 800a30a:	3a04      	subs	r2, #4
 800a30c:	3501      	adds	r5, #1
 800a30e:	42ae      	cmp	r6, r5
 800a310:	bf38      	it	cc
 800a312:	2200      	movcc	r2, #0
 800a314:	18a3      	adds	r3, r4, r2
 800a316:	50a7      	str	r7, [r4, r2]
 800a318:	b107      	cbz	r7, 800a31c <rshift+0x68>
 800a31a:	3304      	adds	r3, #4
 800a31c:	1b1a      	subs	r2, r3, r4
 800a31e:	42a3      	cmp	r3, r4
 800a320:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a324:	bf08      	it	eq
 800a326:	2300      	moveq	r3, #0
 800a328:	6102      	str	r2, [r0, #16]
 800a32a:	bf08      	it	eq
 800a32c:	6143      	streq	r3, [r0, #20]
 800a32e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a332:	f8dc c000 	ldr.w	ip, [ip]
 800a336:	fa0c fc08 	lsl.w	ip, ip, r8
 800a33a:	ea4c 0707 	orr.w	r7, ip, r7
 800a33e:	f849 7b04 	str.w	r7, [r9], #4
 800a342:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a346:	40cf      	lsrs	r7, r1
 800a348:	e7da      	b.n	800a300 <rshift+0x4c>
 800a34a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a34e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a352:	e7c3      	b.n	800a2dc <rshift+0x28>
 800a354:	4623      	mov	r3, r4
 800a356:	e7e1      	b.n	800a31c <rshift+0x68>

0800a358 <__hexdig_fun>:
 800a358:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a35c:	2b09      	cmp	r3, #9
 800a35e:	d802      	bhi.n	800a366 <__hexdig_fun+0xe>
 800a360:	3820      	subs	r0, #32
 800a362:	b2c0      	uxtb	r0, r0
 800a364:	4770      	bx	lr
 800a366:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a36a:	2b05      	cmp	r3, #5
 800a36c:	d801      	bhi.n	800a372 <__hexdig_fun+0x1a>
 800a36e:	3847      	subs	r0, #71	@ 0x47
 800a370:	e7f7      	b.n	800a362 <__hexdig_fun+0xa>
 800a372:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a376:	2b05      	cmp	r3, #5
 800a378:	d801      	bhi.n	800a37e <__hexdig_fun+0x26>
 800a37a:	3827      	subs	r0, #39	@ 0x27
 800a37c:	e7f1      	b.n	800a362 <__hexdig_fun+0xa>
 800a37e:	2000      	movs	r0, #0
 800a380:	4770      	bx	lr
	...

0800a384 <__gethex>:
 800a384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a388:	b085      	sub	sp, #20
 800a38a:	468a      	mov	sl, r1
 800a38c:	9302      	str	r3, [sp, #8]
 800a38e:	680b      	ldr	r3, [r1, #0]
 800a390:	9001      	str	r0, [sp, #4]
 800a392:	4690      	mov	r8, r2
 800a394:	1c9c      	adds	r4, r3, #2
 800a396:	46a1      	mov	r9, r4
 800a398:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a39c:	2830      	cmp	r0, #48	@ 0x30
 800a39e:	d0fa      	beq.n	800a396 <__gethex+0x12>
 800a3a0:	eba9 0303 	sub.w	r3, r9, r3
 800a3a4:	f1a3 0b02 	sub.w	fp, r3, #2
 800a3a8:	f7ff ffd6 	bl	800a358 <__hexdig_fun>
 800a3ac:	4605      	mov	r5, r0
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	d168      	bne.n	800a484 <__gethex+0x100>
 800a3b2:	49a0      	ldr	r1, [pc, #640]	@ (800a634 <__gethex+0x2b0>)
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	4648      	mov	r0, r9
 800a3b8:	f7ff ff0e 	bl	800a1d8 <strncmp>
 800a3bc:	4607      	mov	r7, r0
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	d167      	bne.n	800a492 <__gethex+0x10e>
 800a3c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a3c6:	4626      	mov	r6, r4
 800a3c8:	f7ff ffc6 	bl	800a358 <__hexdig_fun>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	d062      	beq.n	800a496 <__gethex+0x112>
 800a3d0:	4623      	mov	r3, r4
 800a3d2:	7818      	ldrb	r0, [r3, #0]
 800a3d4:	2830      	cmp	r0, #48	@ 0x30
 800a3d6:	4699      	mov	r9, r3
 800a3d8:	f103 0301 	add.w	r3, r3, #1
 800a3dc:	d0f9      	beq.n	800a3d2 <__gethex+0x4e>
 800a3de:	f7ff ffbb 	bl	800a358 <__hexdig_fun>
 800a3e2:	fab0 f580 	clz	r5, r0
 800a3e6:	096d      	lsrs	r5, r5, #5
 800a3e8:	f04f 0b01 	mov.w	fp, #1
 800a3ec:	464a      	mov	r2, r9
 800a3ee:	4616      	mov	r6, r2
 800a3f0:	3201      	adds	r2, #1
 800a3f2:	7830      	ldrb	r0, [r6, #0]
 800a3f4:	f7ff ffb0 	bl	800a358 <__hexdig_fun>
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	d1f8      	bne.n	800a3ee <__gethex+0x6a>
 800a3fc:	498d      	ldr	r1, [pc, #564]	@ (800a634 <__gethex+0x2b0>)
 800a3fe:	2201      	movs	r2, #1
 800a400:	4630      	mov	r0, r6
 800a402:	f7ff fee9 	bl	800a1d8 <strncmp>
 800a406:	2800      	cmp	r0, #0
 800a408:	d13f      	bne.n	800a48a <__gethex+0x106>
 800a40a:	b944      	cbnz	r4, 800a41e <__gethex+0x9a>
 800a40c:	1c74      	adds	r4, r6, #1
 800a40e:	4622      	mov	r2, r4
 800a410:	4616      	mov	r6, r2
 800a412:	3201      	adds	r2, #1
 800a414:	7830      	ldrb	r0, [r6, #0]
 800a416:	f7ff ff9f 	bl	800a358 <__hexdig_fun>
 800a41a:	2800      	cmp	r0, #0
 800a41c:	d1f8      	bne.n	800a410 <__gethex+0x8c>
 800a41e:	1ba4      	subs	r4, r4, r6
 800a420:	00a7      	lsls	r7, r4, #2
 800a422:	7833      	ldrb	r3, [r6, #0]
 800a424:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a428:	2b50      	cmp	r3, #80	@ 0x50
 800a42a:	d13e      	bne.n	800a4aa <__gethex+0x126>
 800a42c:	7873      	ldrb	r3, [r6, #1]
 800a42e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a430:	d033      	beq.n	800a49a <__gethex+0x116>
 800a432:	2b2d      	cmp	r3, #45	@ 0x2d
 800a434:	d034      	beq.n	800a4a0 <__gethex+0x11c>
 800a436:	1c71      	adds	r1, r6, #1
 800a438:	2400      	movs	r4, #0
 800a43a:	7808      	ldrb	r0, [r1, #0]
 800a43c:	f7ff ff8c 	bl	800a358 <__hexdig_fun>
 800a440:	1e43      	subs	r3, r0, #1
 800a442:	b2db      	uxtb	r3, r3
 800a444:	2b18      	cmp	r3, #24
 800a446:	d830      	bhi.n	800a4aa <__gethex+0x126>
 800a448:	f1a0 0210 	sub.w	r2, r0, #16
 800a44c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a450:	f7ff ff82 	bl	800a358 <__hexdig_fun>
 800a454:	f100 3cff 	add.w	ip, r0, #4294967295
 800a458:	fa5f fc8c 	uxtb.w	ip, ip
 800a45c:	f1bc 0f18 	cmp.w	ip, #24
 800a460:	f04f 030a 	mov.w	r3, #10
 800a464:	d91e      	bls.n	800a4a4 <__gethex+0x120>
 800a466:	b104      	cbz	r4, 800a46a <__gethex+0xe6>
 800a468:	4252      	negs	r2, r2
 800a46a:	4417      	add	r7, r2
 800a46c:	f8ca 1000 	str.w	r1, [sl]
 800a470:	b1ed      	cbz	r5, 800a4ae <__gethex+0x12a>
 800a472:	f1bb 0f00 	cmp.w	fp, #0
 800a476:	bf0c      	ite	eq
 800a478:	2506      	moveq	r5, #6
 800a47a:	2500      	movne	r5, #0
 800a47c:	4628      	mov	r0, r5
 800a47e:	b005      	add	sp, #20
 800a480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a484:	2500      	movs	r5, #0
 800a486:	462c      	mov	r4, r5
 800a488:	e7b0      	b.n	800a3ec <__gethex+0x68>
 800a48a:	2c00      	cmp	r4, #0
 800a48c:	d1c7      	bne.n	800a41e <__gethex+0x9a>
 800a48e:	4627      	mov	r7, r4
 800a490:	e7c7      	b.n	800a422 <__gethex+0x9e>
 800a492:	464e      	mov	r6, r9
 800a494:	462f      	mov	r7, r5
 800a496:	2501      	movs	r5, #1
 800a498:	e7c3      	b.n	800a422 <__gethex+0x9e>
 800a49a:	2400      	movs	r4, #0
 800a49c:	1cb1      	adds	r1, r6, #2
 800a49e:	e7cc      	b.n	800a43a <__gethex+0xb6>
 800a4a0:	2401      	movs	r4, #1
 800a4a2:	e7fb      	b.n	800a49c <__gethex+0x118>
 800a4a4:	fb03 0002 	mla	r0, r3, r2, r0
 800a4a8:	e7ce      	b.n	800a448 <__gethex+0xc4>
 800a4aa:	4631      	mov	r1, r6
 800a4ac:	e7de      	b.n	800a46c <__gethex+0xe8>
 800a4ae:	eba6 0309 	sub.w	r3, r6, r9
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	4629      	mov	r1, r5
 800a4b6:	2b07      	cmp	r3, #7
 800a4b8:	dc0a      	bgt.n	800a4d0 <__gethex+0x14c>
 800a4ba:	9801      	ldr	r0, [sp, #4]
 800a4bc:	f7fd ff92 	bl	80083e4 <_Balloc>
 800a4c0:	4604      	mov	r4, r0
 800a4c2:	b940      	cbnz	r0, 800a4d6 <__gethex+0x152>
 800a4c4:	4b5c      	ldr	r3, [pc, #368]	@ (800a638 <__gethex+0x2b4>)
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	21e4      	movs	r1, #228	@ 0xe4
 800a4ca:	485c      	ldr	r0, [pc, #368]	@ (800a63c <__gethex+0x2b8>)
 800a4cc:	f7ff fec0 	bl	800a250 <__assert_func>
 800a4d0:	3101      	adds	r1, #1
 800a4d2:	105b      	asrs	r3, r3, #1
 800a4d4:	e7ef      	b.n	800a4b6 <__gethex+0x132>
 800a4d6:	f100 0a14 	add.w	sl, r0, #20
 800a4da:	2300      	movs	r3, #0
 800a4dc:	4655      	mov	r5, sl
 800a4de:	469b      	mov	fp, r3
 800a4e0:	45b1      	cmp	r9, r6
 800a4e2:	d337      	bcc.n	800a554 <__gethex+0x1d0>
 800a4e4:	f845 bb04 	str.w	fp, [r5], #4
 800a4e8:	eba5 050a 	sub.w	r5, r5, sl
 800a4ec:	10ad      	asrs	r5, r5, #2
 800a4ee:	6125      	str	r5, [r4, #16]
 800a4f0:	4658      	mov	r0, fp
 800a4f2:	f7fe f869 	bl	80085c8 <__hi0bits>
 800a4f6:	016d      	lsls	r5, r5, #5
 800a4f8:	f8d8 6000 	ldr.w	r6, [r8]
 800a4fc:	1a2d      	subs	r5, r5, r0
 800a4fe:	42b5      	cmp	r5, r6
 800a500:	dd54      	ble.n	800a5ac <__gethex+0x228>
 800a502:	1bad      	subs	r5, r5, r6
 800a504:	4629      	mov	r1, r5
 800a506:	4620      	mov	r0, r4
 800a508:	f7fe fbfd 	bl	8008d06 <__any_on>
 800a50c:	4681      	mov	r9, r0
 800a50e:	b178      	cbz	r0, 800a530 <__gethex+0x1ac>
 800a510:	1e6b      	subs	r3, r5, #1
 800a512:	1159      	asrs	r1, r3, #5
 800a514:	f003 021f 	and.w	r2, r3, #31
 800a518:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a51c:	f04f 0901 	mov.w	r9, #1
 800a520:	fa09 f202 	lsl.w	r2, r9, r2
 800a524:	420a      	tst	r2, r1
 800a526:	d003      	beq.n	800a530 <__gethex+0x1ac>
 800a528:	454b      	cmp	r3, r9
 800a52a:	dc36      	bgt.n	800a59a <__gethex+0x216>
 800a52c:	f04f 0902 	mov.w	r9, #2
 800a530:	4629      	mov	r1, r5
 800a532:	4620      	mov	r0, r4
 800a534:	f7ff febe 	bl	800a2b4 <rshift>
 800a538:	442f      	add	r7, r5
 800a53a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a53e:	42bb      	cmp	r3, r7
 800a540:	da42      	bge.n	800a5c8 <__gethex+0x244>
 800a542:	9801      	ldr	r0, [sp, #4]
 800a544:	4621      	mov	r1, r4
 800a546:	f7fd ff8d 	bl	8008464 <_Bfree>
 800a54a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a54c:	2300      	movs	r3, #0
 800a54e:	6013      	str	r3, [r2, #0]
 800a550:	25a3      	movs	r5, #163	@ 0xa3
 800a552:	e793      	b.n	800a47c <__gethex+0xf8>
 800a554:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a558:	2a2e      	cmp	r2, #46	@ 0x2e
 800a55a:	d012      	beq.n	800a582 <__gethex+0x1fe>
 800a55c:	2b20      	cmp	r3, #32
 800a55e:	d104      	bne.n	800a56a <__gethex+0x1e6>
 800a560:	f845 bb04 	str.w	fp, [r5], #4
 800a564:	f04f 0b00 	mov.w	fp, #0
 800a568:	465b      	mov	r3, fp
 800a56a:	7830      	ldrb	r0, [r6, #0]
 800a56c:	9303      	str	r3, [sp, #12]
 800a56e:	f7ff fef3 	bl	800a358 <__hexdig_fun>
 800a572:	9b03      	ldr	r3, [sp, #12]
 800a574:	f000 000f 	and.w	r0, r0, #15
 800a578:	4098      	lsls	r0, r3
 800a57a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a57e:	3304      	adds	r3, #4
 800a580:	e7ae      	b.n	800a4e0 <__gethex+0x15c>
 800a582:	45b1      	cmp	r9, r6
 800a584:	d8ea      	bhi.n	800a55c <__gethex+0x1d8>
 800a586:	492b      	ldr	r1, [pc, #172]	@ (800a634 <__gethex+0x2b0>)
 800a588:	9303      	str	r3, [sp, #12]
 800a58a:	2201      	movs	r2, #1
 800a58c:	4630      	mov	r0, r6
 800a58e:	f7ff fe23 	bl	800a1d8 <strncmp>
 800a592:	9b03      	ldr	r3, [sp, #12]
 800a594:	2800      	cmp	r0, #0
 800a596:	d1e1      	bne.n	800a55c <__gethex+0x1d8>
 800a598:	e7a2      	b.n	800a4e0 <__gethex+0x15c>
 800a59a:	1ea9      	subs	r1, r5, #2
 800a59c:	4620      	mov	r0, r4
 800a59e:	f7fe fbb2 	bl	8008d06 <__any_on>
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	d0c2      	beq.n	800a52c <__gethex+0x1a8>
 800a5a6:	f04f 0903 	mov.w	r9, #3
 800a5aa:	e7c1      	b.n	800a530 <__gethex+0x1ac>
 800a5ac:	da09      	bge.n	800a5c2 <__gethex+0x23e>
 800a5ae:	1b75      	subs	r5, r6, r5
 800a5b0:	4621      	mov	r1, r4
 800a5b2:	9801      	ldr	r0, [sp, #4]
 800a5b4:	462a      	mov	r2, r5
 800a5b6:	f7fe f96d 	bl	8008894 <__lshift>
 800a5ba:	1b7f      	subs	r7, r7, r5
 800a5bc:	4604      	mov	r4, r0
 800a5be:	f100 0a14 	add.w	sl, r0, #20
 800a5c2:	f04f 0900 	mov.w	r9, #0
 800a5c6:	e7b8      	b.n	800a53a <__gethex+0x1b6>
 800a5c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a5cc:	42bd      	cmp	r5, r7
 800a5ce:	dd6f      	ble.n	800a6b0 <__gethex+0x32c>
 800a5d0:	1bed      	subs	r5, r5, r7
 800a5d2:	42ae      	cmp	r6, r5
 800a5d4:	dc34      	bgt.n	800a640 <__gethex+0x2bc>
 800a5d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d022      	beq.n	800a624 <__gethex+0x2a0>
 800a5de:	2b03      	cmp	r3, #3
 800a5e0:	d024      	beq.n	800a62c <__gethex+0x2a8>
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d115      	bne.n	800a612 <__gethex+0x28e>
 800a5e6:	42ae      	cmp	r6, r5
 800a5e8:	d113      	bne.n	800a612 <__gethex+0x28e>
 800a5ea:	2e01      	cmp	r6, #1
 800a5ec:	d10b      	bne.n	800a606 <__gethex+0x282>
 800a5ee:	9a02      	ldr	r2, [sp, #8]
 800a5f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a5f4:	6013      	str	r3, [r2, #0]
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	6123      	str	r3, [r4, #16]
 800a5fa:	f8ca 3000 	str.w	r3, [sl]
 800a5fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a600:	2562      	movs	r5, #98	@ 0x62
 800a602:	601c      	str	r4, [r3, #0]
 800a604:	e73a      	b.n	800a47c <__gethex+0xf8>
 800a606:	1e71      	subs	r1, r6, #1
 800a608:	4620      	mov	r0, r4
 800a60a:	f7fe fb7c 	bl	8008d06 <__any_on>
 800a60e:	2800      	cmp	r0, #0
 800a610:	d1ed      	bne.n	800a5ee <__gethex+0x26a>
 800a612:	9801      	ldr	r0, [sp, #4]
 800a614:	4621      	mov	r1, r4
 800a616:	f7fd ff25 	bl	8008464 <_Bfree>
 800a61a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a61c:	2300      	movs	r3, #0
 800a61e:	6013      	str	r3, [r2, #0]
 800a620:	2550      	movs	r5, #80	@ 0x50
 800a622:	e72b      	b.n	800a47c <__gethex+0xf8>
 800a624:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a626:	2b00      	cmp	r3, #0
 800a628:	d1f3      	bne.n	800a612 <__gethex+0x28e>
 800a62a:	e7e0      	b.n	800a5ee <__gethex+0x26a>
 800a62c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1dd      	bne.n	800a5ee <__gethex+0x26a>
 800a632:	e7ee      	b.n	800a612 <__gethex+0x28e>
 800a634:	0800e298 	.word	0x0800e298
 800a638:	0800e131 	.word	0x0800e131
 800a63c:	0800e446 	.word	0x0800e446
 800a640:	1e6f      	subs	r7, r5, #1
 800a642:	f1b9 0f00 	cmp.w	r9, #0
 800a646:	d130      	bne.n	800a6aa <__gethex+0x326>
 800a648:	b127      	cbz	r7, 800a654 <__gethex+0x2d0>
 800a64a:	4639      	mov	r1, r7
 800a64c:	4620      	mov	r0, r4
 800a64e:	f7fe fb5a 	bl	8008d06 <__any_on>
 800a652:	4681      	mov	r9, r0
 800a654:	117a      	asrs	r2, r7, #5
 800a656:	2301      	movs	r3, #1
 800a658:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a65c:	f007 071f 	and.w	r7, r7, #31
 800a660:	40bb      	lsls	r3, r7
 800a662:	4213      	tst	r3, r2
 800a664:	4629      	mov	r1, r5
 800a666:	4620      	mov	r0, r4
 800a668:	bf18      	it	ne
 800a66a:	f049 0902 	orrne.w	r9, r9, #2
 800a66e:	f7ff fe21 	bl	800a2b4 <rshift>
 800a672:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a676:	1b76      	subs	r6, r6, r5
 800a678:	2502      	movs	r5, #2
 800a67a:	f1b9 0f00 	cmp.w	r9, #0
 800a67e:	d047      	beq.n	800a710 <__gethex+0x38c>
 800a680:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a684:	2b02      	cmp	r3, #2
 800a686:	d015      	beq.n	800a6b4 <__gethex+0x330>
 800a688:	2b03      	cmp	r3, #3
 800a68a:	d017      	beq.n	800a6bc <__gethex+0x338>
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d109      	bne.n	800a6a4 <__gethex+0x320>
 800a690:	f019 0f02 	tst.w	r9, #2
 800a694:	d006      	beq.n	800a6a4 <__gethex+0x320>
 800a696:	f8da 3000 	ldr.w	r3, [sl]
 800a69a:	ea49 0903 	orr.w	r9, r9, r3
 800a69e:	f019 0f01 	tst.w	r9, #1
 800a6a2:	d10e      	bne.n	800a6c2 <__gethex+0x33e>
 800a6a4:	f045 0510 	orr.w	r5, r5, #16
 800a6a8:	e032      	b.n	800a710 <__gethex+0x38c>
 800a6aa:	f04f 0901 	mov.w	r9, #1
 800a6ae:	e7d1      	b.n	800a654 <__gethex+0x2d0>
 800a6b0:	2501      	movs	r5, #1
 800a6b2:	e7e2      	b.n	800a67a <__gethex+0x2f6>
 800a6b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6b6:	f1c3 0301 	rsb	r3, r3, #1
 800a6ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a6bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d0f0      	beq.n	800a6a4 <__gethex+0x320>
 800a6c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a6c6:	f104 0314 	add.w	r3, r4, #20
 800a6ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a6ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a6d2:	f04f 0c00 	mov.w	ip, #0
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a6e0:	d01b      	beq.n	800a71a <__gethex+0x396>
 800a6e2:	3201      	adds	r2, #1
 800a6e4:	6002      	str	r2, [r0, #0]
 800a6e6:	2d02      	cmp	r5, #2
 800a6e8:	f104 0314 	add.w	r3, r4, #20
 800a6ec:	d13c      	bne.n	800a768 <__gethex+0x3e4>
 800a6ee:	f8d8 2000 	ldr.w	r2, [r8]
 800a6f2:	3a01      	subs	r2, #1
 800a6f4:	42b2      	cmp	r2, r6
 800a6f6:	d109      	bne.n	800a70c <__gethex+0x388>
 800a6f8:	1171      	asrs	r1, r6, #5
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a700:	f006 061f 	and.w	r6, r6, #31
 800a704:	fa02 f606 	lsl.w	r6, r2, r6
 800a708:	421e      	tst	r6, r3
 800a70a:	d13a      	bne.n	800a782 <__gethex+0x3fe>
 800a70c:	f045 0520 	orr.w	r5, r5, #32
 800a710:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a712:	601c      	str	r4, [r3, #0]
 800a714:	9b02      	ldr	r3, [sp, #8]
 800a716:	601f      	str	r7, [r3, #0]
 800a718:	e6b0      	b.n	800a47c <__gethex+0xf8>
 800a71a:	4299      	cmp	r1, r3
 800a71c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a720:	d8d9      	bhi.n	800a6d6 <__gethex+0x352>
 800a722:	68a3      	ldr	r3, [r4, #8]
 800a724:	459b      	cmp	fp, r3
 800a726:	db17      	blt.n	800a758 <__gethex+0x3d4>
 800a728:	6861      	ldr	r1, [r4, #4]
 800a72a:	9801      	ldr	r0, [sp, #4]
 800a72c:	3101      	adds	r1, #1
 800a72e:	f7fd fe59 	bl	80083e4 <_Balloc>
 800a732:	4681      	mov	r9, r0
 800a734:	b918      	cbnz	r0, 800a73e <__gethex+0x3ba>
 800a736:	4b1a      	ldr	r3, [pc, #104]	@ (800a7a0 <__gethex+0x41c>)
 800a738:	4602      	mov	r2, r0
 800a73a:	2184      	movs	r1, #132	@ 0x84
 800a73c:	e6c5      	b.n	800a4ca <__gethex+0x146>
 800a73e:	6922      	ldr	r2, [r4, #16]
 800a740:	3202      	adds	r2, #2
 800a742:	f104 010c 	add.w	r1, r4, #12
 800a746:	0092      	lsls	r2, r2, #2
 800a748:	300c      	adds	r0, #12
 800a74a:	f7fc ffa0 	bl	800768e <memcpy>
 800a74e:	4621      	mov	r1, r4
 800a750:	9801      	ldr	r0, [sp, #4]
 800a752:	f7fd fe87 	bl	8008464 <_Bfree>
 800a756:	464c      	mov	r4, r9
 800a758:	6923      	ldr	r3, [r4, #16]
 800a75a:	1c5a      	adds	r2, r3, #1
 800a75c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a760:	6122      	str	r2, [r4, #16]
 800a762:	2201      	movs	r2, #1
 800a764:	615a      	str	r2, [r3, #20]
 800a766:	e7be      	b.n	800a6e6 <__gethex+0x362>
 800a768:	6922      	ldr	r2, [r4, #16]
 800a76a:	455a      	cmp	r2, fp
 800a76c:	dd0b      	ble.n	800a786 <__gethex+0x402>
 800a76e:	2101      	movs	r1, #1
 800a770:	4620      	mov	r0, r4
 800a772:	f7ff fd9f 	bl	800a2b4 <rshift>
 800a776:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a77a:	3701      	adds	r7, #1
 800a77c:	42bb      	cmp	r3, r7
 800a77e:	f6ff aee0 	blt.w	800a542 <__gethex+0x1be>
 800a782:	2501      	movs	r5, #1
 800a784:	e7c2      	b.n	800a70c <__gethex+0x388>
 800a786:	f016 061f 	ands.w	r6, r6, #31
 800a78a:	d0fa      	beq.n	800a782 <__gethex+0x3fe>
 800a78c:	4453      	add	r3, sl
 800a78e:	f1c6 0620 	rsb	r6, r6, #32
 800a792:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a796:	f7fd ff17 	bl	80085c8 <__hi0bits>
 800a79a:	42b0      	cmp	r0, r6
 800a79c:	dbe7      	blt.n	800a76e <__gethex+0x3ea>
 800a79e:	e7f0      	b.n	800a782 <__gethex+0x3fe>
 800a7a0:	0800e131 	.word	0x0800e131

0800a7a4 <L_shift>:
 800a7a4:	f1c2 0208 	rsb	r2, r2, #8
 800a7a8:	0092      	lsls	r2, r2, #2
 800a7aa:	b570      	push	{r4, r5, r6, lr}
 800a7ac:	f1c2 0620 	rsb	r6, r2, #32
 800a7b0:	6843      	ldr	r3, [r0, #4]
 800a7b2:	6804      	ldr	r4, [r0, #0]
 800a7b4:	fa03 f506 	lsl.w	r5, r3, r6
 800a7b8:	432c      	orrs	r4, r5
 800a7ba:	40d3      	lsrs	r3, r2
 800a7bc:	6004      	str	r4, [r0, #0]
 800a7be:	f840 3f04 	str.w	r3, [r0, #4]!
 800a7c2:	4288      	cmp	r0, r1
 800a7c4:	d3f4      	bcc.n	800a7b0 <L_shift+0xc>
 800a7c6:	bd70      	pop	{r4, r5, r6, pc}

0800a7c8 <__match>:
 800a7c8:	b530      	push	{r4, r5, lr}
 800a7ca:	6803      	ldr	r3, [r0, #0]
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7d2:	b914      	cbnz	r4, 800a7da <__match+0x12>
 800a7d4:	6003      	str	r3, [r0, #0]
 800a7d6:	2001      	movs	r0, #1
 800a7d8:	bd30      	pop	{r4, r5, pc}
 800a7da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a7e2:	2d19      	cmp	r5, #25
 800a7e4:	bf98      	it	ls
 800a7e6:	3220      	addls	r2, #32
 800a7e8:	42a2      	cmp	r2, r4
 800a7ea:	d0f0      	beq.n	800a7ce <__match+0x6>
 800a7ec:	2000      	movs	r0, #0
 800a7ee:	e7f3      	b.n	800a7d8 <__match+0x10>

0800a7f0 <__hexnan>:
 800a7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f4:	680b      	ldr	r3, [r1, #0]
 800a7f6:	6801      	ldr	r1, [r0, #0]
 800a7f8:	115e      	asrs	r6, r3, #5
 800a7fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a7fe:	f013 031f 	ands.w	r3, r3, #31
 800a802:	b087      	sub	sp, #28
 800a804:	bf18      	it	ne
 800a806:	3604      	addne	r6, #4
 800a808:	2500      	movs	r5, #0
 800a80a:	1f37      	subs	r7, r6, #4
 800a80c:	4682      	mov	sl, r0
 800a80e:	4690      	mov	r8, r2
 800a810:	9301      	str	r3, [sp, #4]
 800a812:	f846 5c04 	str.w	r5, [r6, #-4]
 800a816:	46b9      	mov	r9, r7
 800a818:	463c      	mov	r4, r7
 800a81a:	9502      	str	r5, [sp, #8]
 800a81c:	46ab      	mov	fp, r5
 800a81e:	784a      	ldrb	r2, [r1, #1]
 800a820:	1c4b      	adds	r3, r1, #1
 800a822:	9303      	str	r3, [sp, #12]
 800a824:	b342      	cbz	r2, 800a878 <__hexnan+0x88>
 800a826:	4610      	mov	r0, r2
 800a828:	9105      	str	r1, [sp, #20]
 800a82a:	9204      	str	r2, [sp, #16]
 800a82c:	f7ff fd94 	bl	800a358 <__hexdig_fun>
 800a830:	2800      	cmp	r0, #0
 800a832:	d151      	bne.n	800a8d8 <__hexnan+0xe8>
 800a834:	9a04      	ldr	r2, [sp, #16]
 800a836:	9905      	ldr	r1, [sp, #20]
 800a838:	2a20      	cmp	r2, #32
 800a83a:	d818      	bhi.n	800a86e <__hexnan+0x7e>
 800a83c:	9b02      	ldr	r3, [sp, #8]
 800a83e:	459b      	cmp	fp, r3
 800a840:	dd13      	ble.n	800a86a <__hexnan+0x7a>
 800a842:	454c      	cmp	r4, r9
 800a844:	d206      	bcs.n	800a854 <__hexnan+0x64>
 800a846:	2d07      	cmp	r5, #7
 800a848:	dc04      	bgt.n	800a854 <__hexnan+0x64>
 800a84a:	462a      	mov	r2, r5
 800a84c:	4649      	mov	r1, r9
 800a84e:	4620      	mov	r0, r4
 800a850:	f7ff ffa8 	bl	800a7a4 <L_shift>
 800a854:	4544      	cmp	r4, r8
 800a856:	d952      	bls.n	800a8fe <__hexnan+0x10e>
 800a858:	2300      	movs	r3, #0
 800a85a:	f1a4 0904 	sub.w	r9, r4, #4
 800a85e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a862:	f8cd b008 	str.w	fp, [sp, #8]
 800a866:	464c      	mov	r4, r9
 800a868:	461d      	mov	r5, r3
 800a86a:	9903      	ldr	r1, [sp, #12]
 800a86c:	e7d7      	b.n	800a81e <__hexnan+0x2e>
 800a86e:	2a29      	cmp	r2, #41	@ 0x29
 800a870:	d157      	bne.n	800a922 <__hexnan+0x132>
 800a872:	3102      	adds	r1, #2
 800a874:	f8ca 1000 	str.w	r1, [sl]
 800a878:	f1bb 0f00 	cmp.w	fp, #0
 800a87c:	d051      	beq.n	800a922 <__hexnan+0x132>
 800a87e:	454c      	cmp	r4, r9
 800a880:	d206      	bcs.n	800a890 <__hexnan+0xa0>
 800a882:	2d07      	cmp	r5, #7
 800a884:	dc04      	bgt.n	800a890 <__hexnan+0xa0>
 800a886:	462a      	mov	r2, r5
 800a888:	4649      	mov	r1, r9
 800a88a:	4620      	mov	r0, r4
 800a88c:	f7ff ff8a 	bl	800a7a4 <L_shift>
 800a890:	4544      	cmp	r4, r8
 800a892:	d936      	bls.n	800a902 <__hexnan+0x112>
 800a894:	f1a8 0204 	sub.w	r2, r8, #4
 800a898:	4623      	mov	r3, r4
 800a89a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a89e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a8a2:	429f      	cmp	r7, r3
 800a8a4:	d2f9      	bcs.n	800a89a <__hexnan+0xaa>
 800a8a6:	1b3b      	subs	r3, r7, r4
 800a8a8:	f023 0303 	bic.w	r3, r3, #3
 800a8ac:	3304      	adds	r3, #4
 800a8ae:	3401      	adds	r4, #1
 800a8b0:	3e03      	subs	r6, #3
 800a8b2:	42b4      	cmp	r4, r6
 800a8b4:	bf88      	it	hi
 800a8b6:	2304      	movhi	r3, #4
 800a8b8:	4443      	add	r3, r8
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f843 2b04 	str.w	r2, [r3], #4
 800a8c0:	429f      	cmp	r7, r3
 800a8c2:	d2fb      	bcs.n	800a8bc <__hexnan+0xcc>
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	b91b      	cbnz	r3, 800a8d0 <__hexnan+0xe0>
 800a8c8:	4547      	cmp	r7, r8
 800a8ca:	d128      	bne.n	800a91e <__hexnan+0x12e>
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	603b      	str	r3, [r7, #0]
 800a8d0:	2005      	movs	r0, #5
 800a8d2:	b007      	add	sp, #28
 800a8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d8:	3501      	adds	r5, #1
 800a8da:	2d08      	cmp	r5, #8
 800a8dc:	f10b 0b01 	add.w	fp, fp, #1
 800a8e0:	dd06      	ble.n	800a8f0 <__hexnan+0x100>
 800a8e2:	4544      	cmp	r4, r8
 800a8e4:	d9c1      	bls.n	800a86a <__hexnan+0x7a>
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a8ec:	2501      	movs	r5, #1
 800a8ee:	3c04      	subs	r4, #4
 800a8f0:	6822      	ldr	r2, [r4, #0]
 800a8f2:	f000 000f 	and.w	r0, r0, #15
 800a8f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a8fa:	6020      	str	r0, [r4, #0]
 800a8fc:	e7b5      	b.n	800a86a <__hexnan+0x7a>
 800a8fe:	2508      	movs	r5, #8
 800a900:	e7b3      	b.n	800a86a <__hexnan+0x7a>
 800a902:	9b01      	ldr	r3, [sp, #4]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d0dd      	beq.n	800a8c4 <__hexnan+0xd4>
 800a908:	f1c3 0320 	rsb	r3, r3, #32
 800a90c:	f04f 32ff 	mov.w	r2, #4294967295
 800a910:	40da      	lsrs	r2, r3
 800a912:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a916:	4013      	ands	r3, r2
 800a918:	f846 3c04 	str.w	r3, [r6, #-4]
 800a91c:	e7d2      	b.n	800a8c4 <__hexnan+0xd4>
 800a91e:	3f04      	subs	r7, #4
 800a920:	e7d0      	b.n	800a8c4 <__hexnan+0xd4>
 800a922:	2004      	movs	r0, #4
 800a924:	e7d5      	b.n	800a8d2 <__hexnan+0xe2>

0800a926 <__ascii_mbtowc>:
 800a926:	b082      	sub	sp, #8
 800a928:	b901      	cbnz	r1, 800a92c <__ascii_mbtowc+0x6>
 800a92a:	a901      	add	r1, sp, #4
 800a92c:	b142      	cbz	r2, 800a940 <__ascii_mbtowc+0x1a>
 800a92e:	b14b      	cbz	r3, 800a944 <__ascii_mbtowc+0x1e>
 800a930:	7813      	ldrb	r3, [r2, #0]
 800a932:	600b      	str	r3, [r1, #0]
 800a934:	7812      	ldrb	r2, [r2, #0]
 800a936:	1e10      	subs	r0, r2, #0
 800a938:	bf18      	it	ne
 800a93a:	2001      	movne	r0, #1
 800a93c:	b002      	add	sp, #8
 800a93e:	4770      	bx	lr
 800a940:	4610      	mov	r0, r2
 800a942:	e7fb      	b.n	800a93c <__ascii_mbtowc+0x16>
 800a944:	f06f 0001 	mvn.w	r0, #1
 800a948:	e7f8      	b.n	800a93c <__ascii_mbtowc+0x16>

0800a94a <_realloc_r>:
 800a94a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a94e:	4680      	mov	r8, r0
 800a950:	4615      	mov	r5, r2
 800a952:	460c      	mov	r4, r1
 800a954:	b921      	cbnz	r1, 800a960 <_realloc_r+0x16>
 800a956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a95a:	4611      	mov	r1, r2
 800a95c:	f7fb bce6 	b.w	800632c <_malloc_r>
 800a960:	b92a      	cbnz	r2, 800a96e <_realloc_r+0x24>
 800a962:	f7fd fcf5 	bl	8008350 <_free_r>
 800a966:	2400      	movs	r4, #0
 800a968:	4620      	mov	r0, r4
 800a96a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a96e:	f000 f840 	bl	800a9f2 <_malloc_usable_size_r>
 800a972:	4285      	cmp	r5, r0
 800a974:	4606      	mov	r6, r0
 800a976:	d802      	bhi.n	800a97e <_realloc_r+0x34>
 800a978:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a97c:	d8f4      	bhi.n	800a968 <_realloc_r+0x1e>
 800a97e:	4629      	mov	r1, r5
 800a980:	4640      	mov	r0, r8
 800a982:	f7fb fcd3 	bl	800632c <_malloc_r>
 800a986:	4607      	mov	r7, r0
 800a988:	2800      	cmp	r0, #0
 800a98a:	d0ec      	beq.n	800a966 <_realloc_r+0x1c>
 800a98c:	42b5      	cmp	r5, r6
 800a98e:	462a      	mov	r2, r5
 800a990:	4621      	mov	r1, r4
 800a992:	bf28      	it	cs
 800a994:	4632      	movcs	r2, r6
 800a996:	f7fc fe7a 	bl	800768e <memcpy>
 800a99a:	4621      	mov	r1, r4
 800a99c:	4640      	mov	r0, r8
 800a99e:	f7fd fcd7 	bl	8008350 <_free_r>
 800a9a2:	463c      	mov	r4, r7
 800a9a4:	e7e0      	b.n	800a968 <_realloc_r+0x1e>

0800a9a6 <__ascii_wctomb>:
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	4608      	mov	r0, r1
 800a9aa:	b141      	cbz	r1, 800a9be <__ascii_wctomb+0x18>
 800a9ac:	2aff      	cmp	r2, #255	@ 0xff
 800a9ae:	d904      	bls.n	800a9ba <__ascii_wctomb+0x14>
 800a9b0:	228a      	movs	r2, #138	@ 0x8a
 800a9b2:	601a      	str	r2, [r3, #0]
 800a9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b8:	4770      	bx	lr
 800a9ba:	700a      	strb	r2, [r1, #0]
 800a9bc:	2001      	movs	r0, #1
 800a9be:	4770      	bx	lr

0800a9c0 <fiprintf>:
 800a9c0:	b40e      	push	{r1, r2, r3}
 800a9c2:	b503      	push	{r0, r1, lr}
 800a9c4:	4601      	mov	r1, r0
 800a9c6:	ab03      	add	r3, sp, #12
 800a9c8:	4805      	ldr	r0, [pc, #20]	@ (800a9e0 <fiprintf+0x20>)
 800a9ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9ce:	6800      	ldr	r0, [r0, #0]
 800a9d0:	9301      	str	r3, [sp, #4]
 800a9d2:	f7ff f9c1 	bl	8009d58 <_vfiprintf_r>
 800a9d6:	b002      	add	sp, #8
 800a9d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9dc:	b003      	add	sp, #12
 800a9de:	4770      	bx	lr
 800a9e0:	20000020 	.word	0x20000020

0800a9e4 <abort>:
 800a9e4:	b508      	push	{r3, lr}
 800a9e6:	2006      	movs	r0, #6
 800a9e8:	f000 f834 	bl	800aa54 <raise>
 800a9ec:	2001      	movs	r0, #1
 800a9ee:	f7f7 fe8c 	bl	800270a <_exit>

0800a9f2 <_malloc_usable_size_r>:
 800a9f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9f6:	1f18      	subs	r0, r3, #4
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	bfbc      	itt	lt
 800a9fc:	580b      	ldrlt	r3, [r1, r0]
 800a9fe:	18c0      	addlt	r0, r0, r3
 800aa00:	4770      	bx	lr

0800aa02 <_raise_r>:
 800aa02:	291f      	cmp	r1, #31
 800aa04:	b538      	push	{r3, r4, r5, lr}
 800aa06:	4605      	mov	r5, r0
 800aa08:	460c      	mov	r4, r1
 800aa0a:	d904      	bls.n	800aa16 <_raise_r+0x14>
 800aa0c:	2316      	movs	r3, #22
 800aa0e:	6003      	str	r3, [r0, #0]
 800aa10:	f04f 30ff 	mov.w	r0, #4294967295
 800aa14:	bd38      	pop	{r3, r4, r5, pc}
 800aa16:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aa18:	b112      	cbz	r2, 800aa20 <_raise_r+0x1e>
 800aa1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa1e:	b94b      	cbnz	r3, 800aa34 <_raise_r+0x32>
 800aa20:	4628      	mov	r0, r5
 800aa22:	f000 f831 	bl	800aa88 <_getpid_r>
 800aa26:	4622      	mov	r2, r4
 800aa28:	4601      	mov	r1, r0
 800aa2a:	4628      	mov	r0, r5
 800aa2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa30:	f000 b818 	b.w	800aa64 <_kill_r>
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d00a      	beq.n	800aa4e <_raise_r+0x4c>
 800aa38:	1c59      	adds	r1, r3, #1
 800aa3a:	d103      	bne.n	800aa44 <_raise_r+0x42>
 800aa3c:	2316      	movs	r3, #22
 800aa3e:	6003      	str	r3, [r0, #0]
 800aa40:	2001      	movs	r0, #1
 800aa42:	e7e7      	b.n	800aa14 <_raise_r+0x12>
 800aa44:	2100      	movs	r1, #0
 800aa46:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	4798      	blx	r3
 800aa4e:	2000      	movs	r0, #0
 800aa50:	e7e0      	b.n	800aa14 <_raise_r+0x12>
	...

0800aa54 <raise>:
 800aa54:	4b02      	ldr	r3, [pc, #8]	@ (800aa60 <raise+0xc>)
 800aa56:	4601      	mov	r1, r0
 800aa58:	6818      	ldr	r0, [r3, #0]
 800aa5a:	f7ff bfd2 	b.w	800aa02 <_raise_r>
 800aa5e:	bf00      	nop
 800aa60:	20000020 	.word	0x20000020

0800aa64 <_kill_r>:
 800aa64:	b538      	push	{r3, r4, r5, lr}
 800aa66:	4d07      	ldr	r5, [pc, #28]	@ (800aa84 <_kill_r+0x20>)
 800aa68:	2300      	movs	r3, #0
 800aa6a:	4604      	mov	r4, r0
 800aa6c:	4608      	mov	r0, r1
 800aa6e:	4611      	mov	r1, r2
 800aa70:	602b      	str	r3, [r5, #0]
 800aa72:	f7f7 fe3a 	bl	80026ea <_kill>
 800aa76:	1c43      	adds	r3, r0, #1
 800aa78:	d102      	bne.n	800aa80 <_kill_r+0x1c>
 800aa7a:	682b      	ldr	r3, [r5, #0]
 800aa7c:	b103      	cbz	r3, 800aa80 <_kill_r+0x1c>
 800aa7e:	6023      	str	r3, [r4, #0]
 800aa80:	bd38      	pop	{r3, r4, r5, pc}
 800aa82:	bf00      	nop
 800aa84:	20000938 	.word	0x20000938

0800aa88 <_getpid_r>:
 800aa88:	f7f7 be27 	b.w	80026da <_getpid>

0800aa8c <_init>:
 800aa8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa8e:	bf00      	nop
 800aa90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa92:	bc08      	pop	{r3}
 800aa94:	469e      	mov	lr, r3
 800aa96:	4770      	bx	lr

0800aa98 <_fini>:
 800aa98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa9a:	bf00      	nop
 800aa9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa9e:	bc08      	pop	{r3}
 800aaa0:	469e      	mov	lr, r3
 800aaa2:	4770      	bx	lr
